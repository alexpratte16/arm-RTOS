
kernel.elf:     file format elf32-littlearm


Disassembly of section .init:

00008000 <_start>:
    8000:	e59ff018 	ldr	pc, [pc, #24]	; 8020 <reset_handler>
    8004:	e59ff018 	ldr	pc, [pc, #24]	; 8024 <undefined_handler>
    8008:	e59ff018 	ldr	pc, [pc, #24]	; 8028 <swi_handler>
    800c:	e59ff018 	ldr	pc, [pc, #24]	; 802c <prefetch_handler>
    8010:	e59ff018 	ldr	pc, [pc, #24]	; 8030 <data_handler>
    8014:	e59ff018 	ldr	pc, [pc, #24]	; 8034 <unused_handler>
    8018:	e59ff018 	ldr	pc, [pc, #24]	; 8038 <irq_handler>
    801c:	e59ff018 	ldr	pc, [pc, #24]	; 803c <fiq_handler>

00008020 <reset_handler>:
    8020:	00008040 	andeq	r8, r0, r0, asr #32

00008024 <undefined_handler>:
    8024:	000152d0 	ldrdeq	r5, [r1], -r0

00008028 <swi_handler>:
    8028:	000103dc 	ldrdeq	r0, [r1], -ip

0000802c <prefetch_handler>:
    802c:	000152d4 	ldrdeq	r5, [r1], -r4

00008030 <data_handler>:
    8030:	000152d8 	ldrdeq	r5, [r1], -r8

00008034 <unused_handler>:
    8034:	000152dc 	ldrdeq	r5, [r1], -ip

00008038 <irq_handler>:
    8038:	00010490 	muleq	r1, r0, r4

0000803c <fiq_handler>:
    803c:	000152e0 	andeq	r5, r1, r0, ror #5

00008040 <reset>:
    8040:	e3a00902 	mov	r0, #32768	; 0x8000
    8044:	e3a01000 	mov	r1, #0
    8048:	e8b003fc 	ldm	r0!, {r2, r3, r4, r5, r6, r7, r8, r9}
    804c:	e8a103fc 	stmia	r1!, {r2, r3, r4, r5, r6, r7, r8, r9}
    8050:	e8b003fc 	ldm	r0!, {r2, r3, r4, r5, r6, r7, r8, r9}
    8054:	e8a103fc 	stmia	r1!, {r2, r3, r4, r5, r6, r7, r8, r9}
    8058:	e3a000d2 	mov	r0, #210	; 0xd2
    805c:	e121f000 	msr	CPSR_c, r0
    8060:	e3a0d902 	mov	sp, #32768	; 0x8000
    8064:	e3a000d1 	mov	r0, #209	; 0xd1
    8068:	e121f000 	msr	CPSR_c, r0
    806c:	e3a0d901 	mov	sp, #16384	; 0x4000
    8070:	e3a000d3 	mov	r0, #211	; 0xd3
    8074:	e121f000 	msr	CPSR_c, r0
    8078:	e3a0d302 	mov	sp, #134217728	; 0x8000000
    807c:	e59f0018 	ldr	r0, [pc, #24]	; 809c <zero_loop+0x14>
    8080:	e59f1018 	ldr	r1, [pc, #24]	; 80a0 <zero_loop+0x18>
    8084:	e3a02000 	mov	r2, #0

00008088 <zero_loop>:
    8088:	e1500001 	cmp	r0, r1
    808c:	b4802004 	strlt	r2, [r0], #4
    8090:	bafffffc 	blt	8088 <zero_loop>
    8094:	eb002d64 	bl	1362c <irqBlock>
    8098:	ea0034cd 	b	153d4 <main>
    809c:	00015cc0 	andeq	r5, r1, r0, asr #25
    80a0:	000170b0 	strheq	r7, [r1], -r0

Disassembly of section .text:

00010000 <pxPortInitialiseStack>:
 * portSAVE_CONTEXT had been called.
 *
 * See header file for description. 
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
   10000:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   10004:	e28db000 	add	fp, sp, #0
   10008:	e24dd01c 	sub	sp, sp, #28
   1000c:	e50b0010 	str	r0, [fp, #-16]
   10010:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   10014:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
portSTACK_TYPE *pxOriginalTOS;

	pxOriginalTOS = pxTopOfStack;
   10018:	e51b3010 	ldr	r3, [fp, #-16]
   1001c:	e50b3008 	str	r3, [fp, #-8]

	/* To ensure asserts in tasks.c don't fail, although in this case the assert
	is not really required. */
	pxTopOfStack--;
   10020:	e51b3010 	ldr	r3, [fp, #-16]
   10024:	e2433004 	sub	r3, r3, #4
   10028:	e50b3010 	str	r3, [fp, #-16]
	expected by the portRESTORE_CONTEXT() macro. */

	/* First on the stack is the return address - which in this case is the
	start of the task.  The offset is added to make the return address appear
	as it would within an IRQ ISR. */
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode + portINSTRUCTION_SIZE;		
   1002c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   10030:	e2832004 	add	r2, r3, #4
   10034:	e51b3010 	ldr	r3, [fp, #-16]
   10038:	e5832000 	str	r2, [r3]
	pxTopOfStack--;
   1003c:	e51b3010 	ldr	r3, [fp, #-16]
   10040:	e2433004 	sub	r3, r3, #4
   10044:	e50b3010 	str	r3, [fp, #-16]

	*pxTopOfStack = ( portSTACK_TYPE ) 0xaaaaaaaa;	/* R14 */
   10048:	e51b3010 	ldr	r3, [fp, #-16]
   1004c:	e59f21b8 	ldr	r2, [pc, #440]	; 1020c <pxPortInitialiseStack+0x20c>
   10050:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   10054:	e51b3010 	ldr	r3, [fp, #-16]
   10058:	e2433004 	sub	r3, r3, #4
   1005c:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) pxOriginalTOS; /* Stack used when task starts goes in R13. */
   10060:	e51b2008 	ldr	r2, [fp, #-8]
   10064:	e51b3010 	ldr	r3, [fp, #-16]
   10068:	e5832000 	str	r2, [r3]
	pxTopOfStack--;
   1006c:	e51b3010 	ldr	r3, [fp, #-16]
   10070:	e2433004 	sub	r3, r3, #4
   10074:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x12121212;	/* R12 */
   10078:	e51b3010 	ldr	r3, [fp, #-16]
   1007c:	e59f218c 	ldr	r2, [pc, #396]	; 10210 <pxPortInitialiseStack+0x210>
   10080:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   10084:	e51b3010 	ldr	r3, [fp, #-16]
   10088:	e2433004 	sub	r3, r3, #4
   1008c:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x11111111;	/* R11 */
   10090:	e51b3010 	ldr	r3, [fp, #-16]
   10094:	e59f2178 	ldr	r2, [pc, #376]	; 10214 <pxPortInitialiseStack+0x214>
   10098:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   1009c:	e51b3010 	ldr	r3, [fp, #-16]
   100a0:	e2433004 	sub	r3, r3, #4
   100a4:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x10101010;	/* R10 */
   100a8:	e51b3010 	ldr	r3, [fp, #-16]
   100ac:	e59f2164 	ldr	r2, [pc, #356]	; 10218 <pxPortInitialiseStack+0x218>
   100b0:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   100b4:	e51b3010 	ldr	r3, [fp, #-16]
   100b8:	e2433004 	sub	r3, r3, #4
   100bc:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x09090909;	/* R9 */
   100c0:	e51b3010 	ldr	r3, [fp, #-16]
   100c4:	e59f2150 	ldr	r2, [pc, #336]	; 1021c <pxPortInitialiseStack+0x21c>
   100c8:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   100cc:	e51b3010 	ldr	r3, [fp, #-16]
   100d0:	e2433004 	sub	r3, r3, #4
   100d4:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x08080808;	/* R8 */
   100d8:	e51b3010 	ldr	r3, [fp, #-16]
   100dc:	e59f213c 	ldr	r2, [pc, #316]	; 10220 <pxPortInitialiseStack+0x220>
   100e0:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   100e4:	e51b3010 	ldr	r3, [fp, #-16]
   100e8:	e2433004 	sub	r3, r3, #4
   100ec:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x07070707;	/* R7 */
   100f0:	e51b3010 	ldr	r3, [fp, #-16]
   100f4:	e59f2128 	ldr	r2, [pc, #296]	; 10224 <pxPortInitialiseStack+0x224>
   100f8:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   100fc:	e51b3010 	ldr	r3, [fp, #-16]
   10100:	e2433004 	sub	r3, r3, #4
   10104:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x06060606;	/* R6 */
   10108:	e51b3010 	ldr	r3, [fp, #-16]
   1010c:	e59f2114 	ldr	r2, [pc, #276]	; 10228 <pxPortInitialiseStack+0x228>
   10110:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   10114:	e51b3010 	ldr	r3, [fp, #-16]
   10118:	e2433004 	sub	r3, r3, #4
   1011c:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x05050505;	/* R5 */
   10120:	e51b3010 	ldr	r3, [fp, #-16]
   10124:	e59f2100 	ldr	r2, [pc, #256]	; 1022c <pxPortInitialiseStack+0x22c>
   10128:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   1012c:	e51b3010 	ldr	r3, [fp, #-16]
   10130:	e2433004 	sub	r3, r3, #4
   10134:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x04040404;	/* R4 */
   10138:	e51b3010 	ldr	r3, [fp, #-16]
   1013c:	e59f20ec 	ldr	r2, [pc, #236]	; 10230 <pxPortInitialiseStack+0x230>
   10140:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   10144:	e51b3010 	ldr	r3, [fp, #-16]
   10148:	e2433004 	sub	r3, r3, #4
   1014c:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x03030303;	/* R3 */
   10150:	e51b3010 	ldr	r3, [fp, #-16]
   10154:	e59f20d8 	ldr	r2, [pc, #216]	; 10234 <pxPortInitialiseStack+0x234>
   10158:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   1015c:	e51b3010 	ldr	r3, [fp, #-16]
   10160:	e2433004 	sub	r3, r3, #4
   10164:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x02020202;	/* R2 */
   10168:	e51b3010 	ldr	r3, [fp, #-16]
   1016c:	e59f20c4 	ldr	r2, [pc, #196]	; 10238 <pxPortInitialiseStack+0x238>
   10170:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   10174:	e51b3010 	ldr	r3, [fp, #-16]
   10178:	e2433004 	sub	r3, r3, #4
   1017c:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x01010101;	/* R1 */
   10180:	e51b3010 	ldr	r3, [fp, #-16]
   10184:	e59f20b0 	ldr	r2, [pc, #176]	; 1023c <pxPortInitialiseStack+0x23c>
   10188:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   1018c:	e51b3010 	ldr	r3, [fp, #-16]
   10190:	e2433004 	sub	r3, r3, #4
   10194:	e50b3010 	str	r3, [fp, #-16]

	/* When the task starts it will expect to find the function parameter in
	R0. */
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters; /* R0 */
   10198:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   1019c:	e51b3010 	ldr	r3, [fp, #-16]
   101a0:	e5832000 	str	r2, [r3]
	pxTopOfStack--;
   101a4:	e51b3010 	ldr	r3, [fp, #-16]
   101a8:	e2433004 	sub	r3, r3, #4
   101ac:	e50b3010 	str	r3, [fp, #-16]

	/* The last thing onto the stack is the status register, which is set for
	system mode, with interrupts enabled. */
	*pxTopOfStack = ( portSTACK_TYPE ) portINITIAL_SPSR;
   101b0:	e51b3010 	ldr	r3, [fp, #-16]
   101b4:	e3a0201f 	mov	r2, #31
   101b8:	e5832000 	str	r2, [r3]

	if( ( ( unsigned long ) pxCode & 0x01UL ) != 0x00 )
   101bc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   101c0:	e2033001 	and	r3, r3, #1
   101c4:	e3530000 	cmp	r3, #0
   101c8:	0a000004 	beq	101e0 <pxPortInitialiseStack+0x1e0>
	{
		/* We want the task to start in thumb mode. */
		*pxTopOfStack |= portTHUMB_MODE_BIT;
   101cc:	e51b3010 	ldr	r3, [fp, #-16]
   101d0:	e5933000 	ldr	r3, [r3]
   101d4:	e3832020 	orr	r2, r3, #32
   101d8:	e51b3010 	ldr	r3, [fp, #-16]
   101dc:	e5832000 	str	r2, [r3]
	}

	pxTopOfStack--;
   101e0:	e51b3010 	ldr	r3, [fp, #-16]
   101e4:	e2433004 	sub	r3, r3, #4
   101e8:	e50b3010 	str	r3, [fp, #-16]

	/* Some optimisation levels use the stack differently to others.  This 
	means the interrupt flags cannot always be stored on the stack and will
	instead be stored in a variable, which is then saved as part of the
	tasks context. */
	*pxTopOfStack = portNO_CRITICAL_SECTION_NESTING;
   101ec:	e51b3010 	ldr	r3, [fp, #-16]
   101f0:	e3a02000 	mov	r2, #0
   101f4:	e5832000 	str	r2, [r3]

	return pxTopOfStack;
   101f8:	e51b3010 	ldr	r3, [fp, #-16]
}
   101fc:	e1a00003 	mov	r0, r3
   10200:	e28bd000 	add	sp, fp, #0
   10204:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   10208:	e12fff1e 	bx	lr
   1020c:	aaaaaaaa 	bge	feabacbc <_estack+0xf6aaacbc>
   10210:	12121212 	andsne	r1, r2, #536870913	; 0x20000001
   10214:	11111111 	tstne	r1, r1, lsl r1
   10218:	10101010 	andsne	r1, r0, r0, lsl r0
   1021c:	09090909 	stmdbeq	r9, {r0, r3, r8, fp}
   10220:	08080808 	stmdaeq	r8, {r3, fp}
   10224:	07070707 	streq	r0, [r7, -r7, lsl #14]
   10228:	06060606 	streq	r0, [r6], -r6, lsl #12
   1022c:	05050505 	streq	r0, [r5, #-1285]	; 0xfffffafb
   10230:	04040404 	streq	r0, [r4], #-1028	; 0xfffffbfc
   10234:	03030303 	movweq	r0, #13059	; 0x3303
   10238:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
   1023c:	01010101 	tsteq	r1, r1, lsl #2

00010240 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

portBASE_TYPE xPortStartScheduler( void )
{
   10240:	e92d4800 	push	{fp, lr}
   10244:	e28db004 	add	fp, sp, #4
	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
   10248:	eb000017 	bl	102ac <prvSetupTimerInterrupt>

	/* Start the first task. */
	vPortISRStartFirstTask();	
   1024c:	eb00003c 	bl	10344 <vPortISRStartFirstTask>

	/* Should not get here! */
	return 0;
   10250:	e3a03000 	mov	r3, #0
}
   10254:	e1a00003 	mov	r0, r3
   10258:	e8bd8800 	pop	{fp, pc}

0001025c <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
   1025c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   10260:	e28db000 	add	fp, sp, #0
	/* It is unlikely that the ARM port will require this function as there
	is nothing to return to.  */
}
   10264:	e320f000 	nop	{0}
   10268:	e28bd000 	add	sp, fp, #0
   1026c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   10270:	e12fff1e 	bx	lr

00010274 <vTickISR>:
 *	as thats done in the bottom-half of the ISR.
 *
 *	See bt_interrupts.c in the RaspberryPi Drivers folder.
 */
void vTickISR (unsigned int nIRQ, void *pParam)
{
   10274:	e92d4800 	push	{fp, lr}
   10278:	e28db004 	add	fp, sp, #4
   1027c:	e24dd008 	sub	sp, sp, #8
   10280:	e50b0008 	str	r0, [fp, #-8]
   10284:	e50b100c 	str	r1, [fp, #-12]
	vTaskIncrementTick();
   10288:	eb0009ae 	bl	12948 <vTaskIncrementTick>

	#if configUSE_PREEMPTION == 1
	vTaskSwitchContext();
   1028c:	eb000a81 	bl	12c98 <vTaskSwitchContext>
	#endif

	pRegs->CLI = 0;			// Acknowledge the timer interrupt.
   10290:	e59f3010 	ldr	r3, [pc, #16]	; 102a8 <vTickISR+0x34>
   10294:	e3a02000 	mov	r2, #0
   10298:	e583200c 	str	r2, [r3, #12]
}
   1029c:	e320f000 	nop	{0}
   102a0:	e24bd004 	sub	sp, fp, #4
   102a4:	e8bd8800 	pop	{fp, pc}
   102a8:	2000b400 	andcs	fp, r0, r0, lsl #8

000102ac <prvSetupTimerInterrupt>:

/*
 * Setup the timer 0 to generate the tick interrupts at the required frequency.
 */
static void prvSetupTimerInterrupt( void )
{
   102ac:	e92d4800 	push	{fp, lr}
   102b0:	e28db004 	add	fp, sp, #4
   102b4:	e24dd008 	sub	sp, sp, #8
	unsigned long ulCompareMatch;
	

	/* Calculate the match value required for our wanted tick rate. */
	ulCompareMatch = 1000000 / configTICK_RATE_HZ;
   102b8:	e3a03ffa 	mov	r3, #1000	; 0x3e8
   102bc:	e50b3008 	str	r3, [fp, #-8]
	{
		ulCompareMatch /= ( portPRESCALE_VALUE + 1 );
	}
	#endif

	irqBlock();
   102c0:	eb000cd9 	bl	1362c <irqBlock>

	pRegs->CTL = 0x003E0000;
   102c4:	e59f3068 	ldr	r3, [pc, #104]	; 10334 <prvSetupTimerInterrupt+0x88>
   102c8:	e3a0283e 	mov	r2, #4063232	; 0x3e0000
   102cc:	e5832008 	str	r2, [r3, #8]
	pRegs->LOD = 1000 - 1;
   102d0:	e59f305c 	ldr	r3, [pc, #92]	; 10334 <prvSetupTimerInterrupt+0x88>
   102d4:	e59f205c 	ldr	r2, [pc, #92]	; 10338 <prvSetupTimerInterrupt+0x8c>
   102d8:	e5832000 	str	r2, [r3]
	pRegs->RLD = 1000 - 1;
   102dc:	e59f3050 	ldr	r3, [pc, #80]	; 10334 <prvSetupTimerInterrupt+0x88>
   102e0:	e59f2050 	ldr	r2, [pc, #80]	; 10338 <prvSetupTimerInterrupt+0x8c>
   102e4:	e5832018 	str	r2, [r3, #24]
	pRegs->DIV = portTIMER_PRESCALE;
   102e8:	e59f3044 	ldr	r3, [pc, #68]	; 10334 <prvSetupTimerInterrupt+0x88>
   102ec:	e3a020f9 	mov	r2, #249	; 0xf9
   102f0:	e583201c 	str	r2, [r3, #28]
	pRegs->CLI = 0;
   102f4:	e59f3038 	ldr	r3, [pc, #56]	; 10334 <prvSetupTimerInterrupt+0x88>
   102f8:	e3a02000 	mov	r2, #0
   102fc:	e583200c 	str	r2, [r3, #12]
	pRegs->CTL = 0x003E00A2;
   10300:	e59f302c 	ldr	r3, [pc, #44]	; 10334 <prvSetupTimerInterrupt+0x88>
   10304:	e59f2030 	ldr	r2, [pc, #48]	; 1033c <prvSetupTimerInterrupt+0x90>
   10308:	e5832008 	str	r2, [r3, #8]

	irqRegister(64, vTickISR, NULL);
   1030c:	e3a02000 	mov	r2, #0
   10310:	e59f1028 	ldr	r1, [pc, #40]	; 10340 <prvSetupTimerInterrupt+0x94>
   10314:	e3a00040 	mov	r0, #64	; 0x40
   10318:	eb000cca 	bl	13648 <irqRegister>

	irqEnable(64);
   1031c:	e3a00040 	mov	r0, #64	; 0x40
   10320:	eb000ce1 	bl	136ac <irqEnable>

	irqUnblock();
   10324:	eb000cb9 	bl	13610 <irqUnblock>
}
   10328:	e320f000 	nop	{0}
   1032c:	e24bd004 	sub	sp, fp, #4
   10330:	e8bd8800 	pop	{fp, pc}
   10334:	2000b400 	andcs	fp, r0, r0, lsl #8
   10338:	000003e7 	andeq	r0, r0, r7, ror #7
   1033c:	003e00a2 	eorseq	r0, lr, r2, lsr #1
   10340:	00010274 	andeq	r0, r1, r4, ror r2

00010344 <vPortISRStartFirstTask>:
/*-----------------------------------------------------------*/

int g_bStarted = 0;

void vPortISRStartFirstTask( void )
{
   10344:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   10348:	e28db000 	add	fp, sp, #0
	 *	Change from System to IRQ mode.
	 *
	 *
	 */

	g_bStarted++;
   1034c:	e59f307c 	ldr	r3, [pc, #124]	; 103d0 <vPortISRStartFirstTask+0x8c>
   10350:	e5933000 	ldr	r3, [r3]
   10354:	e2833001 	add	r3, r3, #1
   10358:	e59f2070 	ldr	r2, [pc, #112]	; 103d0 <vPortISRStartFirstTask+0x8c>
   1035c:	e5823000 	str	r3, [r2]

	__asm volatile("mrs 	r0,cpsr");		// Read in the cpsr register.
   10360:	e10f0000 	mrs	r0, CPSR
	__asm volatile("bic		r0,r0,#0x80");	// Clear bit 8, (0x80) -- Causes IRQs to be enabled
   10364:	e3c00080 	bic	r0, r0, #128	; 0x80
	__asm volatile("msr		cpsr_c, r0");	// Write it back to the CPSR register
   10368:	e121f000 	msr	CPSR_c, r0
//	__asm volatile("swi		0");			// Force a task switch with SWI!
//	__asm volatile("nop");

	/* Simply start the scheduler.  This is included here as it can only be
	called from ARM mode. */
	portRESTORE_CONTEXT();
   1036c:	e59f0274 	ldr	r0, [pc, #628]	; 105e8 <vPortExitCritical+0x64>
   10370:	e5900000 	ldr	r0, [r0]
   10374:	e590e000 	ldr	lr, [r0]
   10378:	e59f026c 	ldr	r0, [pc, #620]	; 105ec <vPortExitCritical+0x68>
   1037c:	e8be0002 	ldm	lr!, {r1}
   10380:	e5801000 	str	r1, [r0]
   10384:	e8be0001 	ldm	lr!, {r0}
   10388:	e16ff000 	msr	SPSR_fsxc, r0
   1038c:	e8de7fff 	ldm	lr, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   10390:	e320f000 	nop	{0}
   10394:	e59ee03c 	ldr	lr, [lr, #60]	; 0x3c
   10398:	e25ef004 	subs	pc, lr, #4
   1039c:	e320f000 	nop	{0}
   103a0:	e320f000 	nop	{0}
   103a4:	e59f3028 	ldr	r3, [pc, #40]	; 103d4 <vPortISRStartFirstTask+0x90>
   103a8:	e5933000 	ldr	r3, [r3]
   103ac:	e59f3024 	ldr	r3, [pc, #36]	; 103d8 <vPortISRStartFirstTask+0x94>
   103b0:	e5933000 	ldr	r3, [r3]
	__asm volatile (
   103b4:	e8bd4000 	ldmfd	sp!, {lr}
   103b8:	e24ee004 	sub	lr, lr, #4
   103bc:	e12fff1e 	bx	lr
		"LDMFD	SP!, {LR}	\n"
		"SUB	LR,	LR, #4	\n"
		
		"BX		LR			\n"
	);
}
   103c0:	e320f000 	nop	{0}
   103c4:	e28bd000 	add	sp, fp, #0
   103c8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   103cc:	e12fff1e 	bx	lr
   103d0:	00015cc0 	andeq	r5, r1, r0, asr #25
   103d4:	00015cac 	andeq	r5, r1, ip, lsr #25
   103d8:	00015d44 	andeq	r5, r1, r4, asr #26

000103dc <vPortYieldProcessor>:
void vPortYieldProcessor( void )
{
	/* Within an IRQ ISR the link register has an offset from the true return 
	address, but an SWI ISR does not.  Add the offset manually so the same 
	ISR return code can be used in both cases. */
	__asm volatile ( "ADD		LR, LR, #4" );
   103dc:	e28ee004 	add	lr, lr, #4

	/* Perform the context switch.  First save the context of the current task. */
	portSAVE_CONTEXT();
   103e0:	e92d0001 	stmfd	sp!, {r0}
   103e4:	e94d2000 	stmdb	sp, {sp}^
   103e8:	e24dd004 	sub	sp, sp, #4
   103ec:	e8bd0001 	ldmfd	sp!, {r0}
   103f0:	e9204000 	stmdb	r0!, {lr}
   103f4:	e1a0e000 	mov	lr, r0
   103f8:	e8bd0001 	ldmfd	sp!, {r0}
   103fc:	e94e7fff 	stmdb	lr, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   10400:	e320f000 	nop	{0}
   10404:	e24ee03c 	sub	lr, lr, #60	; 0x3c
   10408:	e14f0000 	mrs	r0, SPSR
   1040c:	e92e0001 	stmdb	lr!, {r0}
   10410:	e59f01d4 	ldr	r0, [pc, #468]	; 105ec <vPortExitCritical+0x68>
   10414:	e5900000 	ldr	r0, [r0]
   10418:	e92e0001 	stmdb	lr!, {r0}
   1041c:	e59f01c4 	ldr	r0, [pc, #452]	; 105e8 <vPortExitCritical+0x64>
   10420:	e5900000 	ldr	r0, [r0]
   10424:	e580e000 	str	lr, [r0]
   10428:	e59f3058 	ldr	r3, [pc, #88]	; 10488 <vPortYieldProcessor+0xac>
   1042c:	e5933000 	ldr	r3, [r3]
   10430:	e59f3054 	ldr	r3, [pc, #84]	; 1048c <vPortYieldProcessor+0xb0>
   10434:	e5933000 	ldr	r3, [r3]

	/* Find the highest priority task that is ready to run. */
	__asm volatile ( "bl vTaskSwitchContext" );
   10438:	eb000a16 	bl	12c98 <vTaskSwitchContext>

	/* Restore the context of the new task. */
	portRESTORE_CONTEXT();	
   1043c:	e59f01a4 	ldr	r0, [pc, #420]	; 105e8 <vPortExitCritical+0x64>
   10440:	e5900000 	ldr	r0, [r0]
   10444:	e590e000 	ldr	lr, [r0]
   10448:	e59f019c 	ldr	r0, [pc, #412]	; 105ec <vPortExitCritical+0x68>
   1044c:	e8be0002 	ldm	lr!, {r1}
   10450:	e5801000 	str	r1, [r0]
   10454:	e8be0001 	ldm	lr!, {r0}
   10458:	e16ff000 	msr	SPSR_fsxc, r0
   1045c:	e8de7fff 	ldm	lr, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   10460:	e320f000 	nop	{0}
   10464:	e59ee03c 	ldr	lr, [lr, #60]	; 0x3c
   10468:	e25ef004 	subs	pc, lr, #4
   1046c:	e320f000 	nop	{0}
   10470:	e320f000 	nop	{0}
   10474:	e59f300c 	ldr	r3, [pc, #12]	; 10488 <vPortYieldProcessor+0xac>
   10478:	e5933000 	ldr	r3, [r3]
   1047c:	e59f3008 	ldr	r3, [pc, #8]	; 1048c <vPortYieldProcessor+0xb0>
   10480:	e5933000 	ldr	r3, [r3]
}
   10484:	e320f000 	nop	{0}
   10488:	00015cac 	andeq	r5, r1, ip, lsr #25
   1048c:	00015d44 	andeq	r5, r1, r4, asr #26

00010490 <vFreeRTOS_ISR>:

extern void irqHandler(void);

void vFreeRTOS_ISR( void ) __attribute__((naked));
void vFreeRTOS_ISR( void ) {
	portSAVE_CONTEXT();
   10490:	e92d0001 	stmfd	sp!, {r0}
   10494:	e94d2000 	stmdb	sp, {sp}^
   10498:	e24dd004 	sub	sp, sp, #4
   1049c:	e8bd0001 	ldmfd	sp!, {r0}
   104a0:	e9204000 	stmdb	r0!, {lr}
   104a4:	e1a0e000 	mov	lr, r0
   104a8:	e8bd0001 	ldmfd	sp!, {r0}
   104ac:	e94e7fff 	stmdb	lr, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   104b0:	e320f000 	nop	{0}
   104b4:	e24ee03c 	sub	lr, lr, #60	; 0x3c
   104b8:	e14f0000 	mrs	r0, SPSR
   104bc:	e92e0001 	stmdb	lr!, {r0}
   104c0:	e59f0124 	ldr	r0, [pc, #292]	; 105ec <vPortExitCritical+0x68>
   104c4:	e5900000 	ldr	r0, [r0]
   104c8:	e92e0001 	stmdb	lr!, {r0}
   104cc:	e59f0114 	ldr	r0, [pc, #276]	; 105e8 <vPortExitCritical+0x64>
   104d0:	e5900000 	ldr	r0, [r0]
   104d4:	e580e000 	str	lr, [r0]
   104d8:	e59f3058 	ldr	r3, [pc, #88]	; 10538 <vFreeRTOS_ISR+0xa8>
   104dc:	e5933000 	ldr	r3, [r3]
   104e0:	e59f3054 	ldr	r3, [pc, #84]	; 1053c <vFreeRTOS_ISR+0xac>
   104e4:	e5933000 	ldr	r3, [r3]
	irqHandler();
   104e8:	eb000c20 	bl	13570 <irqHandler>
	portRESTORE_CONTEXT();	
   104ec:	e59f00f4 	ldr	r0, [pc, #244]	; 105e8 <vPortExitCritical+0x64>
   104f0:	e5900000 	ldr	r0, [r0]
   104f4:	e590e000 	ldr	lr, [r0]
   104f8:	e59f00ec 	ldr	r0, [pc, #236]	; 105ec <vPortExitCritical+0x68>
   104fc:	e8be0002 	ldm	lr!, {r1}
   10500:	e5801000 	str	r1, [r0]
   10504:	e8be0001 	ldm	lr!, {r0}
   10508:	e16ff000 	msr	SPSR_fsxc, r0
   1050c:	e8de7fff 	ldm	lr, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   10510:	e320f000 	nop	{0}
   10514:	e59ee03c 	ldr	lr, [lr, #60]	; 0x3c
   10518:	e25ef004 	subs	pc, lr, #4
   1051c:	e320f000 	nop	{0}
   10520:	e320f000 	nop	{0}
   10524:	e59f300c 	ldr	r3, [pc, #12]	; 10538 <vFreeRTOS_ISR+0xa8>
   10528:	e5933000 	ldr	r3, [r3]
   1052c:	e59f3008 	ldr	r3, [pc, #8]	; 1053c <vFreeRTOS_ISR+0xac>
   10530:	e5933000 	ldr	r3, [r3]
}
   10534:	e320f000 	nop	{0}
   10538:	00015cac 	andeq	r5, r1, ip, lsr #25
   1053c:	00015d44 	andeq	r5, r1, r4, asr #26

00010540 <vPortEnterCritical>:
/* The code generated by the GCC compiler uses the stack in different ways at
different optimisation levels.  The interrupt flags can therefore not always
be saved to the stack.  Instead the critical section nesting level is stored
in a variable, which is then saved as part of the stack context. */
void vPortEnterCritical( void )
{
   10540:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   10544:	e28db000 	add	fp, sp, #0
	/* Disable interrupts as per portDISABLE_INTERRUPTS(); 							*/
	__asm volatile ( 
   10548:	e92d0001 	stmfd	sp!, {r0}
   1054c:	e10f0000 	mrs	r0, CPSR
   10550:	e38000c0 	orr	r0, r0, #192	; 0xc0
   10554:	e129f000 	msr	CPSR_fc, r0
   10558:	e8bd0001 	ldmfd	sp!, {r0}
		"LDMIA	SP!, {R0}" );				/* Pop R0.								*/

	/* Now interrupts are disabled ulCriticalNesting can be accessed 
	directly.  Increment ulCriticalNesting to keep a count of how many times
	portENTER_CRITICAL() has been called. */
	ulCriticalNesting++;
   1055c:	e59f301c 	ldr	r3, [pc, #28]	; 10580 <vPortEnterCritical+0x40>
   10560:	e5933000 	ldr	r3, [r3]
   10564:	e2833001 	add	r3, r3, #1
   10568:	e59f2010 	ldr	r2, [pc, #16]	; 10580 <vPortEnterCritical+0x40>
   1056c:	e5823000 	str	r3, [r2]
}
   10570:	e320f000 	nop	{0}
   10574:	e28bd000 	add	sp, fp, #0
   10578:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   1057c:	e12fff1e 	bx	lr
   10580:	00015cac 	andeq	r5, r1, ip, lsr #25

00010584 <vPortExitCritical>:

void vPortExitCritical( void )
{
   10584:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   10588:	e28db000 	add	fp, sp, #0
	if( ulCriticalNesting > portNO_CRITICAL_NESTING )
   1058c:	e59f3050 	ldr	r3, [pc, #80]	; 105e4 <vPortExitCritical+0x60>
   10590:	e5933000 	ldr	r3, [r3]
   10594:	e3530000 	cmp	r3, #0
   10598:	0a00000d 	beq	105d4 <vPortExitCritical+0x50>
	{
		/* Decrement the nesting count as we are leaving a critical section. */
		ulCriticalNesting--;
   1059c:	e59f3040 	ldr	r3, [pc, #64]	; 105e4 <vPortExitCritical+0x60>
   105a0:	e5933000 	ldr	r3, [r3]
   105a4:	e2433001 	sub	r3, r3, #1
   105a8:	e59f2034 	ldr	r2, [pc, #52]	; 105e4 <vPortExitCritical+0x60>
   105ac:	e5823000 	str	r3, [r2]

		/* If the nesting level has reached zero then interrupts should be
		re-enabled. */
		if( ulCriticalNesting == portNO_CRITICAL_NESTING )
   105b0:	e59f302c 	ldr	r3, [pc, #44]	; 105e4 <vPortExitCritical+0x60>
   105b4:	e5933000 	ldr	r3, [r3]
   105b8:	e3530000 	cmp	r3, #0
   105bc:	1a000004 	bne	105d4 <vPortExitCritical+0x50>
		{
			/* Enable interrupts as per portEXIT_CRITICAL().					*/
			__asm volatile ( 
   105c0:	e92d0001 	stmfd	sp!, {r0}
   105c4:	e10f0000 	mrs	r0, CPSR
   105c8:	e3c000c0 	bic	r0, r0, #192	; 0xc0
   105cc:	e129f000 	msr	CPSR_fc, r0
   105d0:	e8bd0001 	ldmfd	sp!, {r0}
				"BIC	R0, R0, #0xC0	\n\t"	/* Enable IRQ, FIQ.				*/	
				"MSR	CPSR, R0		\n\t"	/* Write back modified value.	*/	
				"LDMIA	SP!, {R0}" );			/* Pop R0.						*/
		}
	}
}
   105d4:	e320f000 	nop	{0}
   105d8:	e28bd000 	add	sp, fp, #0
   105dc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   105e0:	e12fff1e 	bx	lr
   105e4:	00015cac 	andeq	r5, r1, ip, lsr #25
   105e8:	00015d44 	andeq	r5, r1, r4, asr #26
   105ec:	00015cac 	andeq	r5, r1, ip, lsr #25

000105f0 <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxPriority, unsigned portBASE_TYPE uxIndex )
{
   105f0:	e92d4800 	push	{fp, lr}
   105f4:	e28db004 	add	fp, sp, #4
   105f8:	e24dd018 	sub	sp, sp, #24
   105fc:	e50b0010 	str	r0, [fp, #-16]
   10600:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   10604:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
signed portBASE_TYPE xReturn;
corCRCB *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
   10608:	e3a00038 	mov	r0, #56	; 0x38
   1060c:	eb001204 	bl	14e24 <pvPortMalloc>
   10610:	e50b000c 	str	r0, [fp, #-12]
	if( pxCoRoutine )
   10614:	e51b300c 	ldr	r3, [fp, #-12]
   10618:	e3530000 	cmp	r3, #0
   1061c:	0a000044 	beq	10734 <xCoRoutineCreate+0x144>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
   10620:	e59f3124 	ldr	r3, [pc, #292]	; 1074c <xCoRoutineCreate+0x15c>
   10624:	e5933000 	ldr	r3, [r3]
   10628:	e3530000 	cmp	r3, #0
   1062c:	1a000003 	bne	10640 <xCoRoutineCreate+0x50>
		{
			pxCurrentCoRoutine = pxCoRoutine;
   10630:	e59f2114 	ldr	r2, [pc, #276]	; 1074c <xCoRoutineCreate+0x15c>
   10634:	e51b300c 	ldr	r3, [fp, #-12]
   10638:	e5823000 	str	r3, [r2]
			prvInitialiseCoRoutineLists();
   1063c:	eb000177 	bl	10c20 <prvInitialiseCoRoutineLists>
		}

		/* Check the priority is within limits. */
		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
   10640:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   10644:	e3530001 	cmp	r3, #1
   10648:	9a000001 	bls	10654 <xCoRoutineCreate+0x64>
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
   1064c:	e3a03001 	mov	r3, #1
   10650:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
   10654:	e51b300c 	ldr	r3, [fp, #-12]
   10658:	e3a02000 	mov	r2, #0
   1065c:	e1c323b4 	strh	r2, [r3, #52]	; 0x34
		pxCoRoutine->uxPriority = uxPriority;
   10660:	e51b300c 	ldr	r3, [fp, #-12]
   10664:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   10668:	e583202c 	str	r2, [r3, #44]	; 0x2c
		pxCoRoutine->uxIndex = uxIndex;
   1066c:	e51b300c 	ldr	r3, [fp, #-12]
   10670:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   10674:	e5832030 	str	r2, [r3, #48]	; 0x30
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
   10678:	e51b300c 	ldr	r3, [fp, #-12]
   1067c:	e51b2010 	ldr	r2, [fp, #-16]
   10680:	e5832000 	str	r2, [r3]

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
   10684:	e51b300c 	ldr	r3, [fp, #-12]
   10688:	e2833004 	add	r3, r3, #4
   1068c:	e1a00003 	mov	r0, r3
   10690:	eb0001c9 	bl	10dbc <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
   10694:	e51b300c 	ldr	r3, [fp, #-12]
   10698:	e2833018 	add	r3, r3, #24
   1069c:	e1a00003 	mov	r0, r3
   106a0:	eb0001c5 	bl	10dbc <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the xListItem.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
   106a4:	e51b300c 	ldr	r3, [fp, #-12]
   106a8:	e51b200c 	ldr	r2, [fp, #-12]
   106ac:	e5832010 	str	r2, [r3, #16]
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
   106b0:	e51b300c 	ldr	r3, [fp, #-12]
   106b4:	e51b200c 	ldr	r2, [fp, #-12]
   106b8:	e5832024 	str	r2, [r3, #36]	; 0x24
	
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
   106bc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   106c0:	e2632005 	rsb	r2, r3, #5
   106c4:	e51b300c 	ldr	r3, [fp, #-12]
   106c8:	e5832018 	str	r2, [r3, #24]
		
		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
   106cc:	e51b300c 	ldr	r3, [fp, #-12]
   106d0:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   106d4:	e59f3074 	ldr	r3, [pc, #116]	; 10750 <xCoRoutineCreate+0x160>
   106d8:	e5933000 	ldr	r3, [r3]
   106dc:	e1520003 	cmp	r2, r3
   106e0:	9a000003 	bls	106f4 <xCoRoutineCreate+0x104>
   106e4:	e51b300c 	ldr	r3, [fp, #-12]
   106e8:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   106ec:	e59f205c 	ldr	r2, [pc, #92]	; 10750 <xCoRoutineCreate+0x160>
   106f0:	e5823000 	str	r3, [r2]
   106f4:	e51b300c 	ldr	r3, [fp, #-12]
   106f8:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   106fc:	e1a03002 	mov	r3, r2
   10700:	e1a03103 	lsl	r3, r3, #2
   10704:	e0833002 	add	r3, r3, r2
   10708:	e1a03103 	lsl	r3, r3, #2
   1070c:	e59f2040 	ldr	r2, [pc, #64]	; 10754 <xCoRoutineCreate+0x164>
   10710:	e0832002 	add	r2, r3, r2
   10714:	e51b300c 	ldr	r3, [fp, #-12]
   10718:	e2833004 	add	r3, r3, #4
   1071c:	e1a01003 	mov	r1, r3
   10720:	e1a00002 	mov	r0, r2
   10724:	eb0001af 	bl	10de8 <vListInsertEnd>

		xReturn = pdPASS;
   10728:	e3a03001 	mov	r3, #1
   1072c:	e50b3008 	str	r3, [fp, #-8]
   10730:	ea000001 	b	1073c <xCoRoutineCreate+0x14c>
	}
	else
	{		
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   10734:	e3e03000 	mvn	r3, #0
   10738:	e50b3008 	str	r3, [fp, #-8]
	}
	
	return xReturn;	
   1073c:	e51b3008 	ldr	r3, [fp, #-8]
}
   10740:	e1a00003 	mov	r0, r3
   10744:	e24bd004 	sub	sp, fp, #4
   10748:	e8bd8800 	pop	{fp, pc}
   1074c:	00015d30 	andeq	r5, r1, r0, lsr sp
   10750:	00015d34 	andeq	r5, r1, r4, lsr sp
   10754:	00015cc4 	andeq	r5, r1, r4, asr #25

00010758 <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
{
   10758:	e92d4800 	push	{fp, lr}
   1075c:	e28db004 	add	fp, sp, #4
   10760:	e24dd010 	sub	sp, sp, #16
   10764:	e50b0010 	str	r0, [fp, #-16]
   10768:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
portTickType xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
   1076c:	e59f30b8 	ldr	r3, [pc, #184]	; 1082c <vCoRoutineAddToDelayedList+0xd4>
   10770:	e5932000 	ldr	r2, [r3]
   10774:	e51b3010 	ldr	r3, [fp, #-16]
   10778:	e0823003 	add	r3, r2, r3
   1077c:	e50b3008 	str	r3, [fp, #-8]

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
   10780:	e59f30a8 	ldr	r3, [pc, #168]	; 10830 <vCoRoutineAddToDelayedList+0xd8>
   10784:	e5933000 	ldr	r3, [r3]
   10788:	e2833004 	add	r3, r3, #4
   1078c:	e1a00003 	mov	r0, r3
   10790:	eb0001f0 	bl	10f58 <vListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
   10794:	e59f3094 	ldr	r3, [pc, #148]	; 10830 <vCoRoutineAddToDelayedList+0xd8>
   10798:	e5933000 	ldr	r3, [r3]
   1079c:	e51b2008 	ldr	r2, [fp, #-8]
   107a0:	e5832004 	str	r2, [r3, #4]

	if( xTimeToWake < xCoRoutineTickCount )
   107a4:	e59f3080 	ldr	r3, [pc, #128]	; 1082c <vCoRoutineAddToDelayedList+0xd4>
   107a8:	e5933000 	ldr	r3, [r3]
   107ac:	e51b2008 	ldr	r2, [fp, #-8]
   107b0:	e1520003 	cmp	r2, r3
   107b4:	2a000008 	bcs	107dc <vCoRoutineAddToDelayedList+0x84>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
   107b8:	e59f3074 	ldr	r3, [pc, #116]	; 10834 <vCoRoutineAddToDelayedList+0xdc>
   107bc:	e5932000 	ldr	r2, [r3]
   107c0:	e59f3068 	ldr	r3, [pc, #104]	; 10830 <vCoRoutineAddToDelayedList+0xd8>
   107c4:	e5933000 	ldr	r3, [r3]
   107c8:	e2833004 	add	r3, r3, #4
   107cc:	e1a01003 	mov	r1, r3
   107d0:	e1a00002 	mov	r0, r2
   107d4:	eb0001a9 	bl	10e80 <vListInsert>
   107d8:	ea000007 	b	107fc <vCoRoutineAddToDelayedList+0xa4>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
   107dc:	e59f3054 	ldr	r3, [pc, #84]	; 10838 <vCoRoutineAddToDelayedList+0xe0>
   107e0:	e5932000 	ldr	r2, [r3]
   107e4:	e59f3044 	ldr	r3, [pc, #68]	; 10830 <vCoRoutineAddToDelayedList+0xd8>
   107e8:	e5933000 	ldr	r3, [r3]
   107ec:	e2833004 	add	r3, r3, #4
   107f0:	e1a01003 	mov	r1, r3
   107f4:	e1a00002 	mov	r0, r2
   107f8:	eb0001a0 	bl	10e80 <vListInsert>
	}

	if( pxEventList )
   107fc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   10800:	e3530000 	cmp	r3, #0
   10804:	0a000005 	beq	10820 <vCoRoutineAddToDelayedList+0xc8>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
   10808:	e59f3020 	ldr	r3, [pc, #32]	; 10830 <vCoRoutineAddToDelayedList+0xd8>
   1080c:	e5933000 	ldr	r3, [r3]
   10810:	e2833018 	add	r3, r3, #24
   10814:	e1a01003 	mov	r1, r3
   10818:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   1081c:	eb000197 	bl	10e80 <vListInsert>
	}
}
   10820:	e320f000 	nop	{0}
   10824:	e24bd004 	sub	sp, fp, #4
   10828:	e8bd8800 	pop	{fp, pc}
   1082c:	00015d38 	andeq	r5, r1, r8, lsr sp
   10830:	00015d30 	andeq	r5, r1, r0, lsr sp
   10834:	00015d18 	andeq	r5, r1, r8, lsl sp
   10838:	00015d14 	andeq	r5, r1, r4, lsl sp

0001083c <prvCheckPendingReadyList>:
/*-----------------------------------------------------------*/

static void prvCheckPendingReadyList( void )
{
   1083c:	e92d4800 	push	{fp, lr}
   10840:	e28db004 	add	fp, sp, #4
   10844:	e24dd008 	sub	sp, sp, #8
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
   10848:	ea00002c 	b	10900 <prvCheckPendingReadyList+0xc4>
	{
		corCRCB *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
   1084c:	e92d0001 	stmfd	sp!, {r0}
   10850:	e10f0000 	mrs	r0, CPSR
   10854:	e38000c0 	orr	r0, r0, #192	; 0xc0
   10858:	e129f000 	msr	CPSR_fc, r0
   1085c:	e8bd0001 	ldmfd	sp!, {r0}
		{	
			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
   10860:	e59f30b4 	ldr	r3, [pc, #180]	; 1091c <prvCheckPendingReadyList+0xe0>
   10864:	e593300c 	ldr	r3, [r3, #12]
   10868:	e593300c 	ldr	r3, [r3, #12]
   1086c:	e50b3008 	str	r3, [fp, #-8]
			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
   10870:	e51b3008 	ldr	r3, [fp, #-8]
   10874:	e2833018 	add	r3, r3, #24
   10878:	e1a00003 	mov	r0, r3
   1087c:	eb0001b5 	bl	10f58 <vListRemove>
		}
		portENABLE_INTERRUPTS();
   10880:	e92d0001 	stmfd	sp!, {r0}
   10884:	e10f0000 	mrs	r0, CPSR
   10888:	e3c000c0 	bic	r0, r0, #192	; 0xc0
   1088c:	e129f000 	msr	CPSR_fc, r0
   10890:	e8bd0001 	ldmfd	sp!, {r0}

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
   10894:	e51b3008 	ldr	r3, [fp, #-8]
   10898:	e2833004 	add	r3, r3, #4
   1089c:	e1a00003 	mov	r0, r3
   108a0:	eb0001ac 	bl	10f58 <vListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
   108a4:	e51b3008 	ldr	r3, [fp, #-8]
   108a8:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   108ac:	e59f306c 	ldr	r3, [pc, #108]	; 10920 <prvCheckPendingReadyList+0xe4>
   108b0:	e5933000 	ldr	r3, [r3]
   108b4:	e1520003 	cmp	r2, r3
   108b8:	9a000003 	bls	108cc <prvCheckPendingReadyList+0x90>
   108bc:	e51b3008 	ldr	r3, [fp, #-8]
   108c0:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   108c4:	e59f2054 	ldr	r2, [pc, #84]	; 10920 <prvCheckPendingReadyList+0xe4>
   108c8:	e5823000 	str	r3, [r2]
   108cc:	e51b3008 	ldr	r3, [fp, #-8]
   108d0:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   108d4:	e1a03002 	mov	r3, r2
   108d8:	e1a03103 	lsl	r3, r3, #2
   108dc:	e0833002 	add	r3, r3, r2
   108e0:	e1a03103 	lsl	r3, r3, #2
   108e4:	e59f2038 	ldr	r2, [pc, #56]	; 10924 <prvCheckPendingReadyList+0xe8>
   108e8:	e0832002 	add	r2, r3, r2
   108ec:	e51b3008 	ldr	r3, [fp, #-8]
   108f0:	e2833004 	add	r3, r3, #4
   108f4:	e1a01003 	mov	r1, r3
   108f8:	e1a00002 	mov	r0, r2
   108fc:	eb000139 	bl	10de8 <vListInsertEnd>
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
   10900:	e59f3014 	ldr	r3, [pc, #20]	; 1091c <prvCheckPendingReadyList+0xe0>
   10904:	e5933000 	ldr	r3, [r3]
   10908:	e3530000 	cmp	r3, #0
   1090c:	1affffce 	bne	1084c <prvCheckPendingReadyList+0x10>
	}
}
   10910:	e320f000 	nop	{0}
   10914:	e24bd004 	sub	sp, fp, #4
   10918:	e8bd8800 	pop	{fp, pc}
   1091c:	00015d1c 	andeq	r5, r1, ip, lsl sp
   10920:	00015d34 	andeq	r5, r1, r4, lsr sp
   10924:	00015cc4 	andeq	r5, r1, r4, asr #25

00010928 <prvCheckDelayedList>:
/*-----------------------------------------------------------*/

static void prvCheckDelayedList( void )
{
   10928:	e92d4800 	push	{fp, lr}
   1092c:	e28db004 	add	fp, sp, #4
   10930:	e24dd008 	sub	sp, sp, #8
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
   10934:	eb0007df 	bl	128b8 <xTaskGetTickCount>
   10938:	e1a02000 	mov	r2, r0
   1093c:	e59f3198 	ldr	r3, [pc, #408]	; 10adc <prvCheckDelayedList+0x1b4>
   10940:	e5933000 	ldr	r3, [r3]
   10944:	e0423003 	sub	r3, r2, r3
   10948:	e59f2190 	ldr	r2, [pc, #400]	; 10ae0 <prvCheckDelayedList+0x1b8>
   1094c:	e5823000 	str	r3, [r2]
	while( xPassedTicks )
   10950:	ea000056 	b	10ab0 <prvCheckDelayedList+0x188>
	{
		xCoRoutineTickCount++;
   10954:	e59f3188 	ldr	r3, [pc, #392]	; 10ae4 <prvCheckDelayedList+0x1bc>
   10958:	e5933000 	ldr	r3, [r3]
   1095c:	e2833001 	add	r3, r3, #1
   10960:	e59f217c 	ldr	r2, [pc, #380]	; 10ae4 <prvCheckDelayedList+0x1bc>
   10964:	e5823000 	str	r3, [r2]
		xPassedTicks--;
   10968:	e59f3170 	ldr	r3, [pc, #368]	; 10ae0 <prvCheckDelayedList+0x1b8>
   1096c:	e5933000 	ldr	r3, [r3]
   10970:	e2433001 	sub	r3, r3, #1
   10974:	e59f2164 	ldr	r2, [pc, #356]	; 10ae0 <prvCheckDelayedList+0x1b8>
   10978:	e5823000 	str	r3, [r2]

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
   1097c:	e59f3160 	ldr	r3, [pc, #352]	; 10ae4 <prvCheckDelayedList+0x1bc>
   10980:	e5933000 	ldr	r3, [r3]
   10984:	e3530000 	cmp	r3, #0
   10988:	1a000043 	bne	10a9c <prvCheckDelayedList+0x174>
		{
			xList * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
   1098c:	e59f3154 	ldr	r3, [pc, #340]	; 10ae8 <prvCheckDelayedList+0x1c0>
   10990:	e5933000 	ldr	r3, [r3]
   10994:	e50b3008 	str	r3, [fp, #-8]
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
   10998:	e59f314c 	ldr	r3, [pc, #332]	; 10aec <prvCheckDelayedList+0x1c4>
   1099c:	e5933000 	ldr	r3, [r3]
   109a0:	e59f2140 	ldr	r2, [pc, #320]	; 10ae8 <prvCheckDelayedList+0x1c0>
   109a4:	e5823000 	str	r3, [r2]
			pxOverflowDelayedCoRoutineList = pxTemp;
   109a8:	e59f213c 	ldr	r2, [pc, #316]	; 10aec <prvCheckDelayedList+0x1c4>
   109ac:	e51b3008 	ldr	r3, [fp, #-8]
   109b0:	e5823000 	str	r3, [r2]
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
   109b4:	ea000038 	b	10a9c <prvCheckDelayedList+0x174>
		{
			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
   109b8:	e59f3128 	ldr	r3, [pc, #296]	; 10ae8 <prvCheckDelayedList+0x1c0>
   109bc:	e5933000 	ldr	r3, [r3]
   109c0:	e593300c 	ldr	r3, [r3, #12]
   109c4:	e593300c 	ldr	r3, [r3, #12]
   109c8:	e50b300c 	str	r3, [fp, #-12]

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
   109cc:	e51b300c 	ldr	r3, [fp, #-12]
   109d0:	e5932004 	ldr	r2, [r3, #4]
   109d4:	e59f3108 	ldr	r3, [pc, #264]	; 10ae4 <prvCheckDelayedList+0x1bc>
   109d8:	e5933000 	ldr	r3, [r3]
   109dc:	e1520003 	cmp	r2, r3
   109e0:	9a000000 	bls	109e8 <prvCheckDelayedList+0xc0>
			{			
				/* Timeout not yet expired. */																			
				break;																				
   109e4:	ea000031 	b	10ab0 <prvCheckDelayedList+0x188>
			}																						

			portDISABLE_INTERRUPTS();
   109e8:	e92d0001 	stmfd	sp!, {r0}
   109ec:	e10f0000 	mrs	r0, CPSR
   109f0:	e38000c0 	orr	r0, r0, #192	; 0xc0
   109f4:	e129f000 	msr	CPSR_fc, r0
   109f8:	e8bd0001 	ldmfd	sp!, {r0}
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				vListRemove( &( pxCRCB->xGenericListItem ) );											
   109fc:	e51b300c 	ldr	r3, [fp, #-12]
   10a00:	e2833004 	add	r3, r3, #4
   10a04:	e1a00003 	mov	r0, r3
   10a08:	eb000152 	bl	10f58 <vListRemove>

				/* Is the co-routine waiting on an event also? */												
				if( pxCRCB->xEventListItem.pvContainer )													
   10a0c:	e51b300c 	ldr	r3, [fp, #-12]
   10a10:	e5933028 	ldr	r3, [r3, #40]	; 0x28
   10a14:	e3530000 	cmp	r3, #0
   10a18:	0a000003 	beq	10a2c <prvCheckDelayedList+0x104>
				{															
					vListRemove( &( pxCRCB->xEventListItem ) );											
   10a1c:	e51b300c 	ldr	r3, [fp, #-12]
   10a20:	e2833018 	add	r3, r3, #24
   10a24:	e1a00003 	mov	r0, r3
   10a28:	eb00014a 	bl	10f58 <vListRemove>
				}
			}
			portENABLE_INTERRUPTS();
   10a2c:	e92d0001 	stmfd	sp!, {r0}
   10a30:	e10f0000 	mrs	r0, CPSR
   10a34:	e3c000c0 	bic	r0, r0, #192	; 0xc0
   10a38:	e129f000 	msr	CPSR_fc, r0
   10a3c:	e8bd0001 	ldmfd	sp!, {r0}

			prvAddCoRoutineToReadyQueue( pxCRCB );													
   10a40:	e51b300c 	ldr	r3, [fp, #-12]
   10a44:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   10a48:	e59f30a0 	ldr	r3, [pc, #160]	; 10af0 <prvCheckDelayedList+0x1c8>
   10a4c:	e5933000 	ldr	r3, [r3]
   10a50:	e1520003 	cmp	r2, r3
   10a54:	9a000003 	bls	10a68 <prvCheckDelayedList+0x140>
   10a58:	e51b300c 	ldr	r3, [fp, #-12]
   10a5c:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   10a60:	e59f2088 	ldr	r2, [pc, #136]	; 10af0 <prvCheckDelayedList+0x1c8>
   10a64:	e5823000 	str	r3, [r2]
   10a68:	e51b300c 	ldr	r3, [fp, #-12]
   10a6c:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   10a70:	e1a03002 	mov	r3, r2
   10a74:	e1a03103 	lsl	r3, r3, #2
   10a78:	e0833002 	add	r3, r3, r2
   10a7c:	e1a03103 	lsl	r3, r3, #2
   10a80:	e59f206c 	ldr	r2, [pc, #108]	; 10af4 <prvCheckDelayedList+0x1cc>
   10a84:	e0832002 	add	r2, r3, r2
   10a88:	e51b300c 	ldr	r3, [fp, #-12]
   10a8c:	e2833004 	add	r3, r3, #4
   10a90:	e1a01003 	mov	r1, r3
   10a94:	e1a00002 	mov	r0, r2
   10a98:	eb0000d2 	bl	10de8 <vListInsertEnd>
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
   10a9c:	e59f3044 	ldr	r3, [pc, #68]	; 10ae8 <prvCheckDelayedList+0x1c0>
   10aa0:	e5933000 	ldr	r3, [r3]
   10aa4:	e5933000 	ldr	r3, [r3]
   10aa8:	e3530000 	cmp	r3, #0
   10aac:	1affffc1 	bne	109b8 <prvCheckDelayedList+0x90>
	while( xPassedTicks )
   10ab0:	e59f3028 	ldr	r3, [pc, #40]	; 10ae0 <prvCheckDelayedList+0x1b8>
   10ab4:	e5933000 	ldr	r3, [r3]
   10ab8:	e3530000 	cmp	r3, #0
   10abc:	1affffa4 	bne	10954 <prvCheckDelayedList+0x2c>
		}																									
	}

	xLastTickCount = xCoRoutineTickCount;
   10ac0:	e59f301c 	ldr	r3, [pc, #28]	; 10ae4 <prvCheckDelayedList+0x1bc>
   10ac4:	e5933000 	ldr	r3, [r3]
   10ac8:	e59f200c 	ldr	r2, [pc, #12]	; 10adc <prvCheckDelayedList+0x1b4>
   10acc:	e5823000 	str	r3, [r2]
}
   10ad0:	e320f000 	nop	{0}
   10ad4:	e24bd004 	sub	sp, fp, #4
   10ad8:	e8bd8800 	pop	{fp, pc}
   10adc:	00015d3c 	andeq	r5, r1, ip, lsr sp
   10ae0:	00015d40 	andeq	r5, r1, r0, asr #26
   10ae4:	00015d38 	andeq	r5, r1, r8, lsr sp
   10ae8:	00015d14 	andeq	r5, r1, r4, lsl sp
   10aec:	00015d18 	andeq	r5, r1, r8, lsl sp
   10af0:	00015d34 	andeq	r5, r1, r4, lsr sp
   10af4:	00015cc4 	andeq	r5, r1, r4, asr #25

00010af8 <vCoRoutineSchedule>:
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
   10af8:	e92d4800 	push	{fp, lr}
   10afc:	e28db004 	add	fp, sp, #4
   10b00:	e24dd008 	sub	sp, sp, #8
	/* See if any co-routines readied by events need moving to the ready lists. */
	prvCheckPendingReadyList();
   10b04:	ebffff4c 	bl	1083c <prvCheckPendingReadyList>

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();
   10b08:	ebffff86 	bl	10928 <prvCheckDelayedList>

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
   10b0c:	ea000008 	b	10b34 <vCoRoutineSchedule+0x3c>
	{
		if( uxTopCoRoutineReadyPriority == 0 )
   10b10:	e59f30fc 	ldr	r3, [pc, #252]	; 10c14 <vCoRoutineSchedule+0x11c>
   10b14:	e5933000 	ldr	r3, [r3]
   10b18:	e3530000 	cmp	r3, #0
   10b1c:	0a000039 	beq	10c08 <vCoRoutineSchedule+0x110>
		{
			/* No more co-routines to check. */
			return;
		}
		--uxTopCoRoutineReadyPriority;
   10b20:	e59f30ec 	ldr	r3, [pc, #236]	; 10c14 <vCoRoutineSchedule+0x11c>
   10b24:	e5933000 	ldr	r3, [r3]
   10b28:	e2433001 	sub	r3, r3, #1
   10b2c:	e59f20e0 	ldr	r2, [pc, #224]	; 10c14 <vCoRoutineSchedule+0x11c>
   10b30:	e5823000 	str	r3, [r2]
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
   10b34:	e59f30d8 	ldr	r3, [pc, #216]	; 10c14 <vCoRoutineSchedule+0x11c>
   10b38:	e5932000 	ldr	r2, [r3]
   10b3c:	e59f10d4 	ldr	r1, [pc, #212]	; 10c18 <vCoRoutineSchedule+0x120>
   10b40:	e1a03002 	mov	r3, r2
   10b44:	e1a03103 	lsl	r3, r3, #2
   10b48:	e0833002 	add	r3, r3, r2
   10b4c:	e1a03103 	lsl	r3, r3, #2
   10b50:	e0813003 	add	r3, r1, r3
   10b54:	e5933000 	ldr	r3, [r3]
   10b58:	e3530000 	cmp	r3, #0
   10b5c:	0affffeb 	beq	10b10 <vCoRoutineSchedule+0x18>
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
   10b60:	e59f30ac 	ldr	r3, [pc, #172]	; 10c14 <vCoRoutineSchedule+0x11c>
   10b64:	e5932000 	ldr	r2, [r3]
   10b68:	e1a03002 	mov	r3, r2
   10b6c:	e1a03103 	lsl	r3, r3, #2
   10b70:	e0833002 	add	r3, r3, r2
   10b74:	e1a03103 	lsl	r3, r3, #2
   10b78:	e59f2098 	ldr	r2, [pc, #152]	; 10c18 <vCoRoutineSchedule+0x120>
   10b7c:	e0833002 	add	r3, r3, r2
   10b80:	e50b3008 	str	r3, [fp, #-8]
   10b84:	e51b3008 	ldr	r3, [fp, #-8]
   10b88:	e5933004 	ldr	r3, [r3, #4]
   10b8c:	e5932004 	ldr	r2, [r3, #4]
   10b90:	e51b3008 	ldr	r3, [fp, #-8]
   10b94:	e5832004 	str	r2, [r3, #4]
   10b98:	e51b3008 	ldr	r3, [fp, #-8]
   10b9c:	e5932004 	ldr	r2, [r3, #4]
   10ba0:	e51b3008 	ldr	r3, [fp, #-8]
   10ba4:	e2833008 	add	r3, r3, #8
   10ba8:	e1520003 	cmp	r2, r3
   10bac:	1a000004 	bne	10bc4 <vCoRoutineSchedule+0xcc>
   10bb0:	e51b3008 	ldr	r3, [fp, #-8]
   10bb4:	e5933004 	ldr	r3, [r3, #4]
   10bb8:	e5932004 	ldr	r2, [r3, #4]
   10bbc:	e51b3008 	ldr	r3, [fp, #-8]
   10bc0:	e5832004 	str	r2, [r3, #4]
   10bc4:	e51b3008 	ldr	r3, [fp, #-8]
   10bc8:	e5933004 	ldr	r3, [r3, #4]
   10bcc:	e593300c 	ldr	r3, [r3, #12]
   10bd0:	e59f2044 	ldr	r2, [pc, #68]	; 10c1c <vCoRoutineSchedule+0x124>
   10bd4:	e5823000 	str	r3, [r2]

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
   10bd8:	e59f303c 	ldr	r3, [pc, #60]	; 10c1c <vCoRoutineSchedule+0x124>
   10bdc:	e5933000 	ldr	r3, [r3]
   10be0:	e5933000 	ldr	r3, [r3]
   10be4:	e59f2030 	ldr	r2, [pc, #48]	; 10c1c <vCoRoutineSchedule+0x124>
   10be8:	e5920000 	ldr	r0, [r2]
   10bec:	e59f2028 	ldr	r2, [pc, #40]	; 10c1c <vCoRoutineSchedule+0x124>
   10bf0:	e5922000 	ldr	r2, [r2]
   10bf4:	e5922030 	ldr	r2, [r2, #48]	; 0x30
   10bf8:	e1a01002 	mov	r1, r2
   10bfc:	e12fff33 	blx	r3

	return;
   10c00:	e320f000 	nop	{0}
   10c04:	ea000000 	b	10c0c <vCoRoutineSchedule+0x114>
			return;
   10c08:	e320f000 	nop	{0}
}
   10c0c:	e24bd004 	sub	sp, fp, #4
   10c10:	e8bd8800 	pop	{fp, pc}
   10c14:	00015d34 	andeq	r5, r1, r4, lsr sp
   10c18:	00015cc4 	andeq	r5, r1, r4, asr #25
   10c1c:	00015d30 	andeq	r5, r1, r0, lsr sp

00010c20 <prvInitialiseCoRoutineLists>:
/*-----------------------------------------------------------*/

static void prvInitialiseCoRoutineLists( void )
{
   10c20:	e92d4800 	push	{fp, lr}
   10c24:	e28db004 	add	fp, sp, #4
   10c28:	e24dd008 	sub	sp, sp, #8
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
   10c2c:	e3a03000 	mov	r3, #0
   10c30:	e50b3008 	str	r3, [fp, #-8]
   10c34:	ea00000b 	b	10c68 <prvInitialiseCoRoutineLists+0x48>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
   10c38:	e51b2008 	ldr	r2, [fp, #-8]
   10c3c:	e1a03002 	mov	r3, r2
   10c40:	e1a03103 	lsl	r3, r3, #2
   10c44:	e0833002 	add	r3, r3, r2
   10c48:	e1a03103 	lsl	r3, r3, #2
   10c4c:	e59f205c 	ldr	r2, [pc, #92]	; 10cb0 <prvInitialiseCoRoutineLists+0x90>
   10c50:	e0833002 	add	r3, r3, r2
   10c54:	e1a00003 	mov	r0, r3
   10c58:	eb00003d 	bl	10d54 <vListInitialise>
	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
   10c5c:	e51b3008 	ldr	r3, [fp, #-8]
   10c60:	e2833001 	add	r3, r3, #1
   10c64:	e50b3008 	str	r3, [fp, #-8]
   10c68:	e51b3008 	ldr	r3, [fp, #-8]
   10c6c:	e3530001 	cmp	r3, #1
   10c70:	9afffff0 	bls	10c38 <prvInitialiseCoRoutineLists+0x18>
	}

	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
   10c74:	e59f0038 	ldr	r0, [pc, #56]	; 10cb4 <prvInitialiseCoRoutineLists+0x94>
   10c78:	eb000035 	bl	10d54 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
   10c7c:	e59f0034 	ldr	r0, [pc, #52]	; 10cb8 <prvInitialiseCoRoutineLists+0x98>
   10c80:	eb000033 	bl	10d54 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
   10c84:	e59f0030 	ldr	r0, [pc, #48]	; 10cbc <prvInitialiseCoRoutineLists+0x9c>
   10c88:	eb000031 	bl	10d54 <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
   10c8c:	e59f302c 	ldr	r3, [pc, #44]	; 10cc0 <prvInitialiseCoRoutineLists+0xa0>
   10c90:	e59f201c 	ldr	r2, [pc, #28]	; 10cb4 <prvInitialiseCoRoutineLists+0x94>
   10c94:	e5832000 	str	r2, [r3]
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
   10c98:	e59f3024 	ldr	r3, [pc, #36]	; 10cc4 <prvInitialiseCoRoutineLists+0xa4>
   10c9c:	e59f2014 	ldr	r2, [pc, #20]	; 10cb8 <prvInitialiseCoRoutineLists+0x98>
   10ca0:	e5832000 	str	r2, [r3]
}
   10ca4:	e320f000 	nop	{0}
   10ca8:	e24bd004 	sub	sp, fp, #4
   10cac:	e8bd8800 	pop	{fp, pc}
   10cb0:	00015cc4 	andeq	r5, r1, r4, asr #25
   10cb4:	00015cec 	andeq	r5, r1, ip, ror #25
   10cb8:	00015d00 	andeq	r5, r1, r0, lsl #26
   10cbc:	00015d1c 	andeq	r5, r1, ip, lsl sp
   10cc0:	00015d14 	andeq	r5, r1, r4, lsl sp
   10cc4:	00015d18 	andeq	r5, r1, r8, lsl sp

00010cc8 <xCoRoutineRemoveFromEventList>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
{
   10cc8:	e92d4800 	push	{fp, lr}
   10ccc:	e28db004 	add	fp, sp, #4
   10cd0:	e24dd010 	sub	sp, sp, #16
   10cd4:	e50b0010 	str	r0, [fp, #-16]
signed portBASE_TYPE xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   10cd8:	e51b3010 	ldr	r3, [fp, #-16]
   10cdc:	e593300c 	ldr	r3, [r3, #12]
   10ce0:	e593300c 	ldr	r3, [r3, #12]
   10ce4:	e50b300c 	str	r3, [fp, #-12]
	vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
   10ce8:	e51b300c 	ldr	r3, [fp, #-12]
   10cec:	e2833018 	add	r3, r3, #24
   10cf0:	e1a00003 	mov	r0, r3
   10cf4:	eb000097 	bl	10f58 <vListRemove>
	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
   10cf8:	e51b300c 	ldr	r3, [fp, #-12]
   10cfc:	e2833018 	add	r3, r3, #24
   10d00:	e1a01003 	mov	r1, r3
   10d04:	e59f0040 	ldr	r0, [pc, #64]	; 10d4c <xCoRoutineRemoveFromEventList+0x84>
   10d08:	eb000036 	bl	10de8 <vListInsertEnd>

	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
   10d0c:	e51b300c 	ldr	r3, [fp, #-12]
   10d10:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   10d14:	e59f3034 	ldr	r3, [pc, #52]	; 10d50 <xCoRoutineRemoveFromEventList+0x88>
   10d18:	e5933000 	ldr	r3, [r3]
   10d1c:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   10d20:	e1520003 	cmp	r2, r3
   10d24:	3a000002 	bcc	10d34 <xCoRoutineRemoveFromEventList+0x6c>
	{
		xReturn = pdTRUE;
   10d28:	e3a03001 	mov	r3, #1
   10d2c:	e50b3008 	str	r3, [fp, #-8]
   10d30:	ea000001 	b	10d3c <xCoRoutineRemoveFromEventList+0x74>
	}
	else
	{
		xReturn = pdFALSE;
   10d34:	e3a03000 	mov	r3, #0
   10d38:	e50b3008 	str	r3, [fp, #-8]
	}

	return xReturn;
   10d3c:	e51b3008 	ldr	r3, [fp, #-8]
}
   10d40:	e1a00003 	mov	r0, r3
   10d44:	e24bd004 	sub	sp, fp, #4
   10d48:	e8bd8800 	pop	{fp, pc}
   10d4c:	00015d1c 	andeq	r5, r1, ip, lsl sp
   10d50:	00015d30 	andeq	r5, r1, r0, lsr sp

00010d54 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
   10d54:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   10d58:	e28db000 	add	fp, sp, #0
   10d5c:	e24dd00c 	sub	sp, sp, #12
   10d60:	e50b0008 	str	r0, [fp, #-8]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
   10d64:	e51b3008 	ldr	r3, [fp, #-8]
   10d68:	e2832008 	add	r2, r3, #8
   10d6c:	e51b3008 	ldr	r3, [fp, #-8]
   10d70:	e5832004 	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   10d74:	e51b3008 	ldr	r3, [fp, #-8]
   10d78:	e3e02000 	mvn	r2, #0
   10d7c:	e5832008 	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
   10d80:	e51b3008 	ldr	r3, [fp, #-8]
   10d84:	e2832008 	add	r2, r3, #8
   10d88:	e51b3008 	ldr	r3, [fp, #-8]
   10d8c:	e583200c 	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
   10d90:	e51b3008 	ldr	r3, [fp, #-8]
   10d94:	e2832008 	add	r2, r3, #8
   10d98:	e51b3008 	ldr	r3, [fp, #-8]
   10d9c:	e5832010 	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
   10da0:	e51b3008 	ldr	r3, [fp, #-8]
   10da4:	e3a02000 	mov	r2, #0
   10da8:	e5832000 	str	r2, [r3]
}
   10dac:	e320f000 	nop	{0}
   10db0:	e28bd000 	add	sp, fp, #0
   10db4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   10db8:	e12fff1e 	bx	lr

00010dbc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
   10dbc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   10dc0:	e28db000 	add	fp, sp, #0
   10dc4:	e24dd00c 	sub	sp, sp, #12
   10dc8:	e50b0008 	str	r0, [fp, #-8]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   10dcc:	e51b3008 	ldr	r3, [fp, #-8]
   10dd0:	e3a02000 	mov	r2, #0
   10dd4:	e5832010 	str	r2, [r3, #16]
}
   10dd8:	e320f000 	nop	{0}
   10ddc:	e28bd000 	add	sp, fp, #0
   10de0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   10de4:	e12fff1e 	bx	lr

00010de8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
   10de8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   10dec:	e28db000 	add	fp, sp, #0
   10df0:	e24dd014 	sub	sp, sp, #20
   10df4:	e50b0010 	str	r0, [fp, #-16]
   10df8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
   10dfc:	e51b3010 	ldr	r3, [fp, #-16]
   10e00:	e5933004 	ldr	r3, [r3, #4]
   10e04:	e50b3008 	str	r3, [fp, #-8]

	pxNewListItem->pxNext = pxIndex->pxNext;
   10e08:	e51b3008 	ldr	r3, [fp, #-8]
   10e0c:	e5932004 	ldr	r2, [r3, #4]
   10e10:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   10e14:	e5832004 	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
   10e18:	e51b3010 	ldr	r3, [fp, #-16]
   10e1c:	e5932004 	ldr	r2, [r3, #4]
   10e20:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   10e24:	e5832008 	str	r2, [r3, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   10e28:	e51b3008 	ldr	r3, [fp, #-8]
   10e2c:	e5933004 	ldr	r3, [r3, #4]
   10e30:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   10e34:	e5832008 	str	r2, [r3, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
   10e38:	e51b3008 	ldr	r3, [fp, #-8]
   10e3c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   10e40:	e5832004 	str	r2, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
   10e44:	e51b3010 	ldr	r3, [fp, #-16]
   10e48:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   10e4c:	e5832004 	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   10e50:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   10e54:	e51b2010 	ldr	r2, [fp, #-16]
   10e58:	e5832010 	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   10e5c:	e51b3010 	ldr	r3, [fp, #-16]
   10e60:	e5933000 	ldr	r3, [r3]
   10e64:	e2832001 	add	r2, r3, #1
   10e68:	e51b3010 	ldr	r3, [fp, #-16]
   10e6c:	e5832000 	str	r2, [r3]
}
   10e70:	e320f000 	nop	{0}
   10e74:	e28bd000 	add	sp, fp, #0
   10e78:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   10e7c:	e12fff1e 	bx	lr

00010e80 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
   10e80:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   10e84:	e28db000 	add	fp, sp, #0
   10e88:	e24dd014 	sub	sp, sp, #20
   10e8c:	e50b0010 	str	r0, [fp, #-16]
   10e90:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
   10e94:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   10e98:	e5933000 	ldr	r3, [r3]
   10e9c:	e50b300c 	str	r3, [fp, #-12]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   10ea0:	e51b300c 	ldr	r3, [fp, #-12]
   10ea4:	e3730001 	cmn	r3, #1
   10ea8:	1a000003 	bne	10ebc <vListInsert+0x3c>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   10eac:	e51b3010 	ldr	r3, [fp, #-16]
   10eb0:	e5933010 	ldr	r3, [r3, #16]
   10eb4:	e50b3008 	str	r3, [fp, #-8]
   10eb8:	ea00000c 	b	10ef0 <vListInsert+0x70>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
   10ebc:	e51b3010 	ldr	r3, [fp, #-16]
   10ec0:	e2833008 	add	r3, r3, #8
   10ec4:	e50b3008 	str	r3, [fp, #-8]
   10ec8:	ea000002 	b	10ed8 <vListInsert+0x58>
   10ecc:	e51b3008 	ldr	r3, [fp, #-8]
   10ed0:	e5933004 	ldr	r3, [r3, #4]
   10ed4:	e50b3008 	str	r3, [fp, #-8]
   10ed8:	e51b3008 	ldr	r3, [fp, #-8]
   10edc:	e5933004 	ldr	r3, [r3, #4]
   10ee0:	e5932000 	ldr	r2, [r3]
   10ee4:	e51b300c 	ldr	r3, [fp, #-12]
   10ee8:	e1520003 	cmp	r2, r3
   10eec:	9afffff6 	bls	10ecc <vListInsert+0x4c>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   10ef0:	e51b3008 	ldr	r3, [fp, #-8]
   10ef4:	e5932004 	ldr	r2, [r3, #4]
   10ef8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   10efc:	e5832004 	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   10f00:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   10f04:	e5933004 	ldr	r3, [r3, #4]
   10f08:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   10f0c:	e5832008 	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   10f10:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   10f14:	e51b2008 	ldr	r2, [fp, #-8]
   10f18:	e5832008 	str	r2, [r3, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
   10f1c:	e51b3008 	ldr	r3, [fp, #-8]
   10f20:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   10f24:	e5832004 	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   10f28:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   10f2c:	e51b2010 	ldr	r2, [fp, #-16]
   10f30:	e5832010 	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   10f34:	e51b3010 	ldr	r3, [fp, #-16]
   10f38:	e5933000 	ldr	r3, [r3]
   10f3c:	e2832001 	add	r2, r3, #1
   10f40:	e51b3010 	ldr	r3, [fp, #-16]
   10f44:	e5832000 	str	r2, [r3]
}
   10f48:	e320f000 	nop	{0}
   10f4c:	e28bd000 	add	sp, fp, #0
   10f50:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   10f54:	e12fff1e 	bx	lr

00010f58 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
   10f58:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   10f5c:	e28db000 	add	fp, sp, #0
   10f60:	e24dd014 	sub	sp, sp, #20
   10f64:	e50b0010 	str	r0, [fp, #-16]
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   10f68:	e51b3010 	ldr	r3, [fp, #-16]
   10f6c:	e5933004 	ldr	r3, [r3, #4]
   10f70:	e51b2010 	ldr	r2, [fp, #-16]
   10f74:	e5922008 	ldr	r2, [r2, #8]
   10f78:	e5832008 	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   10f7c:	e51b3010 	ldr	r3, [fp, #-16]
   10f80:	e5933008 	ldr	r3, [r3, #8]
   10f84:	e51b2010 	ldr	r2, [fp, #-16]
   10f88:	e5922004 	ldr	r2, [r2, #4]
   10f8c:	e5832004 	str	r2, [r3, #4]
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
   10f90:	e51b3010 	ldr	r3, [fp, #-16]
   10f94:	e5933010 	ldr	r3, [r3, #16]
   10f98:	e50b3008 	str	r3, [fp, #-8]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   10f9c:	e51b3008 	ldr	r3, [fp, #-8]
   10fa0:	e5932004 	ldr	r2, [r3, #4]
   10fa4:	e51b3010 	ldr	r3, [fp, #-16]
   10fa8:	e1520003 	cmp	r2, r3
   10fac:	1a000003 	bne	10fc0 <vListRemove+0x68>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   10fb0:	e51b3010 	ldr	r3, [fp, #-16]
   10fb4:	e5932008 	ldr	r2, [r3, #8]
   10fb8:	e51b3008 	ldr	r3, [fp, #-8]
   10fbc:	e5832004 	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
   10fc0:	e51b3010 	ldr	r3, [fp, #-16]
   10fc4:	e3a02000 	mov	r2, #0
   10fc8:	e5832010 	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
   10fcc:	e51b3008 	ldr	r3, [fp, #-8]
   10fd0:	e5933000 	ldr	r3, [r3]
   10fd4:	e2432001 	sub	r2, r3, #1
   10fd8:	e51b3008 	ldr	r3, [fp, #-8]
   10fdc:	e5832000 	str	r2, [r3]
}
   10fe0:	e320f000 	nop	{0}
   10fe4:	e28bd000 	add	sp, fp, #0
   10fe8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   10fec:	e12fff1e 	bx	lr

00010ff0 <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
   10ff0:	e92d4800 	push	{fp, lr}
   10ff4:	e28db004 	add	fp, sp, #4
   10ff8:	e24dd008 	sub	sp, sp, #8
   10ffc:	e50b0008 	str	r0, [fp, #-8]
   11000:	e50b100c 	str	r1, [fp, #-12]
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
   11004:	ebfffd4d 	bl	10540 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   11008:	e51b3008 	ldr	r3, [fp, #-8]
   1100c:	e5932000 	ldr	r2, [r3]
   11010:	e51b3008 	ldr	r3, [fp, #-8]
   11014:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
   11018:	e51b1008 	ldr	r1, [fp, #-8]
   1101c:	e5911040 	ldr	r1, [r1, #64]	; 0x40
   11020:	e0030391 	mul	r3, r1, r3
   11024:	e0822003 	add	r2, r2, r3
   11028:	e51b3008 	ldr	r3, [fp, #-8]
   1102c:	e5832004 	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
   11030:	e51b3008 	ldr	r3, [fp, #-8]
   11034:	e3a02000 	mov	r2, #0
   11038:	e5832038 	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   1103c:	e51b3008 	ldr	r3, [fp, #-8]
   11040:	e5932000 	ldr	r2, [r3]
   11044:	e51b3008 	ldr	r3, [fp, #-8]
   11048:	e5832008 	str	r2, [r3, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
   1104c:	e51b3008 	ldr	r3, [fp, #-8]
   11050:	e5932000 	ldr	r2, [r3]
   11054:	e51b3008 	ldr	r3, [fp, #-8]
   11058:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
   1105c:	e2433001 	sub	r3, r3, #1
   11060:	e51b1008 	ldr	r1, [fp, #-8]
   11064:	e5911040 	ldr	r1, [r1, #64]	; 0x40
   11068:	e0030391 	mul	r3, r1, r3
   1106c:	e0822003 	add	r2, r2, r3
   11070:	e51b3008 	ldr	r3, [fp, #-8]
   11074:	e583200c 	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
   11078:	e51b3008 	ldr	r3, [fp, #-8]
   1107c:	e3e02000 	mvn	r2, #0
   11080:	e5832044 	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
   11084:	e51b3008 	ldr	r3, [fp, #-8]
   11088:	e3e02000 	mvn	r2, #0
   1108c:	e5832048 	str	r2, [r3, #72]	; 0x48

		if( xNewQueue == pdFALSE )
   11090:	e51b300c 	ldr	r3, [fp, #-12]
   11094:	e3530000 	cmp	r3, #0
   11098:	1a00000c 	bne	110d0 <xQueueGenericReset+0xe0>
			/* If there are tasks blocked waiting to read from the queue, then 
			the tasks will remain blocked as after this function exits the queue 
			will still be empty.  If there are tasks blocked waiting to	write to 
			the queue, then one should be unblocked as after this function exits 
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1109c:	e51b3008 	ldr	r3, [fp, #-8]
   110a0:	e5933010 	ldr	r3, [r3, #16]
   110a4:	e3530000 	cmp	r3, #0
   110a8:	0a000010 	beq	110f0 <xQueueGenericReset+0x100>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   110ac:	e51b3008 	ldr	r3, [fp, #-8]
   110b0:	e2833010 	add	r3, r3, #16
   110b4:	e1a00003 	mov	r0, r3
   110b8:	eb00075f 	bl	12e3c <xTaskRemoveFromEventList>
   110bc:	e1a03000 	mov	r3, r0
   110c0:	e3530001 	cmp	r3, #1
   110c4:	1a000009 	bne	110f0 <xQueueGenericReset+0x100>
				{
					portYIELD_WITHIN_API();
   110c8:	ef000000 	svc	0x00000000
   110cc:	ea000007 	b	110f0 <xQueueGenericReset+0x100>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   110d0:	e51b3008 	ldr	r3, [fp, #-8]
   110d4:	e2833010 	add	r3, r3, #16
   110d8:	e1a00003 	mov	r0, r3
   110dc:	ebffff1c 	bl	10d54 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );		
   110e0:	e51b3008 	ldr	r3, [fp, #-8]
   110e4:	e2833024 	add	r3, r3, #36	; 0x24
   110e8:	e1a00003 	mov	r0, r3
   110ec:	ebffff18 	bl	10d54 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
   110f0:	ebfffd23 	bl	10584 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
   110f4:	e3a03001 	mov	r3, #1
}
   110f8:	e1a00003 	mov	r0, r3
   110fc:	e24bd004 	sub	sp, fp, #4
   11100:	e8bd8800 	pop	{fp, pc}

00011104 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
   11104:	e92d4800 	push	{fp, lr}
   11108:	e28db004 	add	fp, sp, #4
   1110c:	e24dd020 	sub	sp, sp, #32
   11110:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   11114:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   11118:	e1a03002 	mov	r3, r2
   1111c:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
   11120:	e3a03000 	mov	r3, #0
   11124:	e50b3008 	str	r3, [fp, #-8]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
   11128:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1112c:	e3530000 	cmp	r3, #0
   11130:	0a000021 	beq	111bc <xQueueGenericCreate+0xb8>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
   11134:	e3a0004c 	mov	r0, #76	; 0x4c
   11138:	eb000f39 	bl	14e24 <pvPortMalloc>
   1113c:	e50b000c 	str	r0, [fp, #-12]
		if( pxNewQueue != NULL )
   11140:	e51b300c 	ldr	r3, [fp, #-12]
   11144:	e3530000 	cmp	r3, #0
   11148:	0a00001b 	beq	111bc <xQueueGenericCreate+0xb8>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
   1114c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11150:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   11154:	e0030392 	mul	r3, r2, r3
   11158:	e2833001 	add	r3, r3, #1
   1115c:	e50b3010 	str	r3, [fp, #-16]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
   11160:	e51b0010 	ldr	r0, [fp, #-16]
   11164:	eb000f2e 	bl	14e24 <pvPortMalloc>
   11168:	e1a02000 	mov	r2, r0
   1116c:	e51b300c 	ldr	r3, [fp, #-12]
   11170:	e5832000 	str	r2, [r3]
			if( pxNewQueue->pcHead != NULL )
   11174:	e51b300c 	ldr	r3, [fp, #-12]
   11178:	e5933000 	ldr	r3, [r3]
   1117c:	e3530000 	cmp	r3, #0
   11180:	0a00000b 	beq	111b4 <xQueueGenericCreate+0xb0>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
   11184:	e51b300c 	ldr	r3, [fp, #-12]
   11188:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   1118c:	e583203c 	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
   11190:	e51b300c 	ldr	r3, [fp, #-12]
   11194:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   11198:	e5832040 	str	r2, [r3, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
   1119c:	e3a01001 	mov	r1, #1
   111a0:	e51b000c 	ldr	r0, [fp, #-12]
   111a4:	ebffff91 	bl	10ff0 <xQueueGenericReset>
					pxNewQueue->ucQueueType = ucQueueType;
				}
				#endif /* configUSE_TRACE_FACILITY */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
   111a8:	e51b300c 	ldr	r3, [fp, #-12]
   111ac:	e50b3008 	str	r3, [fp, #-8]
   111b0:	ea000001 	b	111bc <xQueueGenericCreate+0xb8>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
   111b4:	e51b000c 	ldr	r0, [fp, #-12]
   111b8:	eb000f8b 	bl	14fec <vPortFree>
		}
	}

	configASSERT( xReturn );

	return xReturn;
   111bc:	e51b3008 	ldr	r3, [fp, #-8]
}
   111c0:	e1a00003 	mov	r0, r3
   111c4:	e24bd004 	sub	sp, fp, #4
   111c8:	e8bd8800 	pop	{fp, pc}

000111cc <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
   111cc:	e92d4800 	push	{fp, lr}
   111d0:	e28db004 	add	fp, sp, #4
   111d4:	e24dd020 	sub	sp, sp, #32
   111d8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   111dc:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   111e0:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
   111e4:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
   111e8:	e3a03000 	mov	r3, #0
   111ec:	e50b3008 	str	r3, [fp, #-8]
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   111f0:	ebfffcd2 	bl	10540 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   111f4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   111f8:	e5932038 	ldr	r2, [r3, #56]	; 0x38
   111fc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11200:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
   11204:	e1520003 	cmp	r2, r3
   11208:	2a000012 	bcs	11258 <xQueueGenericSend+0x8c>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   1120c:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
   11210:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
   11214:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   11218:	eb00016a 	bl	117c8 <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1121c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11220:	e5933024 	ldr	r3, [r3, #36]	; 0x24
   11224:	e3530000 	cmp	r3, #0
   11228:	0a000007 	beq	1124c <xQueueGenericSend+0x80>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
   1122c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11230:	e2833024 	add	r3, r3, #36	; 0x24
   11234:	e1a00003 	mov	r0, r3
   11238:	eb0006ff 	bl	12e3c <xTaskRemoveFromEventList>
   1123c:	e1a03000 	mov	r3, r0
   11240:	e3530001 	cmp	r3, #1
   11244:	1a000000 	bne	1124c <xQueueGenericSend+0x80>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
   11248:	ef000000 	svc	0x00000000
					}
				}

				taskEXIT_CRITICAL();
   1124c:	ebfffccc 	bl	10584 <vPortExitCritical>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
   11250:	e3a03001 	mov	r3, #1
   11254:	ea000042 	b	11364 <xQueueGenericSend+0x198>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   11258:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   1125c:	e3530000 	cmp	r3, #0
   11260:	1a000002 	bne	11270 <xQueueGenericSend+0xa4>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   11264:	ebfffcc6 	bl	10584 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
   11268:	e3a03000 	mov	r3, #0
   1126c:	ea00003c 	b	11364 <xQueueGenericSend+0x198>
				}
				else if( xEntryTimeSet == pdFALSE )
   11270:	e51b3008 	ldr	r3, [fp, #-8]
   11274:	e3530000 	cmp	r3, #0
   11278:	1a000004 	bne	11290 <xQueueGenericSend+0xc4>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   1127c:	e24b3010 	sub	r3, fp, #16
   11280:	e1a00003 	mov	r0, r3
   11284:	eb000732 	bl	12f54 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
   11288:	e3a03001 	mov	r3, #1
   1128c:	e50b3008 	str	r3, [fp, #-8]
				}
			}
		}
		taskEXIT_CRITICAL();
   11290:	ebfffcbb 	bl	10584 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   11294:	eb000512 	bl	126e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
   11298:	ebfffca8 	bl	10540 <vPortEnterCritical>
   1129c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   112a0:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   112a4:	e3730001 	cmn	r3, #1
   112a8:	1a000002 	bne	112b8 <xQueueGenericSend+0xec>
   112ac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   112b0:	e3a02000 	mov	r2, #0
   112b4:	e5832044 	str	r2, [r3, #68]	; 0x44
   112b8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   112bc:	e5933048 	ldr	r3, [r3, #72]	; 0x48
   112c0:	e3730001 	cmn	r3, #1
   112c4:	1a000002 	bne	112d4 <xQueueGenericSend+0x108>
   112c8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   112cc:	e3a02000 	mov	r2, #0
   112d0:	e5832048 	str	r2, [r3, #72]	; 0x48
   112d4:	ebfffcaa 	bl	10584 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   112d8:	e24b2020 	sub	r2, fp, #32
   112dc:	e24b3010 	sub	r3, fp, #16
   112e0:	e1a01002 	mov	r1, r2
   112e4:	e1a00003 	mov	r0, r3
   112e8:	eb00072b 	bl	12f9c <xTaskCheckForTimeOut>
   112ec:	e1a03000 	mov	r3, r0
   112f0:	e3530000 	cmp	r3, #0
   112f4:	1a000016 	bne	11354 <xQueueGenericSend+0x188>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   112f8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   112fc:	eb000202 	bl	11b0c <prvIsQueueFull>
   11300:	e1a03000 	mov	r3, r0
   11304:	e3530000 	cmp	r3, #0
   11308:	0a00000d 	beq	11344 <xQueueGenericSend+0x178>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   1130c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11310:	e2833010 	add	r3, r3, #16
   11314:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   11318:	e1a01002 	mov	r1, r2
   1131c:	e1a00003 	mov	r0, r3
   11320:	eb00069e 	bl	12da0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   11324:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   11328:	eb000195 	bl	11984 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   1132c:	eb0004f8 	bl	12714 <xTaskResumeAll>
   11330:	e1a03000 	mov	r3, r0
   11334:	e3530000 	cmp	r3, #0
   11338:	1affffac 	bne	111f0 <xQueueGenericSend+0x24>
				{
					portYIELD_WITHIN_API();
   1133c:	ef000000 	svc	0x00000000
   11340:	eaffffaa 	b	111f0 <xQueueGenericSend+0x24>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   11344:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   11348:	eb00018d 	bl	11984 <prvUnlockQueue>
				( void ) xTaskResumeAll();
   1134c:	eb0004f0 	bl	12714 <xTaskResumeAll>
   11350:	eaffffa6 	b	111f0 <xQueueGenericSend+0x24>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   11354:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   11358:	eb000189 	bl	11984 <prvUnlockQueue>
			( void ) xTaskResumeAll();
   1135c:	eb0004ec 	bl	12714 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
   11360:	e3a03000 	mov	r3, #0
		}
	}
}
   11364:	e1a00003 	mov	r0, r3
   11368:	e24bd004 	sub	sp, fp, #4
   1136c:	e8bd8800 	pop	{fp, pc}

00011370 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
   11370:	e92d4800 	push	{fp, lr}
   11374:	e28db004 	add	fp, sp, #4
   11378:	e24dd018 	sub	sp, sp, #24
   1137c:	e50b0010 	str	r0, [fp, #-16]
   11380:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   11384:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
   11388:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   1138c:	e3a03000 	mov	r3, #0
   11390:	e50b300c 	str	r3, [fp, #-12]
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   11394:	e51b3010 	ldr	r3, [fp, #-16]
   11398:	e5932038 	ldr	r2, [r3, #56]	; 0x38
   1139c:	e51b3010 	ldr	r3, [fp, #-16]
   113a0:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
   113a4:	e1520003 	cmp	r2, r3
   113a8:	2a000021 	bcs	11434 <xQueueGenericSendFromISR+0xc4>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   113ac:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   113b0:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   113b4:	e51b0010 	ldr	r0, [fp, #-16]
   113b8:	eb000102 	bl	117c8 <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
   113bc:	e51b3010 	ldr	r3, [fp, #-16]
   113c0:	e5933048 	ldr	r3, [r3, #72]	; 0x48
   113c4:	e3730001 	cmn	r3, #1
   113c8:	1a000011 	bne	11414 <xQueueGenericSendFromISR+0xa4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   113cc:	e51b3010 	ldr	r3, [fp, #-16]
   113d0:	e5933024 	ldr	r3, [r3, #36]	; 0x24
   113d4:	e3530000 	cmp	r3, #0
   113d8:	0a000012 	beq	11428 <xQueueGenericSendFromISR+0xb8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   113dc:	e51b3010 	ldr	r3, [fp, #-16]
   113e0:	e2833024 	add	r3, r3, #36	; 0x24
   113e4:	e1a00003 	mov	r0, r3
   113e8:	eb000693 	bl	12e3c <xTaskRemoveFromEventList>
   113ec:	e1a03000 	mov	r3, r0
   113f0:	e3530000 	cmp	r3, #0
   113f4:	0a00000b 	beq	11428 <xQueueGenericSendFromISR+0xb8>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						if( pxHigherPriorityTaskWoken != NULL )
   113f8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   113fc:	e3530000 	cmp	r3, #0
   11400:	0a000008 	beq	11428 <xQueueGenericSendFromISR+0xb8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
   11404:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11408:	e3a02001 	mov	r2, #1
   1140c:	e5832000 	str	r2, [r3]
   11410:	ea000004 	b	11428 <xQueueGenericSendFromISR+0xb8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
   11414:	e51b3010 	ldr	r3, [fp, #-16]
   11418:	e5933048 	ldr	r3, [r3, #72]	; 0x48
   1141c:	e2832001 	add	r2, r3, #1
   11420:	e51b3010 	ldr	r3, [fp, #-16]
   11424:	e5832048 	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
   11428:	e3a03001 	mov	r3, #1
   1142c:	e50b3008 	str	r3, [fp, #-8]
   11430:	ea000001 	b	1143c <xQueueGenericSendFromISR+0xcc>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
   11434:	e3a03000 	mov	r3, #0
   11438:	e50b3008 	str	r3, [fp, #-8]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
   1143c:	e51b3008 	ldr	r3, [fp, #-8]
}
   11440:	e1a00003 	mov	r0, r3
   11444:	e24bd004 	sub	sp, fp, #4
   11448:	e8bd8800 	pop	{fp, pc}

0001144c <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
   1144c:	e92d4800 	push	{fp, lr}
   11450:	e28db004 	add	fp, sp, #4
   11454:	e24dd020 	sub	sp, sp, #32
   11458:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   1145c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   11460:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
   11464:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
   11468:	e3a03000 	mov	r3, #0
   1146c:	e50b3008 	str	r3, [fp, #-8]
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   11470:	ebfffc32 	bl	10540 <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
   11474:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11478:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   1147c:	e3530000 	cmp	r3, #0
   11480:	0a00002c 	beq	11538 <xQueueGenericReceive+0xec>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
   11484:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11488:	e593300c 	ldr	r3, [r3, #12]
   1148c:	e50b300c 	str	r3, [fp, #-12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
   11490:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
   11494:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   11498:	eb000115 	bl	118f4 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
   1149c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   114a0:	e3530000 	cmp	r3, #0
   114a4:	1a000011 	bne	114f0 <xQueueGenericReceive+0xa4>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
   114a8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   114ac:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   114b0:	e2432001 	sub	r2, r3, #1
   114b4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   114b8:	e5832038 	str	r2, [r3, #56]	; 0x38
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   114bc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   114c0:	e5933010 	ldr	r3, [r3, #16]
   114c4:	e3530000 	cmp	r3, #0
   114c8:	0a000017 	beq	1152c <xQueueGenericReceive+0xe0>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   114cc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   114d0:	e2833010 	add	r3, r3, #16
   114d4:	e1a00003 	mov	r0, r3
   114d8:	eb000657 	bl	12e3c <xTaskRemoveFromEventList>
   114dc:	e1a03000 	mov	r3, r0
   114e0:	e3530001 	cmp	r3, #1
   114e4:	1a000010 	bne	1152c <xQueueGenericReceive+0xe0>
						{
							portYIELD_WITHIN_API();
   114e8:	ef000000 	svc	0x00000000
   114ec:	ea00000e 	b	1152c <xQueueGenericReceive+0xe0>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
   114f0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   114f4:	e51b200c 	ldr	r2, [fp, #-12]
   114f8:	e583200c 	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   114fc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11500:	e5933024 	ldr	r3, [r3, #36]	; 0x24
   11504:	e3530000 	cmp	r3, #0
   11508:	0a000007 	beq	1152c <xQueueGenericReceive+0xe0>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1150c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11510:	e2833024 	add	r3, r3, #36	; 0x24
   11514:	e1a00003 	mov	r0, r3
   11518:	eb000647 	bl	12e3c <xTaskRemoveFromEventList>
   1151c:	e1a03000 	mov	r3, r0
   11520:	e3530000 	cmp	r3, #0
   11524:	0a000000 	beq	1152c <xQueueGenericReceive+0xe0>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
   11528:	ef000000 	svc	0x00000000
						}
					}
				}

				taskEXIT_CRITICAL();
   1152c:	ebfffc14 	bl	10584 <vPortExitCritical>
				return pdPASS;
   11530:	e3a03001 	mov	r3, #1
   11534:	ea000042 	b	11644 <xQueueGenericReceive+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   11538:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   1153c:	e3530000 	cmp	r3, #0
   11540:	1a000002 	bne	11550 <xQueueGenericReceive+0x104>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   11544:	ebfffc0e 	bl	10584 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
   11548:	e3a03000 	mov	r3, #0
   1154c:	ea00003c 	b	11644 <xQueueGenericReceive+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
   11550:	e51b3008 	ldr	r3, [fp, #-8]
   11554:	e3530000 	cmp	r3, #0
   11558:	1a000004 	bne	11570 <xQueueGenericReceive+0x124>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   1155c:	e24b3014 	sub	r3, fp, #20
   11560:	e1a00003 	mov	r0, r3
   11564:	eb00067a 	bl	12f54 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
   11568:	e3a03001 	mov	r3, #1
   1156c:	e50b3008 	str	r3, [fp, #-8]
				}
			}
		}
		taskEXIT_CRITICAL();
   11570:	ebfffc03 	bl	10584 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   11574:	eb00045a 	bl	126e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
   11578:	ebfffbf0 	bl	10540 <vPortEnterCritical>
   1157c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11580:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   11584:	e3730001 	cmn	r3, #1
   11588:	1a000002 	bne	11598 <xQueueGenericReceive+0x14c>
   1158c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11590:	e3a02000 	mov	r2, #0
   11594:	e5832044 	str	r2, [r3, #68]	; 0x44
   11598:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1159c:	e5933048 	ldr	r3, [r3, #72]	; 0x48
   115a0:	e3730001 	cmn	r3, #1
   115a4:	1a000002 	bne	115b4 <xQueueGenericReceive+0x168>
   115a8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   115ac:	e3a02000 	mov	r2, #0
   115b0:	e5832048 	str	r2, [r3, #72]	; 0x48
   115b4:	ebfffbf2 	bl	10584 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   115b8:	e24b2020 	sub	r2, fp, #32
   115bc:	e24b3014 	sub	r3, fp, #20
   115c0:	e1a01002 	mov	r1, r2
   115c4:	e1a00003 	mov	r0, r3
   115c8:	eb000673 	bl	12f9c <xTaskCheckForTimeOut>
   115cc:	e1a03000 	mov	r3, r0
   115d0:	e3530000 	cmp	r3, #0
   115d4:	1a000016 	bne	11634 <xQueueGenericReceive+0x1e8>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   115d8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   115dc:	eb000129 	bl	11a88 <prvIsQueueEmpty>
   115e0:	e1a03000 	mov	r3, r0
   115e4:	e3530000 	cmp	r3, #0
   115e8:	0a00000d 	beq	11624 <xQueueGenericReceive+0x1d8>
						portEXIT_CRITICAL();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   115ec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   115f0:	e2833024 	add	r3, r3, #36	; 0x24
   115f4:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   115f8:	e1a01002 	mov	r1, r2
   115fc:	e1a00003 	mov	r0, r3
   11600:	eb0005e6 	bl	12da0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
   11604:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   11608:	eb0000dd 	bl	11984 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
   1160c:	eb000440 	bl	12714 <xTaskResumeAll>
   11610:	e1a03000 	mov	r3, r0
   11614:	e3530000 	cmp	r3, #0
   11618:	1affff94 	bne	11470 <xQueueGenericReceive+0x24>
				{
					portYIELD_WITHIN_API();
   1161c:	ef000000 	svc	0x00000000
   11620:	eaffff92 	b	11470 <xQueueGenericReceive+0x24>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   11624:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   11628:	eb0000d5 	bl	11984 <prvUnlockQueue>
				( void ) xTaskResumeAll();
   1162c:	eb000438 	bl	12714 <xTaskResumeAll>
   11630:	eaffff8e 	b	11470 <xQueueGenericReceive+0x24>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
   11634:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   11638:	eb0000d1 	bl	11984 <prvUnlockQueue>
			( void ) xTaskResumeAll();
   1163c:	eb000434 	bl	12714 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
   11640:	e3a03000 	mov	r3, #0
		}
	}
}
   11644:	e1a00003 	mov	r0, r3
   11648:	e24bd004 	sub	sp, fp, #4
   1164c:	e8bd8800 	pop	{fp, pc}

00011650 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxHigherPriorityTaskWoken )
{
   11650:	e92d4800 	push	{fp, lr}
   11654:	e28db004 	add	fp, sp, #4
   11658:	e24dd018 	sub	sp, sp, #24
   1165c:	e50b0010 	str	r0, [fp, #-16]
   11660:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   11664:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
unsigned portBASE_TYPE uxSavedInterruptStatus;

	configASSERT( pxQueue );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   11668:	e3a03000 	mov	r3, #0
   1166c:	e50b300c 	str	r3, [fp, #-12]
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
   11670:	e51b3010 	ldr	r3, [fp, #-16]
   11674:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   11678:	e3530000 	cmp	r3, #0
   1167c:	0a000025 	beq	11718 <xQueueReceiveFromISR+0xc8>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
   11680:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   11684:	e51b0010 	ldr	r0, [fp, #-16]
   11688:	eb000099 	bl	118f4 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
   1168c:	e51b3010 	ldr	r3, [fp, #-16]
   11690:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   11694:	e2432001 	sub	r2, r3, #1
   11698:	e51b3010 	ldr	r3, [fp, #-16]
   1169c:	e5832038 	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
   116a0:	e51b3010 	ldr	r3, [fp, #-16]
   116a4:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   116a8:	e3730001 	cmn	r3, #1
   116ac:	1a000011 	bne	116f8 <xQueueReceiveFromISR+0xa8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   116b0:	e51b3010 	ldr	r3, [fp, #-16]
   116b4:	e5933010 	ldr	r3, [r3, #16]
   116b8:	e3530000 	cmp	r3, #0
   116bc:	0a000012 	beq	1170c <xQueueReceiveFromISR+0xbc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   116c0:	e51b3010 	ldr	r3, [fp, #-16]
   116c4:	e2833010 	add	r3, r3, #16
   116c8:	e1a00003 	mov	r0, r3
   116cc:	eb0005da 	bl	12e3c <xTaskRemoveFromEventList>
   116d0:	e1a03000 	mov	r3, r0
   116d4:	e3530000 	cmp	r3, #0
   116d8:	0a00000b 	beq	1170c <xQueueReceiveFromISR+0xbc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
   116dc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   116e0:	e3530000 	cmp	r3, #0
   116e4:	0a000008 	beq	1170c <xQueueReceiveFromISR+0xbc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
   116e8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   116ec:	e3a02001 	mov	r2, #1
   116f0:	e5832000 	str	r2, [r3]
   116f4:	ea000004 	b	1170c <xQueueReceiveFromISR+0xbc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
   116f8:	e51b3010 	ldr	r3, [fp, #-16]
   116fc:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   11700:	e2832001 	add	r2, r3, #1
   11704:	e51b3010 	ldr	r3, [fp, #-16]
   11708:	e5832044 	str	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
   1170c:	e3a03001 	mov	r3, #1
   11710:	e50b3008 	str	r3, [fp, #-8]
   11714:	ea000001 	b	11720 <xQueueReceiveFromISR+0xd0>
		}
		else
		{
			xReturn = pdFAIL;
   11718:	e3a03000 	mov	r3, #0
   1171c:	e50b3008 	str	r3, [fp, #-8]
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
   11720:	e51b3008 	ldr	r3, [fp, #-8]
}
   11724:	e1a00003 	mov	r0, r3
   11728:	e24bd004 	sub	sp, fp, #4
   1172c:	e8bd8800 	pop	{fp, pc}

00011730 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
   11730:	e92d4800 	push	{fp, lr}
   11734:	e28db004 	add	fp, sp, #4
   11738:	e24dd010 	sub	sp, sp, #16
   1173c:	e50b0010 	str	r0, [fp, #-16]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
   11740:	ebfffb7e 	bl	10540 <vPortEnterCritical>
		uxReturn = pxQueue->uxMessagesWaiting;
   11744:	e51b3010 	ldr	r3, [fp, #-16]
   11748:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   1174c:	e50b3008 	str	r3, [fp, #-8]
	taskEXIT_CRITICAL();
   11750:	ebfffb8b 	bl	10584 <vPortExitCritical>

	return uxReturn;
   11754:	e51b3008 	ldr	r3, [fp, #-8]
}
   11758:	e1a00003 	mov	r0, r3
   1175c:	e24bd004 	sub	sp, fp, #4
   11760:	e8bd8800 	pop	{fp, pc}

00011764 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
{
   11764:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   11768:	e28db000 	add	fp, sp, #0
   1176c:	e24dd014 	sub	sp, sp, #20
   11770:	e50b0010 	str	r0, [fp, #-16]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
   11774:	e51b3010 	ldr	r3, [fp, #-16]
   11778:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   1177c:	e50b3008 	str	r3, [fp, #-8]

	return uxReturn;
   11780:	e51b3008 	ldr	r3, [fp, #-8]
}
   11784:	e1a00003 	mov	r0, r3
   11788:	e28bd000 	add	sp, fp, #0
   1178c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   11790:	e12fff1e 	bx	lr

00011794 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
   11794:	e92d4800 	push	{fp, lr}
   11798:	e28db004 	add	fp, sp, #4
   1179c:	e24dd008 	sub	sp, sp, #8
   117a0:	e50b0008 	str	r0, [fp, #-8]
	configASSERT( pxQueue );

	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
	vPortFree( pxQueue->pcHead );
   117a4:	e51b3008 	ldr	r3, [fp, #-8]
   117a8:	e5933000 	ldr	r3, [r3]
   117ac:	e1a00003 	mov	r0, r3
   117b0:	eb000e0d 	bl	14fec <vPortFree>
	vPortFree( pxQueue );
   117b4:	e51b0008 	ldr	r0, [fp, #-8]
   117b8:	eb000e0b 	bl	14fec <vPortFree>
}
   117bc:	e320f000 	nop	{0}
   117c0:	e24bd004 	sub	sp, fp, #4
   117c4:	e8bd8800 	pop	{fp, pc}

000117c8 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
   117c8:	e92d4800 	push	{fp, lr}
   117cc:	e28db004 	add	fp, sp, #4
   117d0:	e24dd010 	sub	sp, sp, #16
   117d4:	e50b0008 	str	r0, [fp, #-8]
   117d8:	e50b100c 	str	r1, [fp, #-12]
   117dc:	e50b2010 	str	r2, [fp, #-16]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
   117e0:	e51b3008 	ldr	r3, [fp, #-8]
   117e4:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   117e8:	e3530000 	cmp	r3, #0
   117ec:	0a000038 	beq	118d4 <prvCopyDataToQueue+0x10c>
				pxQueue->pxMutexHolder = NULL;
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
   117f0:	e51b3010 	ldr	r3, [fp, #-16]
   117f4:	e3530000 	cmp	r3, #0
   117f8:	1a000018 	bne	11860 <prvCopyDataToQueue+0x98>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   117fc:	e51b3008 	ldr	r3, [fp, #-8]
   11800:	e5930008 	ldr	r0, [r3, #8]
   11804:	e51b3008 	ldr	r3, [fp, #-8]
   11808:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   1180c:	e1a02003 	mov	r2, r3
   11810:	e51b100c 	ldr	r1, [fp, #-12]
   11814:	eb001042 	bl	15924 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   11818:	e51b3008 	ldr	r3, [fp, #-8]
   1181c:	e5932008 	ldr	r2, [r3, #8]
   11820:	e51b3008 	ldr	r3, [fp, #-8]
   11824:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   11828:	e0822003 	add	r2, r2, r3
   1182c:	e51b3008 	ldr	r3, [fp, #-8]
   11830:	e5832008 	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
   11834:	e51b3008 	ldr	r3, [fp, #-8]
   11838:	e5932008 	ldr	r2, [r3, #8]
   1183c:	e51b3008 	ldr	r3, [fp, #-8]
   11840:	e5933004 	ldr	r3, [r3, #4]
   11844:	e1520003 	cmp	r2, r3
   11848:	3a000021 	bcc	118d4 <prvCopyDataToQueue+0x10c>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   1184c:	e51b3008 	ldr	r3, [fp, #-8]
   11850:	e5932000 	ldr	r2, [r3]
   11854:	e51b3008 	ldr	r3, [fp, #-8]
   11858:	e5832008 	str	r2, [r3, #8]
   1185c:	ea00001c 	b	118d4 <prvCopyDataToQueue+0x10c>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   11860:	e51b3008 	ldr	r3, [fp, #-8]
   11864:	e593000c 	ldr	r0, [r3, #12]
   11868:	e51b3008 	ldr	r3, [fp, #-8]
   1186c:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   11870:	e1a02003 	mov	r2, r3
   11874:	e51b100c 	ldr	r1, [fp, #-12]
   11878:	eb001029 	bl	15924 <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
   1187c:	e51b3008 	ldr	r3, [fp, #-8]
   11880:	e593200c 	ldr	r2, [r3, #12]
   11884:	e51b3008 	ldr	r3, [fp, #-8]
   11888:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   1188c:	e2633000 	rsb	r3, r3, #0
   11890:	e0822003 	add	r2, r2, r3
   11894:	e51b3008 	ldr	r3, [fp, #-8]
   11898:	e583200c 	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
   1189c:	e51b3008 	ldr	r3, [fp, #-8]
   118a0:	e593200c 	ldr	r2, [r3, #12]
   118a4:	e51b3008 	ldr	r3, [fp, #-8]
   118a8:	e5933000 	ldr	r3, [r3]
   118ac:	e1520003 	cmp	r2, r3
   118b0:	2a000007 	bcs	118d4 <prvCopyDataToQueue+0x10c>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   118b4:	e51b3008 	ldr	r3, [fp, #-8]
   118b8:	e5932004 	ldr	r2, [r3, #4]
   118bc:	e51b3008 	ldr	r3, [fp, #-8]
   118c0:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   118c4:	e2633000 	rsb	r3, r3, #0
   118c8:	e0822003 	add	r2, r2, r3
   118cc:	e51b3008 	ldr	r3, [fp, #-8]
   118d0:	e583200c 	str	r2, [r3, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
   118d4:	e51b3008 	ldr	r3, [fp, #-8]
   118d8:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   118dc:	e2832001 	add	r2, r3, #1
   118e0:	e51b3008 	ldr	r3, [fp, #-8]
   118e4:	e5832038 	str	r2, [r3, #56]	; 0x38
}
   118e8:	e320f000 	nop	{0}
   118ec:	e24bd004 	sub	sp, fp, #4
   118f0:	e8bd8800 	pop	{fp, pc}

000118f4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
   118f4:	e92d4800 	push	{fp, lr}
   118f8:	e28db004 	add	fp, sp, #4
   118fc:	e24dd008 	sub	sp, sp, #8
   11900:	e50b0008 	str	r0, [fp, #-8]
   11904:	e50b100c 	str	r1, [fp, #-12]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
   11908:	e51b3008 	ldr	r3, [fp, #-8]
   1190c:	e5933000 	ldr	r3, [r3]
   11910:	e3530000 	cmp	r3, #0
   11914:	0a000017 	beq	11978 <prvCopyDataFromQueue+0x84>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
   11918:	e51b3008 	ldr	r3, [fp, #-8]
   1191c:	e593200c 	ldr	r2, [r3, #12]
   11920:	e51b3008 	ldr	r3, [fp, #-8]
   11924:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   11928:	e0822003 	add	r2, r2, r3
   1192c:	e51b3008 	ldr	r3, [fp, #-8]
   11930:	e583200c 	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
   11934:	e51b3008 	ldr	r3, [fp, #-8]
   11938:	e593200c 	ldr	r2, [r3, #12]
   1193c:	e51b3008 	ldr	r3, [fp, #-8]
   11940:	e5933004 	ldr	r3, [r3, #4]
   11944:	e1520003 	cmp	r2, r3
   11948:	3a000003 	bcc	1195c <prvCopyDataFromQueue+0x68>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
   1194c:	e51b3008 	ldr	r3, [fp, #-8]
   11950:	e5932000 	ldr	r2, [r3]
   11954:	e51b3008 	ldr	r3, [fp, #-8]
   11958:	e583200c 	str	r2, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
   1195c:	e51b3008 	ldr	r3, [fp, #-8]
   11960:	e593100c 	ldr	r1, [r3, #12]
   11964:	e51b3008 	ldr	r3, [fp, #-8]
   11968:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   1196c:	e1a02003 	mov	r2, r3
   11970:	e51b000c 	ldr	r0, [fp, #-12]
   11974:	eb000fea 	bl	15924 <memcpy>
	}
}
   11978:	e320f000 	nop	{0}
   1197c:	e24bd004 	sub	sp, fp, #4
   11980:	e8bd8800 	pop	{fp, pc}

00011984 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
   11984:	e92d4800 	push	{fp, lr}
   11988:	e28db004 	add	fp, sp, #4
   1198c:	e24dd008 	sub	sp, sp, #8
   11990:	e50b0008 	str	r0, [fp, #-8]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   11994:	ebfffae9 	bl	10540 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   11998:	ea000010 	b	119e0 <prvUnlockQueue+0x5c>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1199c:	e51b3008 	ldr	r3, [fp, #-8]
   119a0:	e5933024 	ldr	r3, [r3, #36]	; 0x24
   119a4:	e3530000 	cmp	r3, #0
   119a8:	0a000011 	beq	119f4 <prvUnlockQueue+0x70>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   119ac:	e51b3008 	ldr	r3, [fp, #-8]
   119b0:	e2833024 	add	r3, r3, #36	; 0x24
   119b4:	e1a00003 	mov	r0, r3
   119b8:	eb00051f 	bl	12e3c <xTaskRemoveFromEventList>
   119bc:	e1a03000 	mov	r3, r0
   119c0:	e3530000 	cmp	r3, #0
   119c4:	0a000000 	beq	119cc <prvUnlockQueue+0x48>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   119c8:	eb0005b0 	bl	13090 <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
   119cc:	e51b3008 	ldr	r3, [fp, #-8]
   119d0:	e5933048 	ldr	r3, [r3, #72]	; 0x48
   119d4:	e2432001 	sub	r2, r3, #1
   119d8:	e51b3008 	ldr	r3, [fp, #-8]
   119dc:	e5832048 	str	r2, [r3, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   119e0:	e51b3008 	ldr	r3, [fp, #-8]
   119e4:	e5933048 	ldr	r3, [r3, #72]	; 0x48
   119e8:	e3530000 	cmp	r3, #0
   119ec:	caffffea 	bgt	1199c <prvUnlockQueue+0x18>
   119f0:	ea000000 	b	119f8 <prvUnlockQueue+0x74>
			}
			else
			{
				break;
   119f4:	e320f000 	nop	{0}
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
   119f8:	e51b3008 	ldr	r3, [fp, #-8]
   119fc:	e3e02000 	mvn	r2, #0
   11a00:	e5832048 	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
   11a04:	ebfffade 	bl	10584 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   11a08:	ebfffacc 	bl	10540 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   11a0c:	ea000010 	b	11a54 <prvUnlockQueue+0xd0>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   11a10:	e51b3008 	ldr	r3, [fp, #-8]
   11a14:	e5933010 	ldr	r3, [r3, #16]
   11a18:	e3530000 	cmp	r3, #0
   11a1c:	0a000011 	beq	11a68 <prvUnlockQueue+0xe4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   11a20:	e51b3008 	ldr	r3, [fp, #-8]
   11a24:	e2833010 	add	r3, r3, #16
   11a28:	e1a00003 	mov	r0, r3
   11a2c:	eb000502 	bl	12e3c <xTaskRemoveFromEventList>
   11a30:	e1a03000 	mov	r3, r0
   11a34:	e3530000 	cmp	r3, #0
   11a38:	0a000000 	beq	11a40 <prvUnlockQueue+0xbc>
				{
					vTaskMissedYield();
   11a3c:	eb000593 	bl	13090 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
   11a40:	e51b3008 	ldr	r3, [fp, #-8]
   11a44:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   11a48:	e2432001 	sub	r2, r3, #1
   11a4c:	e51b3008 	ldr	r3, [fp, #-8]
   11a50:	e5832044 	str	r2, [r3, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   11a54:	e51b3008 	ldr	r3, [fp, #-8]
   11a58:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   11a5c:	e3530000 	cmp	r3, #0
   11a60:	caffffea 	bgt	11a10 <prvUnlockQueue+0x8c>
   11a64:	ea000000 	b	11a6c <prvUnlockQueue+0xe8>
			}
			else
			{
				break;
   11a68:	e320f000 	nop	{0}
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
   11a6c:	e51b3008 	ldr	r3, [fp, #-8]
   11a70:	e3e02000 	mvn	r2, #0
   11a74:	e5832044 	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
   11a78:	ebfffac1 	bl	10584 <vPortExitCritical>
}
   11a7c:	e320f000 	nop	{0}
   11a80:	e24bd004 	sub	sp, fp, #4
   11a84:	e8bd8800 	pop	{fp, pc}

00011a88 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
   11a88:	e92d4800 	push	{fp, lr}
   11a8c:	e28db004 	add	fp, sp, #4
   11a90:	e24dd010 	sub	sp, sp, #16
   11a94:	e50b0010 	str	r0, [fp, #-16]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   11a98:	ebfffaa8 	bl	10540 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
   11a9c:	e51b3010 	ldr	r3, [fp, #-16]
   11aa0:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   11aa4:	e3530000 	cmp	r3, #0
   11aa8:	03a03001 	moveq	r3, #1
   11aac:	13a03000 	movne	r3, #0
   11ab0:	e6ef3073 	uxtb	r3, r3
   11ab4:	e50b3008 	str	r3, [fp, #-8]
	taskEXIT_CRITICAL();
   11ab8:	ebfffab1 	bl	10584 <vPortExitCritical>

	return xReturn;
   11abc:	e51b3008 	ldr	r3, [fp, #-8]
}
   11ac0:	e1a00003 	mov	r0, r3
   11ac4:	e24bd004 	sub	sp, fp, #4
   11ac8:	e8bd8800 	pop	{fp, pc}

00011acc <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
   11acc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   11ad0:	e28db000 	add	fp, sp, #0
   11ad4:	e24dd014 	sub	sp, sp, #20
   11ad8:	e50b0010 	str	r0, [fp, #-16]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
   11adc:	e51b3010 	ldr	r3, [fp, #-16]
   11ae0:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   11ae4:	e3530000 	cmp	r3, #0
   11ae8:	03a03001 	moveq	r3, #1
   11aec:	13a03000 	movne	r3, #0
   11af0:	e6ef3073 	uxtb	r3, r3
   11af4:	e50b3008 	str	r3, [fp, #-8]

	return xReturn;
   11af8:	e51b3008 	ldr	r3, [fp, #-8]
}
   11afc:	e1a00003 	mov	r0, r3
   11b00:	e28bd000 	add	sp, fp, #0
   11b04:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   11b08:	e12fff1e 	bx	lr

00011b0c <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
   11b0c:	e92d4800 	push	{fp, lr}
   11b10:	e28db004 	add	fp, sp, #4
   11b14:	e24dd010 	sub	sp, sp, #16
   11b18:	e50b0010 	str	r0, [fp, #-16]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   11b1c:	ebfffa87 	bl	10540 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
   11b20:	e51b3010 	ldr	r3, [fp, #-16]
   11b24:	e5932038 	ldr	r2, [r3, #56]	; 0x38
   11b28:	e51b3010 	ldr	r3, [fp, #-16]
   11b2c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
   11b30:	e1520003 	cmp	r2, r3
   11b34:	03a03001 	moveq	r3, #1
   11b38:	13a03000 	movne	r3, #0
   11b3c:	e6ef3073 	uxtb	r3, r3
   11b40:	e50b3008 	str	r3, [fp, #-8]
	taskEXIT_CRITICAL();
   11b44:	ebfffa8e 	bl	10584 <vPortExitCritical>

	return xReturn;
   11b48:	e51b3008 	ldr	r3, [fp, #-8]
}
   11b4c:	e1a00003 	mov	r0, r3
   11b50:	e24bd004 	sub	sp, fp, #4
   11b54:	e8bd8800 	pop	{fp, pc}

00011b58 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
   11b58:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   11b5c:	e28db000 	add	fp, sp, #0
   11b60:	e24dd014 	sub	sp, sp, #20
   11b64:	e50b0010 	str	r0, [fp, #-16]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
   11b68:	e51b3010 	ldr	r3, [fp, #-16]
   11b6c:	e5932038 	ldr	r2, [r3, #56]	; 0x38
   11b70:	e51b3010 	ldr	r3, [fp, #-16]
   11b74:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
   11b78:	e1520003 	cmp	r2, r3
   11b7c:	03a03001 	moveq	r3, #1
   11b80:	13a03000 	movne	r3, #0
   11b84:	e6ef3073 	uxtb	r3, r3
   11b88:	e50b3008 	str	r3, [fp, #-8]

	return xReturn;
   11b8c:	e51b3008 	ldr	r3, [fp, #-8]
}
   11b90:	e1a00003 	mov	r0, r3
   11b94:	e28bd000 	add	sp, fp, #0
   11b98:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   11b9c:	e12fff1e 	bx	lr

00011ba0 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
   11ba0:	e92d4800 	push	{fp, lr}
   11ba4:	e28db004 	add	fp, sp, #4
   11ba8:	e24dd028 	sub	sp, sp, #40	; 0x28
   11bac:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   11bb0:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   11bb4:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
   11bb8:	e14b21be 	strh	r2, [fp, #-30]	; 0xffffffe2
	configASSERT( pxTaskCode );
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
   11bbc:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
   11bc0:	e59b100c 	ldr	r1, [fp, #12]
   11bc4:	e1a00003 	mov	r0, r3
   11bc8:	eb000603 	bl	133dc <prvAllocateTCBAndStack>
   11bcc:	e50b000c 	str	r0, [fp, #-12]

	if( pxNewTCB != NULL )
   11bd0:	e51b300c 	ldr	r3, [fp, #-12]
   11bd4:	e3530000 	cmp	r3, #0
   11bd8:	0a000067 	beq	11d7c <xTaskGenericCreate+0x1dc>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
   11bdc:	e51b300c 	ldr	r3, [fp, #-12]
   11be0:	e5932030 	ldr	r2, [r3, #48]	; 0x30
   11be4:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
   11be8:	e2433107 	sub	r3, r3, #-1073741823	; 0xc0000001
   11bec:	e1a03103 	lsl	r3, r3, #2
   11bf0:	e0823003 	add	r3, r2, r3
   11bf4:	e50b3010 	str	r3, [fp, #-16]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
   11bf8:	e51b3010 	ldr	r3, [fp, #-16]
   11bfc:	e3c33007 	bic	r3, r3, #7
   11c00:	e50b3010 	str	r3, [fp, #-16]
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
   11c04:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
   11c08:	e58d3000 	str	r3, [sp]
   11c0c:	e59b3010 	ldr	r3, [fp, #16]
   11c10:	e59b2004 	ldr	r2, [fp, #4]
   11c14:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
   11c18:	e51b000c 	ldr	r0, [fp, #-12]
   11c1c:	eb000531 	bl	130e8 <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   11c20:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
   11c24:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
   11c28:	e51b0010 	ldr	r0, [fp, #-16]
   11c2c:	ebfff8f3 	bl	10000 <pxPortInitialiseStack>
   11c30:	e1a02000 	mov	r2, r0
   11c34:	e51b300c 	ldr	r3, [fp, #-12]
   11c38:	e5832000 	str	r2, [r3]
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
   11c3c:	e59b3008 	ldr	r3, [fp, #8]
   11c40:	e3530000 	cmp	r3, #0
   11c44:	0a000002 	beq	11c54 <xTaskGenericCreate+0xb4>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
   11c48:	e59b3008 	ldr	r3, [fp, #8]
   11c4c:	e51b200c 	ldr	r2, [fp, #-12]
   11c50:	e5832000 	str	r2, [r3]
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
   11c54:	ebfffa39 	bl	10540 <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
   11c58:	e59f316c 	ldr	r3, [pc, #364]	; 11dcc <xTaskGenericCreate+0x22c>
   11c5c:	e5933000 	ldr	r3, [r3]
   11c60:	e2833001 	add	r3, r3, #1
   11c64:	e59f2160 	ldr	r2, [pc, #352]	; 11dcc <xTaskGenericCreate+0x22c>
   11c68:	e5823000 	str	r3, [r2]
			if( pxCurrentTCB == NULL )
   11c6c:	e59f315c 	ldr	r3, [pc, #348]	; 11dd0 <xTaskGenericCreate+0x230>
   11c70:	e5933000 	ldr	r3, [r3]
   11c74:	e3530000 	cmp	r3, #0
   11c78:	1a000008 	bne	11ca0 <xTaskGenericCreate+0x100>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
   11c7c:	e59f214c 	ldr	r2, [pc, #332]	; 11dd0 <xTaskGenericCreate+0x230>
   11c80:	e51b300c 	ldr	r3, [fp, #-12]
   11c84:	e5823000 	str	r3, [r2]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
   11c88:	e59f313c 	ldr	r3, [pc, #316]	; 11dcc <xTaskGenericCreate+0x22c>
   11c8c:	e5933000 	ldr	r3, [r3]
   11c90:	e3530001 	cmp	r3, #1
   11c94:	1a00000e 	bne	11cd4 <xTaskGenericCreate+0x134>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
   11c98:	eb000542 	bl	131a8 <prvInitialiseTaskLists>
   11c9c:	ea00000c 	b	11cd4 <xTaskGenericCreate+0x134>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
   11ca0:	e59f312c 	ldr	r3, [pc, #300]	; 11dd4 <xTaskGenericCreate+0x234>
   11ca4:	e5933000 	ldr	r3, [r3]
   11ca8:	e3530000 	cmp	r3, #0
   11cac:	1a000008 	bne	11cd4 <xTaskGenericCreate+0x134>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
   11cb0:	e59f3118 	ldr	r3, [pc, #280]	; 11dd0 <xTaskGenericCreate+0x230>
   11cb4:	e5933000 	ldr	r3, [r3]
   11cb8:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   11cbc:	e59b3004 	ldr	r3, [fp, #4]
   11cc0:	e1520003 	cmp	r2, r3
   11cc4:	8a000002 	bhi	11cd4 <xTaskGenericCreate+0x134>
					{
						pxCurrentTCB = pxNewTCB;
   11cc8:	e59f2100 	ldr	r2, [pc, #256]	; 11dd0 <xTaskGenericCreate+0x230>
   11ccc:	e51b300c 	ldr	r3, [fp, #-12]
   11cd0:	e5823000 	str	r3, [r2]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
   11cd4:	e51b300c 	ldr	r3, [fp, #-12]
   11cd8:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   11cdc:	e59f30f4 	ldr	r3, [pc, #244]	; 11dd8 <xTaskGenericCreate+0x238>
   11ce0:	e5933000 	ldr	r3, [r3]
   11ce4:	e1520003 	cmp	r2, r3
   11ce8:	9a000003 	bls	11cfc <xTaskGenericCreate+0x15c>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
   11cec:	e51b300c 	ldr	r3, [fp, #-12]
   11cf0:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   11cf4:	e59f20dc 	ldr	r2, [pc, #220]	; 11dd8 <xTaskGenericCreate+0x238>
   11cf8:	e5823000 	str	r3, [r2]
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
   11cfc:	e59f30d8 	ldr	r3, [pc, #216]	; 11ddc <xTaskGenericCreate+0x23c>
   11d00:	e5933000 	ldr	r3, [r3]
   11d04:	e2833001 	add	r3, r3, #1
   11d08:	e59f20cc 	ldr	r2, [pc, #204]	; 11ddc <xTaskGenericCreate+0x23c>
   11d0c:	e5823000 	str	r3, [r2]

			prvAddTaskToReadyQueue( pxNewTCB );
   11d10:	e51b300c 	ldr	r3, [fp, #-12]
   11d14:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   11d18:	e59f30c0 	ldr	r3, [pc, #192]	; 11de0 <xTaskGenericCreate+0x240>
   11d1c:	e5933000 	ldr	r3, [r3]
   11d20:	e1520003 	cmp	r2, r3
   11d24:	9a000003 	bls	11d38 <xTaskGenericCreate+0x198>
   11d28:	e51b300c 	ldr	r3, [fp, #-12]
   11d2c:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   11d30:	e59f20a8 	ldr	r2, [pc, #168]	; 11de0 <xTaskGenericCreate+0x240>
   11d34:	e5823000 	str	r3, [r2]
   11d38:	e51b300c 	ldr	r3, [fp, #-12]
   11d3c:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   11d40:	e1a03002 	mov	r3, r2
   11d44:	e1a03103 	lsl	r3, r3, #2
   11d48:	e0833002 	add	r3, r3, r2
   11d4c:	e1a03103 	lsl	r3, r3, #2
   11d50:	e59f208c 	ldr	r2, [pc, #140]	; 11de4 <xTaskGenericCreate+0x244>
   11d54:	e0832002 	add	r2, r3, r2
   11d58:	e51b300c 	ldr	r3, [fp, #-12]
   11d5c:	e2833004 	add	r3, r3, #4
   11d60:	e1a01003 	mov	r1, r3
   11d64:	e1a00002 	mov	r0, r2
   11d68:	ebfffc1e 	bl	10de8 <vListInsertEnd>

			xReturn = pdPASS;
   11d6c:	e3a03001 	mov	r3, #1
   11d70:	e50b3008 	str	r3, [fp, #-8]
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
   11d74:	ebfffa02 	bl	10584 <vPortExitCritical>
   11d78:	ea000001 	b	11d84 <xTaskGenericCreate+0x1e4>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   11d7c:	e3e03000 	mvn	r3, #0
   11d80:	e50b3008 	str	r3, [fp, #-8]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
   11d84:	e51b3008 	ldr	r3, [fp, #-8]
   11d88:	e3530001 	cmp	r3, #1
   11d8c:	1a00000a 	bne	11dbc <xTaskGenericCreate+0x21c>
	{
		if( xSchedulerRunning != pdFALSE )
   11d90:	e59f303c 	ldr	r3, [pc, #60]	; 11dd4 <xTaskGenericCreate+0x234>
   11d94:	e5933000 	ldr	r3, [r3]
   11d98:	e3530000 	cmp	r3, #0
   11d9c:	0a000006 	beq	11dbc <xTaskGenericCreate+0x21c>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
   11da0:	e59f3028 	ldr	r3, [pc, #40]	; 11dd0 <xTaskGenericCreate+0x230>
   11da4:	e5933000 	ldr	r3, [r3]
   11da8:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   11dac:	e59b3004 	ldr	r3, [fp, #4]
   11db0:	e1520003 	cmp	r2, r3
   11db4:	2a000000 	bcs	11dbc <xTaskGenericCreate+0x21c>
			{
				portYIELD_WITHIN_API();
   11db8:	ef000000 	svc	0x00000000
			}
		}
	}

	return xReturn;
   11dbc:	e51b3008 	ldr	r3, [fp, #-8]
}
   11dc0:	e1a00003 	mov	r0, r3
   11dc4:	e24bd004 	sub	sp, fp, #4
   11dc8:	e8bd8800 	pop	{fp, pc}
   11dcc:	00015e1c 	andeq	r5, r1, ip, lsl lr
   11dd0:	00015d44 	andeq	r5, r1, r4, asr #26
   11dd4:	00015e2c 	andeq	r5, r1, ip, lsr #28
   11dd8:	00015e24 	andeq	r5, r1, r4, lsr #28
   11ddc:	00015e40 	andeq	r5, r1, r0, asr #28
   11de0:	00015e28 	andeq	r5, r1, r8, lsr #28
   11de4:	00015d48 	andeq	r5, r1, r8, asr #26

00011de8 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
   11de8:	e92d4800 	push	{fp, lr}
   11dec:	e28db004 	add	fp, sp, #4
   11df0:	e24dd010 	sub	sp, sp, #16
   11df4:	e50b0010 	str	r0, [fp, #-16]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
   11df8:	ebfff9d0 	bl	10540 <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
   11dfc:	e59f30d0 	ldr	r3, [pc, #208]	; 11ed4 <vTaskDelete+0xec>
   11e00:	e5933000 	ldr	r3, [r3]
   11e04:	e51b2010 	ldr	r2, [fp, #-16]
   11e08:	e1520003 	cmp	r2, r3
   11e0c:	1a000001 	bne	11e18 <vTaskDelete+0x30>
			{
				pxTaskToDelete = NULL;
   11e10:	e3a03000 	mov	r3, #0
   11e14:	e50b3010 	str	r3, [fp, #-16]
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
   11e18:	e51b3010 	ldr	r3, [fp, #-16]
   11e1c:	e3530000 	cmp	r3, #0
   11e20:	1a000002 	bne	11e30 <vTaskDelete+0x48>
   11e24:	e59f30a8 	ldr	r3, [pc, #168]	; 11ed4 <vTaskDelete+0xec>
   11e28:	e5933000 	ldr	r3, [r3]
   11e2c:	ea000000 	b	11e34 <vTaskDelete+0x4c>
   11e30:	e51b3010 	ldr	r3, [fp, #-16]
   11e34:	e50b3008 	str	r3, [fp, #-8]

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
   11e38:	e51b3008 	ldr	r3, [fp, #-8]
   11e3c:	e2833004 	add	r3, r3, #4
   11e40:	e1a00003 	mov	r0, r3
   11e44:	ebfffc43 	bl	10f58 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
   11e48:	e51b3008 	ldr	r3, [fp, #-8]
   11e4c:	e5933028 	ldr	r3, [r3, #40]	; 0x28
   11e50:	e3530000 	cmp	r3, #0
   11e54:	0a000003 	beq	11e68 <vTaskDelete+0x80>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
   11e58:	e51b3008 	ldr	r3, [fp, #-8]
   11e5c:	e2833018 	add	r3, r3, #24
   11e60:	e1a00003 	mov	r0, r3
   11e64:	ebfffc3b 	bl	10f58 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
   11e68:	e51b3008 	ldr	r3, [fp, #-8]
   11e6c:	e2833004 	add	r3, r3, #4
   11e70:	e1a01003 	mov	r1, r3
   11e74:	e59f005c 	ldr	r0, [pc, #92]	; 11ed8 <vTaskDelete+0xf0>
   11e78:	ebfffbda 	bl	10de8 <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
   11e7c:	e59f3058 	ldr	r3, [pc, #88]	; 11edc <vTaskDelete+0xf4>
   11e80:	e5933000 	ldr	r3, [r3]
   11e84:	e2833001 	add	r3, r3, #1
   11e88:	e59f204c 	ldr	r2, [pc, #76]	; 11edc <vTaskDelete+0xf4>
   11e8c:	e5823000 	str	r3, [r2]

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
   11e90:	e59f3048 	ldr	r3, [pc, #72]	; 11ee0 <vTaskDelete+0xf8>
   11e94:	e5933000 	ldr	r3, [r3]
   11e98:	e2833001 	add	r3, r3, #1
   11e9c:	e59f203c 	ldr	r2, [pc, #60]	; 11ee0 <vTaskDelete+0xf8>
   11ea0:	e5823000 	str	r3, [r2]

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
   11ea4:	ebfff9b6 	bl	10584 <vPortExitCritical>

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
   11ea8:	e59f3034 	ldr	r3, [pc, #52]	; 11ee4 <vTaskDelete+0xfc>
   11eac:	e5933000 	ldr	r3, [r3]
   11eb0:	e3530000 	cmp	r3, #0
   11eb4:	0a000003 	beq	11ec8 <vTaskDelete+0xe0>
		{
			if( ( void * ) pxTaskToDelete == NULL )
   11eb8:	e51b3010 	ldr	r3, [fp, #-16]
   11ebc:	e3530000 	cmp	r3, #0
   11ec0:	1a000000 	bne	11ec8 <vTaskDelete+0xe0>
			{
				portYIELD_WITHIN_API();
   11ec4:	ef000000 	svc	0x00000000
			}
		}
	}
   11ec8:	e320f000 	nop	{0}
   11ecc:	e24bd004 	sub	sp, fp, #4
   11ed0:	e8bd8800 	pop	{fp, pc}
   11ed4:	00015d44 	andeq	r5, r1, r4, asr #26
   11ed8:	00015df0 	strdeq	r5, [r1], -r0
   11edc:	00015e04 	andeq	r5, r1, r4, lsl #28
   11ee0:	00015e40 	andeq	r5, r1, r0, asr #28
   11ee4:	00015e2c 	andeq	r5, r1, ip, lsr #28

00011ee8 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
   11ee8:	e92d4800 	push	{fp, lr}
   11eec:	e28db004 	add	fp, sp, #4
   11ef0:	e24dd018 	sub	sp, sp, #24
   11ef4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   11ef8:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
   11efc:	e3a03000 	mov	r3, #0
   11f00:	e50b3008 	str	r3, [fp, #-8]

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
   11f04:	eb0001f6 	bl	126e4 <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
   11f08:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11f0c:	e5932000 	ldr	r2, [r3]
   11f10:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   11f14:	e0823003 	add	r3, r2, r3
   11f18:	e50b300c 	str	r3, [fp, #-12]

			if( xTickCount < *pxPreviousWakeTime )
   11f1c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11f20:	e5932000 	ldr	r2, [r3]
   11f24:	e59f30c4 	ldr	r3, [pc, #196]	; 11ff0 <vTaskDelayUntil+0x108>
   11f28:	e5933000 	ldr	r3, [r3]
   11f2c:	e1520003 	cmp	r2, r3
   11f30:	9a00000c 	bls	11f68 <vTaskDelayUntil+0x80>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
   11f34:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11f38:	e5932000 	ldr	r2, [r3]
   11f3c:	e51b300c 	ldr	r3, [fp, #-12]
   11f40:	e1520003 	cmp	r2, r3
   11f44:	9a000013 	bls	11f98 <vTaskDelayUntil+0xb0>
   11f48:	e59f30a0 	ldr	r3, [pc, #160]	; 11ff0 <vTaskDelayUntil+0x108>
   11f4c:	e5933000 	ldr	r3, [r3]
   11f50:	e51b200c 	ldr	r2, [fp, #-12]
   11f54:	e1520003 	cmp	r2, r3
   11f58:	9a00000e 	bls	11f98 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
   11f5c:	e3a03001 	mov	r3, #1
   11f60:	e50b3008 	str	r3, [fp, #-8]
   11f64:	ea00000b 	b	11f98 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
   11f68:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11f6c:	e5932000 	ldr	r2, [r3]
   11f70:	e51b300c 	ldr	r3, [fp, #-12]
   11f74:	e1520003 	cmp	r2, r3
   11f78:	8a000004 	bhi	11f90 <vTaskDelayUntil+0xa8>
   11f7c:	e59f306c 	ldr	r3, [pc, #108]	; 11ff0 <vTaskDelayUntil+0x108>
   11f80:	e5933000 	ldr	r3, [r3]
   11f84:	e51b200c 	ldr	r2, [fp, #-12]
   11f88:	e1520003 	cmp	r2, r3
   11f8c:	9a000001 	bls	11f98 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
   11f90:	e3a03001 	mov	r3, #1
   11f94:	e50b3008 	str	r3, [fp, #-8]
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
   11f98:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11f9c:	e51b200c 	ldr	r2, [fp, #-12]
   11fa0:	e5832000 	str	r2, [r3]

			if( xShouldDelay != pdFALSE )
   11fa4:	e51b3008 	ldr	r3, [fp, #-8]
   11fa8:	e3530000 	cmp	r3, #0
   11fac:	0a000006 	beq	11fcc <vTaskDelayUntil+0xe4>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   11fb0:	e59f303c 	ldr	r3, [pc, #60]	; 11ff4 <vTaskDelayUntil+0x10c>
   11fb4:	e5933000 	ldr	r3, [r3]
   11fb8:	e2833004 	add	r3, r3, #4
   11fbc:	e1a00003 	mov	r0, r3
   11fc0:	ebfffbe4 	bl	10f58 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
   11fc4:	e51b000c 	ldr	r0, [fp, #-12]
   11fc8:	eb0004d5 	bl	13324 <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
   11fcc:	eb0001d0 	bl	12714 <xTaskResumeAll>
   11fd0:	e50b0010 	str	r0, [fp, #-16]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   11fd4:	e51b3010 	ldr	r3, [fp, #-16]
   11fd8:	e3530000 	cmp	r3, #0
   11fdc:	1a000000 	bne	11fe4 <vTaskDelayUntil+0xfc>
		{
			portYIELD_WITHIN_API();
   11fe0:	ef000000 	svc	0x00000000
		}
	}
   11fe4:	e320f000 	nop	{0}
   11fe8:	e24bd004 	sub	sp, fp, #4
   11fec:	e8bd8800 	pop	{fp, pc}
   11ff0:	00015e20 	andeq	r5, r1, r0, lsr #28
   11ff4:	00015d44 	andeq	r5, r1, r4, asr #26

00011ff8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
   11ff8:	e92d4800 	push	{fp, lr}
   11ffc:	e28db004 	add	fp, sp, #4
   12000:	e24dd010 	sub	sp, sp, #16
   12004:	e50b0010 	str	r0, [fp, #-16]
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   12008:	e3a03000 	mov	r3, #0
   1200c:	e50b3008 	str	r3, [fp, #-8]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
   12010:	e51b3010 	ldr	r3, [fp, #-16]
   12014:	e3530000 	cmp	r3, #0
   12018:	0a00000e 	beq	12058 <vTaskDelay+0x60>
		{
			vTaskSuspendAll();
   1201c:	eb0001b0 	bl	126e4 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
   12020:	e59f304c 	ldr	r3, [pc, #76]	; 12074 <vTaskDelay+0x7c>
   12024:	e5932000 	ldr	r2, [r3]
   12028:	e51b3010 	ldr	r3, [fp, #-16]
   1202c:	e0823003 	add	r3, r2, r3
   12030:	e50b300c 	str	r3, [fp, #-12]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   12034:	e59f303c 	ldr	r3, [pc, #60]	; 12078 <vTaskDelay+0x80>
   12038:	e5933000 	ldr	r3, [r3]
   1203c:	e2833004 	add	r3, r3, #4
   12040:	e1a00003 	mov	r0, r3
   12044:	ebfffbc3 	bl	10f58 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
   12048:	e51b000c 	ldr	r0, [fp, #-12]
   1204c:	eb0004b4 	bl	13324 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
   12050:	eb0001af 	bl	12714 <xTaskResumeAll>
   12054:	e50b0008 	str	r0, [fp, #-8]
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   12058:	e51b3008 	ldr	r3, [fp, #-8]
   1205c:	e3530000 	cmp	r3, #0
   12060:	1a000000 	bne	12068 <vTaskDelay+0x70>
		{
			portYIELD_WITHIN_API();
   12064:	ef000000 	svc	0x00000000
		}
	}
   12068:	e320f000 	nop	{0}
   1206c:	e24bd004 	sub	sp, fp, #4
   12070:	e8bd8800 	pop	{fp, pc}
   12074:	00015e20 	andeq	r5, r1, r0, lsr #28
   12078:	00015d44 	andeq	r5, r1, r4, asr #26

0001207c <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	unsigned portBASE_TYPE uxTaskPriorityGet( xTaskHandle pxTask )
	{
   1207c:	e92d4800 	push	{fp, lr}
   12080:	e28db004 	add	fp, sp, #4
   12084:	e24dd010 	sub	sp, sp, #16
   12088:	e50b0010 	str	r0, [fp, #-16]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxReturn;

		taskENTER_CRITICAL();
   1208c:	ebfff92b 	bl	10540 <vPortEnterCritical>
		{
			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
   12090:	e51b3010 	ldr	r3, [fp, #-16]
   12094:	e3530000 	cmp	r3, #0
   12098:	1a000002 	bne	120a8 <uxTaskPriorityGet+0x2c>
   1209c:	e59f302c 	ldr	r3, [pc, #44]	; 120d0 <uxTaskPriorityGet+0x54>
   120a0:	e5933000 	ldr	r3, [r3]
   120a4:	ea000000 	b	120ac <uxTaskPriorityGet+0x30>
   120a8:	e51b3010 	ldr	r3, [fp, #-16]
   120ac:	e50b3008 	str	r3, [fp, #-8]
			uxReturn = pxTCB->uxPriority;
   120b0:	e51b3008 	ldr	r3, [fp, #-8]
   120b4:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   120b8:	e50b300c 	str	r3, [fp, #-12]
		}
		taskEXIT_CRITICAL();
   120bc:	ebfff930 	bl	10584 <vPortExitCritical>

		return uxReturn;
   120c0:	e51b300c 	ldr	r3, [fp, #-12]
	}
   120c4:	e1a00003 	mov	r0, r3
   120c8:	e24bd004 	sub	sp, fp, #4
   120cc:	e8bd8800 	pop	{fp, pc}
   120d0:	00015d44 	andeq	r5, r1, r4, asr #26

000120d4 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( xTaskHandle pxTask, unsigned portBASE_TYPE uxNewPriority )
	{
   120d4:	e92d4800 	push	{fp, lr}
   120d8:	e28db004 	add	fp, sp, #4
   120dc:	e24dd018 	sub	sp, sp, #24
   120e0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   120e4:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxCurrentPriority;
	portBASE_TYPE xYieldRequired = pdFALSE;
   120e8:	e3a03000 	mov	r3, #0
   120ec:	e50b3008 	str	r3, [fp, #-8]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= configMAX_PRIORITIES )
   120f0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   120f4:	e3530004 	cmp	r3, #4
   120f8:	9a000001 	bls	12104 <vTaskPrioritySet+0x30>
		{
			uxNewPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
   120fc:	e3a03004 	mov	r3, #4
   12100:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
		}

		taskENTER_CRITICAL();
   12104:	ebfff90d 	bl	10540 <vPortEnterCritical>
		{
			if( pxTask == pxCurrentTCB )
   12108:	e59f3160 	ldr	r3, [pc, #352]	; 12270 <vTaskPrioritySet+0x19c>
   1210c:	e5933000 	ldr	r3, [r3]
   12110:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   12114:	e1520003 	cmp	r2, r3
   12118:	1a000001 	bne	12124 <vTaskPrioritySet+0x50>
			{
				pxTask = NULL;
   1211c:	e3a03000 	mov	r3, #0
   12120:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
			}

			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
   12124:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   12128:	e3530000 	cmp	r3, #0
   1212c:	1a000002 	bne	1213c <vTaskPrioritySet+0x68>
   12130:	e59f3138 	ldr	r3, [pc, #312]	; 12270 <vTaskPrioritySet+0x19c>
   12134:	e5933000 	ldr	r3, [r3]
   12138:	ea000000 	b	12140 <vTaskPrioritySet+0x6c>
   1213c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   12140:	e50b300c 	str	r3, [fp, #-12]
			{
				uxCurrentPriority = pxTCB->uxBasePriority;
			}
			#else
			{
				uxCurrentPriority = pxTCB->uxPriority;
   12144:	e51b300c 	ldr	r3, [fp, #-12]
   12148:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   1214c:	e50b3010 	str	r3, [fp, #-16]
			}
			#endif

			if( uxCurrentPriority != uxNewPriority )
   12150:	e51b2010 	ldr	r2, [fp, #-16]
   12154:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   12158:	e1520003 	cmp	r2, r3
   1215c:	0a00003f 	beq	12260 <vTaskPrioritySet+0x18c>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentPriority )
   12160:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   12164:	e51b3010 	ldr	r3, [fp, #-16]
   12168:	e1520003 	cmp	r2, r3
   1216c:	9a000005 	bls	12188 <vTaskPrioritySet+0xb4>
				{
					if( pxTask != NULL )
   12170:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   12174:	e3530000 	cmp	r3, #0
   12178:	0a000007 	beq	1219c <vTaskPrioritySet+0xc8>
					{
						/* The priority of another task is being raised.  If we
						were raising the priority of the currently running task
						there would be no need to switch as it must have already
						been the highest priority task. */
						xYieldRequired = pdTRUE;
   1217c:	e3a03001 	mov	r3, #1
   12180:	e50b3008 	str	r3, [fp, #-8]
   12184:	ea000004 	b	1219c <vTaskPrioritySet+0xc8>
					}
				}
				else if( pxTask == NULL )
   12188:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1218c:	e3530000 	cmp	r3, #0
   12190:	1a000001 	bne	1219c <vTaskPrioritySet+0xc8>
				{
					/* Setting our own priority down means there may now be another
					task of higher priority that is ready to execute. */
					xYieldRequired = pdTRUE;
   12194:	e3a03001 	mov	r3, #1
   12198:	e50b3008 	str	r3, [fp, #-8]
					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
				}
				#else
				{
					pxTCB->uxPriority = uxNewPriority;
   1219c:	e51b300c 	ldr	r3, [fp, #-12]
   121a0:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   121a4:	e583202c 	str	r2, [r3, #44]	; 0x2c
				}
				#endif

				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( configMAX_PRIORITIES - ( portTickType ) uxNewPriority ) );
   121a8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   121ac:	e2632005 	rsb	r2, r3, #5
   121b0:	e51b300c 	ldr	r3, [fp, #-12]
   121b4:	e5832018 	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the queue appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxCurrentPriority ] ), &( pxTCB->xGenericListItem ) ) )
   121b8:	e51b300c 	ldr	r3, [fp, #-12]
   121bc:	e5931014 	ldr	r1, [r3, #20]
   121c0:	e51b2010 	ldr	r2, [fp, #-16]
   121c4:	e1a03002 	mov	r3, r2
   121c8:	e1a03103 	lsl	r3, r3, #2
   121cc:	e0833002 	add	r3, r3, r2
   121d0:	e1a03103 	lsl	r3, r3, #2
   121d4:	e59f2098 	ldr	r2, [pc, #152]	; 12274 <vTaskPrioritySet+0x1a0>
   121d8:	e0833002 	add	r3, r3, r2
   121dc:	e1510003 	cmp	r1, r3
   121e0:	1a00001a 	bne	12250 <vTaskPrioritySet+0x17c>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					vListRemove( &( pxTCB->xGenericListItem ) );
   121e4:	e51b300c 	ldr	r3, [fp, #-12]
   121e8:	e2833004 	add	r3, r3, #4
   121ec:	e1a00003 	mov	r0, r3
   121f0:	ebfffb58 	bl	10f58 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
   121f4:	e51b300c 	ldr	r3, [fp, #-12]
   121f8:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   121fc:	e59f3074 	ldr	r3, [pc, #116]	; 12278 <vTaskPrioritySet+0x1a4>
   12200:	e5933000 	ldr	r3, [r3]
   12204:	e1520003 	cmp	r2, r3
   12208:	9a000003 	bls	1221c <vTaskPrioritySet+0x148>
   1220c:	e51b300c 	ldr	r3, [fp, #-12]
   12210:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   12214:	e59f205c 	ldr	r2, [pc, #92]	; 12278 <vTaskPrioritySet+0x1a4>
   12218:	e5823000 	str	r3, [r2]
   1221c:	e51b300c 	ldr	r3, [fp, #-12]
   12220:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   12224:	e1a03002 	mov	r3, r2
   12228:	e1a03103 	lsl	r3, r3, #2
   1222c:	e0833002 	add	r3, r3, r2
   12230:	e1a03103 	lsl	r3, r3, #2
   12234:	e59f2038 	ldr	r2, [pc, #56]	; 12274 <vTaskPrioritySet+0x1a0>
   12238:	e0832002 	add	r2, r3, r2
   1223c:	e51b300c 	ldr	r3, [fp, #-12]
   12240:	e2833004 	add	r3, r3, #4
   12244:	e1a01003 	mov	r1, r3
   12248:	e1a00002 	mov	r0, r2
   1224c:	ebfffae5 	bl	10de8 <vListInsertEnd>
				}

				if( xYieldRequired == pdTRUE )
   12250:	e51b3008 	ldr	r3, [fp, #-8]
   12254:	e3530001 	cmp	r3, #1
   12258:	1a000000 	bne	12260 <vTaskPrioritySet+0x18c>
				{
					portYIELD_WITHIN_API();
   1225c:	ef000000 	svc	0x00000000
				}
			}
		}
		taskEXIT_CRITICAL();
   12260:	ebfff8c7 	bl	10584 <vPortExitCritical>
	}
   12264:	e320f000 	nop	{0}
   12268:	e24bd004 	sub	sp, fp, #4
   1226c:	e8bd8800 	pop	{fp, pc}
   12270:	00015d44 	andeq	r5, r1, r4, asr #26
   12274:	00015d48 	andeq	r5, r1, r8, asr #26
   12278:	00015e28 	andeq	r5, r1, r8, lsr #28

0001227c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( xTaskHandle pxTaskToSuspend )
	{
   1227c:	e92d4800 	push	{fp, lr}
   12280:	e28db004 	add	fp, sp, #4
   12284:	e24dd010 	sub	sp, sp, #16
   12288:	e50b0010 	str	r0, [fp, #-16]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
   1228c:	ebfff8ab 	bl	10540 <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			suspended. */
			if( pxTaskToSuspend == pxCurrentTCB )
   12290:	e59f30d8 	ldr	r3, [pc, #216]	; 12370 <vTaskSuspend+0xf4>
   12294:	e5933000 	ldr	r3, [r3]
   12298:	e51b2010 	ldr	r2, [fp, #-16]
   1229c:	e1520003 	cmp	r2, r3
   122a0:	1a000001 	bne	122ac <vTaskSuspend+0x30>
			{
				pxTaskToSuspend = NULL;
   122a4:	e3a03000 	mov	r3, #0
   122a8:	e50b3010 	str	r3, [fp, #-16]
			}

			/* If null is passed in here then we are suspending ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
   122ac:	e51b3010 	ldr	r3, [fp, #-16]
   122b0:	e3530000 	cmp	r3, #0
   122b4:	1a000002 	bne	122c4 <vTaskSuspend+0x48>
   122b8:	e59f30b0 	ldr	r3, [pc, #176]	; 12370 <vTaskSuspend+0xf4>
   122bc:	e5933000 	ldr	r3, [r3]
   122c0:	ea000000 	b	122c8 <vTaskSuspend+0x4c>
   122c4:	e51b3010 	ldr	r3, [fp, #-16]
   122c8:	e50b3008 	str	r3, [fp, #-8]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the	suspended list. */
			vListRemove( &( pxTCB->xGenericListItem ) );
   122cc:	e51b3008 	ldr	r3, [fp, #-8]
   122d0:	e2833004 	add	r3, r3, #4
   122d4:	e1a00003 	mov	r0, r3
   122d8:	ebfffb1e 	bl	10f58 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
   122dc:	e51b3008 	ldr	r3, [fp, #-8]
   122e0:	e5933028 	ldr	r3, [r3, #40]	; 0x28
   122e4:	e3530000 	cmp	r3, #0
   122e8:	0a000003 	beq	122fc <vTaskSuspend+0x80>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
   122ec:	e51b3008 	ldr	r3, [fp, #-8]
   122f0:	e2833018 	add	r3, r3, #24
   122f4:	e1a00003 	mov	r0, r3
   122f8:	ebfffb16 	bl	10f58 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
   122fc:	e51b3008 	ldr	r3, [fp, #-8]
   12300:	e2833004 	add	r3, r3, #4
   12304:	e1a01003 	mov	r1, r3
   12308:	e59f0064 	ldr	r0, [pc, #100]	; 12374 <vTaskSuspend+0xf8>
   1230c:	ebfffab5 	bl	10de8 <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
   12310:	ebfff89b 	bl	10584 <vPortExitCritical>

		if( ( void * ) pxTaskToSuspend == NULL )
   12314:	e51b3010 	ldr	r3, [fp, #-16]
   12318:	e3530000 	cmp	r3, #0
   1231c:	1a000010 	bne	12364 <vTaskSuspend+0xe8>
		{
			if( xSchedulerRunning != pdFALSE )
   12320:	e59f3050 	ldr	r3, [pc, #80]	; 12378 <vTaskSuspend+0xfc>
   12324:	e5933000 	ldr	r3, [r3]
   12328:	e3530000 	cmp	r3, #0
   1232c:	0a000001 	beq	12338 <vTaskSuspend+0xbc>
			{
				/* We have just suspended the current task. */
				portYIELD_WITHIN_API();
   12330:	ef000000 	svc	0x00000000
				{
					vTaskSwitchContext();
				}
			}
		}
	}
   12334:	ea00000a 	b	12364 <vTaskSuspend+0xe8>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
   12338:	e59f3034 	ldr	r3, [pc, #52]	; 12374 <vTaskSuspend+0xf8>
   1233c:	e5932000 	ldr	r2, [r3]
   12340:	e59f3034 	ldr	r3, [pc, #52]	; 1237c <vTaskSuspend+0x100>
   12344:	e5933000 	ldr	r3, [r3]
   12348:	e1520003 	cmp	r2, r3
   1234c:	1a000003 	bne	12360 <vTaskSuspend+0xe4>
					pxCurrentTCB = NULL;
   12350:	e59f3018 	ldr	r3, [pc, #24]	; 12370 <vTaskSuspend+0xf4>
   12354:	e3a02000 	mov	r2, #0
   12358:	e5832000 	str	r2, [r3]
	}
   1235c:	ea000000 	b	12364 <vTaskSuspend+0xe8>
					vTaskSwitchContext();
   12360:	eb00024c 	bl	12c98 <vTaskSwitchContext>
	}
   12364:	e320f000 	nop	{0}
   12368:	e24bd004 	sub	sp, fp, #4
   1236c:	e8bd8800 	pop	{fp, pc}
   12370:	00015d44 	andeq	r5, r1, r4, asr #26
   12374:	00015e08 	andeq	r5, r1, r8, lsl #28
   12378:	00015e2c 	andeq	r5, r1, ip, lsr #28
   1237c:	00015e1c 	andeq	r5, r1, ip, lsl lr

00012380 <xTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
	{
   12380:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   12384:	e28db000 	add	fp, sp, #0
   12388:	e24dd014 	sub	sp, sp, #20
   1238c:	e50b0010 	str	r0, [fp, #-16]
	portBASE_TYPE xReturn = pdFALSE;
   12390:	e3a03000 	mov	r3, #0
   12394:	e50b3008 	str	r3, [fp, #-8]
	const tskTCB * const pxTCB = ( tskTCB * ) xTask;
   12398:	e51b3010 	ldr	r3, [fp, #-16]
   1239c:	e50b300c 	str	r3, [fp, #-12]
		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
   123a0:	e51b300c 	ldr	r3, [fp, #-12]
   123a4:	e5933014 	ldr	r3, [r3, #20]
   123a8:	e59f2044 	ldr	r2, [pc, #68]	; 123f4 <xTaskIsTaskSuspended+0x74>
   123ac:	e1530002 	cmp	r3, r2
   123b0:	1a00000a 	bne	123e0 <xTaskIsTaskSuspended+0x60>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
   123b4:	e51b300c 	ldr	r3, [fp, #-12]
   123b8:	e5933028 	ldr	r3, [r3, #40]	; 0x28
   123bc:	e59f2034 	ldr	r2, [pc, #52]	; 123f8 <xTaskIsTaskSuspended+0x78>
   123c0:	e1530002 	cmp	r3, r2
   123c4:	0a000005 	beq	123e0 <xTaskIsTaskSuspended+0x60>
			{
				/* Is it in the suspended list because it is in the
				Suspended state?  It is possible to be in the suspended
				list because it is blocked on a task with no timeout
				specified. */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) == pdTRUE )
   123c8:	e51b300c 	ldr	r3, [fp, #-12]
   123cc:	e5933028 	ldr	r3, [r3, #40]	; 0x28
   123d0:	e3530000 	cmp	r3, #0
   123d4:	1a000001 	bne	123e0 <xTaskIsTaskSuspended+0x60>
				{
					xReturn = pdTRUE;
   123d8:	e3a03001 	mov	r3, #1
   123dc:	e50b3008 	str	r3, [fp, #-8]
				}
			}
		}

		return xReturn;
   123e0:	e51b3008 	ldr	r3, [fp, #-8]
	}
   123e4:	e1a00003 	mov	r0, r3
   123e8:	e28bd000 	add	sp, fp, #0
   123ec:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   123f0:	e12fff1e 	bx	lr
   123f4:	00015e08 	andeq	r5, r1, r8, lsl #28
   123f8:	00015ddc 	ldrdeq	r5, [r1], -ip

000123fc <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( xTaskHandle pxTaskToResume )
	{
   123fc:	e92d4800 	push	{fp, lr}
   12400:	e28db004 	add	fp, sp, #4
   12404:	e24dd010 	sub	sp, sp, #16
   12408:	e50b0010 	str	r0, [fp, #-16]
		/* It does not make sense to resume the calling task. */
		configASSERT( pxTaskToResume );

		/* Remove the task from whichever list it is currently in, and place
		it in the ready list. */
		pxTCB = ( tskTCB * ) pxTaskToResume;
   1240c:	e51b3010 	ldr	r3, [fp, #-16]
   12410:	e50b3008 	str	r3, [fp, #-8]

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
   12414:	e51b3008 	ldr	r3, [fp, #-8]
   12418:	e3530000 	cmp	r3, #0
   1241c:	0a00002e 	beq	124dc <vTaskResume+0xe0>
   12420:	e59f30c0 	ldr	r3, [pc, #192]	; 124e8 <vTaskResume+0xec>
   12424:	e5933000 	ldr	r3, [r3]
   12428:	e51b2008 	ldr	r2, [fp, #-8]
   1242c:	e1520003 	cmp	r2, r3
   12430:	0a000029 	beq	124dc <vTaskResume+0xe0>
		{
			taskENTER_CRITICAL();
   12434:	ebfff841 	bl	10540 <vPortEnterCritical>
			{
				if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
   12438:	e51b0008 	ldr	r0, [fp, #-8]
   1243c:	ebffffcf 	bl	12380 <xTaskIsTaskSuspended>
   12440:	e1a03000 	mov	r3, r0
   12444:	e3530001 	cmp	r3, #1
   12448:	1a000022 	bne	124d8 <vTaskResume+0xdc>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					vListRemove(  &( pxTCB->xGenericListItem ) );
   1244c:	e51b3008 	ldr	r3, [fp, #-8]
   12450:	e2833004 	add	r3, r3, #4
   12454:	e1a00003 	mov	r0, r3
   12458:	ebfffabe 	bl	10f58 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
   1245c:	e51b3008 	ldr	r3, [fp, #-8]
   12460:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   12464:	e59f3080 	ldr	r3, [pc, #128]	; 124ec <vTaskResume+0xf0>
   12468:	e5933000 	ldr	r3, [r3]
   1246c:	e1520003 	cmp	r2, r3
   12470:	9a000003 	bls	12484 <vTaskResume+0x88>
   12474:	e51b3008 	ldr	r3, [fp, #-8]
   12478:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   1247c:	e59f2068 	ldr	r2, [pc, #104]	; 124ec <vTaskResume+0xf0>
   12480:	e5823000 	str	r3, [r2]
   12484:	e51b3008 	ldr	r3, [fp, #-8]
   12488:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   1248c:	e1a03002 	mov	r3, r2
   12490:	e1a03103 	lsl	r3, r3, #2
   12494:	e0833002 	add	r3, r3, r2
   12498:	e1a03103 	lsl	r3, r3, #2
   1249c:	e59f204c 	ldr	r2, [pc, #76]	; 124f0 <vTaskResume+0xf4>
   124a0:	e0832002 	add	r2, r3, r2
   124a4:	e51b3008 	ldr	r3, [fp, #-8]
   124a8:	e2833004 	add	r3, r3, #4
   124ac:	e1a01003 	mov	r1, r3
   124b0:	e1a00002 	mov	r0, r2
   124b4:	ebfffa4b 	bl	10de8 <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   124b8:	e51b3008 	ldr	r3, [fp, #-8]
   124bc:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   124c0:	e59f3020 	ldr	r3, [pc, #32]	; 124e8 <vTaskResume+0xec>
   124c4:	e5933000 	ldr	r3, [r3]
   124c8:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   124cc:	e1520003 	cmp	r2, r3
   124d0:	3a000000 	bcc	124d8 <vTaskResume+0xdc>
					{
						/* This yield may not cause the task just resumed to run, but
						will leave the lists in the correct state for the next yield. */
						portYIELD_WITHIN_API();
   124d4:	ef000000 	svc	0x00000000
					}
				}
			}
			taskEXIT_CRITICAL();
   124d8:	ebfff829 	bl	10584 <vPortExitCritical>
		}
	}
   124dc:	e320f000 	nop	{0}
   124e0:	e24bd004 	sub	sp, fp, #4
   124e4:	e8bd8800 	pop	{fp, pc}
   124e8:	00015d44 	andeq	r5, r1, r4, asr #26
   124ec:	00015e28 	andeq	r5, r1, r8, lsr #28
   124f0:	00015d48 	andeq	r5, r1, r8, asr #26

000124f4 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	portBASE_TYPE xTaskResumeFromISR( xTaskHandle pxTaskToResume )
	{
   124f4:	e92d4800 	push	{fp, lr}
   124f8:	e28db004 	add	fp, sp, #4
   124fc:	e24dd018 	sub	sp, sp, #24
   12500:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
	portBASE_TYPE xYieldRequired = pdFALSE;
   12504:	e3a03000 	mov	r3, #0
   12508:	e50b3008 	str	r3, [fp, #-8]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxSavedInterruptStatus;

		configASSERT( pxTaskToResume );

		pxTCB = ( tskTCB * ) pxTaskToResume;
   1250c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   12510:	e50b300c 	str	r3, [fp, #-12]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   12514:	e3a03000 	mov	r3, #0
   12518:	e50b3010 	str	r3, [fp, #-16]
		{
			if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
   1251c:	e51b000c 	ldr	r0, [fp, #-12]
   12520:	ebffff96 	bl	12380 <xTaskIsTaskSuspended>
   12524:	e1a03000 	mov	r3, r0
   12528:	e3530001 	cmp	r3, #1
   1252c:	1a00002e 	bne	125ec <xTaskResumeFromISR+0xf8>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   12530:	e59f30c4 	ldr	r3, [pc, #196]	; 125fc <xTaskResumeFromISR+0x108>
   12534:	e5933000 	ldr	r3, [r3]
   12538:	e3530000 	cmp	r3, #0
   1253c:	1a000025 	bne	125d8 <xTaskResumeFromISR+0xe4>
				{
					xYieldRequired = ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority );
   12540:	e51b300c 	ldr	r3, [fp, #-12]
   12544:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   12548:	e59f30b0 	ldr	r3, [pc, #176]	; 12600 <xTaskResumeFromISR+0x10c>
   1254c:	e5933000 	ldr	r3, [r3]
   12550:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   12554:	e1520003 	cmp	r2, r3
   12558:	23a03001 	movcs	r3, #1
   1255c:	33a03000 	movcc	r3, #0
   12560:	e6ef3073 	uxtb	r3, r3
   12564:	e50b3008 	str	r3, [fp, #-8]
					vListRemove(  &( pxTCB->xGenericListItem ) );
   12568:	e51b300c 	ldr	r3, [fp, #-12]
   1256c:	e2833004 	add	r3, r3, #4
   12570:	e1a00003 	mov	r0, r3
   12574:	ebfffa77 	bl	10f58 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
   12578:	e51b300c 	ldr	r3, [fp, #-12]
   1257c:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   12580:	e59f307c 	ldr	r3, [pc, #124]	; 12604 <xTaskResumeFromISR+0x110>
   12584:	e5933000 	ldr	r3, [r3]
   12588:	e1520003 	cmp	r2, r3
   1258c:	9a000003 	bls	125a0 <xTaskResumeFromISR+0xac>
   12590:	e51b300c 	ldr	r3, [fp, #-12]
   12594:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   12598:	e59f2064 	ldr	r2, [pc, #100]	; 12604 <xTaskResumeFromISR+0x110>
   1259c:	e5823000 	str	r3, [r2]
   125a0:	e51b300c 	ldr	r3, [fp, #-12]
   125a4:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   125a8:	e1a03002 	mov	r3, r2
   125ac:	e1a03103 	lsl	r3, r3, #2
   125b0:	e0833002 	add	r3, r3, r2
   125b4:	e1a03103 	lsl	r3, r3, #2
   125b8:	e59f2048 	ldr	r2, [pc, #72]	; 12608 <xTaskResumeFromISR+0x114>
   125bc:	e0832002 	add	r2, r3, r2
   125c0:	e51b300c 	ldr	r3, [fp, #-12]
   125c4:	e2833004 	add	r3, r3, #4
   125c8:	e1a01003 	mov	r1, r3
   125cc:	e1a00002 	mov	r0, r2
   125d0:	ebfffa04 	bl	10de8 <vListInsertEnd>
   125d4:	ea000004 	b	125ec <xTaskResumeFromISR+0xf8>
				else
				{
					/* We cannot access the delayed or ready lists, so will hold this
					task pending until the scheduler is resumed, at which point a
					yield will be performed if necessary. */
					vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
   125d8:	e51b300c 	ldr	r3, [fp, #-12]
   125dc:	e2833018 	add	r3, r3, #24
   125e0:	e1a01003 	mov	r1, r3
   125e4:	e59f0020 	ldr	r0, [pc, #32]	; 1260c <xTaskResumeFromISR+0x118>
   125e8:	ebfff9fe 	bl	10de8 <vListInsertEnd>
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
   125ec:	e51b3008 	ldr	r3, [fp, #-8]
	}
   125f0:	e1a00003 	mov	r0, r3
   125f4:	e24bd004 	sub	sp, fp, #4
   125f8:	e8bd8800 	pop	{fp, pc}
   125fc:	00015e30 	andeq	r5, r1, r0, lsr lr
   12600:	00015d44 	andeq	r5, r1, r4, asr #26
   12604:	00015e28 	andeq	r5, r1, r8, lsr #28
   12608:	00015d48 	andeq	r5, r1, r8, asr #26
   1260c:	00015ddc 	ldrdeq	r5, [r1], -ip

00012610 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
   12610:	e92d4800 	push	{fp, lr}
   12614:	e28db004 	add	fp, sp, #4
   12618:	e24dd018 	sub	sp, sp, #24
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
   1261c:	e3a03000 	mov	r3, #0
   12620:	e58d300c 	str	r3, [sp, #12]
   12624:	e3a03000 	mov	r3, #0
   12628:	e58d3008 	str	r3, [sp, #8]
   1262c:	e3a03000 	mov	r3, #0
   12630:	e58d3004 	str	r3, [sp, #4]
   12634:	e3a03000 	mov	r3, #0
   12638:	e58d3000 	str	r3, [sp]
   1263c:	e3a03000 	mov	r3, #0
   12640:	e3a02080 	mov	r2, #128	; 0x80
   12644:	e59f1050 	ldr	r1, [pc, #80]	; 1269c <vTaskStartScheduler+0x8c>
   12648:	e59f0050 	ldr	r0, [pc, #80]	; 126a0 <vTaskStartScheduler+0x90>
   1264c:	ebfffd53 	bl	11ba0 <xTaskGenericCreate>
   12650:	e50b0008 	str	r0, [fp, #-8]
			xReturn = xTimerCreateTimerTask();
		}
	}
	#endif

	if( xReturn == pdPASS )
   12654:	e51b3008 	ldr	r3, [fp, #-8]
   12658:	e3530001 	cmp	r3, #1
   1265c:	1a00000b 	bne	12690 <vTaskStartScheduler+0x80>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
   12660:	e92d0001 	stmfd	sp!, {r0}
   12664:	e10f0000 	mrs	r0, CPSR
   12668:	e38000c0 	orr	r0, r0, #192	; 0xc0
   1266c:	e129f000 	msr	CPSR_fc, r0
   12670:	e8bd0001 	ldmfd	sp!, {r0}

		xSchedulerRunning = pdTRUE;
   12674:	e59f3028 	ldr	r3, [pc, #40]	; 126a4 <vTaskStartScheduler+0x94>
   12678:	e3a02001 	mov	r2, #1
   1267c:	e5832000 	str	r2, [r3]
		xTickCount = ( portTickType ) 0U;
   12680:	e59f3020 	ldr	r3, [pc, #32]	; 126a8 <vTaskStartScheduler+0x98>
   12684:	e3a02000 	mov	r2, #0
   12688:	e5832000 	str	r2, [r3]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();		

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   1268c:	ebfff6eb 	bl	10240 <xPortStartScheduler>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
   12690:	e320f000 	nop	{0}
   12694:	e24bd004 	sub	sp, fp, #4
   12698:	e8bd8800 	pop	{fp, pc}
   1269c:	00015a18 	andeq	r5, r1, r8, lsl sl
   126a0:	000130b8 	strheq	r3, [r1], -r8
   126a4:	00015e2c 	andeq	r5, r1, ip, lsr #28
   126a8:	00015e20 	andeq	r5, r1, r0, lsr #28

000126ac <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
   126ac:	e92d4800 	push	{fp, lr}
   126b0:	e28db004 	add	fp, sp, #4
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
   126b4:	e92d0001 	stmfd	sp!, {r0}
   126b8:	e10f0000 	mrs	r0, CPSR
   126bc:	e38000c0 	orr	r0, r0, #192	; 0xc0
   126c0:	e129f000 	msr	CPSR_fc, r0
   126c4:	e8bd0001 	ldmfd	sp!, {r0}
	xSchedulerRunning = pdFALSE;
   126c8:	e59f3010 	ldr	r3, [pc, #16]	; 126e0 <vTaskEndScheduler+0x34>
   126cc:	e3a02000 	mov	r2, #0
   126d0:	e5832000 	str	r2, [r3]
	vPortEndScheduler();
   126d4:	ebfff6e0 	bl	1025c <vPortEndScheduler>
}
   126d8:	e320f000 	nop	{0}
   126dc:	e8bd8800 	pop	{fp, pc}
   126e0:	00015e2c 	andeq	r5, r1, ip, lsr #28

000126e4 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
   126e4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   126e8:	e28db000 	add	fp, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
   126ec:	e59f301c 	ldr	r3, [pc, #28]	; 12710 <vTaskSuspendAll+0x2c>
   126f0:	e5933000 	ldr	r3, [r3]
   126f4:	e2833001 	add	r3, r3, #1
   126f8:	e59f2010 	ldr	r2, [pc, #16]	; 12710 <vTaskSuspendAll+0x2c>
   126fc:	e5823000 	str	r3, [r2]
}
   12700:	e320f000 	nop	{0}
   12704:	e28bd000 	add	sp, fp, #0
   12708:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   1270c:	e12fff1e 	bx	lr
   12710:	00015e30 	andeq	r5, r1, r0, lsr lr

00012714 <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
   12714:	e92d4810 	push	{r4, fp, lr}
   12718:	e28db008 	add	fp, sp, #8
   1271c:	e24dd00c 	sub	sp, sp, #12
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   12720:	e3a03000 	mov	r3, #0
   12724:	e50b3010 	str	r3, [fp, #-16]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   12728:	ebfff784 	bl	10540 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
   1272c:	e59f3164 	ldr	r3, [pc, #356]	; 12898 <xTaskResumeAll+0x184>
   12730:	e5933000 	ldr	r3, [r3]
   12734:	e2433001 	sub	r3, r3, #1
   12738:	e59f2158 	ldr	r2, [pc, #344]	; 12898 <xTaskResumeAll+0x184>
   1273c:	e5823000 	str	r3, [r2]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   12740:	e59f3150 	ldr	r3, [pc, #336]	; 12898 <xTaskResumeAll+0x184>
   12744:	e5933000 	ldr	r3, [r3]
   12748:	e3530000 	cmp	r3, #0
   1274c:	1a00004c 	bne	12884 <xTaskResumeAll+0x170>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
   12750:	e59f3144 	ldr	r3, [pc, #324]	; 1289c <xTaskResumeAll+0x188>
   12754:	e5933000 	ldr	r3, [r3]
   12758:	e3530000 	cmp	r3, #0
   1275c:	0a000048 	beq	12884 <xTaskResumeAll+0x170>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
   12760:	e3a03000 	mov	r3, #0
   12764:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   12768:	ea000023 	b	127fc <xTaskResumeAll+0xe8>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
   1276c:	e59f312c 	ldr	r3, [pc, #300]	; 128a0 <xTaskResumeAll+0x18c>
   12770:	e593300c 	ldr	r3, [r3, #12]
   12774:	e593400c 	ldr	r4, [r3, #12]
					vListRemove( &( pxTCB->xEventListItem ) );
   12778:	e2843018 	add	r3, r4, #24
   1277c:	e1a00003 	mov	r0, r3
   12780:	ebfff9f4 	bl	10f58 <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
   12784:	e2843004 	add	r3, r4, #4
   12788:	e1a00003 	mov	r0, r3
   1278c:	ebfff9f1 	bl	10f58 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
   12790:	e594202c 	ldr	r2, [r4, #44]	; 0x2c
   12794:	e59f3108 	ldr	r3, [pc, #264]	; 128a4 <xTaskResumeAll+0x190>
   12798:	e5933000 	ldr	r3, [r3]
   1279c:	e1520003 	cmp	r2, r3
   127a0:	9a000002 	bls	127b0 <xTaskResumeAll+0x9c>
   127a4:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
   127a8:	e59f20f4 	ldr	r2, [pc, #244]	; 128a4 <xTaskResumeAll+0x190>
   127ac:	e5823000 	str	r3, [r2]
   127b0:	e594202c 	ldr	r2, [r4, #44]	; 0x2c
   127b4:	e1a03002 	mov	r3, r2
   127b8:	e1a03103 	lsl	r3, r3, #2
   127bc:	e0833002 	add	r3, r3, r2
   127c0:	e1a03103 	lsl	r3, r3, #2
   127c4:	e59f20dc 	ldr	r2, [pc, #220]	; 128a8 <xTaskResumeAll+0x194>
   127c8:	e0833002 	add	r3, r3, r2
   127cc:	e2842004 	add	r2, r4, #4
   127d0:	e1a01002 	mov	r1, r2
   127d4:	e1a00003 	mov	r0, r3
   127d8:	ebfff982 	bl	10de8 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   127dc:	e594202c 	ldr	r2, [r4, #44]	; 0x2c
   127e0:	e59f30c4 	ldr	r3, [pc, #196]	; 128ac <xTaskResumeAll+0x198>
   127e4:	e5933000 	ldr	r3, [r3]
   127e8:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   127ec:	e1520003 	cmp	r2, r3
   127f0:	3a000001 	bcc	127fc <xTaskResumeAll+0xe8>
					{
						xYieldRequired = pdTRUE;
   127f4:	e3a03001 	mov	r3, #1
   127f8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   127fc:	e59f309c 	ldr	r3, [pc, #156]	; 128a0 <xTaskResumeAll+0x18c>
   12800:	e5933000 	ldr	r3, [r3]
   12804:	e3530000 	cmp	r3, #0
   12808:	1affffd7 	bne	1276c <xTaskResumeAll+0x58>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   1280c:	e59f309c 	ldr	r3, [pc, #156]	; 128b0 <xTaskResumeAll+0x19c>
   12810:	e5933000 	ldr	r3, [r3]
   12814:	e3530000 	cmp	r3, #0
   12818:	0a00000c 	beq	12850 <xTaskResumeAll+0x13c>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   1281c:	ea000005 	b	12838 <xTaskResumeAll+0x124>
					{
						vTaskIncrementTick();
   12820:	eb000048 	bl	12948 <vTaskIncrementTick>
						--uxMissedTicks;
   12824:	e59f3084 	ldr	r3, [pc, #132]	; 128b0 <xTaskResumeAll+0x19c>
   12828:	e5933000 	ldr	r3, [r3]
   1282c:	e2433001 	sub	r3, r3, #1
   12830:	e59f2078 	ldr	r2, [pc, #120]	; 128b0 <xTaskResumeAll+0x19c>
   12834:	e5823000 	str	r3, [r2]
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   12838:	e59f3070 	ldr	r3, [pc, #112]	; 128b0 <xTaskResumeAll+0x19c>
   1283c:	e5933000 	ldr	r3, [r3]
   12840:	e3530000 	cmp	r3, #0
   12844:	1afffff5 	bne	12820 <xTaskResumeAll+0x10c>
					/* As we have processed some ticks it is appropriate to yield
					to ensure the highest priority task that is ready to run is
					the task actually running. */
					#if configUSE_PREEMPTION == 1
					{
						xYieldRequired = pdTRUE;
   12848:	e3a03001 	mov	r3, #1
   1284c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
   12850:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   12854:	e3530001 	cmp	r3, #1
   12858:	0a000003 	beq	1286c <xTaskResumeAll+0x158>
   1285c:	e59f3050 	ldr	r3, [pc, #80]	; 128b4 <xTaskResumeAll+0x1a0>
   12860:	e5933000 	ldr	r3, [r3]
   12864:	e3530001 	cmp	r3, #1
   12868:	1a000005 	bne	12884 <xTaskResumeAll+0x170>
				{
					xAlreadyYielded = pdTRUE;
   1286c:	e3a03001 	mov	r3, #1
   12870:	e50b3010 	str	r3, [fp, #-16]
					xMissedYield = pdFALSE;
   12874:	e59f3038 	ldr	r3, [pc, #56]	; 128b4 <xTaskResumeAll+0x1a0>
   12878:	e3a02000 	mov	r2, #0
   1287c:	e5832000 	str	r2, [r3]
					portYIELD_WITHIN_API();
   12880:	ef000000 	svc	0x00000000
				}
			}
		}
	}
	taskEXIT_CRITICAL();
   12884:	ebfff73e 	bl	10584 <vPortExitCritical>

	return xAlreadyYielded;
   12888:	e51b3010 	ldr	r3, [fp, #-16]
}
   1288c:	e1a00003 	mov	r0, r3
   12890:	e24bd008 	sub	sp, fp, #8
   12894:	e8bd8810 	pop	{r4, fp, pc}
   12898:	00015e30 	andeq	r5, r1, r0, lsr lr
   1289c:	00015e1c 	andeq	r5, r1, ip, lsl lr
   128a0:	00015ddc 	ldrdeq	r5, [r1], -ip
   128a4:	00015e28 	andeq	r5, r1, r8, lsr #28
   128a8:	00015d48 	andeq	r5, r1, r8, asr #26
   128ac:	00015d44 	andeq	r5, r1, r4, asr #26
   128b0:	00015e34 	andeq	r5, r1, r4, lsr lr
   128b4:	00015e38 	andeq	r5, r1, r8, lsr lr

000128b8 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
   128b8:	e92d4800 	push	{fp, lr}
   128bc:	e28db004 	add	fp, sp, #4
   128c0:	e24dd008 	sub	sp, sp, #8
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
   128c4:	ebfff71d 	bl	10540 <vPortEnterCritical>
	{
		xTicks = xTickCount;
   128c8:	e59f3018 	ldr	r3, [pc, #24]	; 128e8 <xTaskGetTickCount+0x30>
   128cc:	e5933000 	ldr	r3, [r3]
   128d0:	e50b3008 	str	r3, [fp, #-8]
	}
	taskEXIT_CRITICAL();
   128d4:	ebfff72a 	bl	10584 <vPortExitCritical>

	return xTicks;
   128d8:	e51b3008 	ldr	r3, [fp, #-8]
}
   128dc:	e1a00003 	mov	r0, r3
   128e0:	e24bd004 	sub	sp, fp, #4
   128e4:	e8bd8800 	pop	{fp, pc}
   128e8:	00015e20 	andeq	r5, r1, r0, lsr #28

000128ec <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
   128ec:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   128f0:	e28db000 	add	fp, sp, #0
   128f4:	e24dd00c 	sub	sp, sp, #12
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   128f8:	e3a03000 	mov	r3, #0
   128fc:	e50b3008 	str	r3, [fp, #-8]
	xReturn = xTickCount;
   12900:	e59f3018 	ldr	r3, [pc, #24]	; 12920 <xTaskGetTickCountFromISR+0x34>
   12904:	e5933000 	ldr	r3, [r3]
   12908:	e50b300c 	str	r3, [fp, #-12]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
   1290c:	e51b300c 	ldr	r3, [fp, #-12]
}
   12910:	e1a00003 	mov	r0, r3
   12914:	e28bd000 	add	sp, fp, #0
   12918:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   1291c:	e12fff1e 	bx	lr
   12920:	00015e20 	andeq	r5, r1, r0, lsr #28

00012924 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
   12924:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   12928:	e28db000 	add	fp, sp, #0
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
   1292c:	e59f3010 	ldr	r3, [pc, #16]	; 12944 <uxTaskGetNumberOfTasks+0x20>
   12930:	e5933000 	ldr	r3, [r3]
}
   12934:	e1a00003 	mov	r0, r3
   12938:	e28bd000 	add	sp, fp, #0
   1293c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   12940:	e12fff1e 	bx	lr
   12944:	00015e1c 	andeq	r5, r1, ip, lsl lr

00012948 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
   12948:	e92d4800 	push	{fp, lr}
   1294c:	e28db004 	add	fp, sp, #4
   12950:	e24dd010 	sub	sp, sp, #16
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   12954:	e59f31e4 	ldr	r3, [pc, #484]	; 12b40 <vTaskIncrementTick+0x1f8>
   12958:	e5933000 	ldr	r3, [r3]
   1295c:	e3530000 	cmp	r3, #0
   12960:	1a00006d 	bne	12b1c <vTaskIncrementTick+0x1d4>
	{
		++xTickCount;
   12964:	e59f31d8 	ldr	r3, [pc, #472]	; 12b44 <vTaskIncrementTick+0x1fc>
   12968:	e5933000 	ldr	r3, [r3]
   1296c:	e2833001 	add	r3, r3, #1
   12970:	e59f21cc 	ldr	r2, [pc, #460]	; 12b44 <vTaskIncrementTick+0x1fc>
   12974:	e5823000 	str	r3, [r2]
		if( xTickCount == ( portTickType ) 0U )
   12978:	e59f31c4 	ldr	r3, [pc, #452]	; 12b44 <vTaskIncrementTick+0x1fc>
   1297c:	e5933000 	ldr	r3, [r3]
   12980:	e3530000 	cmp	r3, #0
   12984:	1a000020 	bne	12a0c <vTaskIncrementTick+0xc4>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );

			pxTemp = pxDelayedTaskList;
   12988:	e59f31b8 	ldr	r3, [pc, #440]	; 12b48 <vTaskIncrementTick+0x200>
   1298c:	e5933000 	ldr	r3, [r3]
   12990:	e50b3008 	str	r3, [fp, #-8]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
   12994:	e59f31b0 	ldr	r3, [pc, #432]	; 12b4c <vTaskIncrementTick+0x204>
   12998:	e5933000 	ldr	r3, [r3]
   1299c:	e59f21a4 	ldr	r2, [pc, #420]	; 12b48 <vTaskIncrementTick+0x200>
   129a0:	e5823000 	str	r3, [r2]
			pxOverflowDelayedTaskList = pxTemp;
   129a4:	e59f21a0 	ldr	r2, [pc, #416]	; 12b4c <vTaskIncrementTick+0x204>
   129a8:	e51b3008 	ldr	r3, [fp, #-8]
   129ac:	e5823000 	str	r3, [r2]
			xNumOfOverflows++;
   129b0:	e59f3198 	ldr	r3, [pc, #408]	; 12b50 <vTaskIncrementTick+0x208>
   129b4:	e5933000 	ldr	r3, [r3]
   129b8:	e2833001 	add	r3, r3, #1
   129bc:	e59f218c 	ldr	r2, [pc, #396]	; 12b50 <vTaskIncrementTick+0x208>
   129c0:	e5823000 	str	r3, [r2]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   129c4:	e59f317c 	ldr	r3, [pc, #380]	; 12b48 <vTaskIncrementTick+0x200>
   129c8:	e5933000 	ldr	r3, [r3]
   129cc:	e5933000 	ldr	r3, [r3]
   129d0:	e3530000 	cmp	r3, #0
   129d4:	1a000003 	bne	129e8 <vTaskIncrementTick+0xa0>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
   129d8:	e59f3174 	ldr	r3, [pc, #372]	; 12b54 <vTaskIncrementTick+0x20c>
   129dc:	e3e02000 	mvn	r2, #0
   129e0:	e5832000 	str	r2, [r3]
   129e4:	ea000008 	b	12a0c <vTaskIncrementTick+0xc4>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   129e8:	e59f3158 	ldr	r3, [pc, #344]	; 12b48 <vTaskIncrementTick+0x200>
   129ec:	e5933000 	ldr	r3, [r3]
   129f0:	e593300c 	ldr	r3, [r3, #12]
   129f4:	e593300c 	ldr	r3, [r3, #12]
   129f8:	e50b300c 	str	r3, [fp, #-12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   129fc:	e51b300c 	ldr	r3, [fp, #-12]
   12a00:	e5933004 	ldr	r3, [r3, #4]
   12a04:	e59f2148 	ldr	r2, [pc, #328]	; 12b54 <vTaskIncrementTick+0x20c>
   12a08:	e5823000 	str	r3, [r2]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
   12a0c:	e59f3130 	ldr	r3, [pc, #304]	; 12b44 <vTaskIncrementTick+0x1fc>
   12a10:	e5932000 	ldr	r2, [r3]
   12a14:	e59f3138 	ldr	r3, [pc, #312]	; 12b54 <vTaskIncrementTick+0x20c>
   12a18:	e5933000 	ldr	r3, [r3]
   12a1c:	e1520003 	cmp	r2, r3
   12a20:	3a000043 	bcc	12b34 <vTaskIncrementTick+0x1ec>
   12a24:	e59f311c 	ldr	r3, [pc, #284]	; 12b48 <vTaskIncrementTick+0x200>
   12a28:	e5933000 	ldr	r3, [r3]
   12a2c:	e5933000 	ldr	r3, [r3]
   12a30:	e3530000 	cmp	r3, #0
   12a34:	1a000003 	bne	12a48 <vTaskIncrementTick+0x100>
   12a38:	e59f3114 	ldr	r3, [pc, #276]	; 12b54 <vTaskIncrementTick+0x20c>
   12a3c:	e3e02000 	mvn	r2, #0
   12a40:	e5832000 	str	r2, [r3]
   12a44:	ea00003a 	b	12b34 <vTaskIncrementTick+0x1ec>
   12a48:	e59f30f8 	ldr	r3, [pc, #248]	; 12b48 <vTaskIncrementTick+0x200>
   12a4c:	e5933000 	ldr	r3, [r3]
   12a50:	e593300c 	ldr	r3, [r3, #12]
   12a54:	e593300c 	ldr	r3, [r3, #12]
   12a58:	e50b300c 	str	r3, [fp, #-12]
   12a5c:	e51b300c 	ldr	r3, [fp, #-12]
   12a60:	e5933004 	ldr	r3, [r3, #4]
   12a64:	e50b3010 	str	r3, [fp, #-16]
   12a68:	e59f30d4 	ldr	r3, [pc, #212]	; 12b44 <vTaskIncrementTick+0x1fc>
   12a6c:	e5932000 	ldr	r2, [r3]
   12a70:	e51b3010 	ldr	r3, [fp, #-16]
   12a74:	e1520003 	cmp	r2, r3
   12a78:	2a000003 	bcs	12a8c <vTaskIncrementTick+0x144>
   12a7c:	e59f20d0 	ldr	r2, [pc, #208]	; 12b54 <vTaskIncrementTick+0x20c>
   12a80:	e51b3010 	ldr	r3, [fp, #-16]
   12a84:	e5823000 	str	r3, [r2]
   12a88:	ea000029 	b	12b34 <vTaskIncrementTick+0x1ec>
   12a8c:	e51b300c 	ldr	r3, [fp, #-12]
   12a90:	e2833004 	add	r3, r3, #4
   12a94:	e1a00003 	mov	r0, r3
   12a98:	ebfff92e 	bl	10f58 <vListRemove>
   12a9c:	e51b300c 	ldr	r3, [fp, #-12]
   12aa0:	e5933028 	ldr	r3, [r3, #40]	; 0x28
   12aa4:	e3530000 	cmp	r3, #0
   12aa8:	0a000003 	beq	12abc <vTaskIncrementTick+0x174>
   12aac:	e51b300c 	ldr	r3, [fp, #-12]
   12ab0:	e2833018 	add	r3, r3, #24
   12ab4:	e1a00003 	mov	r0, r3
   12ab8:	ebfff926 	bl	10f58 <vListRemove>
   12abc:	e51b300c 	ldr	r3, [fp, #-12]
   12ac0:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   12ac4:	e59f308c 	ldr	r3, [pc, #140]	; 12b58 <vTaskIncrementTick+0x210>
   12ac8:	e5933000 	ldr	r3, [r3]
   12acc:	e1520003 	cmp	r2, r3
   12ad0:	9a000003 	bls	12ae4 <vTaskIncrementTick+0x19c>
   12ad4:	e51b300c 	ldr	r3, [fp, #-12]
   12ad8:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   12adc:	e59f2074 	ldr	r2, [pc, #116]	; 12b58 <vTaskIncrementTick+0x210>
   12ae0:	e5823000 	str	r3, [r2]
   12ae4:	e51b300c 	ldr	r3, [fp, #-12]
   12ae8:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   12aec:	e1a03002 	mov	r3, r2
   12af0:	e1a03103 	lsl	r3, r3, #2
   12af4:	e0833002 	add	r3, r3, r2
   12af8:	e1a03103 	lsl	r3, r3, #2
   12afc:	e59f2058 	ldr	r2, [pc, #88]	; 12b5c <vTaskIncrementTick+0x214>
   12b00:	e0832002 	add	r2, r3, r2
   12b04:	e51b300c 	ldr	r3, [fp, #-12]
   12b08:	e2833004 	add	r3, r3, #4
   12b0c:	e1a01003 	mov	r1, r3
   12b10:	e1a00002 	mov	r0, r2
   12b14:	ebfff8b3 	bl	10de8 <vListInsertEnd>
   12b18:	eaffffc1 	b	12a24 <vTaskIncrementTick+0xdc>
	}
	else
	{
		++uxMissedTicks;
   12b1c:	e59f303c 	ldr	r3, [pc, #60]	; 12b60 <vTaskIncrementTick+0x218>
   12b20:	e5933000 	ldr	r3, [r3]
   12b24:	e2833001 	add	r3, r3, #1
   12b28:	e59f2030 	ldr	r2, [pc, #48]	; 12b60 <vTaskIncrementTick+0x218>
   12b2c:	e5823000 	str	r3, [r2]
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
   12b30:	eaffffff 	b	12b34 <vTaskIncrementTick+0x1ec>
   12b34:	e320f000 	nop	{0}
   12b38:	e24bd004 	sub	sp, fp, #4
   12b3c:	e8bd8800 	pop	{fp, pc}
   12b40:	00015e30 	andeq	r5, r1, r0, lsr lr
   12b44:	00015e20 	andeq	r5, r1, r0, lsr #28
   12b48:	00015dd4 	ldrdeq	r5, [r1], -r4
   12b4c:	00015dd8 	ldrdeq	r5, [r1], -r8
   12b50:	00015e3c 	andeq	r5, r1, ip, lsr lr
   12b54:	00015cb0 			; <UNDEFINED> instruction: 0x00015cb0
   12b58:	00015e28 	andeq	r5, r1, r8, lsr #28
   12b5c:	00015d48 	andeq	r5, r1, r8, asr #26
   12b60:	00015e34 	andeq	r5, r1, r4, lsr lr

00012b64 <vTaskSetApplicationTaskTag>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	void vTaskSetApplicationTaskTag( xTaskHandle xTask, pdTASK_HOOK_CODE pxHookFunction )
	{
   12b64:	e92d4800 	push	{fp, lr}
   12b68:	e28db004 	add	fp, sp, #4
   12b6c:	e24dd010 	sub	sp, sp, #16
   12b70:	e50b0010 	str	r0, [fp, #-16]
   12b74:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
	tskTCB *xTCB;

		/* If xTask is NULL then we are setting our own task hook. */
		if( xTask == NULL )
   12b78:	e51b3010 	ldr	r3, [fp, #-16]
   12b7c:	e3530000 	cmp	r3, #0
   12b80:	1a000003 	bne	12b94 <vTaskSetApplicationTaskTag+0x30>
		{
			xTCB = ( tskTCB * ) pxCurrentTCB;
   12b84:	e59f3030 	ldr	r3, [pc, #48]	; 12bbc <vTaskSetApplicationTaskTag+0x58>
   12b88:	e5933000 	ldr	r3, [r3]
   12b8c:	e50b3008 	str	r3, [fp, #-8]
   12b90:	ea000001 	b	12b9c <vTaskSetApplicationTaskTag+0x38>
		}
		else
		{
			xTCB = ( tskTCB * ) xTask;
   12b94:	e51b3010 	ldr	r3, [fp, #-16]
   12b98:	e50b3008 	str	r3, [fp, #-8]
		}

		/* Save the hook function in the TCB.  A critical section is required as
		the value can be accessed from an interrupt. */
		taskENTER_CRITICAL();
   12b9c:	ebfff667 	bl	10540 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
   12ba0:	e51b3008 	ldr	r3, [fp, #-8]
   12ba4:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   12ba8:	e5832044 	str	r2, [r3, #68]	; 0x44
		taskEXIT_CRITICAL();
   12bac:	ebfff674 	bl	10584 <vPortExitCritical>
	}
   12bb0:	e320f000 	nop	{0}
   12bb4:	e24bd004 	sub	sp, fp, #4
   12bb8:	e8bd8800 	pop	{fp, pc}
   12bbc:	00015d44 	andeq	r5, r1, r4, asr #26

00012bc0 <xTaskGetApplicationTaskTag>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	pdTASK_HOOK_CODE xTaskGetApplicationTaskTag( xTaskHandle xTask )
	{
   12bc0:	e92d4800 	push	{fp, lr}
   12bc4:	e28db004 	add	fp, sp, #4
   12bc8:	e24dd010 	sub	sp, sp, #16
   12bcc:	e50b0010 	str	r0, [fp, #-16]
	tskTCB *xTCB;
	pdTASK_HOOK_CODE xReturn;

		/* If xTask is NULL then we are setting our own task hook. */
		if( xTask == NULL )
   12bd0:	e51b3010 	ldr	r3, [fp, #-16]
   12bd4:	e3530000 	cmp	r3, #0
   12bd8:	1a000003 	bne	12bec <xTaskGetApplicationTaskTag+0x2c>
		{
			xTCB = ( tskTCB * ) pxCurrentTCB;
   12bdc:	e59f3034 	ldr	r3, [pc, #52]	; 12c18 <xTaskGetApplicationTaskTag+0x58>
   12be0:	e5933000 	ldr	r3, [r3]
   12be4:	e50b3008 	str	r3, [fp, #-8]
   12be8:	ea000001 	b	12bf4 <xTaskGetApplicationTaskTag+0x34>
		}
		else
		{
			xTCB = ( tskTCB * ) xTask;
   12bec:	e51b3010 	ldr	r3, [fp, #-16]
   12bf0:	e50b3008 	str	r3, [fp, #-8]
		}

		/* Save the hook function in the TCB.  A critical section is required as
		the value can be accessed from an interrupt. */
		taskENTER_CRITICAL();
   12bf4:	ebfff651 	bl	10540 <vPortEnterCritical>
			xReturn = xTCB->pxTaskTag;
   12bf8:	e51b3008 	ldr	r3, [fp, #-8]
   12bfc:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   12c00:	e50b300c 	str	r3, [fp, #-12]
		taskEXIT_CRITICAL();
   12c04:	ebfff65e 	bl	10584 <vPortExitCritical>

		return xReturn;
   12c08:	e51b300c 	ldr	r3, [fp, #-12]
	}
   12c0c:	e1a00003 	mov	r0, r3
   12c10:	e24bd004 	sub	sp, fp, #4
   12c14:	e8bd8800 	pop	{fp, pc}
   12c18:	00015d44 	andeq	r5, r1, r4, asr #26

00012c1c <xTaskCallApplicationTaskHook>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	portBASE_TYPE xTaskCallApplicationTaskHook( xTaskHandle xTask, void *pvParameter )
	{
   12c1c:	e92d4800 	push	{fp, lr}
   12c20:	e28db004 	add	fp, sp, #4
   12c24:	e24dd010 	sub	sp, sp, #16
   12c28:	e50b0010 	str	r0, [fp, #-16]
   12c2c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
	tskTCB *xTCB;
	portBASE_TYPE xReturn;

		/* If xTask is NULL then we are calling our own task hook. */
		if( xTask == NULL )
   12c30:	e51b3010 	ldr	r3, [fp, #-16]
   12c34:	e3530000 	cmp	r3, #0
   12c38:	1a000003 	bne	12c4c <xTaskCallApplicationTaskHook+0x30>
		{
			xTCB = ( tskTCB * ) pxCurrentTCB;
   12c3c:	e59f3050 	ldr	r3, [pc, #80]	; 12c94 <xTaskCallApplicationTaskHook+0x78>
   12c40:	e5933000 	ldr	r3, [r3]
   12c44:	e50b3008 	str	r3, [fp, #-8]
   12c48:	ea000001 	b	12c54 <xTaskCallApplicationTaskHook+0x38>
		}
		else
		{
			xTCB = ( tskTCB * ) xTask;
   12c4c:	e51b3010 	ldr	r3, [fp, #-16]
   12c50:	e50b3008 	str	r3, [fp, #-8]
		}

		if( xTCB->pxTaskTag != NULL )
   12c54:	e51b3008 	ldr	r3, [fp, #-8]
   12c58:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   12c5c:	e3530000 	cmp	r3, #0
   12c60:	0a000005 	beq	12c7c <xTaskCallApplicationTaskHook+0x60>
		{
			xReturn = xTCB->pxTaskTag( pvParameter );
   12c64:	e51b3008 	ldr	r3, [fp, #-8]
   12c68:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   12c6c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   12c70:	e12fff33 	blx	r3
   12c74:	e50b000c 	str	r0, [fp, #-12]
   12c78:	ea000001 	b	12c84 <xTaskCallApplicationTaskHook+0x68>
		}
		else
		{
			xReturn = pdFAIL;
   12c7c:	e3a03000 	mov	r3, #0
   12c80:	e50b300c 	str	r3, [fp, #-12]
		}

		return xReturn;
   12c84:	e51b300c 	ldr	r3, [fp, #-12]
	}
   12c88:	e1a00003 	mov	r0, r3
   12c8c:	e24bd004 	sub	sp, fp, #4
   12c90:	e8bd8800 	pop	{fp, pc}
   12c94:	00015d44 	andeq	r5, r1, r4, asr #26

00012c98 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   12c98:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   12c9c:	e28db000 	add	fp, sp, #0
   12ca0:	e24dd00c 	sub	sp, sp, #12
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
   12ca4:	e59f30e0 	ldr	r3, [pc, #224]	; 12d8c <vTaskSwitchContext+0xf4>
   12ca8:	e5933000 	ldr	r3, [r3]
   12cac:	e3530000 	cmp	r3, #0
   12cb0:	0a000008 	beq	12cd8 <vTaskSwitchContext+0x40>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
   12cb4:	e59f30d4 	ldr	r3, [pc, #212]	; 12d90 <vTaskSwitchContext+0xf8>
   12cb8:	e3a02001 	mov	r2, #1
   12cbc:	e5832000 	str	r2, [r3]
		pTraceEvent = pxCurrentTCB->pTraceEvent;	// Restore Trace event pointer state to TCB.
#endif

		traceTASK_SWITCHED_IN();
	}
}
   12cc0:	ea00002d 	b	12d7c <vTaskSwitchContext+0xe4>
			--uxTopReadyPriority;
   12cc4:	e59f30c8 	ldr	r3, [pc, #200]	; 12d94 <vTaskSwitchContext+0xfc>
   12cc8:	e5933000 	ldr	r3, [r3]
   12ccc:	e2433001 	sub	r3, r3, #1
   12cd0:	e59f20bc 	ldr	r2, [pc, #188]	; 12d94 <vTaskSwitchContext+0xfc>
   12cd4:	e5823000 	str	r3, [r2]
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
   12cd8:	e59f30b4 	ldr	r3, [pc, #180]	; 12d94 <vTaskSwitchContext+0xfc>
   12cdc:	e5932000 	ldr	r2, [r3]
   12ce0:	e59f10b0 	ldr	r1, [pc, #176]	; 12d98 <vTaskSwitchContext+0x100>
   12ce4:	e1a03002 	mov	r3, r2
   12ce8:	e1a03103 	lsl	r3, r3, #2
   12cec:	e0833002 	add	r3, r3, r2
   12cf0:	e1a03103 	lsl	r3, r3, #2
   12cf4:	e0813003 	add	r3, r1, r3
   12cf8:	e5933000 	ldr	r3, [r3]
   12cfc:	e3530000 	cmp	r3, #0
   12d00:	0affffef 	beq	12cc4 <vTaskSwitchContext+0x2c>
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
   12d04:	e59f3088 	ldr	r3, [pc, #136]	; 12d94 <vTaskSwitchContext+0xfc>
   12d08:	e5932000 	ldr	r2, [r3]
   12d0c:	e1a03002 	mov	r3, r2
   12d10:	e1a03103 	lsl	r3, r3, #2
   12d14:	e0833002 	add	r3, r3, r2
   12d18:	e1a03103 	lsl	r3, r3, #2
   12d1c:	e59f2074 	ldr	r2, [pc, #116]	; 12d98 <vTaskSwitchContext+0x100>
   12d20:	e0833002 	add	r3, r3, r2
   12d24:	e50b3008 	str	r3, [fp, #-8]
   12d28:	e51b3008 	ldr	r3, [fp, #-8]
   12d2c:	e5933004 	ldr	r3, [r3, #4]
   12d30:	e5932004 	ldr	r2, [r3, #4]
   12d34:	e51b3008 	ldr	r3, [fp, #-8]
   12d38:	e5832004 	str	r2, [r3, #4]
   12d3c:	e51b3008 	ldr	r3, [fp, #-8]
   12d40:	e5932004 	ldr	r2, [r3, #4]
   12d44:	e51b3008 	ldr	r3, [fp, #-8]
   12d48:	e2833008 	add	r3, r3, #8
   12d4c:	e1520003 	cmp	r2, r3
   12d50:	1a000004 	bne	12d68 <vTaskSwitchContext+0xd0>
   12d54:	e51b3008 	ldr	r3, [fp, #-8]
   12d58:	e5933004 	ldr	r3, [r3, #4]
   12d5c:	e5932004 	ldr	r2, [r3, #4]
   12d60:	e51b3008 	ldr	r3, [fp, #-8]
   12d64:	e5832004 	str	r2, [r3, #4]
   12d68:	e51b3008 	ldr	r3, [fp, #-8]
   12d6c:	e5933004 	ldr	r3, [r3, #4]
   12d70:	e593300c 	ldr	r3, [r3, #12]
   12d74:	e59f2020 	ldr	r2, [pc, #32]	; 12d9c <vTaskSwitchContext+0x104>
   12d78:	e5823000 	str	r3, [r2]
}
   12d7c:	e320f000 	nop	{0}
   12d80:	e28bd000 	add	sp, fp, #0
   12d84:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   12d88:	e12fff1e 	bx	lr
   12d8c:	00015e30 	andeq	r5, r1, r0, lsr lr
   12d90:	00015e38 	andeq	r5, r1, r8, lsr lr
   12d94:	00015e28 	andeq	r5, r1, r8, lsr #28
   12d98:	00015d48 	andeq	r5, r1, r8, asr #26
   12d9c:	00015d44 	andeq	r5, r1, r4, asr #26

00012da0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
   12da0:	e92d4800 	push	{fp, lr}
   12da4:	e28db004 	add	fp, sp, #4
   12da8:	e24dd010 	sub	sp, sp, #16
   12dac:	e50b0010 	str	r0, [fp, #-16]
   12db0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   12db4:	e59f3074 	ldr	r3, [pc, #116]	; 12e30 <vTaskPlaceOnEventList+0x90>
   12db8:	e5933000 	ldr	r3, [r3]
   12dbc:	e2833018 	add	r3, r3, #24
   12dc0:	e1a01003 	mov	r1, r3
   12dc4:	e51b0010 	ldr	r0, [fp, #-16]
   12dc8:	ebfff82c 	bl	10e80 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   12dcc:	e59f305c 	ldr	r3, [pc, #92]	; 12e30 <vTaskPlaceOnEventList+0x90>
   12dd0:	e5933000 	ldr	r3, [r3]
   12dd4:	e2833004 	add	r3, r3, #4
   12dd8:	e1a00003 	mov	r0, r3
   12ddc:	ebfff85d 	bl	10f58 <vListRemove>


	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
   12de0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   12de4:	e3730001 	cmn	r3, #1
   12de8:	1a000006 	bne	12e08 <vTaskPlaceOnEventList+0x68>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   12dec:	e59f303c 	ldr	r3, [pc, #60]	; 12e30 <vTaskPlaceOnEventList+0x90>
   12df0:	e5933000 	ldr	r3, [r3]
   12df4:	e2833004 	add	r3, r3, #4
   12df8:	e1a01003 	mov	r1, r3
   12dfc:	e59f0030 	ldr	r0, [pc, #48]	; 12e34 <vTaskPlaceOnEventList+0x94>
   12e00:	ebfff7f8 	bl	10de8 <vListInsertEnd>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
   12e04:	ea000006 	b	12e24 <vTaskPlaceOnEventList+0x84>
			xTimeToWake = xTickCount + xTicksToWait;
   12e08:	e59f3028 	ldr	r3, [pc, #40]	; 12e38 <vTaskPlaceOnEventList+0x98>
   12e0c:	e5932000 	ldr	r2, [r3]
   12e10:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   12e14:	e0823003 	add	r3, r2, r3
   12e18:	e50b3008 	str	r3, [fp, #-8]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
   12e1c:	e51b0008 	ldr	r0, [fp, #-8]
   12e20:	eb00013f 	bl	13324 <prvAddCurrentTaskToDelayedList>
}
   12e24:	e320f000 	nop	{0}
   12e28:	e24bd004 	sub	sp, fp, #4
   12e2c:	e8bd8800 	pop	{fp, pc}
   12e30:	00015d44 	andeq	r5, r1, r4, asr #26
   12e34:	00015e08 	andeq	r5, r1, r8, lsl #28
   12e38:	00015e20 	andeq	r5, r1, r0, lsr #28

00012e3c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
   12e3c:	e92d4800 	push	{fp, lr}
   12e40:	e28db004 	add	fp, sp, #4
   12e44:	e24dd010 	sub	sp, sp, #16
   12e48:	e50b0010 	str	r0, [fp, #-16]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   12e4c:	e51b3010 	ldr	r3, [fp, #-16]
   12e50:	e593300c 	ldr	r3, [r3, #12]
   12e54:	e593300c 	ldr	r3, [r3, #12]
   12e58:	e50b300c 	str	r3, [fp, #-12]
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
   12e5c:	e51b300c 	ldr	r3, [fp, #-12]
   12e60:	e2833018 	add	r3, r3, #24
   12e64:	e1a00003 	mov	r0, r3
   12e68:	ebfff83a 	bl	10f58 <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   12e6c:	e59f30cc 	ldr	r3, [pc, #204]	; 12f40 <xTaskRemoveFromEventList+0x104>
   12e70:	e5933000 	ldr	r3, [r3]
   12e74:	e3530000 	cmp	r3, #0
   12e78:	1a00001b 	bne	12eec <xTaskRemoveFromEventList+0xb0>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
   12e7c:	e51b300c 	ldr	r3, [fp, #-12]
   12e80:	e2833004 	add	r3, r3, #4
   12e84:	e1a00003 	mov	r0, r3
   12e88:	ebfff832 	bl	10f58 <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
   12e8c:	e51b300c 	ldr	r3, [fp, #-12]
   12e90:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   12e94:	e59f30a8 	ldr	r3, [pc, #168]	; 12f44 <xTaskRemoveFromEventList+0x108>
   12e98:	e5933000 	ldr	r3, [r3]
   12e9c:	e1520003 	cmp	r2, r3
   12ea0:	9a000003 	bls	12eb4 <xTaskRemoveFromEventList+0x78>
   12ea4:	e51b300c 	ldr	r3, [fp, #-12]
   12ea8:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   12eac:	e59f2090 	ldr	r2, [pc, #144]	; 12f44 <xTaskRemoveFromEventList+0x108>
   12eb0:	e5823000 	str	r3, [r2]
   12eb4:	e51b300c 	ldr	r3, [fp, #-12]
   12eb8:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   12ebc:	e1a03002 	mov	r3, r2
   12ec0:	e1a03103 	lsl	r3, r3, #2
   12ec4:	e0833002 	add	r3, r3, r2
   12ec8:	e1a03103 	lsl	r3, r3, #2
   12ecc:	e59f2074 	ldr	r2, [pc, #116]	; 12f48 <xTaskRemoveFromEventList+0x10c>
   12ed0:	e0832002 	add	r2, r3, r2
   12ed4:	e51b300c 	ldr	r3, [fp, #-12]
   12ed8:	e2833004 	add	r3, r3, #4
   12edc:	e1a01003 	mov	r1, r3
   12ee0:	e1a00002 	mov	r0, r2
   12ee4:	ebfff7bf 	bl	10de8 <vListInsertEnd>
   12ee8:	ea000004 	b	12f00 <xTaskRemoveFromEventList+0xc4>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   12eec:	e51b300c 	ldr	r3, [fp, #-12]
   12ef0:	e2833018 	add	r3, r3, #24
   12ef4:	e1a01003 	mov	r1, r3
   12ef8:	e59f004c 	ldr	r0, [pc, #76]	; 12f4c <xTaskRemoveFromEventList+0x110>
   12efc:	ebfff7b9 	bl	10de8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
   12f00:	e51b300c 	ldr	r3, [fp, #-12]
   12f04:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   12f08:	e59f3040 	ldr	r3, [pc, #64]	; 12f50 <xTaskRemoveFromEventList+0x114>
   12f0c:	e5933000 	ldr	r3, [r3]
   12f10:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   12f14:	e1520003 	cmp	r2, r3
   12f18:	3a000002 	bcc	12f28 <xTaskRemoveFromEventList+0xec>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
   12f1c:	e3a03001 	mov	r3, #1
   12f20:	e50b3008 	str	r3, [fp, #-8]
   12f24:	ea000001 	b	12f30 <xTaskRemoveFromEventList+0xf4>
	}
	else
	{
		xReturn = pdFALSE;
   12f28:	e3a03000 	mov	r3, #0
   12f2c:	e50b3008 	str	r3, [fp, #-8]
	}

	return xReturn;
   12f30:	e51b3008 	ldr	r3, [fp, #-8]
}
   12f34:	e1a00003 	mov	r0, r3
   12f38:	e24bd004 	sub	sp, fp, #4
   12f3c:	e8bd8800 	pop	{fp, pc}
   12f40:	00015e30 	andeq	r5, r1, r0, lsr lr
   12f44:	00015e28 	andeq	r5, r1, r8, lsr #28
   12f48:	00015d48 	andeq	r5, r1, r8, asr #26
   12f4c:	00015ddc 	ldrdeq	r5, [r1], -ip
   12f50:	00015d44 	andeq	r5, r1, r4, asr #26

00012f54 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
   12f54:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   12f58:	e28db000 	add	fp, sp, #0
   12f5c:	e24dd00c 	sub	sp, sp, #12
   12f60:	e50b0008 	str	r0, [fp, #-8]
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   12f64:	e59f3028 	ldr	r3, [pc, #40]	; 12f94 <vTaskSetTimeOutState+0x40>
   12f68:	e5932000 	ldr	r2, [r3]
   12f6c:	e51b3008 	ldr	r3, [fp, #-8]
   12f70:	e5832000 	str	r2, [r3]
	pxTimeOut->xTimeOnEntering = xTickCount;
   12f74:	e59f301c 	ldr	r3, [pc, #28]	; 12f98 <vTaskSetTimeOutState+0x44>
   12f78:	e5932000 	ldr	r2, [r3]
   12f7c:	e51b3008 	ldr	r3, [fp, #-8]
   12f80:	e5832004 	str	r2, [r3, #4]
}
   12f84:	e320f000 	nop	{0}
   12f88:	e28bd000 	add	sp, fp, #0
   12f8c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   12f90:	e12fff1e 	bx	lr
   12f94:	00015e3c 	andeq	r5, r1, ip, lsr lr
   12f98:	00015e20 	andeq	r5, r1, r0, lsr #28

00012f9c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
   12f9c:	e92d4800 	push	{fp, lr}
   12fa0:	e28db004 	add	fp, sp, #4
   12fa4:	e24dd010 	sub	sp, sp, #16
   12fa8:	e50b0010 	str	r0, [fp, #-16]
   12fac:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
   12fb0:	ebfff562 	bl	10540 <vPortEnterCritical>
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
   12fb4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   12fb8:	e5933000 	ldr	r3, [r3]
   12fbc:	e3730001 	cmn	r3, #1
   12fc0:	1a000002 	bne	12fd0 <xTaskCheckForTimeOut+0x34>
			{
				xReturn = pdFALSE;
   12fc4:	e3a03000 	mov	r3, #0
   12fc8:	e50b3008 	str	r3, [fp, #-8]
   12fcc:	ea000028 	b	13074 <xTaskCheckForTimeOut+0xd8>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
   12fd0:	e51b3010 	ldr	r3, [fp, #-16]
   12fd4:	e5932000 	ldr	r2, [r3]
   12fd8:	e59f30a8 	ldr	r3, [pc, #168]	; 13088 <xTaskCheckForTimeOut+0xec>
   12fdc:	e5933000 	ldr	r3, [r3]
   12fe0:	e1520003 	cmp	r2, r3
   12fe4:	0a000008 	beq	1300c <xTaskCheckForTimeOut+0x70>
   12fe8:	e51b3010 	ldr	r3, [fp, #-16]
   12fec:	e5932004 	ldr	r2, [r3, #4]
   12ff0:	e59f3094 	ldr	r3, [pc, #148]	; 1308c <xTaskCheckForTimeOut+0xf0>
   12ff4:	e5933000 	ldr	r3, [r3]
   12ff8:	e1520003 	cmp	r2, r3
   12ffc:	8a000002 	bhi	1300c <xTaskCheckForTimeOut+0x70>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
   13000:	e3a03001 	mov	r3, #1
   13004:	e50b3008 	str	r3, [fp, #-8]
   13008:	ea000019 	b	13074 <xTaskCheckForTimeOut+0xd8>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
   1300c:	e59f3078 	ldr	r3, [pc, #120]	; 1308c <xTaskCheckForTimeOut+0xf0>
   13010:	e5932000 	ldr	r2, [r3]
   13014:	e51b3010 	ldr	r3, [fp, #-16]
   13018:	e5933004 	ldr	r3, [r3, #4]
   1301c:	e0422003 	sub	r2, r2, r3
   13020:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   13024:	e5933000 	ldr	r3, [r3]
   13028:	e1520003 	cmp	r2, r3
   1302c:	2a00000e 	bcs	1306c <xTaskCheckForTimeOut+0xd0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
   13030:	e59f3054 	ldr	r3, [pc, #84]	; 1308c <xTaskCheckForTimeOut+0xf0>
   13034:	e5932000 	ldr	r2, [r3]
   13038:	e51b3010 	ldr	r3, [fp, #-16]
   1303c:	e5933004 	ldr	r3, [r3, #4]
   13040:	e0423003 	sub	r3, r2, r3
   13044:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   13048:	e5922000 	ldr	r2, [r2]
   1304c:	e0422003 	sub	r2, r2, r3
   13050:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   13054:	e5832000 	str	r2, [r3]
			vTaskSetTimeOutState( pxTimeOut );
   13058:	e51b0010 	ldr	r0, [fp, #-16]
   1305c:	ebffffbc 	bl	12f54 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
   13060:	e3a03000 	mov	r3, #0
   13064:	e50b3008 	str	r3, [fp, #-8]
   13068:	ea000001 	b	13074 <xTaskCheckForTimeOut+0xd8>
		}
		else
		{
			xReturn = pdTRUE;
   1306c:	e3a03001 	mov	r3, #1
   13070:	e50b3008 	str	r3, [fp, #-8]
		}
	}
	taskEXIT_CRITICAL();
   13074:	ebfff542 	bl	10584 <vPortExitCritical>

	return xReturn;
   13078:	e51b3008 	ldr	r3, [fp, #-8]
}
   1307c:	e1a00003 	mov	r0, r3
   13080:	e24bd004 	sub	sp, fp, #4
   13084:	e8bd8800 	pop	{fp, pc}
   13088:	00015e3c 	andeq	r5, r1, ip, lsr lr
   1308c:	00015e20 	andeq	r5, r1, r0, lsr #28

00013090 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
   13090:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   13094:	e28db000 	add	fp, sp, #0
	xMissedYield = pdTRUE;
   13098:	e59f3014 	ldr	r3, [pc, #20]	; 130b4 <vTaskMissedYield+0x24>
   1309c:	e3a02001 	mov	r2, #1
   130a0:	e5832000 	str	r2, [r3]
}
   130a4:	e320f000 	nop	{0}
   130a8:	e28bd000 	add	sp, fp, #0
   130ac:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   130b0:	e12fff1e 	bx	lr
   130b4:	00015e38 	andeq	r5, r1, r8, lsr lr

000130b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   130b8:	e92d4800 	push	{fp, lr}
   130bc:	e28db004 	add	fp, sp, #4
   130c0:	e24dd008 	sub	sp, sp, #8
   130c4:	e50b0008 	str	r0, [fp, #-8]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
   130c8:	eb000066 	bl	13268 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
   130cc:	e59f3010 	ldr	r3, [pc, #16]	; 130e4 <prvIdleTask+0x2c>
   130d0:	e5933000 	ldr	r3, [r3]
   130d4:	e3530001 	cmp	r3, #1
   130d8:	9afffffa 	bls	130c8 <prvIdleTask+0x10>
			{
				taskYIELD();
   130dc:	ef000000 	svc	0x00000000
		prvCheckTasksWaitingTermination();
   130e0:	eafffff8 	b	130c8 <prvIdleTask+0x10>
   130e4:	00015d48 	andeq	r5, r1, r8, asr #26

000130e8 <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
   130e8:	e92d4800 	push	{fp, lr}
   130ec:	e28db004 	add	fp, sp, #4
   130f0:	e24dd010 	sub	sp, sp, #16
   130f4:	e50b0008 	str	r0, [fp, #-8]
   130f8:	e50b100c 	str	r1, [fp, #-12]
   130fc:	e50b2010 	str	r2, [fp, #-16]
   13100:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
   13104:	e51b3008 	ldr	r3, [fp, #-8]
   13108:	e2833034 	add	r3, r3, #52	; 0x34
   1310c:	e3a02010 	mov	r2, #16
   13110:	e51b100c 	ldr	r1, [fp, #-12]
   13114:	e1a00003 	mov	r0, r3
   13118:	eb0006ee 	bl	14cd8 <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
   1311c:	e51b3008 	ldr	r3, [fp, #-8]
   13120:	e3a02000 	mov	r2, #0
   13124:	e5c32043 	strb	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
   13128:	e51b3010 	ldr	r3, [fp, #-16]
   1312c:	e3530004 	cmp	r3, #4
   13130:	9a000001 	bls	1313c <prvInitialiseTCBVariables+0x54>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
   13134:	e3a03004 	mov	r3, #4
   13138:	e50b3010 	str	r3, [fp, #-16]
	}

	pxTCB->uxPriority = uxPriority;
   1313c:	e51b3008 	ldr	r3, [fp, #-8]
   13140:	e51b2010 	ldr	r2, [fp, #-16]
   13144:	e583202c 	str	r2, [r3, #44]	; 0x2c
	{
		pxTCB->uxBasePriority = uxPriority;
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
   13148:	e51b3008 	ldr	r3, [fp, #-8]
   1314c:	e2833004 	add	r3, r3, #4
   13150:	e1a00003 	mov	r0, r3
   13154:	ebfff718 	bl	10dbc <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
   13158:	e51b3008 	ldr	r3, [fp, #-8]
   1315c:	e2833018 	add	r3, r3, #24
   13160:	e1a00003 	mov	r0, r3
   13164:	ebfff714 	bl	10dbc <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
   13168:	e51b3008 	ldr	r3, [fp, #-8]
   1316c:	e51b2008 	ldr	r2, [fp, #-8]
   13170:	e5832010 	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
   13174:	e51b3010 	ldr	r3, [fp, #-16]
   13178:	e2632005 	rsb	r2, r3, #5
   1317c:	e51b3008 	ldr	r3, [fp, #-8]
   13180:	e5832018 	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
   13184:	e51b3008 	ldr	r3, [fp, #-8]
   13188:	e51b2008 	ldr	r2, [fp, #-8]
   1318c:	e5832024 	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxTCB->pxTaskTag = NULL;
   13190:	e51b3008 	ldr	r3, [fp, #-8]
   13194:	e3a02000 	mov	r2, #0
   13198:	e5832044 	str	r2, [r3, #68]	; 0x44
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
   1319c:	e320f000 	nop	{0}
   131a0:	e24bd004 	sub	sp, fp, #4
   131a4:	e8bd8800 	pop	{fp, pc}

000131a8 <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
   131a8:	e92d4800 	push	{fp, lr}
   131ac:	e28db004 	add	fp, sp, #4
   131b0:	e24dd008 	sub	sp, sp, #8
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
   131b4:	e3a03000 	mov	r3, #0
   131b8:	e50b3008 	str	r3, [fp, #-8]
   131bc:	ea00000b 	b	131f0 <prvInitialiseTaskLists+0x48>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
   131c0:	e51b2008 	ldr	r2, [fp, #-8]
   131c4:	e1a03002 	mov	r3, r2
   131c8:	e1a03103 	lsl	r3, r3, #2
   131cc:	e0833002 	add	r3, r3, r2
   131d0:	e1a03103 	lsl	r3, r3, #2
   131d4:	e59f206c 	ldr	r2, [pc, #108]	; 13248 <prvInitialiseTaskLists+0xa0>
   131d8:	e0833002 	add	r3, r3, r2
   131dc:	e1a00003 	mov	r0, r3
   131e0:	ebfff6db 	bl	10d54 <vListInitialise>
	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
   131e4:	e51b3008 	ldr	r3, [fp, #-8]
   131e8:	e2833001 	add	r3, r3, #1
   131ec:	e50b3008 	str	r3, [fp, #-8]
   131f0:	e51b3008 	ldr	r3, [fp, #-8]
   131f4:	e3530004 	cmp	r3, #4
   131f8:	9afffff0 	bls	131c0 <prvInitialiseTaskLists+0x18>
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
   131fc:	e59f0048 	ldr	r0, [pc, #72]	; 1324c <prvInitialiseTaskLists+0xa4>
   13200:	ebfff6d3 	bl	10d54 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
   13204:	e59f0044 	ldr	r0, [pc, #68]	; 13250 <prvInitialiseTaskLists+0xa8>
   13208:	ebfff6d1 	bl	10d54 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
   1320c:	e59f0040 	ldr	r0, [pc, #64]	; 13254 <prvInitialiseTaskLists+0xac>
   13210:	ebfff6cf 	bl	10d54 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
   13214:	e59f003c 	ldr	r0, [pc, #60]	; 13258 <prvInitialiseTaskLists+0xb0>
   13218:	ebfff6cd 	bl	10d54 <vListInitialise>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
   1321c:	e59f0038 	ldr	r0, [pc, #56]	; 1325c <prvInitialiseTaskLists+0xb4>
   13220:	ebfff6cb 	bl	10d54 <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   13224:	e59f3034 	ldr	r3, [pc, #52]	; 13260 <prvInitialiseTaskLists+0xb8>
   13228:	e59f201c 	ldr	r2, [pc, #28]	; 1324c <prvInitialiseTaskLists+0xa4>
   1322c:	e5832000 	str	r2, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   13230:	e59f302c 	ldr	r3, [pc, #44]	; 13264 <prvInitialiseTaskLists+0xbc>
   13234:	e59f2014 	ldr	r2, [pc, #20]	; 13250 <prvInitialiseTaskLists+0xa8>
   13238:	e5832000 	str	r2, [r3]
}
   1323c:	e320f000 	nop	{0}
   13240:	e24bd004 	sub	sp, fp, #4
   13244:	e8bd8800 	pop	{fp, pc}
   13248:	00015d48 	andeq	r5, r1, r8, asr #26
   1324c:	00015dac 	andeq	r5, r1, ip, lsr #27
   13250:	00015dc0 	andeq	r5, r1, r0, asr #27
   13254:	00015ddc 	ldrdeq	r5, [r1], -ip
   13258:	00015df0 	strdeq	r5, [r1], -r0
   1325c:	00015e08 	andeq	r5, r1, r8, lsl #28
   13260:	00015dd4 	ldrdeq	r5, [r1], -r4
   13264:	00015dd8 	ldrdeq	r5, [r1], -r8

00013268 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
   13268:	e92d4800 	push	{fp, lr}
   1326c:	e28db004 	add	fp, sp, #4
   13270:	e24dd008 	sub	sp, sp, #8
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   13274:	e59f309c 	ldr	r3, [pc, #156]	; 13318 <prvCheckTasksWaitingTermination+0xb0>
   13278:	e5933000 	ldr	r3, [r3]
   1327c:	e3530000 	cmp	r3, #0
   13280:	0a000021 	beq	1330c <prvCheckTasksWaitingTermination+0xa4>
		{
			vTaskSuspendAll();
   13284:	ebfffd16 	bl	126e4 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   13288:	e59f308c 	ldr	r3, [pc, #140]	; 1331c <prvCheckTasksWaitingTermination+0xb4>
   1328c:	e5933000 	ldr	r3, [r3]
   13290:	e3530000 	cmp	r3, #0
   13294:	03a03001 	moveq	r3, #1
   13298:	13a03000 	movne	r3, #0
   1329c:	e6ef3073 	uxtb	r3, r3
   132a0:	e50b3008 	str	r3, [fp, #-8]
			xTaskResumeAll();
   132a4:	ebfffd1a 	bl	12714 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
   132a8:	e51b3008 	ldr	r3, [fp, #-8]
   132ac:	e3530000 	cmp	r3, #0
   132b0:	1a000015 	bne	1330c <prvCheckTasksWaitingTermination+0xa4>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
   132b4:	ebfff4a1 	bl	10540 <vPortEnterCritical>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
   132b8:	e59f305c 	ldr	r3, [pc, #92]	; 1331c <prvCheckTasksWaitingTermination+0xb4>
   132bc:	e593300c 	ldr	r3, [r3, #12]
   132c0:	e593300c 	ldr	r3, [r3, #12]
   132c4:	e50b300c 	str	r3, [fp, #-12]
					vListRemove( &( pxTCB->xGenericListItem ) );
   132c8:	e51b300c 	ldr	r3, [fp, #-12]
   132cc:	e2833004 	add	r3, r3, #4
   132d0:	e1a00003 	mov	r0, r3
   132d4:	ebfff71f 	bl	10f58 <vListRemove>
					--uxCurrentNumberOfTasks;
   132d8:	e59f3040 	ldr	r3, [pc, #64]	; 13320 <prvCheckTasksWaitingTermination+0xb8>
   132dc:	e5933000 	ldr	r3, [r3]
   132e0:	e2433001 	sub	r3, r3, #1
   132e4:	e59f2034 	ldr	r2, [pc, #52]	; 13320 <prvCheckTasksWaitingTermination+0xb8>
   132e8:	e5823000 	str	r3, [r2]
					--uxTasksDeleted;
   132ec:	e59f3024 	ldr	r3, [pc, #36]	; 13318 <prvCheckTasksWaitingTermination+0xb0>
   132f0:	e5933000 	ldr	r3, [r3]
   132f4:	e2433001 	sub	r3, r3, #1
   132f8:	e59f2018 	ldr	r2, [pc, #24]	; 13318 <prvCheckTasksWaitingTermination+0xb0>
   132fc:	e5823000 	str	r3, [r2]
				}
				taskEXIT_CRITICAL();
   13300:	ebfff49f 	bl	10584 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
   13304:	e51b000c 	ldr	r0, [fp, #-12]
   13308:	eb00005f 	bl	1348c <prvDeleteTCB>
			}
		}
	}
	#endif
}
   1330c:	e320f000 	nop	{0}
   13310:	e24bd004 	sub	sp, fp, #4
   13314:	e8bd8800 	pop	{fp, pc}
   13318:	00015e04 	andeq	r5, r1, r4, lsl #28
   1331c:	00015df0 	strdeq	r5, [r1], -r0
   13320:	00015e1c 	andeq	r5, r1, ip, lsl lr

00013324 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
   13324:	e92d4800 	push	{fp, lr}
   13328:	e28db004 	add	fp, sp, #4
   1332c:	e24dd008 	sub	sp, sp, #8
   13330:	e50b0008 	str	r0, [fp, #-8]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
   13334:	e59f308c 	ldr	r3, [pc, #140]	; 133c8 <prvAddCurrentTaskToDelayedList+0xa4>
   13338:	e5933000 	ldr	r3, [r3]
   1333c:	e51b2008 	ldr	r2, [fp, #-8]
   13340:	e5832004 	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
   13344:	e59f3080 	ldr	r3, [pc, #128]	; 133cc <prvAddCurrentTaskToDelayedList+0xa8>
   13348:	e5933000 	ldr	r3, [r3]
   1334c:	e51b2008 	ldr	r2, [fp, #-8]
   13350:	e1520003 	cmp	r2, r3
   13354:	2a000008 	bcs	1337c <prvAddCurrentTaskToDelayedList+0x58>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   13358:	e59f3070 	ldr	r3, [pc, #112]	; 133d0 <prvAddCurrentTaskToDelayedList+0xac>
   1335c:	e5932000 	ldr	r2, [r3]
   13360:	e59f3060 	ldr	r3, [pc, #96]	; 133c8 <prvAddCurrentTaskToDelayedList+0xa4>
   13364:	e5933000 	ldr	r3, [r3]
   13368:	e2833004 	add	r3, r3, #4
   1336c:	e1a01003 	mov	r1, r3
   13370:	e1a00002 	mov	r0, r2
   13374:	ebfff6c1 	bl	10e80 <vListInsert>
		if( xTimeToWake < xNextTaskUnblockTime )
		{
			xNextTaskUnblockTime = xTimeToWake;
		}
	}
}
   13378:	ea00000f 	b	133bc <prvAddCurrentTaskToDelayedList+0x98>
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   1337c:	e59f3050 	ldr	r3, [pc, #80]	; 133d4 <prvAddCurrentTaskToDelayedList+0xb0>
   13380:	e5932000 	ldr	r2, [r3]
   13384:	e59f303c 	ldr	r3, [pc, #60]	; 133c8 <prvAddCurrentTaskToDelayedList+0xa4>
   13388:	e5933000 	ldr	r3, [r3]
   1338c:	e2833004 	add	r3, r3, #4
   13390:	e1a01003 	mov	r1, r3
   13394:	e1a00002 	mov	r0, r2
   13398:	ebfff6b8 	bl	10e80 <vListInsert>
		if( xTimeToWake < xNextTaskUnblockTime )
   1339c:	e59f3034 	ldr	r3, [pc, #52]	; 133d8 <prvAddCurrentTaskToDelayedList+0xb4>
   133a0:	e5933000 	ldr	r3, [r3]
   133a4:	e51b2008 	ldr	r2, [fp, #-8]
   133a8:	e1520003 	cmp	r2, r3
   133ac:	2a000002 	bcs	133bc <prvAddCurrentTaskToDelayedList+0x98>
			xNextTaskUnblockTime = xTimeToWake;
   133b0:	e59f2020 	ldr	r2, [pc, #32]	; 133d8 <prvAddCurrentTaskToDelayedList+0xb4>
   133b4:	e51b3008 	ldr	r3, [fp, #-8]
   133b8:	e5823000 	str	r3, [r2]
}
   133bc:	e320f000 	nop	{0}
   133c0:	e24bd004 	sub	sp, fp, #4
   133c4:	e8bd8800 	pop	{fp, pc}
   133c8:	00015d44 	andeq	r5, r1, r4, asr #26
   133cc:	00015e20 	andeq	r5, r1, r0, lsr #28
   133d0:	00015dd8 	ldrdeq	r5, [r1], -r8
   133d4:	00015dd4 	ldrdeq	r5, [r1], -r4
   133d8:	00015cb0 			; <UNDEFINED> instruction: 0x00015cb0

000133dc <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
   133dc:	e92d4800 	push	{fp, lr}
   133e0:	e28db004 	add	fp, sp, #4
   133e4:	e24dd010 	sub	sp, sp, #16
   133e8:	e1a03000 	mov	r3, r0
   133ec:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   133f0:	e14b30be 	strh	r3, [fp, #-14]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
   133f4:	e3a00048 	mov	r0, #72	; 0x48
   133f8:	eb000689 	bl	14e24 <pvPortMalloc>
   133fc:	e50b0008 	str	r0, [fp, #-8]

	if( pxNewTCB != NULL )
   13400:	e51b3008 	ldr	r3, [fp, #-8]
   13404:	e3530000 	cmp	r3, #0
   13408:	0a00001b 	beq	1347c <prvAllocateTCBAndStack+0xa0>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   1340c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   13410:	e3530000 	cmp	r3, #0
   13414:	1a000005 	bne	13430 <prvAllocateTCBAndStack+0x54>
   13418:	e15b30be 	ldrh	r3, [fp, #-14]
   1341c:	e1a03103 	lsl	r3, r3, #2
   13420:	e1a00003 	mov	r0, r3
   13424:	eb00067e 	bl	14e24 <pvPortMalloc>
   13428:	e1a03000 	mov	r3, r0
   1342c:	ea000000 	b	13434 <prvAllocateTCBAndStack+0x58>
   13430:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   13434:	e51b2008 	ldr	r2, [fp, #-8]
   13438:	e5823030 	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
   1343c:	e51b3008 	ldr	r3, [fp, #-8]
   13440:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   13444:	e3530000 	cmp	r3, #0
   13448:	1a000004 	bne	13460 <prvAllocateTCBAndStack+0x84>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
   1344c:	e51b0008 	ldr	r0, [fp, #-8]
   13450:	eb0006e5 	bl	14fec <vPortFree>
			pxNewTCB = NULL;
   13454:	e3a03000 	mov	r3, #0
   13458:	e50b3008 	str	r3, [fp, #-8]
   1345c:	ea000006 	b	1347c <prvAllocateTCBAndStack+0xa0>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
   13460:	e51b3008 	ldr	r3, [fp, #-8]
   13464:	e5930030 	ldr	r0, [r3, #48]	; 0x30
   13468:	e15b30be 	ldrh	r3, [fp, #-14]
   1346c:	e1a03103 	lsl	r3, r3, #2
   13470:	e1a02003 	mov	r2, r3
   13474:	e3a010a5 	mov	r1, #165	; 0xa5
   13478:	eb000574 	bl	14a50 <memset>
	pxNewTCB->pTraceEvent 		= NULL;
	pxNewTCB->pTraceEventMin 	= NULL;
	pxNewTCB->pTraceEventMax 	= NULL;
#endif

	return pxNewTCB;
   1347c:	e51b3008 	ldr	r3, [fp, #-8]
}
   13480:	e1a00003 	mov	r0, r3
   13484:	e24bd004 	sub	sp, fp, #4
   13488:	e8bd8800 	pop	{fp, pc}

0001348c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
   1348c:	e92d4800 	push	{fp, lr}
   13490:	e28db004 	add	fp, sp, #4
   13494:	e24dd008 	sub	sp, sp, #8
   13498:	e50b0008 	str	r0, [fp, #-8]
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
   1349c:	e51b3008 	ldr	r3, [fp, #-8]
   134a0:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   134a4:	e1a00003 	mov	r0, r3
   134a8:	eb0006cf 	bl	14fec <vPortFree>
		vPortFree( pxTCB );
   134ac:	e51b0008 	ldr	r0, [fp, #-8]
   134b0:	eb0006cd 	bl	14fec <vPortFree>
	}
   134b4:	e320f000 	nop	{0}
   134b8:	e24bd004 	sub	sp, fp, #4
   134bc:	e8bd8800 	pop	{fp, pc}

000134c0 <handleRange>:

// Remember which interrupts have been enabled:
static unsigned long enabled[3];

static void handleRange (unsigned long pending, const unsigned int base)
{
   134c0:	e92d4800 	push	{fp, lr}
   134c4:	e28db004 	add	fp, sp, #4
   134c8:	e24dd010 	sub	sp, sp, #16
   134cc:	e50b0010 	str	r0, [fp, #-16]
   134d0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
	while (pending)
   134d4:	ea00001e 	b	13554 <handleRange+0x94>
	{
		// Get index of first set bit:
		unsigned int bit = 31 - __builtin_clz(pending);
   134d8:	e51b3010 	ldr	r3, [fp, #-16]
   134dc:	e16f3f13 	clz	r3, r3
   134e0:	e263301f 	rsb	r3, r3, #31
   134e4:	e50b3008 	str	r3, [fp, #-8]

		// Map to IRQ number:
		unsigned int irq = base + bit;
   134e8:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   134ec:	e51b3008 	ldr	r3, [fp, #-8]
   134f0:	e0823003 	add	r3, r2, r3
   134f4:	e50b300c 	str	r3, [fp, #-12]

		// Call interrupt handler, if enabled:
		if (g_VectorTable[irq].pfnHandler)
   134f8:	e59f206c 	ldr	r2, [pc, #108]	; 1356c <handleRange+0xac>
   134fc:	e51b300c 	ldr	r3, [fp, #-12]
   13500:	e7923183 	ldr	r3, [r2, r3, lsl #3]
   13504:	e3530000 	cmp	r3, #0
   13508:	0a00000a 	beq	13538 <handleRange+0x78>
			g_VectorTable[irq].pfnHandler(irq, g_VectorTable[irq].pParam);
   1350c:	e59f2058 	ldr	r2, [pc, #88]	; 1356c <handleRange+0xac>
   13510:	e51b300c 	ldr	r3, [fp, #-12]
   13514:	e7922183 	ldr	r2, [r2, r3, lsl #3]
   13518:	e59f104c 	ldr	r1, [pc, #76]	; 1356c <handleRange+0xac>
   1351c:	e51b300c 	ldr	r3, [fp, #-12]
   13520:	e1a03183 	lsl	r3, r3, #3
   13524:	e0813003 	add	r3, r1, r3
   13528:	e5933004 	ldr	r3, [r3, #4]
   1352c:	e1a01003 	mov	r1, r3
   13530:	e51b000c 	ldr	r0, [fp, #-12]
   13534:	e12fff32 	blx	r2

		// Clear bit in bitfield:
		pending &= ~(1UL << bit);
   13538:	e3a02001 	mov	r2, #1
   1353c:	e51b3008 	ldr	r3, [fp, #-8]
   13540:	e1a03312 	lsl	r3, r2, r3
   13544:	e1e03003 	mvn	r3, r3
   13548:	e51b2010 	ldr	r2, [fp, #-16]
   1354c:	e0033002 	and	r3, r3, r2
   13550:	e50b3010 	str	r3, [fp, #-16]
	while (pending)
   13554:	e51b3010 	ldr	r3, [fp, #-16]
   13558:	e3530000 	cmp	r3, #0
   1355c:	1affffdd 	bne	134d8 <handleRange+0x18>
	}
}
   13560:	e320f000 	nop	{0}
   13564:	e24bd004 	sub	sp, fp, #4
   13568:	e8bd8800 	pop	{fp, pc}
   1356c:	00015e44 	andeq	r5, r1, r4, asr #28

00013570 <irqHandler>:
 *	This is the global IRQ handler on this platform!
 *	It is based on the assembler code found in the Broadcom datasheet.
 *
 **/
void irqHandler (void)
{
   13570:	e92d4830 	push	{r4, r5, fp, lr}
   13574:	e28db00c 	add	fp, sp, #12
	register unsigned long ulMaskedStatus = pRegs->IRQBasic;
   13578:	e59f3088 	ldr	r3, [pc, #136]	; 13608 <irqHandler+0x98>
   1357c:	e5934000 	ldr	r4, [r3]

	// Bit 8 in IRQBasic indicates interrupts in Pending1 (interrupts 31-0):
	if (ulMaskedStatus & (1UL << 8))
   13580:	e2043c01 	and	r3, r4, #256	; 0x100
   13584:	e3530000 	cmp	r3, #0
   13588:	0a000007 	beq	135ac <irqHandler+0x3c>
		handleRange(pRegs->Pending1 & enabled[0], 0);
   1358c:	e59f3074 	ldr	r3, [pc, #116]	; 13608 <irqHandler+0x98>
   13590:	e5932004 	ldr	r2, [r3, #4]
   13594:	e59f3070 	ldr	r3, [pc, #112]	; 1360c <irqHandler+0x9c>
   13598:	e5933000 	ldr	r3, [r3]
   1359c:	e0033002 	and	r3, r3, r2
   135a0:	e3a01000 	mov	r1, #0
   135a4:	e1a00003 	mov	r0, r3
   135a8:	ebffffc4 	bl	134c0 <handleRange>

	// Bit 9 in IRQBasic indicates interrupts in Pending2 (interrupts 63-32):
	if (ulMaskedStatus & (1UL << 9))
   135ac:	e2043c02 	and	r3, r4, #512	; 0x200
   135b0:	e3530000 	cmp	r3, #0
   135b4:	0a000007 	beq	135d8 <irqHandler+0x68>
		handleRange(pRegs->Pending2 & enabled[1], 32);
   135b8:	e59f3048 	ldr	r3, [pc, #72]	; 13608 <irqHandler+0x98>
   135bc:	e5932008 	ldr	r2, [r3, #8]
   135c0:	e59f3044 	ldr	r3, [pc, #68]	; 1360c <irqHandler+0x9c>
   135c4:	e5933004 	ldr	r3, [r3, #4]
   135c8:	e0033002 	and	r3, r3, r2
   135cc:	e3a01020 	mov	r1, #32
   135d0:	e1a00003 	mov	r0, r3
   135d4:	ebffffb9 	bl	134c0 <handleRange>

	// Bits 7 through 0 in IRQBasic represent interrupts 64-71:
	if (ulMaskedStatus & 0xFF)
   135d8:	e6ef3074 	uxtb	r3, r4
   135dc:	e3530000 	cmp	r3, #0
   135e0:	0a000006 	beq	13600 <irqHandler+0x90>
		handleRange(ulMaskedStatus & 0xFF & enabled[2], 64);
   135e4:	e59f3020 	ldr	r3, [pc, #32]	; 1360c <irqHandler+0x9c>
   135e8:	e5933008 	ldr	r3, [r3, #8]
   135ec:	e0033004 	and	r3, r3, r4
   135f0:	e6ef3073 	uxtb	r3, r3
   135f4:	e3a01040 	mov	r1, #64	; 0x40
   135f8:	e1a00003 	mov	r0, r3
   135fc:	ebffffaf 	bl	134c0 <handleRange>
}
   13600:	e320f000 	nop	{0}
   13604:	e8bd8830 	pop	{r4, r5, fp, pc}
   13608:	2000b200 	andcs	fp, r0, r0, lsl #4
   1360c:	00016084 	andeq	r6, r1, r4, lsl #1

00013610 <irqUnblock>:

void irqUnblock (void)
{
   13610:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   13614:	e28db000 	add	fp, sp, #0
	asm volatile ("cpsie i" ::: "memory");
   13618:	f1080080 	cpsie	i
}
   1361c:	e320f000 	nop	{0}
   13620:	e28bd000 	add	sp, fp, #0
   13624:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   13628:	e12fff1e 	bx	lr

0001362c <irqBlock>:

void irqBlock (void)
{
   1362c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   13630:	e28db000 	add	fp, sp, #0
	asm volatile ("cpsid i" ::: "memory");
   13634:	f10c0080 	cpsid	i
}
   13638:	e320f000 	nop	{0}
   1363c:	e28bd000 	add	sp, fp, #0
   13640:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   13644:	e12fff1e 	bx	lr

00013648 <irqRegister>:

void irqRegister (const unsigned int irq, FN_INTERRUPT_HANDLER pfnHandler, void *pParam)
{
   13648:	e92d4800 	push	{fp, lr}
   1364c:	e28db004 	add	fp, sp, #4
   13650:	e24dd010 	sub	sp, sp, #16
   13654:	e50b0008 	str	r0, [fp, #-8]
   13658:	e50b100c 	str	r1, [fp, #-12]
   1365c:	e50b2010 	str	r2, [fp, #-16]
	if (irq < BCM2835_INTC_TOTAL_IRQ) {
   13660:	e51b3008 	ldr	r3, [fp, #-8]
   13664:	e3530047 	cmp	r3, #71	; 0x47
   13668:	8a00000b 	bhi	1369c <irqRegister+0x54>
		irqBlock();
   1366c:	ebffffee 	bl	1362c <irqBlock>
		g_VectorTable[irq].pfnHandler = pfnHandler;
   13670:	e59f1030 	ldr	r1, [pc, #48]	; 136a8 <irqRegister+0x60>
   13674:	e51b3008 	ldr	r3, [fp, #-8]
   13678:	e51b200c 	ldr	r2, [fp, #-12]
   1367c:	e7812183 	str	r2, [r1, r3, lsl #3]
		g_VectorTable[irq].pParam     = pParam;
   13680:	e59f2020 	ldr	r2, [pc, #32]	; 136a8 <irqRegister+0x60>
   13684:	e51b3008 	ldr	r3, [fp, #-8]
   13688:	e1a03183 	lsl	r3, r3, #3
   1368c:	e0823003 	add	r3, r2, r3
   13690:	e51b2010 	ldr	r2, [fp, #-16]
   13694:	e5832004 	str	r2, [r3, #4]
		irqUnblock();
   13698:	ebffffdc 	bl	13610 <irqUnblock>
	}
}
   1369c:	e320f000 	nop	{0}
   136a0:	e24bd004 	sub	sp, fp, #4
   136a4:	e8bd8800 	pop	{fp, pc}
   136a8:	00015e44 	andeq	r5, r1, r4, asr #28

000136ac <irqEnable>:

void irqEnable (const unsigned int irq)
{
   136ac:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   136b0:	e28db000 	add	fp, sp, #0
   136b4:	e24dd014 	sub	sp, sp, #20
   136b8:	e50b0010 	str	r0, [fp, #-16]
	unsigned long mask = 1UL << (irq % 32);
   136bc:	e51b3010 	ldr	r3, [fp, #-16]
   136c0:	e203301f 	and	r3, r3, #31
   136c4:	e3a02001 	mov	r2, #1
   136c8:	e1a03312 	lsl	r3, r2, r3
   136cc:	e50b3008 	str	r3, [fp, #-8]

	if (irq <= 31) {
   136d0:	e51b3010 	ldr	r3, [fp, #-16]
   136d4:	e353001f 	cmp	r3, #31
   136d8:	8a000009 	bhi	13704 <irqEnable+0x58>
		pRegs->Enable1 = mask;
   136dc:	e59f2094 	ldr	r2, [pc, #148]	; 13778 <irqEnable+0xcc>
   136e0:	e51b3008 	ldr	r3, [fp, #-8]
   136e4:	e5823010 	str	r3, [r2, #16]
		enabled[0] |= mask;
   136e8:	e59f308c 	ldr	r3, [pc, #140]	; 1377c <irqEnable+0xd0>
   136ec:	e5932000 	ldr	r2, [r3]
   136f0:	e51b3008 	ldr	r3, [fp, #-8]
   136f4:	e1823003 	orr	r3, r2, r3
   136f8:	e59f207c 	ldr	r2, [pc, #124]	; 1377c <irqEnable+0xd0>
   136fc:	e5823000 	str	r3, [r2]
	}
	else if (irq < BCM2835_INTC_TOTAL_IRQ) {
		pRegs->EnableBasic = mask;
		enabled[2] |= mask;
	}
}
   13700:	ea000018 	b	13768 <irqEnable+0xbc>
	else if (irq <= 63) {
   13704:	e51b3010 	ldr	r3, [fp, #-16]
   13708:	e353003f 	cmp	r3, #63	; 0x3f
   1370c:	8a000009 	bhi	13738 <irqEnable+0x8c>
		pRegs->Enable2 = mask;
   13710:	e59f2060 	ldr	r2, [pc, #96]	; 13778 <irqEnable+0xcc>
   13714:	e51b3008 	ldr	r3, [fp, #-8]
   13718:	e5823014 	str	r3, [r2, #20]
		enabled[1] |= mask;
   1371c:	e59f3058 	ldr	r3, [pc, #88]	; 1377c <irqEnable+0xd0>
   13720:	e5932004 	ldr	r2, [r3, #4]
   13724:	e51b3008 	ldr	r3, [fp, #-8]
   13728:	e1823003 	orr	r3, r2, r3
   1372c:	e59f2048 	ldr	r2, [pc, #72]	; 1377c <irqEnable+0xd0>
   13730:	e5823004 	str	r3, [r2, #4]
}
   13734:	ea00000b 	b	13768 <irqEnable+0xbc>
	else if (irq < BCM2835_INTC_TOTAL_IRQ) {
   13738:	e51b3010 	ldr	r3, [fp, #-16]
   1373c:	e3530047 	cmp	r3, #71	; 0x47
   13740:	8a000008 	bhi	13768 <irqEnable+0xbc>
		pRegs->EnableBasic = mask;
   13744:	e59f202c 	ldr	r2, [pc, #44]	; 13778 <irqEnable+0xcc>
   13748:	e51b3008 	ldr	r3, [fp, #-8]
   1374c:	e5823018 	str	r3, [r2, #24]
		enabled[2] |= mask;
   13750:	e59f3024 	ldr	r3, [pc, #36]	; 1377c <irqEnable+0xd0>
   13754:	e5932008 	ldr	r2, [r3, #8]
   13758:	e51b3008 	ldr	r3, [fp, #-8]
   1375c:	e1823003 	orr	r3, r2, r3
   13760:	e59f2014 	ldr	r2, [pc, #20]	; 1377c <irqEnable+0xd0>
   13764:	e5823008 	str	r3, [r2, #8]
}
   13768:	e320f000 	nop	{0}
   1376c:	e28bd000 	add	sp, fp, #0
   13770:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   13774:	e12fff1e 	bx	lr
   13778:	2000b200 	andcs	fp, r0, r0, lsl #4
   1377c:	00016084 	andeq	r6, r1, r4, lsl #1

00013780 <irqDisable>:

void irqDisable (const unsigned int irq)
{
   13780:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   13784:	e28db000 	add	fp, sp, #0
   13788:	e24dd014 	sub	sp, sp, #20
   1378c:	e50b0010 	str	r0, [fp, #-16]
	unsigned long mask = 1UL << (irq % 32);
   13790:	e51b3010 	ldr	r3, [fp, #-16]
   13794:	e203301f 	and	r3, r3, #31
   13798:	e3a02001 	mov	r2, #1
   1379c:	e1a03312 	lsl	r3, r2, r3
   137a0:	e50b3008 	str	r3, [fp, #-8]

	if (irq <= 31) {
   137a4:	e51b3010 	ldr	r3, [fp, #-16]
   137a8:	e353001f 	cmp	r3, #31
   137ac:	8a00000a 	bhi	137dc <irqDisable+0x5c>
		pRegs->Disable1 = mask;
   137b0:	e59f20a0 	ldr	r2, [pc, #160]	; 13858 <irqDisable+0xd8>
   137b4:	e51b3008 	ldr	r3, [fp, #-8]
   137b8:	e582301c 	str	r3, [r2, #28]
		enabled[0] &= ~mask;
   137bc:	e59f3098 	ldr	r3, [pc, #152]	; 1385c <irqDisable+0xdc>
   137c0:	e5932000 	ldr	r2, [r3]
   137c4:	e51b3008 	ldr	r3, [fp, #-8]
   137c8:	e1e03003 	mvn	r3, r3
   137cc:	e0033002 	and	r3, r3, r2
   137d0:	e59f2084 	ldr	r2, [pc, #132]	; 1385c <irqDisable+0xdc>
   137d4:	e5823000 	str	r3, [r2]
	}
	else if (irq < BCM2835_INTC_TOTAL_IRQ) {
		pRegs->DisableBasic = mask;
		enabled[2] &= ~mask;
	}
}
   137d8:	ea00001a 	b	13848 <irqDisable+0xc8>
	else if (irq <= 63) {
   137dc:	e51b3010 	ldr	r3, [fp, #-16]
   137e0:	e353003f 	cmp	r3, #63	; 0x3f
   137e4:	8a00000a 	bhi	13814 <irqDisable+0x94>
		pRegs->Disable2 = mask;
   137e8:	e59f2068 	ldr	r2, [pc, #104]	; 13858 <irqDisable+0xd8>
   137ec:	e51b3008 	ldr	r3, [fp, #-8]
   137f0:	e5823020 	str	r3, [r2, #32]
		enabled[1] &= ~mask;
   137f4:	e59f3060 	ldr	r3, [pc, #96]	; 1385c <irqDisable+0xdc>
   137f8:	e5932004 	ldr	r2, [r3, #4]
   137fc:	e51b3008 	ldr	r3, [fp, #-8]
   13800:	e1e03003 	mvn	r3, r3
   13804:	e0033002 	and	r3, r3, r2
   13808:	e59f204c 	ldr	r2, [pc, #76]	; 1385c <irqDisable+0xdc>
   1380c:	e5823004 	str	r3, [r2, #4]
}
   13810:	ea00000c 	b	13848 <irqDisable+0xc8>
	else if (irq < BCM2835_INTC_TOTAL_IRQ) {
   13814:	e51b3010 	ldr	r3, [fp, #-16]
   13818:	e3530047 	cmp	r3, #71	; 0x47
   1381c:	8a000009 	bhi	13848 <irqDisable+0xc8>
		pRegs->DisableBasic = mask;
   13820:	e59f2030 	ldr	r2, [pc, #48]	; 13858 <irqDisable+0xd8>
   13824:	e51b3008 	ldr	r3, [fp, #-8]
   13828:	e5823024 	str	r3, [r2, #36]	; 0x24
		enabled[2] &= ~mask;
   1382c:	e59f3028 	ldr	r3, [pc, #40]	; 1385c <irqDisable+0xdc>
   13830:	e5932008 	ldr	r2, [r3, #8]
   13834:	e51b3008 	ldr	r3, [fp, #-8]
   13838:	e1e03003 	mvn	r3, r3
   1383c:	e0033002 	and	r3, r3, r2
   13840:	e59f2014 	ldr	r2, [pc, #20]	; 1385c <irqDisable+0xdc>
   13844:	e5823008 	str	r3, [r2, #8]
}
   13848:	e320f000 	nop	{0}
   1384c:	e28bd000 	add	sp, fp, #0
   13850:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   13854:	e12fff1e 	bx	lr
   13858:	2000b200 	andcs	fp, r0, r0, lsl #4
   1385c:	00016084 	andeq	r6, r1, r4, lsl #1

00013860 <SetGpioFunction>:
} BCM2835_GPIO_REGS;

volatile BCM2835_GPIO_REGS * const pRegs = (BCM2835_GPIO_REGS *) GPIO_BASE_ADDR;


void SetGpioFunction(unsigned int pinNum, unsigned int funcNum) {
   13860:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   13864:	e28db000 	add	fp, sp, #0
   13868:	e24dd01c 	sub	sp, sp, #28
   1386c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   13870:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4

	int offset = pinNum / 10;
   13874:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   13878:	e59f20b4 	ldr	r2, [pc, #180]	; 13934 <SetGpioFunction+0xd4>
   1387c:	e0832392 	umull	r2, r3, r2, r3
   13880:	e1a031a3 	lsr	r3, r3, #3
   13884:	e50b3008 	str	r3, [fp, #-8]

	unsigned long val = pRegs->GPFSEL[offset];	// Read in the original register value.
   13888:	e59f20a8 	ldr	r2, [pc, #168]	; 13938 <SetGpioFunction+0xd8>
   1388c:	e51b3008 	ldr	r3, [fp, #-8]
   13890:	e7923103 	ldr	r3, [r2, r3, lsl #2]
   13894:	e50b300c 	str	r3, [fp, #-12]

	int item = pinNum % 10;
   13898:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
   1389c:	e59f3090 	ldr	r3, [pc, #144]	; 13934 <SetGpioFunction+0xd4>
   138a0:	e0832193 	umull	r2, r3, r3, r1
   138a4:	e1a021a3 	lsr	r2, r3, #3
   138a8:	e1a03002 	mov	r3, r2
   138ac:	e1a03103 	lsl	r3, r3, #2
   138b0:	e0833002 	add	r3, r3, r2
   138b4:	e1a03083 	lsl	r3, r3, #1
   138b8:	e0412003 	sub	r2, r1, r3
   138bc:	e50b2010 	str	r2, [fp, #-16]
	val &= ~(0x7 << (item * 3));
   138c0:	e51b2010 	ldr	r2, [fp, #-16]
   138c4:	e1a03002 	mov	r3, r2
   138c8:	e1a03083 	lsl	r3, r3, #1
   138cc:	e0833002 	add	r3, r3, r2
   138d0:	e3a02007 	mov	r2, #7
   138d4:	e1a03312 	lsl	r3, r2, r3
   138d8:	e1e03003 	mvn	r3, r3
   138dc:	e1a02003 	mov	r2, r3
   138e0:	e51b300c 	ldr	r3, [fp, #-12]
   138e4:	e0033002 	and	r3, r3, r2
   138e8:	e50b300c 	str	r3, [fp, #-12]
	val |= ((funcNum & 0x7) << (item * 3));
   138ec:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   138f0:	e2031007 	and	r1, r3, #7
   138f4:	e51b2010 	ldr	r2, [fp, #-16]
   138f8:	e1a03002 	mov	r3, r2
   138fc:	e1a03083 	lsl	r3, r3, #1
   13900:	e0833002 	add	r3, r3, r2
   13904:	e1a03311 	lsl	r3, r1, r3
   13908:	e51b200c 	ldr	r2, [fp, #-12]
   1390c:	e1823003 	orr	r3, r2, r3
   13910:	e50b300c 	str	r3, [fp, #-12]
	pRegs->GPFSEL[offset] = val;
   13914:	e59f101c 	ldr	r1, [pc, #28]	; 13938 <SetGpioFunction+0xd8>
   13918:	e51b3008 	ldr	r3, [fp, #-8]
   1391c:	e51b200c 	ldr	r2, [fp, #-12]
   13920:	e7812103 	str	r2, [r1, r3, lsl #2]
}
   13924:	e320f000 	nop	{0}
   13928:	e28bd000 	add	sp, fp, #0
   1392c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   13930:	e12fff1e 	bx	lr
   13934:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
   13938:	3f200000 	svccc	0x00200000

0001393c <SetGpioDirection>:

void SetGpioDirection(unsigned int pinNum, enum GPIO_DIR dir) {
   1393c:	e92d4800 	push	{fp, lr}
   13940:	e28db004 	add	fp, sp, #4
   13944:	e24dd008 	sub	sp, sp, #8
   13948:	e50b0008 	str	r0, [fp, #-8]
   1394c:	e1a03001 	mov	r3, r1
   13950:	e54b3009 	strb	r3, [fp, #-9]
	SetGpioFunction(pinNum,dir);
   13954:	e55b3009 	ldrb	r3, [fp, #-9]
   13958:	e1a01003 	mov	r1, r3
   1395c:	e51b0008 	ldr	r0, [fp, #-8]
   13960:	ebffffbe 	bl	13860 <SetGpioFunction>
}
   13964:	e320f000 	nop	{0}
   13968:	e24bd004 	sub	sp, fp, #4
   1396c:	e8bd8800 	pop	{fp, pc}

00013970 <SetGpio>:

void SetGpio(unsigned int pinNum, unsigned int pinVal) {
   13970:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   13974:	e28db000 	add	fp, sp, #0
   13978:	e24dd014 	sub	sp, sp, #20
   1397c:	e50b0010 	str	r0, [fp, #-16]
   13980:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
	unsigned long offset=pinNum/32;
   13984:	e51b3010 	ldr	r3, [fp, #-16]
   13988:	e1a032a3 	lsr	r3, r3, #5
   1398c:	e50b3008 	str	r3, [fp, #-8]
	unsigned long mask=(1<<(pinNum%32));
   13990:	e51b3010 	ldr	r3, [fp, #-16]
   13994:	e203301f 	and	r3, r3, #31
   13998:	e3a02001 	mov	r2, #1
   1399c:	e1a03312 	lsl	r3, r2, r3
   139a0:	e50b300c 	str	r3, [fp, #-12]

	if(pinVal) {
   139a4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   139a8:	e3530000 	cmp	r3, #0
   139ac:	0a00000e 	beq	139ec <SetGpio+0x7c>
		pRegs->GPSET[offset]|=mask;
   139b0:	e59f106c 	ldr	r1, [pc, #108]	; 13a24 <SetGpio+0xb4>
   139b4:	e59f2068 	ldr	r2, [pc, #104]	; 13a24 <SetGpio+0xb4>
   139b8:	e51b3008 	ldr	r3, [fp, #-8]
   139bc:	e2833006 	add	r3, r3, #6
   139c0:	e1a03103 	lsl	r3, r3, #2
   139c4:	e0823003 	add	r3, r2, r3
   139c8:	e5932004 	ldr	r2, [r3, #4]
   139cc:	e51b300c 	ldr	r3, [fp, #-12]
   139d0:	e1822003 	orr	r2, r2, r3
   139d4:	e51b3008 	ldr	r3, [fp, #-8]
   139d8:	e2833006 	add	r3, r3, #6
   139dc:	e1a03103 	lsl	r3, r3, #2
   139e0:	e0813003 	add	r3, r1, r3
   139e4:	e5832004 	str	r2, [r3, #4]
	} else {
		pRegs->GPCLR[offset]|=mask;
	}
}
   139e8:	ea000009 	b	13a14 <SetGpio+0xa4>
		pRegs->GPCLR[offset]|=mask;
   139ec:	e59f1030 	ldr	r1, [pc, #48]	; 13a24 <SetGpio+0xb4>
   139f0:	e59f202c 	ldr	r2, [pc, #44]	; 13a24 <SetGpio+0xb4>
   139f4:	e51b3008 	ldr	r3, [fp, #-8]
   139f8:	e283300a 	add	r3, r3, #10
   139fc:	e7922103 	ldr	r2, [r2, r3, lsl #2]
   13a00:	e51b300c 	ldr	r3, [fp, #-12]
   13a04:	e1822003 	orr	r2, r2, r3
   13a08:	e51b3008 	ldr	r3, [fp, #-8]
   13a0c:	e283300a 	add	r3, r3, #10
   13a10:	e7812103 	str	r2, [r1, r3, lsl #2]
}
   13a14:	e320f000 	nop	{0}
   13a18:	e28bd000 	add	sp, fp, #0
   13a1c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   13a20:	e12fff1e 	bx	lr
   13a24:	3f200000 	svccc	0x00200000

00013a28 <ReadGpio>:

int ReadGpio(unsigned int pinNum) {
   13a28:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   13a2c:	e28db000 	add	fp, sp, #0
   13a30:	e24dd00c 	sub	sp, sp, #12
   13a34:	e50b0008 	str	r0, [fp, #-8]
	return ((pRegs->GPLEV[pinNum/32])>>(pinNum%32))&1;
   13a38:	e59f2034 	ldr	r2, [pc, #52]	; 13a74 <ReadGpio+0x4c>
   13a3c:	e51b3008 	ldr	r3, [fp, #-8]
   13a40:	e1a032a3 	lsr	r3, r3, #5
   13a44:	e283300c 	add	r3, r3, #12
   13a48:	e1a03103 	lsl	r3, r3, #2
   13a4c:	e0823003 	add	r3, r2, r3
   13a50:	e5932004 	ldr	r2, [r3, #4]
   13a54:	e51b3008 	ldr	r3, [fp, #-8]
   13a58:	e203301f 	and	r3, r3, #31
   13a5c:	e1a03332 	lsr	r3, r2, r3
   13a60:	e2033001 	and	r3, r3, #1
}
   13a64:	e1a00003 	mov	r0, r3
   13a68:	e28bd000 	add	sp, fp, #0
   13a6c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   13a70:	e12fff1e 	bx	lr
   13a74:	3f200000 	svccc	0x00200000

00013a78 <EnableGpioDetect>:

void EnableGpioDetect(unsigned int pinNum, enum DETECT_TYPE type)
{
   13a78:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   13a7c:	e28db000 	add	fp, sp, #0
   13a80:	e24dd014 	sub	sp, sp, #20
   13a84:	e50b0010 	str	r0, [fp, #-16]
   13a88:	e1a03001 	mov	r3, r1
   13a8c:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
	unsigned long mask=(1<<pinNum);
   13a90:	e3a02001 	mov	r2, #1
   13a94:	e51b3010 	ldr	r3, [fp, #-16]
   13a98:	e1a03312 	lsl	r3, r2, r3
   13a9c:	e50b3008 	str	r3, [fp, #-8]
	unsigned long offset=pinNum/32;
   13aa0:	e51b3010 	ldr	r3, [fp, #-16]
   13aa4:	e1a032a3 	lsr	r3, r3, #5
   13aa8:	e50b300c 	str	r3, [fp, #-12]
	
	switch(type) {
   13aac:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
   13ab0:	e3530006 	cmp	r3, #6
   13ab4:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   13ab8:	ea000055 	b	13c14 <EnableGpioDetect+0x19c>
   13abc:	00013c10 	andeq	r3, r1, r0, lsl ip
   13ac0:	00013ad8 	ldrdeq	r3, [r1], -r8
   13ac4:	00013b14 	andeq	r3, r1, r4, lsl fp
   13ac8:	00013b40 	andeq	r3, r1, r0, asr #22
   13acc:	00013b7c 	andeq	r3, r1, ip, ror fp
   13ad0:	00013ba8 	andeq	r3, r1, r8, lsr #23
   13ad4:	00013be4 	andeq	r3, r1, r4, ror #23
	case DETECT_RISING:
		pRegs->GPREN[offset]|=mask;
   13ad8:	e59f1144 	ldr	r1, [pc, #324]	; 13c24 <EnableGpioDetect+0x1ac>
   13adc:	e59f2140 	ldr	r2, [pc, #320]	; 13c24 <EnableGpioDetect+0x1ac>
   13ae0:	e51b300c 	ldr	r3, [fp, #-12]
   13ae4:	e2833012 	add	r3, r3, #18
   13ae8:	e1a03103 	lsl	r3, r3, #2
   13aec:	e0823003 	add	r3, r2, r3
   13af0:	e5932004 	ldr	r2, [r3, #4]
   13af4:	e51b3008 	ldr	r3, [fp, #-8]
   13af8:	e1822003 	orr	r2, r2, r3
   13afc:	e51b300c 	ldr	r3, [fp, #-12]
   13b00:	e2833012 	add	r3, r3, #18
   13b04:	e1a03103 	lsl	r3, r3, #2
   13b08:	e0813003 	add	r3, r1, r3
   13b0c:	e5832004 	str	r2, [r3, #4]
		break;
   13b10:	ea00003f 	b	13c14 <EnableGpioDetect+0x19c>
	case DETECT_FALLING:
		pRegs->GPFEN[offset]|=mask;
   13b14:	e59f1108 	ldr	r1, [pc, #264]	; 13c24 <EnableGpioDetect+0x1ac>
   13b18:	e59f2104 	ldr	r2, [pc, #260]	; 13c24 <EnableGpioDetect+0x1ac>
   13b1c:	e51b300c 	ldr	r3, [fp, #-12]
   13b20:	e2833016 	add	r3, r3, #22
   13b24:	e7922103 	ldr	r2, [r2, r3, lsl #2]
   13b28:	e51b3008 	ldr	r3, [fp, #-8]
   13b2c:	e1822003 	orr	r2, r2, r3
   13b30:	e51b300c 	ldr	r3, [fp, #-12]
   13b34:	e2833016 	add	r3, r3, #22
   13b38:	e7812103 	str	r2, [r1, r3, lsl #2]
		break;
   13b3c:	ea000034 	b	13c14 <EnableGpioDetect+0x19c>
	case DETECT_HIGH:
		pRegs->GPHEN[offset]|=mask;
   13b40:	e59f10dc 	ldr	r1, [pc, #220]	; 13c24 <EnableGpioDetect+0x1ac>
   13b44:	e59f20d8 	ldr	r2, [pc, #216]	; 13c24 <EnableGpioDetect+0x1ac>
   13b48:	e51b300c 	ldr	r3, [fp, #-12]
   13b4c:	e2833018 	add	r3, r3, #24
   13b50:	e1a03103 	lsl	r3, r3, #2
   13b54:	e0823003 	add	r3, r2, r3
   13b58:	e5932004 	ldr	r2, [r3, #4]
   13b5c:	e51b3008 	ldr	r3, [fp, #-8]
   13b60:	e1822003 	orr	r2, r2, r3
   13b64:	e51b300c 	ldr	r3, [fp, #-12]
   13b68:	e2833018 	add	r3, r3, #24
   13b6c:	e1a03103 	lsl	r3, r3, #2
   13b70:	e0813003 	add	r3, r1, r3
   13b74:	e5832004 	str	r2, [r3, #4]
		break;
   13b78:	ea000025 	b	13c14 <EnableGpioDetect+0x19c>
	case DETECT_LOW:
		pRegs->GPLEN[offset]|=mask;
   13b7c:	e59f10a0 	ldr	r1, [pc, #160]	; 13c24 <EnableGpioDetect+0x1ac>
   13b80:	e59f209c 	ldr	r2, [pc, #156]	; 13c24 <EnableGpioDetect+0x1ac>
   13b84:	e51b300c 	ldr	r3, [fp, #-12]
   13b88:	e283301c 	add	r3, r3, #28
   13b8c:	e7922103 	ldr	r2, [r2, r3, lsl #2]
   13b90:	e51b3008 	ldr	r3, [fp, #-8]
   13b94:	e1822003 	orr	r2, r2, r3
   13b98:	e51b300c 	ldr	r3, [fp, #-12]
   13b9c:	e283301c 	add	r3, r3, #28
   13ba0:	e7812103 	str	r2, [r1, r3, lsl #2]
		break;
   13ba4:	ea00001a 	b	13c14 <EnableGpioDetect+0x19c>
	case DETECT_RISING_ASYNC:
		pRegs->GPAREN[offset]|=mask;
   13ba8:	e59f1074 	ldr	r1, [pc, #116]	; 13c24 <EnableGpioDetect+0x1ac>
   13bac:	e59f2070 	ldr	r2, [pc, #112]	; 13c24 <EnableGpioDetect+0x1ac>
   13bb0:	e51b300c 	ldr	r3, [fp, #-12]
   13bb4:	e283301e 	add	r3, r3, #30
   13bb8:	e1a03103 	lsl	r3, r3, #2
   13bbc:	e0823003 	add	r3, r2, r3
   13bc0:	e5932004 	ldr	r2, [r3, #4]
   13bc4:	e51b3008 	ldr	r3, [fp, #-8]
   13bc8:	e1822003 	orr	r2, r2, r3
   13bcc:	e51b300c 	ldr	r3, [fp, #-12]
   13bd0:	e283301e 	add	r3, r3, #30
   13bd4:	e1a03103 	lsl	r3, r3, #2
   13bd8:	e0813003 	add	r3, r1, r3
   13bdc:	e5832004 	str	r2, [r3, #4]
		break;
   13be0:	ea00000b 	b	13c14 <EnableGpioDetect+0x19c>
	case DETECT_FALLING_ASYNC:
		pRegs->GPAFEN[offset]|=mask;
   13be4:	e59f1038 	ldr	r1, [pc, #56]	; 13c24 <EnableGpioDetect+0x1ac>
   13be8:	e59f2034 	ldr	r2, [pc, #52]	; 13c24 <EnableGpioDetect+0x1ac>
   13bec:	e51b300c 	ldr	r3, [fp, #-12]
   13bf0:	e2833022 	add	r3, r3, #34	; 0x22
   13bf4:	e7922103 	ldr	r2, [r2, r3, lsl #2]
   13bf8:	e51b3008 	ldr	r3, [fp, #-8]
   13bfc:	e1822003 	orr	r2, r2, r3
   13c00:	e51b300c 	ldr	r3, [fp, #-12]
   13c04:	e2833022 	add	r3, r3, #34	; 0x22
   13c08:	e7812103 	str	r2, [r1, r3, lsl #2]
		break;
   13c0c:	ea000000 	b	13c14 <EnableGpioDetect+0x19c>
	case DETECT_NONE:
		break;
   13c10:	e320f000 	nop	{0}
	}
}
   13c14:	e320f000 	nop	{0}
   13c18:	e28bd000 	add	sp, fp, #0
   13c1c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   13c20:	e12fff1e 	bx	lr
   13c24:	3f200000 	svccc	0x00200000

00013c28 <DisableGpioDetect>:

void DisableGpioDetect(unsigned int pinNum, enum DETECT_TYPE type)
{
   13c28:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   13c2c:	e28db000 	add	fp, sp, #0
   13c30:	e24dd014 	sub	sp, sp, #20
   13c34:	e50b0010 	str	r0, [fp, #-16]
   13c38:	e1a03001 	mov	r3, r1
   13c3c:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
	unsigned long mask=~(1<<(pinNum%32));
   13c40:	e51b3010 	ldr	r3, [fp, #-16]
   13c44:	e203301f 	and	r3, r3, #31
   13c48:	e3a02001 	mov	r2, #1
   13c4c:	e1a03312 	lsl	r3, r2, r3
   13c50:	e1e03003 	mvn	r3, r3
   13c54:	e50b3008 	str	r3, [fp, #-8]
	unsigned long offset=pinNum/32;
   13c58:	e51b3010 	ldr	r3, [fp, #-16]
   13c5c:	e1a032a3 	lsr	r3, r3, #5
   13c60:	e50b300c 	str	r3, [fp, #-12]
	
	switch(type) {
   13c64:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
   13c68:	e3530006 	cmp	r3, #6
   13c6c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   13c70:	ea000055 	b	13dcc <DisableGpioDetect+0x1a4>
   13c74:	00013dc8 	andeq	r3, r1, r8, asr #27
   13c78:	00013c90 	muleq	r1, r0, ip
   13c7c:	00013ccc 	andeq	r3, r1, ip, asr #25
   13c80:	00013cf8 	strdeq	r3, [r1], -r8
   13c84:	00013d34 	andeq	r3, r1, r4, lsr sp
   13c88:	00013d60 	andeq	r3, r1, r0, ror #26
   13c8c:	00013d9c 	muleq	r1, ip, sp
	case DETECT_RISING:
		pRegs->GPREN[offset]&=mask;
   13c90:	e59f1144 	ldr	r1, [pc, #324]	; 13ddc <DisableGpioDetect+0x1b4>
   13c94:	e59f2140 	ldr	r2, [pc, #320]	; 13ddc <DisableGpioDetect+0x1b4>
   13c98:	e51b300c 	ldr	r3, [fp, #-12]
   13c9c:	e2833012 	add	r3, r3, #18
   13ca0:	e1a03103 	lsl	r3, r3, #2
   13ca4:	e0823003 	add	r3, r2, r3
   13ca8:	e5932004 	ldr	r2, [r3, #4]
   13cac:	e51b3008 	ldr	r3, [fp, #-8]
   13cb0:	e0022003 	and	r2, r2, r3
   13cb4:	e51b300c 	ldr	r3, [fp, #-12]
   13cb8:	e2833012 	add	r3, r3, #18
   13cbc:	e1a03103 	lsl	r3, r3, #2
   13cc0:	e0813003 	add	r3, r1, r3
   13cc4:	e5832004 	str	r2, [r3, #4]
		break;
   13cc8:	ea00003f 	b	13dcc <DisableGpioDetect+0x1a4>
	case DETECT_FALLING:
		pRegs->GPFEN[offset]&=mask;
   13ccc:	e59f1108 	ldr	r1, [pc, #264]	; 13ddc <DisableGpioDetect+0x1b4>
   13cd0:	e59f2104 	ldr	r2, [pc, #260]	; 13ddc <DisableGpioDetect+0x1b4>
   13cd4:	e51b300c 	ldr	r3, [fp, #-12]
   13cd8:	e2833016 	add	r3, r3, #22
   13cdc:	e7922103 	ldr	r2, [r2, r3, lsl #2]
   13ce0:	e51b3008 	ldr	r3, [fp, #-8]
   13ce4:	e0022003 	and	r2, r2, r3
   13ce8:	e51b300c 	ldr	r3, [fp, #-12]
   13cec:	e2833016 	add	r3, r3, #22
   13cf0:	e7812103 	str	r2, [r1, r3, lsl #2]
		break;
   13cf4:	ea000034 	b	13dcc <DisableGpioDetect+0x1a4>
	case DETECT_HIGH:
		pRegs->GPHEN[offset]&=mask;
   13cf8:	e59f10dc 	ldr	r1, [pc, #220]	; 13ddc <DisableGpioDetect+0x1b4>
   13cfc:	e59f20d8 	ldr	r2, [pc, #216]	; 13ddc <DisableGpioDetect+0x1b4>
   13d00:	e51b300c 	ldr	r3, [fp, #-12]
   13d04:	e2833018 	add	r3, r3, #24
   13d08:	e1a03103 	lsl	r3, r3, #2
   13d0c:	e0823003 	add	r3, r2, r3
   13d10:	e5932004 	ldr	r2, [r3, #4]
   13d14:	e51b3008 	ldr	r3, [fp, #-8]
   13d18:	e0022003 	and	r2, r2, r3
   13d1c:	e51b300c 	ldr	r3, [fp, #-12]
   13d20:	e2833018 	add	r3, r3, #24
   13d24:	e1a03103 	lsl	r3, r3, #2
   13d28:	e0813003 	add	r3, r1, r3
   13d2c:	e5832004 	str	r2, [r3, #4]
		break;
   13d30:	ea000025 	b	13dcc <DisableGpioDetect+0x1a4>
	case DETECT_LOW:
		pRegs->GPLEN[offset]&=mask;
   13d34:	e59f10a0 	ldr	r1, [pc, #160]	; 13ddc <DisableGpioDetect+0x1b4>
   13d38:	e59f209c 	ldr	r2, [pc, #156]	; 13ddc <DisableGpioDetect+0x1b4>
   13d3c:	e51b300c 	ldr	r3, [fp, #-12]
   13d40:	e283301c 	add	r3, r3, #28
   13d44:	e7922103 	ldr	r2, [r2, r3, lsl #2]
   13d48:	e51b3008 	ldr	r3, [fp, #-8]
   13d4c:	e0022003 	and	r2, r2, r3
   13d50:	e51b300c 	ldr	r3, [fp, #-12]
   13d54:	e283301c 	add	r3, r3, #28
   13d58:	e7812103 	str	r2, [r1, r3, lsl #2]
		break;
   13d5c:	ea00001a 	b	13dcc <DisableGpioDetect+0x1a4>
	case DETECT_RISING_ASYNC:
		pRegs->GPAREN[offset]&=mask;
   13d60:	e59f1074 	ldr	r1, [pc, #116]	; 13ddc <DisableGpioDetect+0x1b4>
   13d64:	e59f2070 	ldr	r2, [pc, #112]	; 13ddc <DisableGpioDetect+0x1b4>
   13d68:	e51b300c 	ldr	r3, [fp, #-12]
   13d6c:	e283301e 	add	r3, r3, #30
   13d70:	e1a03103 	lsl	r3, r3, #2
   13d74:	e0823003 	add	r3, r2, r3
   13d78:	e5932004 	ldr	r2, [r3, #4]
   13d7c:	e51b3008 	ldr	r3, [fp, #-8]
   13d80:	e0022003 	and	r2, r2, r3
   13d84:	e51b300c 	ldr	r3, [fp, #-12]
   13d88:	e283301e 	add	r3, r3, #30
   13d8c:	e1a03103 	lsl	r3, r3, #2
   13d90:	e0813003 	add	r3, r1, r3
   13d94:	e5832004 	str	r2, [r3, #4]
		break;
   13d98:	ea00000b 	b	13dcc <DisableGpioDetect+0x1a4>
	case DETECT_FALLING_ASYNC:
		pRegs->GPAFEN[offset]&=mask;
   13d9c:	e59f1038 	ldr	r1, [pc, #56]	; 13ddc <DisableGpioDetect+0x1b4>
   13da0:	e59f2034 	ldr	r2, [pc, #52]	; 13ddc <DisableGpioDetect+0x1b4>
   13da4:	e51b300c 	ldr	r3, [fp, #-12]
   13da8:	e2833022 	add	r3, r3, #34	; 0x22
   13dac:	e7922103 	ldr	r2, [r2, r3, lsl #2]
   13db0:	e51b3008 	ldr	r3, [fp, #-8]
   13db4:	e0022003 	and	r2, r2, r3
   13db8:	e51b300c 	ldr	r3, [fp, #-12]
   13dbc:	e2833022 	add	r3, r3, #34	; 0x22
   13dc0:	e7812103 	str	r2, [r1, r3, lsl #2]
		break;
   13dc4:	ea000000 	b	13dcc <DisableGpioDetect+0x1a4>
	case DETECT_NONE:
		break;
   13dc8:	e320f000 	nop	{0}
	}
}
   13dcc:	e320f000 	nop	{0}
   13dd0:	e28bd000 	add	sp, fp, #0
   13dd4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   13dd8:	e12fff1e 	bx	lr
   13ddc:	3f200000 	svccc	0x00200000

00013de0 <delay>:
static inline void delay(int32_t count)
{
   13de0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   13de4:	e28db000 	add	fp, sp, #0
   13de8:	e24dd00c 	sub	sp, sp, #12
   13dec:	e50b0008 	str	r0, [fp, #-8]
		asm volatile("__delay_%=: subs %[count], %[count], #1; bne __delay_%=\n"
   13df0:	e51b3008 	ldr	r3, [fp, #-8]

00013df4 <__delay_529>:
   13df4:	e2533001 	subs	r3, r3, #1
   13df8:	1afffffd 	bne	13df4 <__delay_529>
   13dfc:	e50b3008 	str	r3, [fp, #-8]
						 : "=r"(count): [count]"0"(count) : "cc");
}
   13e00:	e320f000 	nop	{0}
   13e04:	e28bd000 	add	sp, fp, #0
   13e08:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   13e0c:	e12fff1e 	bx	lr

00013e10 <uart_init>:
void uart_init()
{
   13e10:	e92d4800 	push	{fp, lr}
   13e14:	e28db004 	add	fp, sp, #4
	mmio_write(UART_BASE_ADDR + 0x30, 0x00000000);
   13e18:	e3a01000 	mov	r1, #0
   13e1c:	e59f0084 	ldr	r0, [pc, #132]	; 13ea8 <uart_init+0x98>
   13e20:	eb000041 	bl	13f2c <mmio_write>
	mmio_write(GPIO_BASE_ADDR + 0x94, 0x00000000);
   13e24:	e3a01000 	mov	r1, #0
   13e28:	e59f007c 	ldr	r0, [pc, #124]	; 13eac <uart_init+0x9c>
   13e2c:	eb00003e 	bl	13f2c <mmio_write>
	delay(150);
   13e30:	e3a00096 	mov	r0, #150	; 0x96
   13e34:	ebffffe9 	bl	13de0 <delay>
	mmio_write(GPIO_BASE_ADDR + 0x98, (1 << 14) | (1 << 15));
   13e38:	e3a01903 	mov	r1, #49152	; 0xc000
   13e3c:	e59f006c 	ldr	r0, [pc, #108]	; 13eb0 <uart_init+0xa0>
   13e40:	eb000039 	bl	13f2c <mmio_write>
	delay(150);
   13e44:	e3a00096 	mov	r0, #150	; 0x96
   13e48:	ebffffe4 	bl	13de0 <delay>
	mmio_write(GPIO_BASE_ADDR + 0x98, 0x00000000);
   13e4c:	e3a01000 	mov	r1, #0
   13e50:	e59f0058 	ldr	r0, [pc, #88]	; 13eb0 <uart_init+0xa0>
   13e54:	eb000034 	bl	13f2c <mmio_write>
	mmio_write(UART_BASE_ADDR + 0x44, 0x7FF);
   13e58:	e59f1054 	ldr	r1, [pc, #84]	; 13eb4 <uart_init+0xa4>
   13e5c:	e59f0054 	ldr	r0, [pc, #84]	; 13eb8 <uart_init+0xa8>
   13e60:	eb000031 	bl	13f2c <mmio_write>
	mmio_write(UART_BASE_ADDR + 0x24, 1);
   13e64:	e3a01001 	mov	r1, #1
   13e68:	e59f004c 	ldr	r0, [pc, #76]	; 13ebc <uart_init+0xac>
   13e6c:	eb00002e 	bl	13f2c <mmio_write>
	mmio_write(UART_BASE_ADDR + 0x28, 40);
   13e70:	e3a01028 	mov	r1, #40	; 0x28
   13e74:	e59f0044 	ldr	r0, [pc, #68]	; 13ec0 <uart_init+0xb0>
   13e78:	eb00002b 	bl	13f2c <mmio_write>
	mmio_write(UART_BASE_ADDR + 0x2C, (1 << 4) | (1 << 5) | (1 << 6));
   13e7c:	e3a01070 	mov	r1, #112	; 0x70
   13e80:	e59f003c 	ldr	r0, [pc, #60]	; 13ec4 <uart_init+0xb4>
   13e84:	eb000028 	bl	13f2c <mmio_write>
	mmio_write(UART_BASE_ADDR + 0x38, (1 << 1) | (1 << 4) | (1 << 5) | (1 << 6) |
   13e88:	e59f1038 	ldr	r1, [pc, #56]	; 13ec8 <uart_init+0xb8>
   13e8c:	e59f0038 	ldr	r0, [pc, #56]	; 13ecc <uart_init+0xbc>
   13e90:	eb000025 	bl	13f2c <mmio_write>
						       (1 << 7) | (1 << 8) | (1 << 9) | (1 << 10));
	mmio_write(UART_BASE_ADDR + 0x30, (1 << 0) | (1 << 8) | (1 << 9));
   13e94:	e59f1034 	ldr	r1, [pc, #52]	; 13ed0 <uart_init+0xc0>
   13e98:	e59f0008 	ldr	r0, [pc, #8]	; 13ea8 <uart_init+0x98>
   13e9c:	eb000022 	bl	13f2c <mmio_write>
}
   13ea0:	e320f000 	nop	{0}
   13ea4:	e8bd8800 	pop	{fp, pc}
   13ea8:	3f201030 	svccc	0x00201030
   13eac:	3f200094 	svccc	0x00200094
   13eb0:	3f200098 	svccc	0x00200098
   13eb4:	000007ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   13eb8:	3f201044 	svccc	0x00201044
   13ebc:	3f201024 	svccc	0x00201024
   13ec0:	3f201028 	svccc	0x00201028
   13ec4:	3f20102c 	svccc	0x0020102c
   13ec8:	000007f2 	strdeq	r0, [r0], -r2
   13ecc:	3f201038 	svccc	0x00201038
   13ed0:	00000301 	andeq	r0, r0, r1, lsl #6

00013ed4 <ClearGpioInterrupt>:
void ClearGpioInterrupt(unsigned int pinNum)
{
   13ed4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   13ed8:	e28db000 	add	fp, sp, #0
   13edc:	e24dd014 	sub	sp, sp, #20
   13ee0:	e50b0010 	str	r0, [fp, #-16]
	unsigned long mask=(1<<(pinNum%32));
   13ee4:	e51b3010 	ldr	r3, [fp, #-16]
   13ee8:	e203301f 	and	r3, r3, #31
   13eec:	e3a02001 	mov	r2, #1
   13ef0:	e1a03312 	lsl	r3, r2, r3
   13ef4:	e50b3008 	str	r3, [fp, #-8]
	unsigned long offset=pinNum/32;
   13ef8:	e51b3010 	ldr	r3, [fp, #-16]
   13efc:	e1a032a3 	lsr	r3, r3, #5
   13f00:	e50b300c 	str	r3, [fp, #-12]

	pRegs->GPEDS[offset]=mask;
   13f04:	e59f101c 	ldr	r1, [pc, #28]	; 13f28 <ClearGpioInterrupt+0x54>
   13f08:	e51b300c 	ldr	r3, [fp, #-12]
   13f0c:	e2833010 	add	r3, r3, #16
   13f10:	e51b2008 	ldr	r2, [fp, #-8]
   13f14:	e7812103 	str	r2, [r1, r3, lsl #2]
}
   13f18:	e320f000 	nop	{0}
   13f1c:	e28bd000 	add	sp, fp, #0
   13f20:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   13f24:	e12fff1e 	bx	lr
   13f28:	3f200000 	svccc	0x00200000

00013f2c <mmio_write>:
static inline void mmio_write(uint32_t reg, uint32_t data)
{
   13f2c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   13f30:	e28db000 	add	fp, sp, #0
   13f34:	e24dd00c 	sub	sp, sp, #12
   13f38:	e50b0008 	str	r0, [fp, #-8]
   13f3c:	e50b100c 	str	r1, [fp, #-12]
		*(volatile uint32_t*)reg = data;
   13f40:	e51b3008 	ldr	r3, [fp, #-8]
   13f44:	e51b200c 	ldr	r2, [fp, #-12]
   13f48:	e5832000 	str	r2, [r3]
}
   13f4c:	e320f000 	nop	{0}
   13f50:	e28bd000 	add	sp, fp, #0
   13f54:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   13f58:	e12fff1e 	bx	lr

00013f5c <mmio_read>:
 
// Memory-Mapped I/O input
static inline uint32_t mmio_read(uint32_t reg){
   13f5c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   13f60:	e28db000 	add	fp, sp, #0
   13f64:	e24dd00c 	sub	sp, sp, #12
   13f68:	e50b0008 	str	r0, [fp, #-8]
 	return *(volatile uint32_t*)reg;
   13f6c:	e51b3008 	ldr	r3, [fp, #-8]
   13f70:	e5933000 	ldr	r3, [r3]
}
   13f74:	e1a00003 	mov	r0, r3
   13f78:	e28bd000 	add	sp, fp, #0
   13f7c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   13f80:	e12fff1e 	bx	lr

00013f84 <uart_putc>:

uart_putc(unsigned char c){
   13f84:	e92d4800 	push	{fp, lr}
   13f88:	e28db004 	add	fp, sp, #4
   13f8c:	e24dd008 	sub	sp, sp, #8
   13f90:	e1a03000 	mov	r3, r0
   13f94:	e54b3005 	strb	r3, [fp, #-5]
	// Wait for UART to become ready to transmit.
 	while ( mmio_read(UART_BASE_ADDR + 0x18) & (1 << 5) ) { }
   13f98:	e320f000 	nop	{0}
   13f9c:	e59f002c 	ldr	r0, [pc, #44]	; 13fd0 <uart_putc+0x4c>
   13fa0:	ebffffed 	bl	13f5c <mmio_read>
   13fa4:	e1a03000 	mov	r3, r0
   13fa8:	e2033020 	and	r3, r3, #32
   13fac:	e3530000 	cmp	r3, #0
   13fb0:	1afffff9 	bne	13f9c <uart_putc+0x18>
 		mmio_write(UART_BASE_ADDR, c);
   13fb4:	e55b3005 	ldrb	r3, [fp, #-5]
   13fb8:	e1a01003 	mov	r1, r3
   13fbc:	e59f0010 	ldr	r0, [pc, #16]	; 13fd4 <uart_putc+0x50>
   13fc0:	ebffffd9 	bl	13f2c <mmio_write>
}		 
   13fc4:	e320f000 	nop	{0}
   13fc8:	e24bd004 	sub	sp, fp, #4
   13fcc:	e8bd8800 	pop	{fp, pc}
   13fd0:	3f201018 	svccc	0x00201018
   13fd4:	3f201000 	svccc	0x00201000

00013fd8 <mailboxWrite>:

//Docuentation on the mailbox functions
//mailbuffer should probably be 16 byte aligned (for gpu at least):
//unsigned int mailbuffer[22] __attribute__((aligned (16)));
//https://github.com/raspberrypi/firmware/wiki/Mailbox-property-interface
void mailboxWrite(int data_addr, int channel){
   13fd8:	e92d4800 	push	{fp, lr}
   13fdc:	e28db004 	add	fp, sp, #4
   13fe0:	e24dd010 	sub	sp, sp, #16
   13fe4:	e50b0010 	str	r0, [fp, #-16]
   13fe8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
	int mailbox = MAIL_ADDR;
   13fec:	e59f304c 	ldr	r3, [pc, #76]	; 14040 <mailboxWrite+0x68>
   13ff0:	e50b3008 	str	r3, [fp, #-8]
	while(1){
		if((GET32(mailbox + 0x18)&0x80000000) == 0) break;
   13ff4:	e51b3008 	ldr	r3, [fp, #-8]
   13ff8:	e2833018 	add	r3, r3, #24
   13ffc:	e1a00003 	mov	r0, r3
   14000:	eb0004ba 	bl	152f0 <GET32>
   14004:	e1a03000 	mov	r3, r0
   14008:	e3530000 	cmp	r3, #0
   1400c:	aa000000 	bge	14014 <mailboxWrite+0x3c>
   14010:	eafffff7 	b	13ff4 <mailboxWrite+0x1c>
   14014:	e320f000 	nop	{0}
	}
	PUT32(mailbox + 0x20, data_addr + channel);
   14018:	e51b3008 	ldr	r3, [fp, #-8]
   1401c:	e2830020 	add	r0, r3, #32
   14020:	e51b2010 	ldr	r2, [fp, #-16]
   14024:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   14028:	e0823003 	add	r3, r2, r3
   1402c:	e1a01003 	mov	r1, r3
   14030:	eb0004ac 	bl	152e8 <PUT32>
	return;
   14034:	e320f000 	nop	{0}
}
   14038:	e24bd004 	sub	sp, fp, #4
   1403c:	e8bd8800 	pop	{fp, pc}
   14040:	3f00b880 	svccc	0x0000b880

00014044 <mailboxRead>:

int mailboxRead(int channel){
   14044:	e92d4800 	push	{fp, lr}
   14048:	e28db004 	add	fp, sp, #4
   1404c:	e24dd010 	sub	sp, sp, #16
   14050:	e50b0010 	str	r0, [fp, #-16]
	int ra;
	int mailbox = MAIL_ADDR; 
   14054:	e59f3064 	ldr	r3, [pc, #100]	; 140c0 <mailboxRead+0x7c>
   14058:	e50b3008 	str	r3, [fp, #-8]
	while(1){
		while(1){
			ra = GET32(mailbox + 0x18);
   1405c:	e51b3008 	ldr	r3, [fp, #-8]
   14060:	e2833018 	add	r3, r3, #24
   14064:	e1a00003 	mov	r0, r3
   14068:	eb0004a0 	bl	152f0 <GET32>
   1406c:	e50b000c 	str	r0, [fp, #-12]
			if((ra&0x40000000) == 0) break;
   14070:	e51b300c 	ldr	r3, [fp, #-12]
   14074:	e2033101 	and	r3, r3, #1073741824	; 0x40000000
   14078:	e3530000 	cmp	r3, #0
   1407c:	0a000000 	beq	14084 <mailboxRead+0x40>
			ra = GET32(mailbox + 0x18);
   14080:	eafffff5 	b	1405c <mailboxRead+0x18>
			if((ra&0x40000000) == 0) break;
   14084:	e320f000 	nop	{0}
		}
		ra = GET32(mailbox + 0x00);
   14088:	e51b0008 	ldr	r0, [fp, #-8]
   1408c:	eb000497 	bl	152f0 <GET32>
   14090:	e50b000c 	str	r0, [fp, #-12]
		if((ra&0xF) == channel) break;
   14094:	e51b300c 	ldr	r3, [fp, #-12]
   14098:	e203200f 	and	r2, r3, #15
   1409c:	e51b3010 	ldr	r3, [fp, #-16]
   140a0:	e1520003 	cmp	r2, r3
   140a4:	0a000000 	beq	140ac <mailboxRead+0x68>
	while(1){
   140a8:	eaffffeb 	b	1405c <mailboxRead+0x18>
		if((ra&0xF) == channel) break;
   140ac:	e320f000 	nop	{0}
	}
	return(ra);
   140b0:	e51b300c 	ldr	r3, [fp, #-12]
}
   140b4:	e1a00003 	mov	r0, r3
   140b8:	e24bd004 	sub	sp, fp, #4
   140bc:	e8bd8800 	pop	{fp, pc}
   140c0:	3f00b880 	svccc	0x0000b880

000140c4 <enablelogging>:
#define CHAR_WIDTH 6
#define CHAR_HEIGHT 8
int SCREEN_WIDTH;
int SCREEN_HEIGHT;

void enablelogging(){ loaded = 1;}
   140c4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   140c8:	e28db000 	add	fp, sp, #0
   140cc:	e59f3014 	ldr	r3, [pc, #20]	; 140e8 <enablelogging+0x24>
   140d0:	e3a02001 	mov	r2, #1
   140d4:	e5c32000 	strb	r2, [r3]
   140d8:	e320f000 	nop	{0}
   140dc:	e28bd000 	add	sp, fp, #0
   140e0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   140e4:	e12fff1e 	bx	lr
   140e8:	00016090 	muleq	r1, r0, r0

000140ec <initFB>:

//mailbuffer must be 16 byte aligned for GPU
unsigned int mailbuffer[22] __attribute__((aligned (16)));
unsigned int* framebuffer;

void initFB(){
   140ec:	e92d4800 	push	{fp, lr}
   140f0:	e28db004 	add	fp, sp, #4
		}

		attempts++;
	}*/

	SCREEN_WIDTH = 1920;//mailbuffer[5];
   140f4:	e59f3190 	ldr	r3, [pc, #400]	; 1428c <initFB+0x1a0>
   140f8:	e3a02d1e 	mov	r2, #1920	; 0x780
   140fc:	e5832000 	str	r2, [r3]
	SCREEN_HEIGHT = 1080;//mailbuffer[6];
   14100:	e59f3188 	ldr	r3, [pc, #392]	; 14290 <initFB+0x1a4>
   14104:	e59f2188 	ldr	r2, [pc, #392]	; 14294 <initFB+0x1a8>
   14108:	e5832000 	str	r2, [r3]

	mailbuffer[0] = 22 * 4;		//mail buffer size
   1410c:	e59f3184 	ldr	r3, [pc, #388]	; 14298 <initFB+0x1ac>
   14110:	e3a02058 	mov	r2, #88	; 0x58
   14114:	e5832000 	str	r2, [r3]
	mailbuffer[1] = 0;		//response code
   14118:	e59f3178 	ldr	r3, [pc, #376]	; 14298 <initFB+0x1ac>
   1411c:	e3a02000 	mov	r2, #0
   14120:	e5832004 	str	r2, [r3, #4]

	mailbuffer[2] = 0x00048003;	//set phys display
   14124:	e59f316c 	ldr	r3, [pc, #364]	; 14298 <initFB+0x1ac>
   14128:	e59f216c 	ldr	r2, [pc, #364]	; 1429c <initFB+0x1b0>
   1412c:	e5832008 	str	r2, [r3, #8]
	mailbuffer[3] = 8;		//value buffer size
   14130:	e59f3160 	ldr	r3, [pc, #352]	; 14298 <initFB+0x1ac>
   14134:	e3a02008 	mov	r2, #8
   14138:	e583200c 	str	r2, [r3, #12]
	mailbuffer[4] = 8;		//Req. + value length (bytes)
   1413c:	e59f3154 	ldr	r3, [pc, #340]	; 14298 <initFB+0x1ac>
   14140:	e3a02008 	mov	r2, #8
   14144:	e5832010 	str	r2, [r3, #16]
	mailbuffer[5] = SCREEN_WIDTH;	//screen x
   14148:	e59f313c 	ldr	r3, [pc, #316]	; 1428c <initFB+0x1a0>
   1414c:	e5933000 	ldr	r3, [r3]
   14150:	e1a02003 	mov	r2, r3
   14154:	e59f313c 	ldr	r3, [pc, #316]	; 14298 <initFB+0x1ac>
   14158:	e5832014 	str	r2, [r3, #20]
	mailbuffer[6] = SCREEN_HEIGHT;	//screen y
   1415c:	e59f312c 	ldr	r3, [pc, #300]	; 14290 <initFB+0x1a4>
   14160:	e5933000 	ldr	r3, [r3]
   14164:	e1a02003 	mov	r2, r3
   14168:	e59f3128 	ldr	r3, [pc, #296]	; 14298 <initFB+0x1ac>
   1416c:	e5832018 	str	r2, [r3, #24]

	mailbuffer[7] = 0x00048004;	//set virtual display
   14170:	e59f3120 	ldr	r3, [pc, #288]	; 14298 <initFB+0x1ac>
   14174:	e59f2124 	ldr	r2, [pc, #292]	; 142a0 <initFB+0x1b4>
   14178:	e583201c 	str	r2, [r3, #28]
	mailbuffer[8] = 8;		//value buffer size
   1417c:	e59f3114 	ldr	r3, [pc, #276]	; 14298 <initFB+0x1ac>
   14180:	e3a02008 	mov	r2, #8
   14184:	e5832020 	str	r2, [r3, #32]
	mailbuffer[9] = 8;		//Req. + value length (bytes)
   14188:	e59f3108 	ldr	r3, [pc, #264]	; 14298 <initFB+0x1ac>
   1418c:	e3a02008 	mov	r2, #8
   14190:	e5832024 	str	r2, [r3, #36]	; 0x24
	mailbuffer[10] = SCREEN_WIDTH;	//screen x
   14194:	e59f30f0 	ldr	r3, [pc, #240]	; 1428c <initFB+0x1a0>
   14198:	e5933000 	ldr	r3, [r3]
   1419c:	e1a02003 	mov	r2, r3
   141a0:	e59f30f0 	ldr	r3, [pc, #240]	; 14298 <initFB+0x1ac>
   141a4:	e5832028 	str	r2, [r3, #40]	; 0x28
	mailbuffer[11] = SCREEN_HEIGHT; //screen y
   141a8:	e59f30e0 	ldr	r3, [pc, #224]	; 14290 <initFB+0x1a4>
   141ac:	e5933000 	ldr	r3, [r3]
   141b0:	e1a02003 	mov	r2, r3
   141b4:	e59f30dc 	ldr	r3, [pc, #220]	; 14298 <initFB+0x1ac>
   141b8:	e583202c 	str	r2, [r3, #44]	; 0x2c

	mailbuffer[12] = 0x0048005;	//set depth
   141bc:	e59f30d4 	ldr	r3, [pc, #212]	; 14298 <initFB+0x1ac>
   141c0:	e59f20dc 	ldr	r2, [pc, #220]	; 142a4 <initFB+0x1b8>
   141c4:	e5832030 	str	r2, [r3, #48]	; 0x30
	mailbuffer[13] = 4;		//value buffer size
   141c8:	e59f30c8 	ldr	r3, [pc, #200]	; 14298 <initFB+0x1ac>
   141cc:	e3a02004 	mov	r2, #4
   141d0:	e5832034 	str	r2, [r3, #52]	; 0x34
	mailbuffer[14] = 4;		//Req. + value length (bytes)
   141d4:	e59f30bc 	ldr	r3, [pc, #188]	; 14298 <initFB+0x1ac>
   141d8:	e3a02004 	mov	r2, #4
   141dc:	e5832038 	str	r2, [r3, #56]	; 0x38
	mailbuffer[15] = 32;		//bits per pixel
   141e0:	e59f30b0 	ldr	r3, [pc, #176]	; 14298 <initFB+0x1ac>
   141e4:	e3a02020 	mov	r2, #32
   141e8:	e583203c 	str	r2, [r3, #60]	; 0x3c
	//pixel format is ARGB, 0xFF0000FF is blue at full alpha transparency

	mailbuffer[16] = 0x00040001;	//allocate buffer
   141ec:	e59f30a4 	ldr	r3, [pc, #164]	; 14298 <initFB+0x1ac>
   141f0:	e59f20b0 	ldr	r2, [pc, #176]	; 142a8 <initFB+0x1bc>
   141f4:	e5832040 	str	r2, [r3, #64]	; 0x40
	mailbuffer[17] = 8;		//value buffer size
   141f8:	e59f3098 	ldr	r3, [pc, #152]	; 14298 <initFB+0x1ac>
   141fc:	e3a02008 	mov	r2, #8
   14200:	e5832044 	str	r2, [r3, #68]	; 0x44
	mailbuffer[18] = 4;		//Req. + value length (bytes)
   14204:	e59f308c 	ldr	r3, [pc, #140]	; 14298 <initFB+0x1ac>
   14208:	e3a02004 	mov	r2, #4
   1420c:	e5832048 	str	r2, [r3, #72]	; 0x48
	mailbuffer[19] = 0;		//framebuffer address
   14210:	e59f3080 	ldr	r3, [pc, #128]	; 14298 <initFB+0x1ac>
   14214:	e3a02000 	mov	r2, #0
   14218:	e583204c 	str	r2, [r3, #76]	; 0x4c
	mailbuffer[20] = 0;		//framebuffer size
   1421c:	e59f3074 	ldr	r3, [pc, #116]	; 14298 <initFB+0x1ac>
   14220:	e3a02000 	mov	r2, #0
   14224:	e5832050 	str	r2, [r3, #80]	; 0x50

	mailbuffer[21] = 0;		//terminate buffer
   14228:	e59f3068 	ldr	r3, [pc, #104]	; 14298 <initFB+0x1ac>
   1422c:	e3a02000 	mov	r2, #0
   14230:	e5832054 	str	r2, [r3, #84]	; 0x54

	//spam mail the GPU until the response code is ok
	while(mailbuffer[1] != 0x80000000){
   14234:	ea000005 	b	14250 <initFB+0x164>
		mailboxWrite((int)mailbuffer, 8);
   14238:	e59f3058 	ldr	r3, [pc, #88]	; 14298 <initFB+0x1ac>
   1423c:	e3a01008 	mov	r1, #8
   14240:	e1a00003 	mov	r0, r3
   14244:	ebffff63 	bl	13fd8 <mailboxWrite>
		mailboxRead(8);
   14248:	e3a00008 	mov	r0, #8
   1424c:	ebffff7c 	bl	14044 <mailboxRead>
	while(mailbuffer[1] != 0x80000000){
   14250:	e59f3040 	ldr	r3, [pc, #64]	; 14298 <initFB+0x1ac>
   14254:	e5933004 	ldr	r3, [r3, #4]
   14258:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
   1425c:	1afffff5 	bne	14238 <initFB+0x14c>
	}

	//https://github.com/raspberrypi/firmware/wiki/Accessing-mailboxes
	//shift FB by 0x40000000 if L2 cache is enabled, or 0xC0000000 if disabled
	framebuffer = (unsigned int*)(mailbuffer[19] - 0xC0000000);
   14260:	e59f3030 	ldr	r3, [pc, #48]	; 14298 <initFB+0x1ac>
   14264:	e593304c 	ldr	r3, [r3, #76]	; 0x4c
   14268:	e2833101 	add	r3, r3, #1073741824	; 0x40000000
   1426c:	e1a02003 	mov	r2, r3
   14270:	e59f3034 	ldr	r3, [pc, #52]	; 142ac <initFB+0x1c0>
   14274:	e5832000 	str	r2, [r3]
	loaded = 1;
   14278:	e59f3030 	ldr	r3, [pc, #48]	; 142b0 <initFB+0x1c4>
   1427c:	e3a02001 	mov	r2, #1
   14280:	e5c32000 	strb	r2, [r3]
}
   14284:	e320f000 	nop	{0}
   14288:	e8bd8800 	pop	{fp, pc}
   1428c:	000170b0 	strheq	r7, [r1], -r0
   14290:	000170b4 	strheq	r7, [r1], -r4
   14294:	00000438 	andeq	r0, r0, r8, lsr r4
   14298:	000170c0 	andeq	r7, r1, r0, asr #1
   1429c:	00048003 	andeq	r8, r4, r3
   142a0:	00048004 	andeq	r8, r4, r4
   142a4:	00048005 	andeq	r8, r4, r5
   142a8:	00040001 	andeq	r0, r4, r1
   142ac:	000170b8 	strheq	r7, [r1], -r8
   142b0:	00016090 	muleq	r1, r0, r0

000142b4 <drawPixel>:

__attribute__((no_instrument_function))
void drawPixel(unsigned int x, unsigned int y, int colour) {
   142b4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   142b8:	e28db000 	add	fp, sp, #0
   142bc:	e24dd014 	sub	sp, sp, #20
   142c0:	e50b0008 	str	r0, [fp, #-8]
   142c4:	e50b100c 	str	r1, [fp, #-12]
   142c8:	e50b2010 	str	r2, [fp, #-16]
    framebuffer[y * SCREEN_WIDTH + x] = colour;
   142cc:	e59f303c 	ldr	r3, [pc, #60]	; 14310 <drawPixel+0x5c>
   142d0:	e5932000 	ldr	r2, [r3]
   142d4:	e59f3038 	ldr	r3, [pc, #56]	; 14314 <drawPixel+0x60>
   142d8:	e5933000 	ldr	r3, [r3]
   142dc:	e1a01003 	mov	r1, r3
   142e0:	e51b300c 	ldr	r3, [fp, #-12]
   142e4:	e0010193 	mul	r1, r3, r1
   142e8:	e51b3008 	ldr	r3, [fp, #-8]
   142ec:	e0813003 	add	r3, r1, r3
   142f0:	e1a03103 	lsl	r3, r3, #2
   142f4:	e0823003 	add	r3, r2, r3
   142f8:	e51b2010 	ldr	r2, [fp, #-16]
   142fc:	e5832000 	str	r2, [r3]
}
   14300:	e320f000 	nop	{0}
   14304:	e28bd000 	add	sp, fp, #0
   14308:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   1430c:	e12fff1e 	bx	lr
   14310:	000170b8 	strheq	r7, [r1], -r8
   14314:	000170b0 	strheq	r7, [r1], -r0

00014318 <drawRect>:

__attribute__((no_instrument_function))
void drawRect(unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2, int colour) {
   14318:	e92d4800 	push	{fp, lr}
   1431c:	e28db004 	add	fp, sp, #4
   14320:	e24dd018 	sub	sp, sp, #24
   14324:	e50b0010 	str	r0, [fp, #-16]
   14328:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   1432c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
   14330:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    unsigned int i, j = 0;
   14334:	e3a03000 	mov	r3, #0
   14338:	e50b300c 	str	r3, [fp, #-12]
    for(i = x1; i < x2; i++) {
   1433c:	e51b3010 	ldr	r3, [fp, #-16]
   14340:	e50b3008 	str	r3, [fp, #-8]
   14344:	ea000010 	b	1438c <drawRect+0x74>
        for(j = y1; j < y2; j++) {
   14348:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   1434c:	e50b300c 	str	r3, [fp, #-12]
   14350:	ea000006 	b	14370 <drawRect+0x58>
            drawPixel(i, j, colour);
   14354:	e59b2004 	ldr	r2, [fp, #4]
   14358:	e51b100c 	ldr	r1, [fp, #-12]
   1435c:	e51b0008 	ldr	r0, [fp, #-8]
   14360:	ebffffd3 	bl	142b4 <drawPixel>
        for(j = y1; j < y2; j++) {
   14364:	e51b300c 	ldr	r3, [fp, #-12]
   14368:	e2833001 	add	r3, r3, #1
   1436c:	e50b300c 	str	r3, [fp, #-12]
   14370:	e51b200c 	ldr	r2, [fp, #-12]
   14374:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   14378:	e1520003 	cmp	r2, r3
   1437c:	3afffff4 	bcc	14354 <drawRect+0x3c>
    for(i = x1; i < x2; i++) {
   14380:	e51b3008 	ldr	r3, [fp, #-8]
   14384:	e2833001 	add	r3, r3, #1
   14388:	e50b3008 	str	r3, [fp, #-8]
   1438c:	e51b2008 	ldr	r2, [fp, #-8]
   14390:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   14394:	e1520003 	cmp	r2, r3
   14398:	3affffea 	bcc	14348 <drawRect+0x30>
        }
    }
}
   1439c:	e320f000 	nop	{0}
   143a0:	e24bd004 	sub	sp, fp, #4
   143a4:	e8bd8800 	pop	{fp, pc}

000143a8 <drawChar>:
//	1				1	0
//	1	1	1	1	1	0
//	1				1	0
//	1				1	0
__attribute__((no_instrument_function))
void drawChar(unsigned char c, int x, int y, int colour){
   143a8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   143ac:	e28db000 	add	fp, sp, #0
   143b0:	e24dd01c 	sub	sp, sp, #28
   143b4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   143b8:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
   143bc:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
   143c0:	e1a03000 	mov	r3, r0
   143c4:	e54b300d 	strb	r3, [fp, #-13]
	int i, j;

	//convert the character to an index
	c = c & 0x7F;
   143c8:	e55b300d 	ldrb	r3, [fp, #-13]
   143cc:	e203307f 	and	r3, r3, #127	; 0x7f
   143d0:	e54b300d 	strb	r3, [fp, #-13]
	if (c < ' ') {
   143d4:	e55b300d 	ldrb	r3, [fp, #-13]
   143d8:	e353001f 	cmp	r3, #31
   143dc:	8a000002 	bhi	143ec <drawChar+0x44>
		c = 0;
   143e0:	e3a03000 	mov	r3, #0
   143e4:	e54b300d 	strb	r3, [fp, #-13]
   143e8:	ea000002 	b	143f8 <drawChar+0x50>
	} else {
		c -= ' ';
   143ec:	e55b300d 	ldrb	r3, [fp, #-13]
   143f0:	e2433020 	sub	r3, r3, #32
   143f4:	e54b300d 	strb	r3, [fp, #-13]
	}

	//draw pixels of the character
	for (j = 0; j < CHAR_WIDTH; j++) {
   143f8:	e3a03000 	mov	r3, #0
   143fc:	e50b300c 	str	r3, [fp, #-12]
   14400:	ea00002b 	b	144b4 <drawChar+0x10c>
		for (i = 0; i < CHAR_HEIGHT; i++) {
   14404:	e3a03000 	mov	r3, #0
   14408:	e50b3008 	str	r3, [fp, #-8]
   1440c:	ea000022 	b	1449c <drawChar+0xf4>
			//unsigned char temp = font[c][j];
			if (font[c][j] & (1<<i)) {
   14410:	e55b200d 	ldrb	r2, [fp, #-13]
   14414:	e59f10b4 	ldr	r1, [pc, #180]	; 144d0 <drawChar+0x128>
   14418:	e1a03002 	mov	r3, r2
   1441c:	e1a03083 	lsl	r3, r3, #1
   14420:	e0833002 	add	r3, r3, r2
   14424:	e1a03083 	lsl	r3, r3, #1
   14428:	e0812003 	add	r2, r1, r3
   1442c:	e51b300c 	ldr	r3, [fp, #-12]
   14430:	e0823003 	add	r3, r2, r3
   14434:	e5d33000 	ldrb	r3, [r3]
   14438:	e1a02003 	mov	r2, r3
   1443c:	e51b3008 	ldr	r3, [fp, #-8]
   14440:	e1a03352 	asr	r3, r2, r3
   14444:	e2033001 	and	r3, r3, #1
   14448:	e3530000 	cmp	r3, #0
   1444c:	0a00000f 	beq	14490 <drawChar+0xe8>
				framebuffer[(y + i) * SCREEN_WIDTH + (x + j)] = colour;
   14450:	e59f307c 	ldr	r3, [pc, #124]	; 144d4 <drawChar+0x12c>
   14454:	e5932000 	ldr	r2, [r3]
   14458:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
   1445c:	e51b3008 	ldr	r3, [fp, #-8]
   14460:	e0813003 	add	r3, r1, r3
   14464:	e59f106c 	ldr	r1, [pc, #108]	; 144d8 <drawChar+0x130>
   14468:	e5911000 	ldr	r1, [r1]
   1446c:	e0010391 	mul	r1, r1, r3
   14470:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   14474:	e51b300c 	ldr	r3, [fp, #-12]
   14478:	e0803003 	add	r3, r0, r3
   1447c:	e0813003 	add	r3, r1, r3
   14480:	e1a03103 	lsl	r3, r3, #2
   14484:	e0823003 	add	r3, r2, r3
   14488:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   1448c:	e5832000 	str	r2, [r3]
		for (i = 0; i < CHAR_HEIGHT; i++) {
   14490:	e51b3008 	ldr	r3, [fp, #-8]
   14494:	e2833001 	add	r3, r3, #1
   14498:	e50b3008 	str	r3, [fp, #-8]
   1449c:	e51b3008 	ldr	r3, [fp, #-8]
   144a0:	e3530007 	cmp	r3, #7
   144a4:	daffffd9 	ble	14410 <drawChar+0x68>
	for (j = 0; j < CHAR_WIDTH; j++) {
   144a8:	e51b300c 	ldr	r3, [fp, #-12]
   144ac:	e2833001 	add	r3, r3, #1
   144b0:	e50b300c 	str	r3, [fp, #-12]
   144b4:	e51b300c 	ldr	r3, [fp, #-12]
   144b8:	e3530005 	cmp	r3, #5
   144bc:	daffffd0 	ble	14404 <drawChar+0x5c>
			}
		}
	}
}
   144c0:	e320f000 	nop	{0}
   144c4:	e28bd000 	add	sp, fp, #0
   144c8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   144cc:	e12fff1e 	bx	lr
   144d0:	00015a28 	andeq	r5, r1, r8, lsr #20
   144d4:	000170b8 	strheq	r7, [r1], -r8
   144d8:	000170b0 	strheq	r7, [r1], -r0

000144dc <drawString>:

__attribute__((no_instrument_function))
void drawString(const char* str, int x, int y, int colour){
   144dc:	e92d4800 	push	{fp, lr}
   144e0:	e28db004 	add	fp, sp, #4
   144e4:	e24dd010 	sub	sp, sp, #16
   144e8:	e50b0008 	str	r0, [fp, #-8]
   144ec:	e50b100c 	str	r1, [fp, #-12]
   144f0:	e50b2010 	str	r2, [fp, #-16]
   144f4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
	while (*str) {
   144f8:	ea00000a 	b	14528 <drawString+0x4c>
		drawChar(*str++, x, y, colour);
   144fc:	e51b3008 	ldr	r3, [fp, #-8]
   14500:	e2832001 	add	r2, r3, #1
   14504:	e50b2008 	str	r2, [fp, #-8]
   14508:	e5d30000 	ldrb	r0, [r3]
   1450c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   14510:	e51b2010 	ldr	r2, [fp, #-16]
   14514:	e51b100c 	ldr	r1, [fp, #-12]
   14518:	ebffffa2 	bl	143a8 <drawChar>
		x += CHAR_WIDTH; 
   1451c:	e51b300c 	ldr	r3, [fp, #-12]
   14520:	e2833006 	add	r3, r3, #6
   14524:	e50b300c 	str	r3, [fp, #-12]
	while (*str) {
   14528:	e51b3008 	ldr	r3, [fp, #-8]
   1452c:	e5d33000 	ldrb	r3, [r3]
   14530:	e3530000 	cmp	r3, #0
   14534:	1afffff0 	bne	144fc <drawString+0x20>
	}
}
   14538:	e320f000 	nop	{0}
   1453c:	e24bd004 	sub	sp, fp, #4
   14540:	e8bd8800 	pop	{fp, pc}

00014544 <println>:

int position_x = 0;
int position_y = 0;
__attribute__((no_instrument_function))
void println(const char* message, int colour){
   14544:	e92d4800 	push	{fp, lr}
   14548:	e28db004 	add	fp, sp, #4
   1454c:	e24dd020 	sub	sp, sp, #32
   14550:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
   14554:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
	if(loaded == 0) return; //if video isn't loaded don't bother
   14558:	e59f31c8 	ldr	r3, [pc, #456]	; 14728 <println+0x1e4>
   1455c:	e5d33000 	ldrb	r3, [r3]
   14560:	e3530000 	cmp	r3, #0
   14564:	0a00006c 	beq	1471c <println+0x1d8>

	int nFlags;
	__asm volatile ("mrs %0, cpsr" : "=r" (nFlags));
   14568:	e10f3000 	mrs	r3, CPSR
   1456c:	e50b300c 	str	r3, [fp, #-12]
	char s_bWereEnabled = nFlags & 0x80 ? 0 : 1; 
   14570:	e51b300c 	ldr	r3, [fp, #-12]
   14574:	e2033080 	and	r3, r3, #128	; 0x80
   14578:	e3530000 	cmp	r3, #0
   1457c:	03a03001 	moveq	r3, #1
   14580:	13a03000 	movne	r3, #0
   14584:	e6ef3073 	uxtb	r3, r3
   14588:	e54b300d 	strb	r3, [fp, #-13]
	if(s_bWereEnabled) __asm volatile ("cpsid i" : : : "memory");
   1458c:	e55b300d 	ldrb	r3, [fp, #-13]
   14590:	e3530000 	cmp	r3, #0
   14594:	0a000000 	beq	1459c <println+0x58>
   14598:	f10c0080 	cpsid	i

	drawString(message, position_x, position_y, colour);
   1459c:	e59f3188 	ldr	r3, [pc, #392]	; 1472c <println+0x1e8>
   145a0:	e5931000 	ldr	r1, [r3]
   145a4:	e59f3184 	ldr	r3, [pc, #388]	; 14730 <println+0x1ec>
   145a8:	e5932000 	ldr	r2, [r3]
   145ac:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   145b0:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   145b4:	ebffffc8 	bl	144dc <drawString>
	position_y = position_y + CHAR_HEIGHT + 1;
   145b8:	e59f3170 	ldr	r3, [pc, #368]	; 14730 <println+0x1ec>
   145bc:	e5933000 	ldr	r3, [r3]
   145c0:	e2833009 	add	r3, r3, #9
   145c4:	e59f2164 	ldr	r2, [pc, #356]	; 14730 <println+0x1ec>
   145c8:	e5823000 	str	r3, [r2]
	if(position_y >= SCREEN_HEIGHT){
   145cc:	e59f315c 	ldr	r3, [pc, #348]	; 14730 <println+0x1ec>
   145d0:	e5932000 	ldr	r2, [r3]
   145d4:	e59f3158 	ldr	r3, [pc, #344]	; 14734 <println+0x1f0>
   145d8:	e5933000 	ldr	r3, [r3]
   145dc:	e1520003 	cmp	r2, r3
   145e0:	ba000048 	blt	14708 <println+0x1c4>
		if(position_x + 2 * (SCREEN_WIDTH / 8) > SCREEN_WIDTH){
   145e4:	e59f314c 	ldr	r3, [pc, #332]	; 14738 <println+0x1f4>
   145e8:	e5933000 	ldr	r3, [r3]
   145ec:	e2832007 	add	r2, r3, #7
   145f0:	e3530000 	cmp	r3, #0
   145f4:	b1a03002 	movlt	r3, r2
   145f8:	a1a03003 	movge	r3, r3
   145fc:	e1a031c3 	asr	r3, r3, #3
   14600:	e1a02083 	lsl	r2, r3, #1
   14604:	e59f3120 	ldr	r3, [pc, #288]	; 1472c <println+0x1e8>
   14608:	e5933000 	ldr	r3, [r3]
   1460c:	e0822003 	add	r2, r2, r3
   14610:	e59f3120 	ldr	r3, [pc, #288]	; 14738 <println+0x1f4>
   14614:	e5933000 	ldr	r3, [r3]
   14618:	e1520003 	cmp	r2, r3
   1461c:	da000029 	ble	146c8 <println+0x184>

			volatile int* timeStamp = (int*)0x3f003004;
   14620:	e59f3114 	ldr	r3, [pc, #276]	; 1473c <println+0x1f8>
   14624:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
			int stop = *timeStamp + 5000 * 1000;
   14628:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   1462c:	e5932000 	ldr	r2, [r3]
   14630:	e59f3108 	ldr	r3, [pc, #264]	; 14740 <println+0x1fc>
   14634:	e0823003 	add	r3, r2, r3
   14638:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
			while (*timeStamp < stop) __asm__("nop");
   1463c:	ea000000 	b	14644 <println+0x100>
   14640:	e320f000 	nop	{0}
   14644:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   14648:	e5932000 	ldr	r2, [r3]
   1464c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   14650:	e1520003 	cmp	r2, r3
   14654:	bafffff9 	blt	14640 <println+0xfc>

			for(int x = 0; x < SCREEN_WIDTH * SCREEN_HEIGHT; x++){
   14658:	e3a03000 	mov	r3, #0
   1465c:	e50b3008 	str	r3, [fp, #-8]
   14660:	ea000009 	b	1468c <println+0x148>
				framebuffer[x] = 0xFF000000;
   14664:	e59f30d8 	ldr	r3, [pc, #216]	; 14744 <println+0x200>
   14668:	e5932000 	ldr	r2, [r3]
   1466c:	e51b3008 	ldr	r3, [fp, #-8]
   14670:	e1a03103 	lsl	r3, r3, #2
   14674:	e0823003 	add	r3, r2, r3
   14678:	e3a024ff 	mov	r2, #-16777216	; 0xff000000
   1467c:	e5832000 	str	r2, [r3]
			for(int x = 0; x < SCREEN_WIDTH * SCREEN_HEIGHT; x++){
   14680:	e51b3008 	ldr	r3, [fp, #-8]
   14684:	e2833001 	add	r3, r3, #1
   14688:	e50b3008 	str	r3, [fp, #-8]
   1468c:	e59f30a4 	ldr	r3, [pc, #164]	; 14738 <println+0x1f4>
   14690:	e5933000 	ldr	r3, [r3]
   14694:	e59f2098 	ldr	r2, [pc, #152]	; 14734 <println+0x1f0>
   14698:	e5922000 	ldr	r2, [r2]
   1469c:	e0020392 	mul	r2, r2, r3
   146a0:	e51b3008 	ldr	r3, [fp, #-8]
   146a4:	e1520003 	cmp	r2, r3
   146a8:	caffffed 	bgt	14664 <println+0x120>
			}
			position_y = 0;
   146ac:	e59f307c 	ldr	r3, [pc, #124]	; 14730 <println+0x1ec>
   146b0:	e3a02000 	mov	r2, #0
   146b4:	e5832000 	str	r2, [r3]
			position_x = 0;
   146b8:	e59f306c 	ldr	r3, [pc, #108]	; 1472c <println+0x1e8>
   146bc:	e3a02000 	mov	r2, #0
   146c0:	e5832000 	str	r2, [r3]
   146c4:	ea00000f 	b	14708 <println+0x1c4>
		}else{
			position_y = 0;
   146c8:	e59f3060 	ldr	r3, [pc, #96]	; 14730 <println+0x1ec>
   146cc:	e3a02000 	mov	r2, #0
   146d0:	e5832000 	str	r2, [r3]
			position_x += SCREEN_WIDTH / 8;
   146d4:	e59f305c 	ldr	r3, [pc, #92]	; 14738 <println+0x1f4>
   146d8:	e5933000 	ldr	r3, [r3]
   146dc:	e2832007 	add	r2, r3, #7
   146e0:	e3530000 	cmp	r3, #0
   146e4:	b1a03002 	movlt	r3, r2
   146e8:	a1a03003 	movge	r3, r3
   146ec:	e1a031c3 	asr	r3, r3, #3
   146f0:	e1a02003 	mov	r2, r3
   146f4:	e59f3030 	ldr	r3, [pc, #48]	; 1472c <println+0x1e8>
   146f8:	e5933000 	ldr	r3, [r3]
   146fc:	e0823003 	add	r3, r2, r3
   14700:	e59f2024 	ldr	r2, [pc, #36]	; 1472c <println+0x1e8>
   14704:	e5823000 	str	r3, [r2]
		}
	}

	if(s_bWereEnabled) __asm volatile ("cpsie i" : : : "memory");
   14708:	e55b300d 	ldrb	r3, [fp, #-13]
   1470c:	e3530000 	cmp	r3, #0
   14710:	0a000002 	beq	14720 <println+0x1dc>
   14714:	f1080080 	cpsie	i
   14718:	ea000000 	b	14720 <println+0x1dc>
	if(loaded == 0) return; //if video isn't loaded don't bother
   1471c:	e320f000 	nop	{0}
}
   14720:	e24bd004 	sub	sp, fp, #4
   14724:	e8bd8800 	pop	{fp, pc}
   14728:	00016090 	muleq	r1, r0, r0
   1472c:	00016094 	muleq	r1, r4, r0
   14730:	00016098 	muleq	r1, r8, r0
   14734:	000170b4 	strheq	r7, [r1], -r4
   14738:	000170b0 	strheq	r7, [r1], -r0
   1473c:	3f003004 	svccc	0x00003004
   14740:	004c4b40 	subeq	r4, ip, r0, asr #22
   14744:	000170b8 	strheq	r7, [r1], -r8

00014748 <printHex>:

__attribute__((no_instrument_function))
void printHex(const char* message, int hexi, int colour){
   14748:	e92d4800 	push	{fp, lr}
   1474c:	e28db004 	add	fp, sp, #4
   14750:	e24dd0f0 	sub	sp, sp, #240	; 0xf0
   14754:	e50b00e8 	str	r0, [fp, #-232]	; 0xffffff18
   14758:	e50b10ec 	str	r1, [fp, #-236]	; 0xffffff14
   1475c:	e50b20f0 	str	r2, [fp, #-240]	; 0xffffff10
if(loaded == 0) return; //if video isn't loaded don't bother
   14760:	e59f31f4 	ldr	r3, [pc, #500]	; 1495c <printHex+0x214>
   14764:	e5d33000 	ldrb	r3, [r3]
   14768:	e3530000 	cmp	r3, #0
   1476c:	0a000077 	beq	14950 <printHex+0x208>
	char hex[16] = {'0','1','2','3','4','5','6','7',
   14770:	e59f31e8 	ldr	r3, [pc, #488]	; 14960 <printHex+0x218>
   14774:	e24bc018 	sub	ip, fp, #24
   14778:	e893000f 	ldm	r3, {r0, r1, r2, r3}
   1477c:	e88c000f 	stm	ip, {r0, r1, r2, r3}
					'8','9','A','B','C','D','E','F'};
	char m[200];
	int i = 0;
   14780:	e3a03000 	mov	r3, #0
   14784:	e50b3008 	str	r3, [fp, #-8]
	while (*message){
   14788:	ea00000b 	b	147bc <printHex+0x74>
		m[i] = *message++;
   1478c:	e51b30e8 	ldr	r3, [fp, #-232]	; 0xffffff18
   14790:	e2832001 	add	r2, r3, #1
   14794:	e50b20e8 	str	r2, [fp, #-232]	; 0xffffff18
   14798:	e5d31000 	ldrb	r1, [r3]
   1479c:	e24b20e0 	sub	r2, fp, #224	; 0xe0
   147a0:	e51b3008 	ldr	r3, [fp, #-8]
   147a4:	e0823003 	add	r3, r2, r3
   147a8:	e1a02001 	mov	r2, r1
   147ac:	e5c32000 	strb	r2, [r3]
		i++;
   147b0:	e51b3008 	ldr	r3, [fp, #-8]
   147b4:	e2833001 	add	r3, r3, #1
   147b8:	e50b3008 	str	r3, [fp, #-8]
	while (*message){
   147bc:	e51b30e8 	ldr	r3, [fp, #-232]	; 0xffffff18
   147c0:	e5d33000 	ldrb	r3, [r3]
   147c4:	e3530000 	cmp	r3, #0
   147c8:	1affffef 	bne	1478c <printHex+0x44>
	}
	//overwrite the null terminator
	m[i + 0] = hex[(hexi >> 28)&0xF];
   147cc:	e51b30ec 	ldr	r3, [fp, #-236]	; 0xffffff14
   147d0:	e1a03e23 	lsr	r3, r3, #28
   147d4:	e24b2004 	sub	r2, fp, #4
   147d8:	e0823003 	add	r3, r2, r3
   147dc:	e5531014 	ldrb	r1, [r3, #-20]	; 0xffffffec
   147e0:	e24b20e0 	sub	r2, fp, #224	; 0xe0
   147e4:	e51b3008 	ldr	r3, [fp, #-8]
   147e8:	e0823003 	add	r3, r2, r3
   147ec:	e1a02001 	mov	r2, r1
   147f0:	e5c32000 	strb	r2, [r3]
	m[i + 1] = hex[(hexi >> 24)&0xF];
   147f4:	e51b3008 	ldr	r3, [fp, #-8]
   147f8:	e2833001 	add	r3, r3, #1
   147fc:	e51b20ec 	ldr	r2, [fp, #-236]	; 0xffffff14
   14800:	e1a02c42 	asr	r2, r2, #24
   14804:	e202200f 	and	r2, r2, #15
   14808:	e24b1004 	sub	r1, fp, #4
   1480c:	e0812002 	add	r2, r1, r2
   14810:	e5522014 	ldrb	r2, [r2, #-20]	; 0xffffffec
   14814:	e24b1004 	sub	r1, fp, #4
   14818:	e0813003 	add	r3, r1, r3
   1481c:	e54320dc 	strb	r2, [r3, #-220]	; 0xffffff24
	m[i + 2] = hex[(hexi >> 20)&0xF];
   14820:	e51b3008 	ldr	r3, [fp, #-8]
   14824:	e2833002 	add	r3, r3, #2
   14828:	e51b20ec 	ldr	r2, [fp, #-236]	; 0xffffff14
   1482c:	e1a02a42 	asr	r2, r2, #20
   14830:	e202200f 	and	r2, r2, #15
   14834:	e24b1004 	sub	r1, fp, #4
   14838:	e0812002 	add	r2, r1, r2
   1483c:	e5522014 	ldrb	r2, [r2, #-20]	; 0xffffffec
   14840:	e24b1004 	sub	r1, fp, #4
   14844:	e0813003 	add	r3, r1, r3
   14848:	e54320dc 	strb	r2, [r3, #-220]	; 0xffffff24
	m[i + 3] = hex[(hexi >> 16)&0xF];
   1484c:	e51b3008 	ldr	r3, [fp, #-8]
   14850:	e2833003 	add	r3, r3, #3
   14854:	e51b20ec 	ldr	r2, [fp, #-236]	; 0xffffff14
   14858:	e1a02842 	asr	r2, r2, #16
   1485c:	e202200f 	and	r2, r2, #15
   14860:	e24b1004 	sub	r1, fp, #4
   14864:	e0812002 	add	r2, r1, r2
   14868:	e5522014 	ldrb	r2, [r2, #-20]	; 0xffffffec
   1486c:	e24b1004 	sub	r1, fp, #4
   14870:	e0813003 	add	r3, r1, r3
   14874:	e54320dc 	strb	r2, [r3, #-220]	; 0xffffff24
	m[i + 4] = hex[(hexi >> 12)&0xF];
   14878:	e51b3008 	ldr	r3, [fp, #-8]
   1487c:	e2833004 	add	r3, r3, #4
   14880:	e51b20ec 	ldr	r2, [fp, #-236]	; 0xffffff14
   14884:	e1a02642 	asr	r2, r2, #12
   14888:	e202200f 	and	r2, r2, #15
   1488c:	e24b1004 	sub	r1, fp, #4
   14890:	e0812002 	add	r2, r1, r2
   14894:	e5522014 	ldrb	r2, [r2, #-20]	; 0xffffffec
   14898:	e24b1004 	sub	r1, fp, #4
   1489c:	e0813003 	add	r3, r1, r3
   148a0:	e54320dc 	strb	r2, [r3, #-220]	; 0xffffff24
	m[i + 5] = hex[(hexi >> 8)&0xF];
   148a4:	e51b3008 	ldr	r3, [fp, #-8]
   148a8:	e2833005 	add	r3, r3, #5
   148ac:	e51b20ec 	ldr	r2, [fp, #-236]	; 0xffffff14
   148b0:	e1a02442 	asr	r2, r2, #8
   148b4:	e202200f 	and	r2, r2, #15
   148b8:	e24b1004 	sub	r1, fp, #4
   148bc:	e0812002 	add	r2, r1, r2
   148c0:	e5522014 	ldrb	r2, [r2, #-20]	; 0xffffffec
   148c4:	e24b1004 	sub	r1, fp, #4
   148c8:	e0813003 	add	r3, r1, r3
   148cc:	e54320dc 	strb	r2, [r3, #-220]	; 0xffffff24
	m[i + 6] = hex[(hexi >> 4)&0xF];
   148d0:	e51b3008 	ldr	r3, [fp, #-8]
   148d4:	e2833006 	add	r3, r3, #6
   148d8:	e51b20ec 	ldr	r2, [fp, #-236]	; 0xffffff14
   148dc:	e1a02242 	asr	r2, r2, #4
   148e0:	e202200f 	and	r2, r2, #15
   148e4:	e24b1004 	sub	r1, fp, #4
   148e8:	e0812002 	add	r2, r1, r2
   148ec:	e5522014 	ldrb	r2, [r2, #-20]	; 0xffffffec
   148f0:	e24b1004 	sub	r1, fp, #4
   148f4:	e0813003 	add	r3, r1, r3
   148f8:	e54320dc 	strb	r2, [r3, #-220]	; 0xffffff24
	m[i + 7] = hex[(hexi >> 0)&0xF];
   148fc:	e51b3008 	ldr	r3, [fp, #-8]
   14900:	e2833007 	add	r3, r3, #7
   14904:	e51b20ec 	ldr	r2, [fp, #-236]	; 0xffffff14
   14908:	e202200f 	and	r2, r2, #15
   1490c:	e24b1004 	sub	r1, fp, #4
   14910:	e0812002 	add	r2, r1, r2
   14914:	e5522014 	ldrb	r2, [r2, #-20]	; 0xffffffec
   14918:	e24b1004 	sub	r1, fp, #4
   1491c:	e0813003 	add	r3, r1, r3
   14920:	e54320dc 	strb	r2, [r3, #-220]	; 0xffffff24
	m[i + 8] = 0; //null termination
   14924:	e51b3008 	ldr	r3, [fp, #-8]
   14928:	e2833008 	add	r3, r3, #8
   1492c:	e24b2004 	sub	r2, fp, #4
   14930:	e0823003 	add	r3, r2, r3
   14934:	e3a02000 	mov	r2, #0
   14938:	e54320dc 	strb	r2, [r3, #-220]	; 0xffffff24
	println(m, colour);
   1493c:	e24b30e0 	sub	r3, fp, #224	; 0xe0
   14940:	e51b10f0 	ldr	r1, [fp, #-240]	; 0xffffff10
   14944:	e1a00003 	mov	r0, r3
   14948:	ebfffefd 	bl	14544 <println>
   1494c:	ea000000 	b	14954 <printHex+0x20c>
if(loaded == 0) return; //if video isn't loaded don't bother
   14950:	e320f000 	nop	{0}
}
   14954:	e24bd004 	sub	sp, fp, #4
   14958:	e8bd8800 	pop	{fp, pc}
   1495c:	00016090 	muleq	r1, r0, r0
   14960:	00015c68 	andeq	r5, r1, r8, ror #24

00014964 <videotest>:

void videotest(){
   14964:	e92d4800 	push	{fp, lr}
   14968:	e28db004 	add	fp, sp, #4
   1496c:	e24dd008 	sub	sp, sp, #8
	//This loop turns on every pixel the screen size allows for.
	//If the shaded area is larger or smaller than your screen, 
	//you have under/over scan issues. Add disable_overscan=1 to your config.txt
	for(int x = 0; x < SCREEN_WIDTH * SCREEN_HEIGHT; x++){
   14970:	e3a03000 	mov	r3, #0
   14974:	e50b3008 	str	r3, [fp, #-8]
   14978:	ea000009 	b	149a4 <videotest+0x40>
		framebuffer[x] = 0xFF111111;
   1497c:	e59f30b0 	ldr	r3, [pc, #176]	; 14a34 <videotest+0xd0>
   14980:	e5932000 	ldr	r2, [r3]
   14984:	e51b3008 	ldr	r3, [fp, #-8]
   14988:	e1a03103 	lsl	r3, r3, #2
   1498c:	e0823003 	add	r3, r2, r3
   14990:	e59f20a0 	ldr	r2, [pc, #160]	; 14a38 <videotest+0xd4>
   14994:	e5832000 	str	r2, [r3]
	for(int x = 0; x < SCREEN_WIDTH * SCREEN_HEIGHT; x++){
   14998:	e51b3008 	ldr	r3, [fp, #-8]
   1499c:	e2833001 	add	r3, r3, #1
   149a0:	e50b3008 	str	r3, [fp, #-8]
   149a4:	e59f3090 	ldr	r3, [pc, #144]	; 14a3c <videotest+0xd8>
   149a8:	e5933000 	ldr	r3, [r3]
   149ac:	e59f208c 	ldr	r2, [pc, #140]	; 14a40 <videotest+0xdc>
   149b0:	e5922000 	ldr	r2, [r2]
   149b4:	e0020392 	mul	r2, r2, r3
   149b8:	e51b3008 	ldr	r3, [fp, #-8]
   149bc:	e1520003 	cmp	r2, r3
   149c0:	caffffed 	bgt	1497c <videotest+0x18>
	}

	//division crashes the system here but not in other places it seems?
	drawString("Forty-Two", SCREEN_WIDTH / 2 - 4.5 * CHAR_WIDTH, SCREEN_HEIGHT / 2 + CHAR_HEIGHT / 2, 0xFF00FF00);
   149c4:	e59f3070 	ldr	r3, [pc, #112]	; 14a3c <videotest+0xd8>
   149c8:	e5933000 	ldr	r3, [r3]
   149cc:	e1a02fa3 	lsr	r2, r3, #31
   149d0:	e0823003 	add	r3, r2, r3
   149d4:	e1a030c3 	asr	r3, r3, #1
   149d8:	e1a00003 	mov	r0, r3
   149dc:	eb000382 	bl	157ec <__aeabi_i2d>
   149e0:	e3a02000 	mov	r2, #0
   149e4:	e59f3058 	ldr	r3, [pc, #88]	; 14a44 <videotest+0xe0>
   149e8:	eb0002b1 	bl	154b4 <__aeabi_dsub>
   149ec:	e1a02000 	mov	r2, r0
   149f0:	e1a03001 	mov	r3, r1
   149f4:	e1a00002 	mov	r0, r2
   149f8:	e1a01003 	mov	r1, r3
   149fc:	eb0003b1 	bl	158c8 <__aeabi_d2iz>
   14a00:	e1a01000 	mov	r1, r0
   14a04:	e59f3034 	ldr	r3, [pc, #52]	; 14a40 <videotest+0xdc>
   14a08:	e5933000 	ldr	r3, [r3]
   14a0c:	e1a02fa3 	lsr	r2, r3, #31
   14a10:	e0823003 	add	r3, r2, r3
   14a14:	e1a030c3 	asr	r3, r3, #1
   14a18:	e2832004 	add	r2, r3, #4
   14a1c:	e59f3024 	ldr	r3, [pc, #36]	; 14a48 <videotest+0xe4>
   14a20:	e59f0024 	ldr	r0, [pc, #36]	; 14a4c <videotest+0xe8>
   14a24:	ebfffeac 	bl	144dc <drawString>
}
   14a28:	e320f000 	nop	{0}
   14a2c:	e24bd004 	sub	sp, fp, #4
   14a30:	e8bd8800 	pop	{fp, pc}
   14a34:	000170b8 	strheq	r7, [r1], -r8
   14a38:	ff111111 			; <UNDEFINED> instruction: 0xff111111
   14a3c:	000170b0 	strheq	r7, [r1], -r0
   14a40:	000170b4 	strheq	r7, [r1], -r4
   14a44:	403b0000 	eorsmi	r0, fp, r0
   14a48:	ff00ff00 			; <UNDEFINED> instruction: 0xff00ff00
   14a4c:	00015c78 	andeq	r5, r1, r8, ror ip

00014a50 <memset>:
//standard memory functions to avoid using incompatible libraries on ARM

#include <FreeRTOS.h>
#include <mem.h>

void *memset(void *s, int c, size_t n){
   14a50:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   14a54:	e28db000 	add	fp, sp, #0
   14a58:	e24dd01c 	sub	sp, sp, #28
   14a5c:	e50b0010 	str	r0, [fp, #-16]
   14a60:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   14a64:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    unsigned char* p=s;
   14a68:	e51b3010 	ldr	r3, [fp, #-16]
   14a6c:	e50b3008 	str	r3, [fp, #-8]
    while(n--)
   14a70:	ea000005 	b	14a8c <memset+0x3c>
        *p++ = (unsigned char)c;
   14a74:	e51b3008 	ldr	r3, [fp, #-8]
   14a78:	e2832001 	add	r2, r3, #1
   14a7c:	e50b2008 	str	r2, [fp, #-8]
   14a80:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   14a84:	e6ef2072 	uxtb	r2, r2
   14a88:	e5c32000 	strb	r2, [r3]
    while(n--)
   14a8c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   14a90:	e2432001 	sub	r2, r3, #1
   14a94:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
   14a98:	e3530000 	cmp	r3, #0
   14a9c:	1afffff4 	bne	14a74 <memset+0x24>
    return s;
   14aa0:	e51b3010 	ldr	r3, [fp, #-16]
}
   14aa4:	e1a00003 	mov	r0, r3
   14aa8:	e28bd000 	add	sp, fp, #0
   14aac:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   14ab0:	e12fff1e 	bx	lr

00014ab4 <memmove>:

void *memmove(void *dest, const void *src, size_t n){
   14ab4:	e92d49f0 	push	{r4, r5, r6, r7, r8, fp, lr}
   14ab8:	e28db018 	add	fp, sp, #24
   14abc:	e24dd01c 	sub	sp, sp, #28
   14ac0:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
   14ac4:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
   14ac8:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
   14acc:	e1a0300d 	mov	r3, sp
   14ad0:	e1a08003 	mov	r8, r3
    unsigned char tmp[n];
   14ad4:	e51b1030 	ldr	r1, [fp, #-48]	; 0xffffffd0
   14ad8:	e1a03001 	mov	r3, r1
   14adc:	e2433001 	sub	r3, r3, #1
   14ae0:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
   14ae4:	e1a02001 	mov	r2, r1
   14ae8:	e3a03000 	mov	r3, #0
   14aec:	e1a07183 	lsl	r7, r3, #3
   14af0:	e1877ea2 	orr	r7, r7, r2, lsr #29
   14af4:	e1a06182 	lsl	r6, r2, #3
   14af8:	e1a02001 	mov	r2, r1
   14afc:	e3a03000 	mov	r3, #0
   14b00:	e1a05183 	lsl	r5, r3, #3
   14b04:	e1855ea2 	orr	r5, r5, r2, lsr #29
   14b08:	e1a04182 	lsl	r4, r2, #3
   14b0c:	e2813007 	add	r3, r1, #7
   14b10:	e1a031a3 	lsr	r3, r3, #3
   14b14:	e1a03183 	lsl	r3, r3, #3
   14b18:	e04dd003 	sub	sp, sp, r3
   14b1c:	e1a0300d 	mov	r3, sp
   14b20:	e2833000 	add	r3, r3, #0
   14b24:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    memcpy2(tmp,src,n);
   14b28:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   14b2c:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
   14b30:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
   14b34:	e1a00003 	mov	r0, r3
   14b38:	eb000009 	bl	14b64 <memcpy2>
    memcpy2(dest,tmp,n);
   14b3c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   14b40:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
   14b44:	e1a01003 	mov	r1, r3
   14b48:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
   14b4c:	eb000004 	bl	14b64 <memcpy2>
    return dest;
   14b50:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   14b54:	e1a0d008 	mov	sp, r8
}
   14b58:	e1a00003 	mov	r0, r3
   14b5c:	e24bd018 	sub	sp, fp, #24
   14b60:	e8bd89f0 	pop	{r4, r5, r6, r7, r8, fp, pc}

00014b64 <memcpy2>:

void *memcpy2(void *dest, const void *src, size_t n){
   14b64:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   14b68:	e28db000 	add	fp, sp, #0
   14b6c:	e24dd01c 	sub	sp, sp, #28
   14b70:	e50b0010 	str	r0, [fp, #-16]
   14b74:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   14b78:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
	/*unaligned word moves don't work
	for sizes not a multiple of 4,
	this function does not work
	just use a loop inline*/
    char *dp = dest;
   14b7c:	e51b3010 	ldr	r3, [fp, #-16]
   14b80:	e50b3008 	str	r3, [fp, #-8]
    const char *sp = src;
   14b84:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   14b88:	e50b300c 	str	r3, [fp, #-12]
    while (n--)
   14b8c:	ea000007 	b	14bb0 <memcpy2+0x4c>
        *dp++ = *sp++;
   14b90:	e51b3008 	ldr	r3, [fp, #-8]
   14b94:	e2832001 	add	r2, r3, #1
   14b98:	e50b2008 	str	r2, [fp, #-8]
   14b9c:	e51b200c 	ldr	r2, [fp, #-12]
   14ba0:	e2821001 	add	r1, r2, #1
   14ba4:	e50b100c 	str	r1, [fp, #-12]
   14ba8:	e5d22000 	ldrb	r2, [r2]
   14bac:	e5c32000 	strb	r2, [r3]
    while (n--)
   14bb0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   14bb4:	e2432001 	sub	r2, r3, #1
   14bb8:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
   14bbc:	e3530000 	cmp	r3, #0
   14bc0:	1afffff2 	bne	14b90 <memcpy2+0x2c>
	return dest;
   14bc4:	e51b3010 	ldr	r3, [fp, #-16]
}
   14bc8:	e1a00003 	mov	r0, r3
   14bcc:	e28bd000 	add	sp, fp, #0
   14bd0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   14bd4:	e12fff1e 	bx	lr

00014bd8 <memcmp>:

int memcmp(const void* s1, const void* s2, size_t n){
   14bd8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   14bdc:	e28db000 	add	fp, sp, #0
   14be0:	e24dd01c 	sub	sp, sp, #28
   14be4:	e50b0010 	str	r0, [fp, #-16]
   14be8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   14bec:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    const unsigned char *p1 = s1, *p2 = s2;
   14bf0:	e51b3010 	ldr	r3, [fp, #-16]
   14bf4:	e50b3008 	str	r3, [fp, #-8]
   14bf8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   14bfc:	e50b300c 	str	r3, [fp, #-12]
    while(n--)
   14c00:	ea000012 	b	14c50 <memcmp+0x78>
        if( *p1 != *p2 )
   14c04:	e51b3008 	ldr	r3, [fp, #-8]
   14c08:	e5d32000 	ldrb	r2, [r3]
   14c0c:	e51b300c 	ldr	r3, [fp, #-12]
   14c10:	e5d33000 	ldrb	r3, [r3]
   14c14:	e1520003 	cmp	r2, r3
   14c18:	0a000006 	beq	14c38 <memcmp+0x60>
            return *p1 - *p2;
   14c1c:	e51b3008 	ldr	r3, [fp, #-8]
   14c20:	e5d33000 	ldrb	r3, [r3]
   14c24:	e1a02003 	mov	r2, r3
   14c28:	e51b300c 	ldr	r3, [fp, #-12]
   14c2c:	e5d33000 	ldrb	r3, [r3]
   14c30:	e0423003 	sub	r3, r2, r3
   14c34:	ea00000b 	b	14c68 <memcmp+0x90>
        else
            p1++,p2++;
   14c38:	e51b3008 	ldr	r3, [fp, #-8]
   14c3c:	e2833001 	add	r3, r3, #1
   14c40:	e50b3008 	str	r3, [fp, #-8]
   14c44:	e51b300c 	ldr	r3, [fp, #-12]
   14c48:	e2833001 	add	r3, r3, #1
   14c4c:	e50b300c 	str	r3, [fp, #-12]
    while(n--)
   14c50:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   14c54:	e2432001 	sub	r2, r3, #1
   14c58:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
   14c5c:	e3530000 	cmp	r3, #0
   14c60:	1affffe7 	bne	14c04 <memcmp+0x2c>
    return 0;
   14c64:	e3a03000 	mov	r3, #0
}
   14c68:	e1a00003 	mov	r0, r3
   14c6c:	e28bd000 	add	sp, fp, #0
   14c70:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   14c74:	e12fff1e 	bx	lr

00014c78 <strcpy>:

char *strcpy(char *dest, const char* src){
   14c78:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   14c7c:	e28db000 	add	fp, sp, #0
   14c80:	e24dd014 	sub	sp, sp, #20
   14c84:	e50b0010 	str	r0, [fp, #-16]
   14c88:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    char *ret = dest;
   14c8c:	e51b3010 	ldr	r3, [fp, #-16]
   14c90:	e50b3008 	str	r3, [fp, #-8]
    while (*dest++ = *src++)
   14c94:	e320f000 	nop	{0}
   14c98:	e51b3010 	ldr	r3, [fp, #-16]
   14c9c:	e2832001 	add	r2, r3, #1
   14ca0:	e50b2010 	str	r2, [fp, #-16]
   14ca4:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   14ca8:	e2821001 	add	r1, r2, #1
   14cac:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   14cb0:	e5d22000 	ldrb	r2, [r2]
   14cb4:	e5c32000 	strb	r2, [r3]
   14cb8:	e5d33000 	ldrb	r3, [r3]
   14cbc:	e3530000 	cmp	r3, #0
   14cc0:	1afffff4 	bne	14c98 <strcpy+0x20>
        ;
    return ret;
   14cc4:	e51b3008 	ldr	r3, [fp, #-8]
}
   14cc8:	e1a00003 	mov	r0, r3
   14ccc:	e28bd000 	add	sp, fp, #0
   14cd0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   14cd4:	e12fff1e 	bx	lr

00014cd8 <strncpy>:

char *strncpy(char *dest, const char *src, size_t n){
   14cd8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   14cdc:	e28db000 	add	fp, sp, #0
   14ce0:	e24dd01c 	sub	sp, sp, #28
   14ce4:	e50b0010 	str	r0, [fp, #-16]
   14ce8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   14cec:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    char *ret = dest;
   14cf0:	e51b3010 	ldr	r3, [fp, #-16]
   14cf4:	e50b3008 	str	r3, [fp, #-8]
    do {
        if (!n--)
   14cf8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   14cfc:	e2432001 	sub	r2, r3, #1
   14d00:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
   14d04:	e3530000 	cmp	r3, #0
   14d08:	1a000001 	bne	14d14 <strncpy+0x3c>
            return ret;
   14d0c:	e51b3008 	ldr	r3, [fp, #-8]
   14d10:	ea000016 	b	14d70 <strncpy+0x98>
    } while (*dest++ = *src++);
   14d14:	e51b3010 	ldr	r3, [fp, #-16]
   14d18:	e2832001 	add	r2, r3, #1
   14d1c:	e50b2010 	str	r2, [fp, #-16]
   14d20:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   14d24:	e2821001 	add	r1, r2, #1
   14d28:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   14d2c:	e5d22000 	ldrb	r2, [r2]
   14d30:	e5c32000 	strb	r2, [r3]
   14d34:	e5d33000 	ldrb	r3, [r3]
   14d38:	e3530000 	cmp	r3, #0
   14d3c:	1affffed 	bne	14cf8 <strncpy+0x20>
    while (n--)
   14d40:	ea000004 	b	14d58 <strncpy+0x80>
        *dest++ = 0;
   14d44:	e51b3010 	ldr	r3, [fp, #-16]
   14d48:	e2832001 	add	r2, r3, #1
   14d4c:	e50b2010 	str	r2, [fp, #-16]
   14d50:	e3a02000 	mov	r2, #0
   14d54:	e5c32000 	strb	r2, [r3]
    while (n--)
   14d58:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   14d5c:	e2432001 	sub	r2, r3, #1
   14d60:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
   14d64:	e3530000 	cmp	r3, #0
   14d68:	1afffff5 	bne	14d44 <strncpy+0x6c>
    return ret;
   14d6c:	e51b3008 	ldr	r3, [fp, #-8]
}
   14d70:	e1a00003 	mov	r0, r3
   14d74:	e28bd000 	add	sp, fp, #0
   14d78:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   14d7c:	e12fff1e 	bx	lr

00014d80 <strlen>:

size_t strlen(const char *s){
   14d80:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   14d84:	e28db000 	add	fp, sp, #0
   14d88:	e24dd014 	sub	sp, sp, #20
   14d8c:	e50b0010 	str	r0, [fp, #-16]
    size_t i;
    for (i = 0; s[i] != '\0'; i++) ;
   14d90:	e3a03000 	mov	r3, #0
   14d94:	e50b3008 	str	r3, [fp, #-8]
   14d98:	ea000002 	b	14da8 <strlen+0x28>
   14d9c:	e51b3008 	ldr	r3, [fp, #-8]
   14da0:	e2833001 	add	r3, r3, #1
   14da4:	e50b3008 	str	r3, [fp, #-8]
   14da8:	e51b2010 	ldr	r2, [fp, #-16]
   14dac:	e51b3008 	ldr	r3, [fp, #-8]
   14db0:	e0823003 	add	r3, r2, r3
   14db4:	e5d33000 	ldrb	r3, [r3]
   14db8:	e3530000 	cmp	r3, #0
   14dbc:	1afffff6 	bne	14d9c <strlen+0x1c>
    return i;
   14dc0:	e51b3008 	ldr	r3, [fp, #-8]
}
   14dc4:	e1a00003 	mov	r0, r3
   14dc8:	e28bd000 	add	sp, fp, #0
   14dcc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   14dd0:	e12fff1e 	bx	lr

00014dd4 <rand>:

//this is not random at all
int next = 1;
   14dd4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   14dd8:	e28db000 	add	fp, sp, #0
   14ddc:	e59f3038 	ldr	r3, [pc, #56]	; 14e1c <rand+0x48>
   14de0:	e5933000 	ldr	r3, [r3]
   14de4:	e59f2034 	ldr	r2, [pc, #52]	; 14e20 <rand+0x4c>
   14de8:	e0030392 	mul	r3, r2, r3
   14dec:	e2833a03 	add	r3, r3, #12288	; 0x3000
   14df0:	e2833039 	add	r3, r3, #57	; 0x39
   14df4:	e59f2020 	ldr	r2, [pc, #32]	; 14e1c <rand+0x48>
   14df8:	e5823000 	str	r3, [r2]
   14dfc:	e59f3018 	ldr	r3, [pc, #24]	; 14e1c <rand+0x48>
   14e00:	e5933000 	ldr	r3, [r3]
   14e04:	e1a03883 	lsl	r3, r3, #17
   14e08:	e1a038a3 	lsr	r3, r3, #17
   14e0c:	e1a00003 	mov	r0, r3
   14e10:	e28bd000 	add	sp, fp, #0
   14e14:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   14e18:	e12fff1e 	bx	lr
   14e1c:	00015cb4 			; <UNDEFINED> instruction: 0x00015cb4
   14e20:	41c64e6d 	bicmi	r4, r6, sp, ror #28

00014e24 <pvPortMalloc>:
/* STATIC FUNCTIONS ARE DEFINED AS MACROS TO MINIMIZE THE FUNCTION CALL DEPTH. */

/*-----------------------------------------------------------*/
size_t allocated = 0;
void *pvPortMalloc( size_t xWantedSize )
{
   14e24:	e92d4800 	push	{fp, lr}
   14e28:	e28db004 	add	fp, sp, #4
   14e2c:	e24dd018 	sub	sp, sp, #24
   14e30:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
   14e34:	e3a03000 	mov	r3, #0
   14e38:	e50b3010 	str	r3, [fp, #-16]

	vTaskSuspendAll();
   14e3c:	ebfff628 	bl	126e4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
   14e40:	e59f3194 	ldr	r3, [pc, #404]	; 14fdc <pvPortMalloc+0x1b8>
   14e44:	e5933000 	ldr	r3, [r3]
   14e48:	e3530000 	cmp	r3, #0
   14e4c:	1a000000 	bne	14e54 <pvPortMalloc+0x30>
		{
			prvHeapInit();
   14e50:	eb000093 	bl	150a4 <prvHeapInit>
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
   14e54:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   14e58:	e3530000 	cmp	r3, #0
   14e5c:	0a00000c 	beq	14e94 <pvPortMalloc+0x70>
		{
			xWantedSize += heapSTRUCT_SIZE;
   14e60:	e3a03010 	mov	r3, #16
   14e64:	e1a02003 	mov	r2, r3
   14e68:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   14e6c:	e0833002 	add	r3, r3, r2
   14e70:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

			/* Ensure that blocks are always aligned to the required number of 
			bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   14e74:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   14e78:	e2033007 	and	r3, r3, #7
   14e7c:	e3530000 	cmp	r3, #0
   14e80:	0a000003 	beq	14e94 <pvPortMalloc+0x70>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   14e84:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   14e88:	e3c33007 	bic	r3, r3, #7
   14e8c:	e2833008 	add	r3, r3, #8
   14e90:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < xTotalHeapSize ) )
   14e94:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   14e98:	e3530000 	cmp	r3, #0
   14e9c:	0a000043 	beq	14fb0 <pvPortMalloc+0x18c>
   14ea0:	e3a02a01 	mov	r2, #4096	; 0x1000
   14ea4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   14ea8:	e1530002 	cmp	r3, r2
   14eac:	2a00003f 	bcs	14fb0 <pvPortMalloc+0x18c>
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
   14eb0:	e59f3128 	ldr	r3, [pc, #296]	; 14fe0 <pvPortMalloc+0x1bc>
   14eb4:	e50b300c 	str	r3, [fp, #-12]
			pxBlock = xStart.pxNextFreeBlock;
   14eb8:	e59f3120 	ldr	r3, [pc, #288]	; 14fe0 <pvPortMalloc+0x1bc>
   14ebc:	e5933000 	ldr	r3, [r3]
   14ec0:	e50b3008 	str	r3, [fp, #-8]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   14ec4:	ea000004 	b	14edc <pvPortMalloc+0xb8>
			{
				pxPreviousBlock = pxBlock;
   14ec8:	e51b3008 	ldr	r3, [fp, #-8]
   14ecc:	e50b300c 	str	r3, [fp, #-12]
				pxBlock = pxBlock->pxNextFreeBlock;
   14ed0:	e51b3008 	ldr	r3, [fp, #-8]
   14ed4:	e5933000 	ldr	r3, [r3]
   14ed8:	e50b3008 	str	r3, [fp, #-8]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   14edc:	e51b3008 	ldr	r3, [fp, #-8]
   14ee0:	e5932004 	ldr	r2, [r3, #4]
   14ee4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   14ee8:	e1520003 	cmp	r2, r3
   14eec:	2a000003 	bcs	14f00 <pvPortMalloc+0xdc>
   14ef0:	e51b3008 	ldr	r3, [fp, #-8]
   14ef4:	e5933000 	ldr	r3, [r3]
   14ef8:	e3530000 	cmp	r3, #0
   14efc:	1afffff1 	bne	14ec8 <pvPortMalloc+0xa4>
			}

			/* If the end marker was reached then a block of adequate size was
			not found. */
			if( pxBlock != pxEnd )
   14f00:	e59f30d4 	ldr	r3, [pc, #212]	; 14fdc <pvPortMalloc+0x1b8>
   14f04:	e5933000 	ldr	r3, [r3]
   14f08:	e51b2008 	ldr	r2, [fp, #-8]
   14f0c:	e1520003 	cmp	r2, r3
   14f10:	0a000026 	beq	14fb0 <pvPortMalloc+0x18c>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
   14f14:	e51b300c 	ldr	r3, [fp, #-12]
   14f18:	e5933000 	ldr	r3, [r3]
   14f1c:	e3a02010 	mov	r2, #16
   14f20:	e0833002 	add	r3, r3, r2
   14f24:	e50b3010 	str	r3, [fp, #-16]

				/* This block is being returned for use so must be taken out of
				the	list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
   14f28:	e51b3008 	ldr	r3, [fp, #-8]
   14f2c:	e5932000 	ldr	r2, [r3]
   14f30:	e51b300c 	ldr	r3, [fp, #-12]
   14f34:	e5832000 	str	r2, [r3]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
   14f38:	e51b3008 	ldr	r3, [fp, #-8]
   14f3c:	e5932004 	ldr	r2, [r3, #4]
   14f40:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   14f44:	e0423003 	sub	r3, r2, r3
   14f48:	e3a02010 	mov	r2, #16
   14f4c:	e1a02082 	lsl	r2, r2, #1
   14f50:	e1530002 	cmp	r3, r2
   14f54:	9a00000e 	bls	14f94 <pvPortMalloc+0x170>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
   14f58:	e51b2008 	ldr	r2, [fp, #-8]
   14f5c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   14f60:	e0823003 	add	r3, r2, r3
   14f64:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
   14f68:	e51b3008 	ldr	r3, [fp, #-8]
   14f6c:	e5932004 	ldr	r2, [r3, #4]
   14f70:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   14f74:	e0422003 	sub	r2, r2, r3
   14f78:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   14f7c:	e5832004 	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
   14f80:	e51b3008 	ldr	r3, [fp, #-8]
   14f84:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   14f88:	e5832004 	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
   14f8c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   14f90:	eb000079 	bl	1517c <prvInsertBlockIntoFreeList>
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
   14f94:	e59f3048 	ldr	r3, [pc, #72]	; 14fe4 <pvPortMalloc+0x1c0>
   14f98:	e5932000 	ldr	r2, [r3]
   14f9c:	e51b3008 	ldr	r3, [fp, #-8]
   14fa0:	e5933004 	ldr	r3, [r3, #4]
   14fa4:	e0423003 	sub	r3, r2, r3
   14fa8:	e59f2034 	ldr	r2, [pc, #52]	; 14fe4 <pvPortMalloc+0x1c0>
   14fac:	e5823000 	str	r3, [r2]
			}
		}
	}
	xTaskResumeAll();
   14fb0:	ebfff5d7 	bl	12714 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif
	
	allocated += xWantedSize;
   14fb4:	e59f302c 	ldr	r3, [pc, #44]	; 14fe8 <pvPortMalloc+0x1c4>
   14fb8:	e5932000 	ldr	r2, [r3]
   14fbc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   14fc0:	e0823003 	add	r3, r2, r3
   14fc4:	e59f201c 	ldr	r2, [pc, #28]	; 14fe8 <pvPortMalloc+0x1c4>
   14fc8:	e5823000 	str	r3, [r2]

	return pvReturn;
   14fcc:	e51b3010 	ldr	r3, [fp, #-16]
}
   14fd0:	e1a00003 	mov	r0, r3
   14fd4:	e24bd004 	sub	sp, fp, #4
   14fd8:	e8bd8800 	pop	{fp, pc}
   14fdc:	000170a8 	andeq	r7, r1, r8, lsr #1
   14fe0:	000170a0 	andeq	r7, r1, r0, lsr #1
   14fe4:	00015cb8 			; <UNDEFINED> instruction: 0x00015cb8
   14fe8:	000170ac 	andeq	r7, r1, ip, lsr #1

00014fec <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   14fec:	e92d4800 	push	{fp, lr}
   14ff0:	e28db004 	add	fp, sp, #4
   14ff4:	e24dd010 	sub	sp, sp, #16
   14ff8:	e50b0010 	str	r0, [fp, #-16]
unsigned char *puc = ( unsigned char * ) pv;
   14ffc:	e51b3010 	ldr	r3, [fp, #-16]
   15000:	e50b3008 	str	r3, [fp, #-8]
xBlockLink *pxLink;

	if( pv != NULL )
   15004:	e51b3010 	ldr	r3, [fp, #-16]
   15008:	e3530000 	cmp	r3, #0
   1500c:	0a000011 	beq	15058 <vPortFree+0x6c>
	{
		/* The memory being freed will have an xBlockLink structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
   15010:	e3a03010 	mov	r3, #16
   15014:	e2633000 	rsb	r3, r3, #0
   15018:	e51b2008 	ldr	r2, [fp, #-8]
   1501c:	e0823003 	add	r3, r2, r3
   15020:	e50b3008 	str	r3, [fp, #-8]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
   15024:	e51b3008 	ldr	r3, [fp, #-8]
   15028:	e50b300c 	str	r3, [fp, #-12]

		vTaskSuspendAll();
   1502c:	ebfff5ac 	bl	126e4 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			xFreeBytesRemaining += pxLink->xBlockSize;
   15030:	e51b300c 	ldr	r3, [fp, #-12]
   15034:	e5932004 	ldr	r2, [r3, #4]
   15038:	e59f3024 	ldr	r3, [pc, #36]	; 15064 <vPortFree+0x78>
   1503c:	e5933000 	ldr	r3, [r3]
   15040:	e0823003 	add	r3, r2, r3
   15044:	e59f2018 	ldr	r2, [pc, #24]	; 15064 <vPortFree+0x78>
   15048:	e5823000 	str	r3, [r2]
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );			
   1504c:	e51b000c 	ldr	r0, [fp, #-12]
   15050:	eb000049 	bl	1517c <prvInsertBlockIntoFreeList>
		}
		xTaskResumeAll();
   15054:	ebfff5ae 	bl	12714 <xTaskResumeAll>
	}
}
   15058:	e320f000 	nop	{0}
   1505c:	e24bd004 	sub	sp, fp, #4
   15060:	e8bd8800 	pop	{fp, pc}
   15064:	00015cb8 			; <UNDEFINED> instruction: 0x00015cb8

00015068 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
   15068:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   1506c:	e28db000 	add	fp, sp, #0
	return xFreeBytesRemaining;
   15070:	e59f3010 	ldr	r3, [pc, #16]	; 15088 <xPortGetFreeHeapSize+0x20>
   15074:	e5933000 	ldr	r3, [r3]
}
   15078:	e1a00003 	mov	r0, r3
   1507c:	e28bd000 	add	sp, fp, #0
   15080:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   15084:	e12fff1e 	bx	lr
   15088:	00015cb8 			; <UNDEFINED> instruction: 0x00015cb8

0001508c <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
   1508c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   15090:	e28db000 	add	fp, sp, #0
	/* This just exists to keep the linker quiet. */
}
   15094:	e320f000 	nop	{0}
   15098:	e28bd000 	add	sp, fp, #0
   1509c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   150a0:	e12fff1e 	bx	lr

000150a4 <prvHeapInit>:
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
   150a4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   150a8:	e28db000 	add	fp, sp, #0
   150ac:	e24dd00c 	sub	sp, sp, #12
	/* Ensure the start of the heap is aligned. */
	configASSERT( ( ( ( unsigned long ) xHeap.ucHeap ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) xHeap.ucHeap;
   150b0:	e59f30b4 	ldr	r3, [pc, #180]	; 1516c <prvHeapInit+0xc8>
   150b4:	e59f20b4 	ldr	r2, [pc, #180]	; 15170 <prvHeapInit+0xcc>
   150b8:	e5832000 	str	r2, [r3]
	xStart.xBlockSize = ( size_t ) 0;
   150bc:	e59f30a8 	ldr	r3, [pc, #168]	; 1516c <prvHeapInit+0xc8>
   150c0:	e3a02000 	mov	r2, #0
   150c4:	e5832004 	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	pucHeapEnd = xHeap.ucHeap + xTotalHeapSize;
   150c8:	e3a02a01 	mov	r2, #4096	; 0x1000
   150cc:	e59f309c 	ldr	r3, [pc, #156]	; 15170 <prvHeapInit+0xcc>
   150d0:	e0823003 	add	r3, r2, r3
   150d4:	e50b3008 	str	r3, [fp, #-8]
	pucHeapEnd -= heapSTRUCT_SIZE;
   150d8:	e3a03010 	mov	r3, #16
   150dc:	e2633000 	rsb	r3, r3, #0
   150e0:	e51b2008 	ldr	r2, [fp, #-8]
   150e4:	e0823003 	add	r3, r2, r3
   150e8:	e50b3008 	str	r3, [fp, #-8]
	pxEnd = ( void * ) pucHeapEnd;
   150ec:	e59f2080 	ldr	r2, [pc, #128]	; 15174 <prvHeapInit+0xd0>
   150f0:	e51b3008 	ldr	r3, [fp, #-8]
   150f4:	e5823000 	str	r3, [r2]
	configASSERT( ( ( ( unsigned long ) pxEnd ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );
	pxEnd->xBlockSize = 0;
   150f8:	e59f3074 	ldr	r3, [pc, #116]	; 15174 <prvHeapInit+0xd0>
   150fc:	e5933000 	ldr	r3, [r3]
   15100:	e3a02000 	mov	r2, #0
   15104:	e5832004 	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
   15108:	e59f3064 	ldr	r3, [pc, #100]	; 15174 <prvHeapInit+0xd0>
   1510c:	e5933000 	ldr	r3, [r3]
   15110:	e3a02000 	mov	r2, #0
   15114:	e5832000 	str	r2, [r3]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) xHeap.ucHeap;
   15118:	e59f3050 	ldr	r3, [pc, #80]	; 15170 <prvHeapInit+0xcc>
   1511c:	e50b300c 	str	r3, [fp, #-12]
	pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
   15120:	e3a03a01 	mov	r3, #4096	; 0x1000
   15124:	e3a02010 	mov	r2, #16
   15128:	e0432002 	sub	r2, r3, r2
   1512c:	e51b300c 	ldr	r3, [fp, #-12]
   15130:	e5832004 	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
   15134:	e59f3038 	ldr	r3, [pc, #56]	; 15174 <prvHeapInit+0xd0>
   15138:	e5932000 	ldr	r2, [r3]
   1513c:	e51b300c 	ldr	r3, [fp, #-12]
   15140:	e5832000 	str	r2, [r3]

	/* The heap now contains pxEnd. */
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
   15144:	e59f302c 	ldr	r3, [pc, #44]	; 15178 <prvHeapInit+0xd4>
   15148:	e5933000 	ldr	r3, [r3]
   1514c:	e3a02010 	mov	r2, #16
   15150:	e0433002 	sub	r3, r3, r2
   15154:	e59f201c 	ldr	r2, [pc, #28]	; 15178 <prvHeapInit+0xd4>
   15158:	e5823000 	str	r3, [r2]
}
   1515c:	e320f000 	nop	{0}
   15160:	e28bd000 	add	sp, fp, #0
   15164:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   15168:	e12fff1e 	bx	lr
   1516c:	000170a0 	andeq	r7, r1, r0, lsr #1
   15170:	000160a0 	andeq	r6, r1, r0, lsr #1
   15174:	000170a8 	andeq	r7, r1, r8, lsr #1
   15178:	00015cb8 			; <UNDEFINED> instruction: 0x00015cb8

0001517c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
   1517c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   15180:	e28db000 	add	fp, sp, #0
   15184:	e24dd014 	sub	sp, sp, #20
   15188:	e50b0010 	str	r0, [fp, #-16]
xBlockLink *pxIterator;
unsigned char *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
   1518c:	e59f3134 	ldr	r3, [pc, #308]	; 152c8 <prvInsertBlockIntoFreeList+0x14c>
   15190:	e50b3008 	str	r3, [fp, #-8]
   15194:	ea000002 	b	151a4 <prvInsertBlockIntoFreeList+0x28>
   15198:	e51b3008 	ldr	r3, [fp, #-8]
   1519c:	e5933000 	ldr	r3, [r3]
   151a0:	e50b3008 	str	r3, [fp, #-8]
   151a4:	e51b3008 	ldr	r3, [fp, #-8]
   151a8:	e5932000 	ldr	r2, [r3]
   151ac:	e51b3010 	ldr	r3, [fp, #-16]
   151b0:	e1520003 	cmp	r2, r3
   151b4:	3afffff7 	bcc	15198 <prvInsertBlockIntoFreeList+0x1c>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */	
	puc = ( unsigned char * ) pxIterator;
   151b8:	e51b3008 	ldr	r3, [fp, #-8]
   151bc:	e50b300c 	str	r3, [fp, #-12]
	if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
   151c0:	e51b3008 	ldr	r3, [fp, #-8]
   151c4:	e5933004 	ldr	r3, [r3, #4]
   151c8:	e51b200c 	ldr	r2, [fp, #-12]
   151cc:	e0822003 	add	r2, r2, r3
   151d0:	e51b3010 	ldr	r3, [fp, #-16]
   151d4:	e1520003 	cmp	r2, r3
   151d8:	1a000008 	bne	15200 <prvInsertBlockIntoFreeList+0x84>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
   151dc:	e51b3008 	ldr	r3, [fp, #-8]
   151e0:	e5932004 	ldr	r2, [r3, #4]
   151e4:	e51b3010 	ldr	r3, [fp, #-16]
   151e8:	e5933004 	ldr	r3, [r3, #4]
   151ec:	e0822003 	add	r2, r2, r3
   151f0:	e51b3008 	ldr	r3, [fp, #-8]
   151f4:	e5832004 	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
   151f8:	e51b3008 	ldr	r3, [fp, #-8]
   151fc:	e50b3010 	str	r3, [fp, #-16]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( unsigned char * ) pxBlockToInsert;
   15200:	e51b3010 	ldr	r3, [fp, #-16]
   15204:	e50b300c 	str	r3, [fp, #-12]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
   15208:	e51b3010 	ldr	r3, [fp, #-16]
   1520c:	e5933004 	ldr	r3, [r3, #4]
   15210:	e51b200c 	ldr	r2, [fp, #-12]
   15214:	e0822003 	add	r2, r2, r3
   15218:	e51b3008 	ldr	r3, [fp, #-8]
   1521c:	e5933000 	ldr	r3, [r3]
   15220:	e1520003 	cmp	r2, r3
   15224:	1a000018 	bne	1528c <prvInsertBlockIntoFreeList+0x110>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
   15228:	e51b3008 	ldr	r3, [fp, #-8]
   1522c:	e5932000 	ldr	r2, [r3]
   15230:	e59f3094 	ldr	r3, [pc, #148]	; 152cc <prvInsertBlockIntoFreeList+0x150>
   15234:	e5933000 	ldr	r3, [r3]
   15238:	e1520003 	cmp	r2, r3
   1523c:	0a00000d 	beq	15278 <prvInsertBlockIntoFreeList+0xfc>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
   15240:	e51b3010 	ldr	r3, [fp, #-16]
   15244:	e5932004 	ldr	r2, [r3, #4]
   15248:	e51b3008 	ldr	r3, [fp, #-8]
   1524c:	e5933000 	ldr	r3, [r3]
   15250:	e5933004 	ldr	r3, [r3, #4]
   15254:	e0822003 	add	r2, r2, r3
   15258:	e51b3010 	ldr	r3, [fp, #-16]
   1525c:	e5832004 	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
   15260:	e51b3008 	ldr	r3, [fp, #-8]
   15264:	e5933000 	ldr	r3, [r3]
   15268:	e5932000 	ldr	r2, [r3]
   1526c:	e51b3010 	ldr	r3, [fp, #-16]
   15270:	e5832000 	str	r2, [r3]
   15274:	ea000008 	b	1529c <prvInsertBlockIntoFreeList+0x120>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
   15278:	e59f304c 	ldr	r3, [pc, #76]	; 152cc <prvInsertBlockIntoFreeList+0x150>
   1527c:	e5932000 	ldr	r2, [r3]
   15280:	e51b3010 	ldr	r3, [fp, #-16]
   15284:	e5832000 	str	r2, [r3]
   15288:	ea000003 	b	1529c <prvInsertBlockIntoFreeList+0x120>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;		
   1528c:	e51b3008 	ldr	r3, [fp, #-8]
   15290:	e5932000 	ldr	r2, [r3]
   15294:	e51b3010 	ldr	r3, [fp, #-16]
   15298:	e5832000 	str	r2, [r3]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
   1529c:	e51b2008 	ldr	r2, [fp, #-8]
   152a0:	e51b3010 	ldr	r3, [fp, #-16]
   152a4:	e1520003 	cmp	r2, r3
   152a8:	0a000002 	beq	152b8 <prvInsertBlockIntoFreeList+0x13c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
   152ac:	e51b3008 	ldr	r3, [fp, #-8]
   152b0:	e51b2010 	ldr	r2, [fp, #-16]
   152b4:	e5832000 	str	r2, [r3]
	}
}
   152b8:	e320f000 	nop	{0}
   152bc:	e28bd000 	add	sp, fp, #0
   152c0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   152c4:	e12fff1e 	bx	lr
   152c8:	000170a0 	andeq	r7, r1, r0, lsr #1
   152cc:	000170a8 	andeq	r7, r1, r8, lsr #1

000152d0 <undefined_instruction>:
   152d0:	eafffffe 	b	152d0 <undefined_instruction>

000152d4 <prefetch_abort>:
   152d4:	eafffffe 	b	152d4 <prefetch_abort>

000152d8 <data_abort>:
   152d8:	eafffffe 	b	152d8 <data_abort>

000152dc <unused>:
   152dc:	eafffffe 	b	152dc <unused>

000152e0 <fiq>:
   152e0:	eafffffe 	b	152e0 <fiq>

000152e4 <hang>:
   152e4:	eafffffe 	b	152e4 <hang>

000152e8 <PUT32>:
   152e8:	e5801000 	str	r1, [r0]
   152ec:	e12fff1e 	bx	lr

000152f0 <GET32>:
   152f0:	e5900000 	ldr	r0, [r0]
   152f4:	e12fff1e 	bx	lr

000152f8 <task1>:
#include "Drivers/video.h"
#include "uspi.h"

#define ALIVE_LED 23

void task1(void *pParam) {
   152f8:	e92d4800 	push	{fp, lr}
   152fc:	e28db004 	add	fp, sp, #4
   15300:	e24dd010 	sub	sp, sp, #16
   15304:	e50b0010 	str	r0, [fp, #-16]

	int i = 0;
   15308:	e3a03000 	mov	r3, #0
   1530c:	e50b3008 	str	r3, [fp, #-8]
	while(1) {
		i++;
   15310:	e51b3008 	ldr	r3, [fp, #-8]
   15314:	e2833001 	add	r3, r3, #1
   15318:	e50b3008 	str	r3, [fp, #-8]
		SetGpio(ALIVE_LED, 1);
   1531c:	e3a01001 	mov	r1, #1
   15320:	e3a00017 	mov	r0, #23
   15324:	ebfff991 	bl	13970 <SetGpio>
		vTaskDelay(200);
   15328:	e3a000c8 	mov	r0, #200	; 0xc8
   1532c:	ebfff331 	bl	11ff8 <vTaskDelay>
		i++;
   15330:	eafffff6 	b	15310 <task1+0x18>

00015334 <task2>:
	}
}

void task2(void *pParam) {
   15334:	e92d4800 	push	{fp, lr}
   15338:	e28db004 	add	fp, sp, #4
   1533c:	e24dd010 	sub	sp, sp, #16
   15340:	e50b0010 	str	r0, [fp, #-16]

	int i = 0;
   15344:	e3a03000 	mov	r3, #0
   15348:	e50b3008 	str	r3, [fp, #-8]
	while(1) {
		i++;
   1534c:	e51b3008 	ldr	r3, [fp, #-8]
   15350:	e2833001 	add	r3, r3, #1
   15354:	e50b3008 	str	r3, [fp, #-8]
		vTaskDelay(100);
   15358:	e3a00064 	mov	r0, #100	; 0x64
   1535c:	ebfff325 	bl	11ff8 <vTaskDelay>
		SetGpio(ALIVE_LED, 0);
   15360:	e3a01000 	mov	r1, #0
   15364:	e3a00017 	mov	r0, #23
   15368:	ebfff980 	bl	13970 <SetGpio>
		vTaskDelay(100);
   1536c:	e3a00064 	mov	r0, #100	; 0x64
   15370:	ebfff320 	bl	11ff8 <vTaskDelay>
		i++;
   15374:	eafffff4 	b	1534c <task2+0x18>

00015378 <keyPressedHandler>:
	}
}

static void keyPressedHandler( const char *pString ) {
   15378:	e92d4800 	push	{fp, lr}
   1537c:	e28db004 	add	fp, sp, #4
   15380:	e24dd008 	sub	sp, sp, #8
   15384:	e50b0008 	str	r0, [fp, #-8]
    println(pString,WHITE_TEXT);
   15388:	e3e01000 	mvn	r1, #0
   1538c:	e51b0008 	ldr	r0, [fp, #-8]
   15390:	ebfffc6b 	bl	14544 <println>
    while(1){
	uart_putc('d');	
   15394:	e3a00064 	mov	r0, #100	; 0x64
   15398:	ebfffaf9 	bl	13f84 <uart_putc>
   1539c:	eafffffc 	b	15394 <keyPressedHandler+0x1c>

000153a0 <task3>:
	}
}

void task3(void *pParam) {
   153a0:	e92d4800 	push	{fp, lr}
   153a4:	e28db004 	add	fp, sp, #4
   153a8:	e24dd010 	sub	sp, sp, #16
   153ac:	e50b0010 	str	r0, [fp, #-16]
    int i = 0;
   153b0:	e3a03000 	mov	r3, #0
   153b4:	e50b3008 	str	r3, [fp, #-8]

    USPiKeyboardRegisterKeyPressedHandler (keyPressedHandler);

    println("Type stuff...",GREEN_TEXT);
*/
    uart_init();
   153b8:	ebfffa94 	bl	13e10 <uart_init>
    while(1) {
        i++;
   153bc:	e51b3008 	ldr	r3, [fp, #-8]
   153c0:	e2833001 	add	r3, r3, #1
   153c4:	e50b3008 	str	r3, [fp, #-8]
        vTaskDelay(1000);
   153c8:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   153cc:	ebfff309 	bl	11ff8 <vTaskDelay>
        i++;
   153d0:	eafffff9 	b	153bc <task3+0x1c>

000153d4 <main>:
 *
 *	-- Absolutely nothing wrong with this being called main(), just it doesn't have
 *	-- the same prototype as you'd see in a linux program.
 **/
void main (void)
{
   153d4:	e92d4800 	push	{fp, lr}
   153d8:	e28db004 	add	fp, sp, #4
   153dc:	e24dd010 	sub	sp, sp, #16
	SetGpioFunction(ALIVE_LED, 1);			// RDY led
   153e0:	e3a01001 	mov	r1, #1
   153e4:	e3a00017 	mov	r0, #23
   153e8:	ebfff91c 	bl	13860 <SetGpioFunction>

    initFB();
   153ec:	ebfffb3e 	bl	140ec <initFB>


	xTaskCreate(task1, "LED_0", 128, NULL, 0, NULL);
   153f0:	e3a03000 	mov	r3, #0
   153f4:	e58d300c 	str	r3, [sp, #12]
   153f8:	e3a03000 	mov	r3, #0
   153fc:	e58d3008 	str	r3, [sp, #8]
   15400:	e3a03000 	mov	r3, #0
   15404:	e58d3004 	str	r3, [sp, #4]
   15408:	e3a03000 	mov	r3, #0
   1540c:	e58d3000 	str	r3, [sp]
   15410:	e3a03000 	mov	r3, #0
   15414:	e3a02080 	mov	r2, #128	; 0x80
   15418:	e59f1074 	ldr	r1, [pc, #116]	; 15494 <main+0xc0>
   1541c:	e59f0074 	ldr	r0, [pc, #116]	; 15498 <main+0xc4>
   15420:	ebfff1de 	bl	11ba0 <xTaskGenericCreate>
	xTaskCreate(task2, "LED_1", 128, NULL, 0, NULL);
   15424:	e3a03000 	mov	r3, #0
   15428:	e58d300c 	str	r3, [sp, #12]
   1542c:	e3a03000 	mov	r3, #0
   15430:	e58d3008 	str	r3, [sp, #8]
   15434:	e3a03000 	mov	r3, #0
   15438:	e58d3004 	str	r3, [sp, #4]
   1543c:	e3a03000 	mov	r3, #0
   15440:	e58d3000 	str	r3, [sp]
   15444:	e3a03000 	mov	r3, #0
   15448:	e3a02080 	mov	r2, #128	; 0x80
   1544c:	e59f1048 	ldr	r1, [pc, #72]	; 1549c <main+0xc8>
   15450:	e59f0048 	ldr	r0, [pc, #72]	; 154a0 <main+0xcc>
   15454:	ebfff1d1 	bl	11ba0 <xTaskGenericCreate>

    xTaskCreate(task3, "Screen_Print", 128, NULL, 0, NULL);
   15458:	e3a03000 	mov	r3, #0
   1545c:	e58d300c 	str	r3, [sp, #12]
   15460:	e3a03000 	mov	r3, #0
   15464:	e58d3008 	str	r3, [sp, #8]
   15468:	e3a03000 	mov	r3, #0
   1546c:	e58d3004 	str	r3, [sp, #4]
   15470:	e3a03000 	mov	r3, #0
   15474:	e58d3000 	str	r3, [sp]
   15478:	e3a03000 	mov	r3, #0
   1547c:	e3a02080 	mov	r2, #128	; 0x80
   15480:	e59f101c 	ldr	r1, [pc, #28]	; 154a4 <main+0xd0>
   15484:	e59f001c 	ldr	r0, [pc, #28]	; 154a8 <main+0xd4>
   15488:	ebfff1c4 	bl	11ba0 <xTaskGenericCreate>

	vTaskStartScheduler();
   1548c:	ebfff45f 	bl	12610 <vTaskStartScheduler>

	/*
	 *	We should never get here, but just in case something goes wrong,
	 *	we'll place the CPU into a safe loop.
	 */
	while(1) {
   15490:	eafffffe 	b	15490 <main+0xbc>
   15494:	00015c8c 	andeq	r5, r1, ip, lsl #25
   15498:	000152f8 	strdeq	r5, [r1], -r8
   1549c:	00015c94 	muleq	r1, r4, ip
   154a0:	00015334 	andeq	r5, r1, r4, lsr r3
   154a4:	00015c9c 	muleq	r1, ip, ip
   154a8:	000153a0 	andeq	r5, r1, r0, lsr #7

000154ac <__aeabi_drsub>:
   154ac:	e2211102 	eor	r1, r1, #-2147483648	; 0x80000000
   154b0:	ea000000 	b	154b8 <__adddf3>

000154b4 <__aeabi_dsub>:
   154b4:	e2233102 	eor	r3, r3, #-2147483648	; 0x80000000

000154b8 <__adddf3>:
   154b8:	e92d4030 	push	{r4, r5, lr}
   154bc:	e1a04081 	lsl	r4, r1, #1
   154c0:	e1a05083 	lsl	r5, r3, #1
   154c4:	e1340005 	teq	r4, r5
   154c8:	01300002 	teqeq	r0, r2
   154cc:	1194c000 	orrsne	ip, r4, r0
   154d0:	1195c002 	orrsne	ip, r5, r2
   154d4:	11f0cac4 	mvnsne	ip, r4, asr #21
   154d8:	11f0cac5 	mvnsne	ip, r5, asr #21
   154dc:	0a00008c 	beq	15714 <__adddf3+0x25c>
   154e0:	e1a04aa4 	lsr	r4, r4, #21
   154e4:	e0745aa5 	rsbs	r5, r4, r5, lsr #21
   154e8:	b2655000 	rsblt	r5, r5, #0
   154ec:	da000006 	ble	1550c <__adddf3+0x54>
   154f0:	e0844005 	add	r4, r4, r5
   154f4:	e0202002 	eor	r2, r0, r2
   154f8:	e0213003 	eor	r3, r1, r3
   154fc:	e0220000 	eor	r0, r2, r0
   15500:	e0231001 	eor	r1, r3, r1
   15504:	e0202002 	eor	r2, r0, r2
   15508:	e0213003 	eor	r3, r1, r3
   1550c:	e3550036 	cmp	r5, #54	; 0x36
   15510:	88bd4030 	pophi	{r4, r5, lr}
   15514:	812fff1e 	bxhi	lr
   15518:	e3110102 	tst	r1, #-2147483648	; 0x80000000
   1551c:	e1a01601 	lsl	r1, r1, #12
   15520:	e3a0c601 	mov	ip, #1048576	; 0x100000
   15524:	e18c1621 	orr	r1, ip, r1, lsr #12
   15528:	0a000001 	beq	15534 <__adddf3+0x7c>
   1552c:	e2700000 	rsbs	r0, r0, #0
   15530:	e2e11000 	rsc	r1, r1, #0
   15534:	e3130102 	tst	r3, #-2147483648	; 0x80000000
   15538:	e1a03603 	lsl	r3, r3, #12
   1553c:	e18c3623 	orr	r3, ip, r3, lsr #12
   15540:	0a000001 	beq	1554c <__adddf3+0x94>
   15544:	e2722000 	rsbs	r2, r2, #0
   15548:	e2e33000 	rsc	r3, r3, #0
   1554c:	e1340005 	teq	r4, r5
   15550:	0a000069 	beq	156fc <__adddf3+0x244>
   15554:	e2444001 	sub	r4, r4, #1
   15558:	e275e020 	rsbs	lr, r5, #32
   1555c:	ba000005 	blt	15578 <__adddf3+0xc0>
   15560:	e1a0ce12 	lsl	ip, r2, lr
   15564:	e0900532 	adds	r0, r0, r2, lsr r5
   15568:	e2a11000 	adc	r1, r1, #0
   1556c:	e0900e13 	adds	r0, r0, r3, lsl lr
   15570:	e0b11553 	adcs	r1, r1, r3, asr r5
   15574:	ea000006 	b	15594 <__adddf3+0xdc>
   15578:	e2455020 	sub	r5, r5, #32
   1557c:	e28ee020 	add	lr, lr, #32
   15580:	e3520001 	cmp	r2, #1
   15584:	e1a0ce13 	lsl	ip, r3, lr
   15588:	238cc002 	orrcs	ip, ip, #2
   1558c:	e0900553 	adds	r0, r0, r3, asr r5
   15590:	e0b11fc3 	adcs	r1, r1, r3, asr #31
   15594:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
   15598:	5a000002 	bpl	155a8 <__adddf3+0xf0>
   1559c:	e27cc000 	rsbs	ip, ip, #0
   155a0:	e2f00000 	rscs	r0, r0, #0
   155a4:	e2e11000 	rsc	r1, r1, #0
   155a8:	e3510601 	cmp	r1, #1048576	; 0x100000
   155ac:	3a00000f 	bcc	155f0 <__adddf3+0x138>
   155b0:	e3510602 	cmp	r1, #2097152	; 0x200000
   155b4:	3a000006 	bcc	155d4 <__adddf3+0x11c>
   155b8:	e1b010a1 	lsrs	r1, r1, #1
   155bc:	e1b00060 	rrxs	r0, r0
   155c0:	e1a0c06c 	rrx	ip, ip
   155c4:	e2844001 	add	r4, r4, #1
   155c8:	e1a02a84 	lsl	r2, r4, #21
   155cc:	e3720501 	cmn	r2, #4194304	; 0x400000
   155d0:	2a00006b 	bcs	15784 <__adddf3+0x2cc>
   155d4:	e35c0102 	cmp	ip, #-2147483648	; 0x80000000
   155d8:	01b0c0a0 	lsrseq	ip, r0, #1
   155dc:	e2b00000 	adcs	r0, r0, #0
   155e0:	e0a11a04 	adc	r1, r1, r4, lsl #20
   155e4:	e1811005 	orr	r1, r1, r5
   155e8:	e8bd4030 	pop	{r4, r5, lr}
   155ec:	e12fff1e 	bx	lr
   155f0:	e1b0c08c 	lsls	ip, ip, #1
   155f4:	e0b00000 	adcs	r0, r0, r0
   155f8:	e0a11001 	adc	r1, r1, r1
   155fc:	e3110601 	tst	r1, #1048576	; 0x100000
   15600:	e2444001 	sub	r4, r4, #1
   15604:	1afffff2 	bne	155d4 <__adddf3+0x11c>
   15608:	e3310000 	teq	r1, #0
   1560c:	13a03014 	movne	r3, #20
   15610:	03a03034 	moveq	r3, #52	; 0x34
   15614:	01a01000 	moveq	r1, r0
   15618:	03a00000 	moveq	r0, #0
   1561c:	e1a02001 	mov	r2, r1
   15620:	e3520801 	cmp	r2, #65536	; 0x10000
   15624:	21a02822 	lsrcs	r2, r2, #16
   15628:	22433010 	subcs	r3, r3, #16
   1562c:	e3520c01 	cmp	r2, #256	; 0x100
   15630:	21a02422 	lsrcs	r2, r2, #8
   15634:	22433008 	subcs	r3, r3, #8
   15638:	e3520010 	cmp	r2, #16
   1563c:	21a02222 	lsrcs	r2, r2, #4
   15640:	22433004 	subcs	r3, r3, #4
   15644:	e3520004 	cmp	r2, #4
   15648:	22433002 	subcs	r3, r3, #2
   1564c:	304330a2 	subcc	r3, r3, r2, lsr #1
   15650:	e04331a2 	sub	r3, r3, r2, lsr #3
   15654:	e2532020 	subs	r2, r3, #32
   15658:	aa000007 	bge	1567c <__adddf3+0x1c4>
   1565c:	e292200c 	adds	r2, r2, #12
   15660:	da000004 	ble	15678 <__adddf3+0x1c0>
   15664:	e282c014 	add	ip, r2, #20
   15668:	e262200c 	rsb	r2, r2, #12
   1566c:	e1a00c11 	lsl	r0, r1, ip
   15670:	e1a01231 	lsr	r1, r1, r2
   15674:	ea000004 	b	1568c <__adddf3+0x1d4>
   15678:	e2822014 	add	r2, r2, #20
   1567c:	d262c020 	rsble	ip, r2, #32
   15680:	e1a01211 	lsl	r1, r1, r2
   15684:	d1811c30 	orrle	r1, r1, r0, lsr ip
   15688:	d1a00210 	lslle	r0, r0, r2
   1568c:	e0544003 	subs	r4, r4, r3
   15690:	a0811a04 	addge	r1, r1, r4, lsl #20
   15694:	a1811005 	orrge	r1, r1, r5
   15698:	a8bd4030 	popge	{r4, r5, lr}
   1569c:	a12fff1e 	bxge	lr
   156a0:	e1e04004 	mvn	r4, r4
   156a4:	e254401f 	subs	r4, r4, #31
   156a8:	aa00000f 	bge	156ec <__adddf3+0x234>
   156ac:	e294400c 	adds	r4, r4, #12
   156b0:	ca000006 	bgt	156d0 <__adddf3+0x218>
   156b4:	e2844014 	add	r4, r4, #20
   156b8:	e2642020 	rsb	r2, r4, #32
   156bc:	e1a00430 	lsr	r0, r0, r4
   156c0:	e1800211 	orr	r0, r0, r1, lsl r2
   156c4:	e1851431 	orr	r1, r5, r1, lsr r4
   156c8:	e8bd4030 	pop	{r4, r5, lr}
   156cc:	e12fff1e 	bx	lr
   156d0:	e264400c 	rsb	r4, r4, #12
   156d4:	e2642020 	rsb	r2, r4, #32
   156d8:	e1a00230 	lsr	r0, r0, r2
   156dc:	e1800411 	orr	r0, r0, r1, lsl r4
   156e0:	e1a01005 	mov	r1, r5
   156e4:	e8bd4030 	pop	{r4, r5, lr}
   156e8:	e12fff1e 	bx	lr
   156ec:	e1a00431 	lsr	r0, r1, r4
   156f0:	e1a01005 	mov	r1, r5
   156f4:	e8bd4030 	pop	{r4, r5, lr}
   156f8:	e12fff1e 	bx	lr
   156fc:	e3340000 	teq	r4, #0
   15700:	e2233601 	eor	r3, r3, #1048576	; 0x100000
   15704:	02211601 	eoreq	r1, r1, #1048576	; 0x100000
   15708:	02844001 	addeq	r4, r4, #1
   1570c:	12455001 	subne	r5, r5, #1
   15710:	eaffff8f 	b	15554 <__adddf3+0x9c>
   15714:	e1f0cac4 	mvns	ip, r4, asr #21
   15718:	11f0cac5 	mvnsne	ip, r5, asr #21
   1571c:	0a00001d 	beq	15798 <__adddf3+0x2e0>
   15720:	e1340005 	teq	r4, r5
   15724:	01300002 	teqeq	r0, r2
   15728:	0a000004 	beq	15740 <__adddf3+0x288>
   1572c:	e194c000 	orrs	ip, r4, r0
   15730:	01a01003 	moveq	r1, r3
   15734:	01a00002 	moveq	r0, r2
   15738:	e8bd4030 	pop	{r4, r5, lr}
   1573c:	e12fff1e 	bx	lr
   15740:	e1310003 	teq	r1, r3
   15744:	13a01000 	movne	r1, #0
   15748:	13a00000 	movne	r0, #0
   1574c:	18bd4030 	popne	{r4, r5, lr}
   15750:	112fff1e 	bxne	lr
   15754:	e1b0caa4 	lsrs	ip, r4, #21
   15758:	1a000004 	bne	15770 <__adddf3+0x2b8>
   1575c:	e1b00080 	lsls	r0, r0, #1
   15760:	e0b11001 	adcs	r1, r1, r1
   15764:	23811102 	orrcs	r1, r1, #-2147483648	; 0x80000000
   15768:	e8bd4030 	pop	{r4, r5, lr}
   1576c:	e12fff1e 	bx	lr
   15770:	e2944501 	adds	r4, r4, #4194304	; 0x400000
   15774:	32811601 	addcc	r1, r1, #1048576	; 0x100000
   15778:	38bd4030 	popcc	{r4, r5, lr}
   1577c:	312fff1e 	bxcc	lr
   15780:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
   15784:	e385147f 	orr	r1, r5, #2130706432	; 0x7f000000
   15788:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
   1578c:	e3a00000 	mov	r0, #0
   15790:	e8bd4030 	pop	{r4, r5, lr}
   15794:	e12fff1e 	bx	lr
   15798:	e1f0cac4 	mvns	ip, r4, asr #21
   1579c:	11a01003 	movne	r1, r3
   157a0:	11a00002 	movne	r0, r2
   157a4:	01f0cac5 	mvnseq	ip, r5, asr #21
   157a8:	11a03001 	movne	r3, r1
   157ac:	11a02000 	movne	r2, r0
   157b0:	e1904601 	orrs	r4, r0, r1, lsl #12
   157b4:	01925603 	orrseq	r5, r2, r3, lsl #12
   157b8:	01310003 	teqeq	r1, r3
   157bc:	13811702 	orrne	r1, r1, #524288	; 0x80000
   157c0:	e8bd4030 	pop	{r4, r5, lr}
   157c4:	e12fff1e 	bx	lr

000157c8 <__aeabi_ui2d>:
   157c8:	e3300000 	teq	r0, #0
   157cc:	03a01000 	moveq	r1, #0
   157d0:	012fff1e 	bxeq	lr
   157d4:	e92d4030 	push	{r4, r5, lr}
   157d8:	e3a04b01 	mov	r4, #1024	; 0x400
   157dc:	e2844032 	add	r4, r4, #50	; 0x32
   157e0:	e3a05000 	mov	r5, #0
   157e4:	e3a01000 	mov	r1, #0
   157e8:	eaffff86 	b	15608 <__adddf3+0x150>

000157ec <__aeabi_i2d>:
   157ec:	e3300000 	teq	r0, #0
   157f0:	03a01000 	moveq	r1, #0
   157f4:	012fff1e 	bxeq	lr
   157f8:	e92d4030 	push	{r4, r5, lr}
   157fc:	e3a04b01 	mov	r4, #1024	; 0x400
   15800:	e2844032 	add	r4, r4, #50	; 0x32
   15804:	e2105102 	ands	r5, r0, #-2147483648	; 0x80000000
   15808:	42600000 	rsbmi	r0, r0, #0
   1580c:	e3a01000 	mov	r1, #0
   15810:	eaffff7c 	b	15608 <__adddf3+0x150>

00015814 <__aeabi_f2d>:
   15814:	e1b02080 	lsls	r2, r0, #1
   15818:	e1a011c2 	asr	r1, r2, #3
   1581c:	e1a01061 	rrx	r1, r1
   15820:	e1a00e02 	lsl	r0, r2, #28
   15824:	121234ff 	andsne	r3, r2, #-16777216	; 0xff000000
   15828:	133304ff 	teqne	r3, #-16777216	; 0xff000000
   1582c:	1221130e 	eorne	r1, r1, #939524096	; 0x38000000
   15830:	112fff1e 	bxne	lr
   15834:	e3320000 	teq	r2, #0
   15838:	133304ff 	teqne	r3, #-16777216	; 0xff000000
   1583c:	012fff1e 	bxeq	lr
   15840:	e92d4030 	push	{r4, r5, lr}
   15844:	e3a04d0e 	mov	r4, #896	; 0x380
   15848:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
   1584c:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
   15850:	eaffff6c 	b	15608 <__adddf3+0x150>

00015854 <__aeabi_ul2d>:
   15854:	e1902001 	orrs	r2, r0, r1
   15858:	012fff1e 	bxeq	lr
   1585c:	e92d4030 	push	{r4, r5, lr}
   15860:	e3a05000 	mov	r5, #0
   15864:	ea000006 	b	15884 <__aeabi_l2d+0x1c>

00015868 <__aeabi_l2d>:
   15868:	e1902001 	orrs	r2, r0, r1
   1586c:	012fff1e 	bxeq	lr
   15870:	e92d4030 	push	{r4, r5, lr}
   15874:	e2115102 	ands	r5, r1, #-2147483648	; 0x80000000
   15878:	5a000001 	bpl	15884 <__aeabi_l2d+0x1c>
   1587c:	e2700000 	rsbs	r0, r0, #0
   15880:	e2e11000 	rsc	r1, r1, #0
   15884:	e3a04b01 	mov	r4, #1024	; 0x400
   15888:	e2844032 	add	r4, r4, #50	; 0x32
   1588c:	e1b0cb21 	lsrs	ip, r1, #22
   15890:	0affff44 	beq	155a8 <__adddf3+0xf0>
   15894:	e3a02003 	mov	r2, #3
   15898:	e1b0c1ac 	lsrs	ip, ip, #3
   1589c:	12822003 	addne	r2, r2, #3
   158a0:	e1b0c1ac 	lsrs	ip, ip, #3
   158a4:	12822003 	addne	r2, r2, #3
   158a8:	e08221ac 	add	r2, r2, ip, lsr #3
   158ac:	e2623020 	rsb	r3, r2, #32
   158b0:	e1a0c310 	lsl	ip, r0, r3
   158b4:	e1a00230 	lsr	r0, r0, r2
   158b8:	e1800311 	orr	r0, r0, r1, lsl r3
   158bc:	e1a01231 	lsr	r1, r1, r2
   158c0:	e0844002 	add	r4, r4, r2
   158c4:	eaffff37 	b	155a8 <__adddf3+0xf0>

000158c8 <__aeabi_d2iz>:
   158c8:	e1a02081 	lsl	r2, r1, #1
   158cc:	e2922602 	adds	r2, r2, #2097152	; 0x200000
   158d0:	2a00000c 	bcs	15908 <__aeabi_d2iz+0x40>
   158d4:	5a000009 	bpl	15900 <__aeabi_d2iz+0x38>
   158d8:	e3e03e3e 	mvn	r3, #992	; 0x3e0
   158dc:	e0532ac2 	subs	r2, r3, r2, asr #21
   158e0:	9a00000a 	bls	15910 <__aeabi_d2iz+0x48>
   158e4:	e1a03581 	lsl	r3, r1, #11
   158e8:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
   158ec:	e1833aa0 	orr	r3, r3, r0, lsr #21
   158f0:	e3110102 	tst	r1, #-2147483648	; 0x80000000
   158f4:	e1a00233 	lsr	r0, r3, r2
   158f8:	12600000 	rsbne	r0, r0, #0
   158fc:	e12fff1e 	bx	lr
   15900:	e3a00000 	mov	r0, #0
   15904:	e12fff1e 	bx	lr
   15908:	e1900601 	orrs	r0, r0, r1, lsl #12
   1590c:	1a000002 	bne	1591c <__aeabi_d2iz+0x54>
   15910:	e2110102 	ands	r0, r1, #-2147483648	; 0x80000000
   15914:	03e00102 	mvneq	r0, #-2147483648	; 0x80000000
   15918:	e12fff1e 	bx	lr
   1591c:	e3a00000 	mov	r0, #0
   15920:	e12fff1e 	bx	lr

00015924 <memcpy>:
   15924:	e352000f 	cmp	r2, #15
   15928:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1592c:	9a000029 	bls	159d8 <memcpy+0xb4>
   15930:	e1813000 	orr	r3, r1, r0
   15934:	e3130003 	tst	r3, #3
   15938:	1a000031 	bne	15a04 <memcpy+0xe0>
   1593c:	e1a0e002 	mov	lr, r2
   15940:	e280c010 	add	ip, r0, #16
   15944:	e2813010 	add	r3, r1, #16
   15948:	e5137010 	ldr	r7, [r3, #-16]
   1594c:	e513600c 	ldr	r6, [r3, #-12]
   15950:	e5135008 	ldr	r5, [r3, #-8]
   15954:	e5134004 	ldr	r4, [r3, #-4]
   15958:	e24ee010 	sub	lr, lr, #16
   1595c:	e35e000f 	cmp	lr, #15
   15960:	e50c7010 	str	r7, [ip, #-16]
   15964:	e50c600c 	str	r6, [ip, #-12]
   15968:	e50c5008 	str	r5, [ip, #-8]
   1596c:	e50c4004 	str	r4, [ip, #-4]
   15970:	e2833010 	add	r3, r3, #16
   15974:	e28cc010 	add	ip, ip, #16
   15978:	8afffff2 	bhi	15948 <memcpy+0x24>
   1597c:	e2423010 	sub	r3, r2, #16
   15980:	e3c3300f 	bic	r3, r3, #15
   15984:	e202600f 	and	r6, r2, #15
   15988:	e2833010 	add	r3, r3, #16
   1598c:	e3560003 	cmp	r6, #3
   15990:	e0811003 	add	r1, r1, r3
   15994:	e0803003 	add	r3, r0, r3
   15998:	9a00001b 	bls	15a0c <memcpy+0xe8>
   1599c:	e1a04001 	mov	r4, r1
   159a0:	e1a0c006 	mov	ip, r6
   159a4:	e243e004 	sub	lr, r3, #4
   159a8:	e24cc004 	sub	ip, ip, #4
   159ac:	e4945004 	ldr	r5, [r4], #4
   159b0:	e35c0003 	cmp	ip, #3
   159b4:	e5ae5004 	str	r5, [lr, #4]!
   159b8:	8afffffa 	bhi	159a8 <memcpy+0x84>
   159bc:	e246c004 	sub	ip, r6, #4
   159c0:	e3ccc003 	bic	ip, ip, #3
   159c4:	e28cc004 	add	ip, ip, #4
   159c8:	e083300c 	add	r3, r3, ip
   159cc:	e081100c 	add	r1, r1, ip
   159d0:	e2022003 	and	r2, r2, #3
   159d4:	ea000000 	b	159dc <memcpy+0xb8>
   159d8:	e1a03000 	mov	r3, r0
   159dc:	e3520000 	cmp	r2, #0
   159e0:	0a000005 	beq	159fc <memcpy+0xd8>
   159e4:	e2433001 	sub	r3, r3, #1
   159e8:	e0812002 	add	r2, r1, r2
   159ec:	e4d1c001 	ldrb	ip, [r1], #1
   159f0:	e1510002 	cmp	r1, r2
   159f4:	e5e3c001 	strb	ip, [r3, #1]!
   159f8:	1afffffb 	bne	159ec <memcpy+0xc8>
   159fc:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
   15a00:	e12fff1e 	bx	lr
   15a04:	e1a03000 	mov	r3, r0
   15a08:	eafffff5 	b	159e4 <memcpy+0xc0>
   15a0c:	e1a02006 	mov	r2, r6
   15a10:	eafffff1 	b	159dc <memcpy+0xb8>

Disassembly of section .rodata:

00015a14 <pRegs>:
   15a14:	2000b400 	andcs	fp, r0, r0, lsl #8
   15a18:	454c4449 	strbmi	r4, [ip, #-1097]	; 0xfffffbb7
   15a1c:	00000000 	andeq	r0, r0, r0

00015a20 <pRegs>:
   15a20:	2000b200 	andcs	fp, r0, r0, lsl #4

00015a24 <pRegs>:
   15a24:	3f200000 	svccc	0x00200000

00015a28 <font>:
   15a28:	00000000 	andeq	r0, r0, r0
   15a2c:	005c0000 	subseq	r0, ip, r0
   15a30:	00000000 	andeq	r0, r0, r0
   15a34:	00060006 	andeq	r0, r6, r6
   15a38:	7c280000 	stcvc	0, cr0, [r8], #-0
   15a3c:	00287c28 	eoreq	r7, r8, r8, lsr #24
   15a40:	54fe545c 	ldrbtpl	r5, [lr], #1116	; 0x45c
   15a44:	20440074 	subcs	r0, r4, r4, ror r0
   15a48:	00440810 	subeq	r0, r4, r0, lsl r8
   15a4c:	20545428 	subscs	r5, r4, r8, lsr #8
   15a50:	00060050 	andeq	r0, r6, r0, asr r0
   15a54:	00000000 	andeq	r0, r0, r0
   15a58:	00004438 	andeq	r4, r0, r8, lsr r4
   15a5c:	38440000 	stmdacc	r4, {}^	; <UNPREDICTABLE>
   15a60:	00000000 	andeq	r0, r0, r0
   15a64:	00020702 	andeq	r0, r2, r2, lsl #14
   15a68:	10100000 	andsne	r0, r0, r0
   15a6c:	0010107c 	andseq	r1, r0, ip, ror r0
   15a70:	000000c0 	andeq	r0, r0, r0, asr #1
   15a74:	10100000 	andsne	r0, r0, r0
   15a78:	00101010 	andseq	r1, r0, r0, lsl r0
   15a7c:	00000040 	andeq	r0, r0, r0, asr #32
   15a80:	10600000 	rsbne	r0, r0, r0
   15a84:	0000000c 	andeq	r0, r0, ip
   15a88:	4c54647c 	cfldrdmi	mvd6, [r4], {124}	; 0x7c
   15a8c:	7c48007c 	mcrrvc	0, 7, r0, r8, cr12
   15a90:	00000040 	andeq	r0, r0, r0, asr #32
   15a94:	54545464 	ldrbpl	r5, [r4], #-1124	; 0xfffffb9c
   15a98:	54440048 	strbpl	r0, [r4], #-72	; 0xffffffb8
   15a9c:	006c5454 	rsbeq	r5, ip, r4, asr r4
   15aa0:	2070203c 	rsbscs	r2, r0, ip, lsr r0
   15aa4:	545c0020 	ldrbpl	r0, [ip], #-32	; 0xffffffe0
   15aa8:	00245454 	eoreq	r5, r4, r4, asr r4
   15aac:	5454547c 	ldrbpl	r5, [r4], #-1148	; 0xfffffb84
   15ab0:	04040074 	streq	r0, [r4], #-116	; 0xffffff8c
   15ab4:	000c1464 	andeq	r1, ip, r4, ror #8
   15ab8:	5454547c 	ldrbpl	r5, [r4], #-1148	; 0xfffffb84
   15abc:	545c007c 	ldrbpl	r0, [ip], #-124	; 0xffffff84
   15ac0:	007c5454 	rsbseq	r5, ip, r4, asr r4
   15ac4:	00000044 	andeq	r0, r0, r4, asr #32
   15ac8:	00c40000 	sbceq	r0, r4, r0
   15acc:	00000000 	andeq	r0, r0, r0
   15ad0:	00442810 	subeq	r2, r4, r0, lsl r8
   15ad4:	28280000 	stmdacs	r8!, {}	; <UNPREDICTABLE>
   15ad8:	00282828 	eoreq	r2, r8, r8, lsr #16
   15adc:	00102844 	andseq	r2, r0, r4, asr #16
   15ae0:	04080000 	streq	r0, [r8], #-0
   15ae4:	00000854 	andeq	r0, r0, r4, asr r8
   15ae8:	5454447c 	ldrbpl	r4, [r4], #-1148	; 0xfffffb84
   15aec:	247c005c 	ldrbtcs	r0, [ip], #-92	; 0xffffffa4
   15af0:	007c2424 	rsbseq	r2, ip, r4, lsr #8
   15af4:	5454547c 	ldrbpl	r5, [r4], #-1148	; 0xfffffb84
   15af8:	447c006c 	ldrbtmi	r0, [ip], #-108	; 0xffffff94
   15afc:	00444444 	subeq	r4, r4, r4, asr #8
   15b00:	4444447c 	strbmi	r4, [r4], #-1148	; 0xfffffb84
   15b04:	547c0038 	ldrbtpl	r0, [ip], #-56	; 0xffffffc8
   15b08:	00445454 	subeq	r5, r4, r4, asr r4
   15b0c:	1414147c 	ldrne	r1, [r4], #-1148	; 0xfffffb84
   15b10:	447c0004 	ldrbtmi	r0, [ip], #-4
   15b14:	00745444 	rsbseq	r5, r4, r4, asr #8
   15b18:	1010107c 	andsne	r1, r0, ip, ror r0
   15b1c:	4444007c 	strbmi	r0, [r4], #-124	; 0xffffff84
   15b20:	0044447c 	subeq	r4, r4, ip, ror r4
   15b24:	44404060 	strbmi	r4, [r0], #-96	; 0xffffffa0
   15b28:	107c007c 	rsbsne	r0, ip, ip, ror r0
   15b2c:	00442810 	subeq	r2, r4, r0, lsl r8
   15b30:	4040407c 	submi	r4, r0, ip, ror r0
   15b34:	087c0040 	ldmdaeq	ip!, {r6}^
   15b38:	007c0810 	rsbseq	r0, ip, r0, lsl r8
   15b3c:	2010087c 	andscs	r0, r0, ip, ror r8
   15b40:	4438007c 	ldrtmi	r0, [r8], #-124	; 0xffffff84
   15b44:	00384444 	eorseq	r4, r8, r4, asr #8
   15b48:	1414147c 	ldrne	r1, [r4], #-1148	; 0xfffffb84
   15b4c:	243c0008 	ldrtcs	r0, [ip], #-8
   15b50:	003c2464 	eorseq	r2, ip, r4, ror #8
   15b54:	1414147c 	ldrne	r1, [r4], #-1148	; 0xfffffb84
   15b58:	545c0068 	ldrbpl	r0, [ip], #-104	; 0xffffff98
   15b5c:	00745454 	rsbseq	r5, r4, r4, asr r4
   15b60:	047c0404 	ldrbteq	r0, [ip], #-1028	; 0xfffffbfc
   15b64:	407c0004 	rsbsmi	r0, ip, r4
   15b68:	007c4040 	rsbseq	r4, ip, r0, asr #32
   15b6c:	3040300c 	subcc	r3, r0, ip
   15b70:	403c000c 	eorsmi	r0, ip, ip
   15b74:	003c4030 	eorseq	r4, ip, r0, lsr r0
   15b78:	28102844 	ldmdacs	r0, {r2, r6, fp, sp}
   15b7c:	100c0044 	andne	r0, ip, r4, asr #32
   15b80:	000c1060 	andeq	r1, ip, r0, rrx
   15b84:	4c546444 	cfldrdmi	mvd6, [r4], {68}	; 0x44
   15b88:	447c0044 	ldrbtmi	r0, [ip], #-68	; 0xffffffbc
   15b8c:	00000000 	andeq	r0, r0, r0
   15b90:	0060100c 	rsbeq	r1, r0, ip
   15b94:	7c440000 	marvc	acc0, r0, r4
   15b98:	00000000 	andeq	r0, r0, r0
   15b9c:	01000100 	mrseq	r0, (UNDEF: 16)
   15ba0:	40400000 	submi	r0, r0, r0
   15ba4:	40404040 	submi	r4, r0, r0, asr #32
   15ba8:	00000100 	andeq	r0, r0, r0, lsl #2
   15bac:	247c0000 	ldrbtcs	r0, [ip], #-0
   15bb0:	007c2424 	rsbseq	r2, ip, r4, lsr #8
   15bb4:	5454547c 	ldrbpl	r5, [r4], #-1148	; 0xfffffb84
   15bb8:	447c006c 	ldrbtmi	r0, [ip], #-108	; 0xffffff94
   15bbc:	00444444 	subeq	r4, r4, r4, asr #8
   15bc0:	4444447c 	strbmi	r4, [r4], #-1148	; 0xfffffb84
   15bc4:	547c0038 	ldrbtpl	r0, [ip], #-56	; 0xffffffc8
   15bc8:	00445454 	subeq	r5, r4, r4, asr r4
   15bcc:	1414147c 	ldrne	r1, [r4], #-1148	; 0xfffffb84
   15bd0:	447c0004 	ldrbtmi	r0, [ip], #-4
   15bd4:	00745444 	rsbseq	r5, r4, r4, asr #8
   15bd8:	1010107c 	andsne	r1, r0, ip, ror r0
   15bdc:	4444007c 	strbmi	r0, [r4], #-124	; 0xffffff84
   15be0:	0044447c 	subeq	r4, r4, ip, ror r4
   15be4:	44404060 	strbmi	r4, [r0], #-96	; 0xffffffa0
   15be8:	107c007c 	rsbsne	r0, ip, ip, ror r0
   15bec:	00442810 	subeq	r2, r4, r0, lsl r8
   15bf0:	4040407c 	submi	r4, r0, ip, ror r0
   15bf4:	087c0040 	ldmdaeq	ip!, {r6}^
   15bf8:	007c0810 	rsbseq	r0, ip, r0, lsl r8
   15bfc:	2010087c 	andscs	r0, r0, ip, ror r8
   15c00:	4438007c 	ldrtmi	r0, [r8], #-124	; 0xffffff84
   15c04:	00384444 	eorseq	r4, r8, r4, asr #8
   15c08:	1414147c 	ldrne	r1, [r4], #-1148	; 0xfffffb84
   15c0c:	243c0008 	ldrtcs	r0, [ip], #-8
   15c10:	003c2464 	eorseq	r2, ip, r4, ror #8
   15c14:	1414147c 	ldrne	r1, [r4], #-1148	; 0xfffffb84
   15c18:	545c0068 	ldrbpl	r0, [ip], #-104	; 0xffffff98
   15c1c:	00745454 	rsbseq	r5, r4, r4, asr r4
   15c20:	047c0404 	ldrbteq	r0, [ip], #-1028	; 0xfffffbfc
   15c24:	407c0004 	rsbsmi	r0, ip, r4
   15c28:	007c4040 	rsbseq	r4, ip, r0, asr #32
   15c2c:	3040300c 	subcc	r3, r0, ip
   15c30:	403c000c 	eorsmi	r0, ip, ip
   15c34:	003c4030 	eorseq	r4, ip, r0, lsr r0
   15c38:	28102844 	ldmdacs	r0, {r2, r6, fp, sp}
   15c3c:	100c0044 	andne	r0, ip, r4, asr #32
   15c40:	000c1060 	andeq	r1, ip, r0, rrx
   15c44:	4c546444 	cfldrdmi	mvd6, [r4], {68}	; 0x44
   15c48:	7c100044 	ldcvc	0, cr0, [r0], {68}	; 0x44
   15c4c:	00000044 	andeq	r0, r0, r4, asr #32
   15c50:	0000006c 	andeq	r0, r0, ip, rrx
   15c54:	7c440000 	marvc	acc0, r0, r4
   15c58:	00000010 	andeq	r0, r0, r0, lsl r0
   15c5c:	01020102 	tsteq	r2, r2, lsl #2
	...
   15c68:	33323130 	teqcc	r2, #48, 2
   15c6c:	37363534 			; <UNDEFINED> instruction: 0x37363534
   15c70:	42413938 	submi	r3, r1, #56, 18	; 0xe0000
   15c74:	46454443 	strbmi	r4, [r5], -r3, asr #8
   15c78:	74726f46 	ldrbtvc	r6, [r2], #-3910	; 0xfffff0ba
   15c7c:	77542d79 			; <UNDEFINED> instruction: 0x77542d79
   15c80:	0000006f 	andeq	r0, r0, pc, rrx

00015c84 <heapSTRUCT_SIZE>:
   15c84:	00000010 	andeq	r0, r0, r0, lsl r0

00015c88 <xTotalHeapSize>:
   15c88:	00001000 	andeq	r1, r0, r0
   15c8c:	5f44454c 	svcpl	0x0044454c
   15c90:	00000030 	andeq	r0, r0, r0, lsr r0
   15c94:	5f44454c 	svcpl	0x0044454c
   15c98:	00000031 	andeq	r0, r0, r1, lsr r0
   15c9c:	65726353 	ldrbvs	r6, [r2, #-851]!	; 0xfffffcad
   15ca0:	505f6e65 	subspl	r6, pc, r5, ror #28
   15ca4:	746e6972 	strbtvc	r6, [lr], #-2418	; 0xfffff68e
	...

Disassembly of section .data:

00015cac <ulCriticalNesting>:
   15cac:	0000270f 	andeq	r2, r0, pc, lsl #14

00015cb0 <xNextTaskUnblockTime>:
   15cb0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff

00015cb4 <next>:
   15cb4:	00000001 	andeq	r0, r0, r1

00015cb8 <xFreeBytesRemaining>:
   15cb8:	00001000 	andeq	r1, r0, r0

Disassembly of section .bss:

00015cc0 <__bss_start>:
   15cc0:	00000000 	andeq	r0, r0, r0

00015cc4 <pxReadyCoRoutineLists>:
	...

00015cec <xDelayedCoRoutineList1>:
	...

00015d00 <xDelayedCoRoutineList2>:
	...

00015d14 <pxDelayedCoRoutineList>:
   15d14:	00000000 	andeq	r0, r0, r0

00015d18 <pxOverflowDelayedCoRoutineList>:
   15d18:	00000000 	andeq	r0, r0, r0

00015d1c <xPendingReadyCoRoutineList>:
	...

00015d30 <pxCurrentCoRoutine>:
   15d30:	00000000 	andeq	r0, r0, r0

00015d34 <uxTopCoRoutineReadyPriority>:
   15d34:	00000000 	andeq	r0, r0, r0

00015d38 <xCoRoutineTickCount>:
   15d38:	00000000 	andeq	r0, r0, r0

00015d3c <xLastTickCount>:
   15d3c:	00000000 	andeq	r0, r0, r0

00015d40 <xPassedTicks>:
   15d40:	00000000 	andeq	r0, r0, r0

00015d44 <pxCurrentTCB>:
   15d44:	00000000 	andeq	r0, r0, r0

00015d48 <pxReadyTasksLists>:
	...

00015dac <xDelayedTaskList1>:
	...

00015dc0 <xDelayedTaskList2>:
	...

00015dd4 <pxDelayedTaskList>:
   15dd4:	00000000 	andeq	r0, r0, r0

00015dd8 <pxOverflowDelayedTaskList>:
   15dd8:	00000000 	andeq	r0, r0, r0

00015ddc <xPendingReadyList>:
	...

00015df0 <xTasksWaitingTermination>:
	...

00015e04 <uxTasksDeleted>:
   15e04:	00000000 	andeq	r0, r0, r0

00015e08 <xSuspendedTaskList>:
	...

00015e1c <uxCurrentNumberOfTasks>:
   15e1c:	00000000 	andeq	r0, r0, r0

00015e20 <xTickCount>:
   15e20:	00000000 	andeq	r0, r0, r0

00015e24 <uxTopUsedPriority>:
   15e24:	00000000 	andeq	r0, r0, r0

00015e28 <uxTopReadyPriority>:
   15e28:	00000000 	andeq	r0, r0, r0

00015e2c <xSchedulerRunning>:
   15e2c:	00000000 	andeq	r0, r0, r0

00015e30 <uxSchedulerSuspended>:
   15e30:	00000000 	andeq	r0, r0, r0

00015e34 <uxMissedTicks>:
   15e34:	00000000 	andeq	r0, r0, r0

00015e38 <xMissedYield>:
   15e38:	00000000 	andeq	r0, r0, r0

00015e3c <xNumOfOverflows>:
   15e3c:	00000000 	andeq	r0, r0, r0

00015e40 <uxTaskNumber>:
   15e40:	00000000 	andeq	r0, r0, r0

00015e44 <g_VectorTable>:
	...

00016084 <enabled>:
	...

00016090 <loaded>:
   16090:	00000000 	andeq	r0, r0, r0

00016094 <position_x>:
   16094:	00000000 	andeq	r0, r0, r0

00016098 <position_y>:
	...

000160a0 <xHeap>:
	...

000170a0 <xStart>:
	...

000170a8 <pxEnd>:
   170a8:	00000000 	andeq	r0, r0, r0

000170ac <allocated>:
   170ac:	00000000 	andeq	r0, r0, r0

000170b0 <SCREEN_WIDTH>:
   170b0:	00000000 	andeq	r0, r0, r0

000170b4 <SCREEN_HEIGHT>:
   170b4:	00000000 	andeq	r0, r0, r0

000170b8 <framebuffer>:
	...

000170c0 <mailbuffer>:
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	000001fb 	strdeq	r0, [r0], -fp
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	000000e3 	andeq	r0, r0, r3, ror #1
      10:	0000190c 	andeq	r1, r0, ip, lsl #18
      14:	01000000 	mrseq	r0, (UNDEF: 0)
      18:	00034400 	andeq	r4, r3, r0, lsl #8
      1c:	00000000 	andeq	r0, r0, r0
      20:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
      24:	00746e69 	rsbseq	r6, r4, r9, ror #28
      28:	1c070403 	cfstrsne	mvf0, [r7], {3}
      2c:	03000006 	movweq	r0, #6
      30:	012d0508 			; <UNDEFINED> instruction: 0x012d0508
      34:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
      38:	00015b04 	andeq	r5, r1, r4, lsl #22
      3c:	00b30400 	adcseq	r0, r3, r0, lsl #8
      40:	47020000 	strmi	r0, [r2, -r0]
      44:	00000048 	andeq	r0, r0, r8, asr #32
      48:	004e0405 	subeq	r0, lr, r5, lsl #8
      4c:	59060000 	stmdbpl	r6, {}	; <UNPREDICTABLE>
      50:	07000000 	streq	r0, [r0, -r0]
      54:	00000059 	andeq	r0, r0, r9, asr r0
      58:	04040800 	streq	r0, [r4], #-2048	; 0xfffff800
      5c:	0000000c 	andeq	r0, r0, ip
      60:	00666103 	rsbeq	r6, r6, r3, lsl #2
      64:	04030000 	streq	r0, [r3], #-0
      68:	00061707 	andeq	r1, r6, r7, lsl #14
      6c:	05040300 	streq	r0, [r4, #-768]	; 0xfffffd00
      70:	00000132 	andeq	r0, r0, r2, lsr r1
      74:	6f060103 	svcvs	0x00060103
      78:	03000008 	movweq	r0, #8
      7c:	00a00702 	adceq	r0, r0, r2, lsl #14
      80:	04050000 	streq	r0, [r5], #-0
      84:	00000066 	andeq	r0, r0, r6, rrx
      88:	da070403 	ble	1c109c <mailbuffer+0x1a9fdc>
      8c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
      90:	0000008c 	andeq	r0, r0, ip, lsl #1
      94:	08560124 	ldmdaeq	r6, {r2, r5, r8}^
      98:	0a000001 	beq	a4 <_start-0x7f5c>
      9c:	00444f4c 	subeq	r4, r4, ip, asr #30
      a0:	00665701 	rsbeq	r5, r6, r1, lsl #14
      a4:	0a000000 	beq	ac <_start-0x7f54>
      a8:	004c4156 	subeq	r4, ip, r6, asr r1
      ac:	00665801 	rsbeq	r5, r6, r1, lsl #16
      b0:	0a040000 	beq	1000b8 <mailbuffer+0xe8ff8>
      b4:	004c5443 	subeq	r5, ip, r3, asr #8
      b8:	00665901 	rsbeq	r5, r6, r1, lsl #18
      bc:	0a080000 	beq	2000c4 <mailbuffer+0x1e9004>
      c0:	00494c43 	subeq	r4, r9, r3, asr #24
      c4:	00665a01 	rsbeq	r5, r6, r1, lsl #20
      c8:	0a0c0000 	beq	3000d0 <mailbuffer+0x2e9010>
      cc:	00534952 	subseq	r4, r3, r2, asr r9
      d0:	00665b01 	rsbeq	r5, r6, r1, lsl #22
      d4:	0a100000 	beq	4000dc <mailbuffer+0x3e901c>
      d8:	0053494d 	subseq	r4, r3, sp, asr #18
      dc:	00665c01 	rsbeq	r5, r6, r1, lsl #24
      e0:	0a140000 	beq	5000e8 <mailbuffer+0x4e9028>
      e4:	00444c52 	subeq	r4, r4, r2, asr ip
      e8:	00665d01 	rsbeq	r5, r6, r1, lsl #26
      ec:	0a180000 	beq	6000f4 <mailbuffer+0x5e9034>
      f0:	00564944 	subseq	r4, r6, r4, asr #18
      f4:	00665e01 	rsbeq	r5, r6, r1, lsl #28
      f8:	0a1c0000 	beq	700100 <mailbuffer+0x6e9040>
      fc:	00544e43 	subseq	r4, r4, r3, asr #28
     100:	00665f01 	rsbeq	r5, r6, r1, lsl #30
     104:	00200000 	eoreq	r0, r0, r0
     108:	00008d04 	andeq	r8, r0, r4, lsl #26
     10c:	8f600100 	svchi	0x00600100
     110:	0b000000 	bleq	118 <_start-0x7ee8>
     114:	00000108 	andeq	r0, r0, r8, lsl #2
     118:	0001480c 	andeq	r4, r1, ip, lsl #16
     11c:	2f620100 	svccs	0x00620100
     120:	05000001 	streq	r0, [r0, #-1]
     124:	015a1403 	cmpeq	sl, r3, lsl #8
     128:	13040500 	movwne	r0, #17664	; 0x4500
     12c:	0d000001 	stceq	0, cr0, [r0, #-4]
     130:	00000129 	andeq	r0, r0, r9, lsr #2
     134:	0000600e 	andeq	r6, r0, lr
     138:	aceb0100 	stfgee	f0, [fp]
     13c:	98000102 	stmdals	r0, {r1, r8}
     140:	01000000 	mrseq	r0, (UNDEF: 0)
     144:	0001589c 	muleq	r1, ip, r8
     148:	01910c00 	orrseq	r0, r1, r0, lsl #24
     14c:	ed010000 	stc	0, cr0, [r1, #-0]
     150:	00000066 	andeq	r0, r0, r6, rrx
     154:	00749102 	rsbseq	r9, r4, r2, lsl #2
     158:	0000d10f 	andeq	sp, r0, pc, lsl #2
     15c:	74dd0100 	ldrbvc	r0, [sp], #256	; 0x100
     160:	38000102 	stmdacc	r0, {r1, r8}
     164:	01000000 	mrseq	r0, (UNDEF: 0)
     168:	00018a9c 	muleq	r1, ip, sl
     16c:	00001000 	andeq	r1, r0, r0
     170:	dd010000 	stcle	0, cr0, [r1, #-0]
     174:	00000028 	andeq	r0, r0, r8, lsr #32
     178:	10749102 	rsbsne	r9, r4, r2, lsl #2
     17c:	00000077 	andeq	r0, r0, r7, ror r0
     180:	0059dd01 	subseq	sp, r9, r1, lsl #26
     184:	91020000 	mrsls	r0, (UNDEF: 2)
     188:	bf110070 	svclt	0x00110070
     18c:	01000000 	mrseq	r0, (UNDEF: 0)
     190:	01025cd0 	ldrdeq	r5, [r2, -r0]
     194:	00001800 	andeq	r1, r0, r0, lsl #16
     198:	129c0100 	addsne	r0, ip, #0, 2
     19c:	00000167 	andeq	r0, r0, r7, ror #2
     1a0:	006dc201 	rsbeq	ip, sp, r1, lsl #4
     1a4:	02400000 	subeq	r0, r0, #0
     1a8:	001c0001 	andseq	r0, ip, r1
     1ac:	9c010000 	stcls	0, cr0, [r1], {-0}
     1b0:	00017b13 	andeq	r7, r1, r3, lsl fp
     1b4:	82770100 	rsbshi	r0, r7, #0, 2
     1b8:	00000000 	andeq	r0, r0, r0
     1bc:	40000100 	andmi	r0, r0, r0, lsl #2
     1c0:	01000002 	tsteq	r0, r2
     1c4:	014e109c 	swpbeq	r1, ip, [lr]
     1c8:	77010000 	strvc	r0, [r1, -r0]
     1cc:	00000082 	andeq	r0, r0, r2, lsl #1
     1d0:	106c9102 	rsbne	r9, ip, r2, lsl #2
     1d4:	00000005 	andeq	r0, r0, r5
     1d8:	003d7701 	eorseq	r7, sp, r1, lsl #14
     1dc:	91020000 	mrsls	r0, (UNDEF: 2)
     1e0:	013b1068 	teqeq	fp, r8, rrx
     1e4:	77010000 	strvc	r0, [r1, -r0]
     1e8:	00000059 	andeq	r0, r0, r9, asr r0
     1ec:	0c649102 	stfeqp	f1, [r4], #-8
     1f0:	0000007e 	andeq	r0, r0, lr, ror r0
     1f4:	00827901 	addeq	r7, r2, r1, lsl #18
     1f8:	91020000 	mrsls	r0, (UNDEF: 2)
     1fc:	83000074 	movwhi	r0, #116	; 0x74
     200:	04000001 	streq	r0, [r0], #-1
     204:	00011d00 	andeq	r1, r1, r0, lsl #26
     208:	e3010400 	movw	r0, #5120	; 0x1400
     20c:	0c000000 	stceq	0, cr0, [r0], {-0}
     210:	000001a0 	andeq	r0, r0, r0, lsr #3
     214:	00010344 	andeq	r0, r1, r4, asr #6
     218:	000002a4 	andeq	r0, r0, r4, lsr #5
     21c:	0000010b 	andeq	r0, r0, fp, lsl #2
     220:	69050402 	stmdbvs	r5, {r1, sl}
     224:	0300746e 	movweq	r7, #1134	; 0x46e
     228:	061c0704 	ldreq	r0, [ip], -r4, lsl #14
     22c:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
     230:	00012d05 	andeq	r2, r1, r5, lsl #26
     234:	04080300 	streq	r0, [r8], #-768	; 0xfffffd00
     238:	0000015b 	andeq	r0, r0, fp, asr r1
     23c:	17070403 	strne	r0, [r7, -r3, lsl #8]
     240:	04000006 	streq	r0, [r0], #-6
     244:	0000003d 	andeq	r0, r0, sp, lsr r0
     248:	32050403 	andcc	r0, r5, #50331648	; 0x3000000
     24c:	05000001 	streq	r0, [r0, #-1]
     250:	000001fd 	strdeq	r0, [r0], -sp
     254:	00446501 	subeq	r6, r4, r1, lsl #10
     258:	03050000 	movweq	r0, #20480	; 0x5000
     25c:	00015cac 	andeq	r5, r1, ip, lsr #25
     260:	00025a05 	andeq	r5, r2, r5, lsl #20
     264:	21730100 	cmncs	r3, r0, lsl #2
     268:	05000000 	streq	r0, [r0, #-0]
     26c:	015cc003 	cmpeq	ip, r3
     270:	020f0600 	andeq	r0, pc, #0, 12
     274:	fe010000 	cdp2	0, 0, cr0, cr1, cr0, {0}
     278:	00010584 	andeq	r0, r1, r4, lsl #11
     27c:	00000064 	andeq	r0, r0, r4, rrx
     280:	ea069c01 	b	1a728c <mailbuffer+0x1901cc>
     284:	01000001 	tsteq	r0, r1
     288:	010540ee 	smlatteq	r5, lr, r0, r4
     28c:	00004400 	andeq	r4, r0, r0, lsl #8
     290:	079c0100 	ldreq	r0, [ip, r0, lsl #2]
     294:	0000024c 	andeq	r0, r0, ip, asr #4
     298:	0490c101 	ldreq	ip, [r0], #257	; 0x101
     29c:	00b00001 	adcseq	r0, r0, r1
     2a0:	9c010000 	stcls	0, cr0, [r1], {-0}
     2a4:	000000ee 	andeq	r0, r0, lr, ror #1
     2a8:	01049008 	tsteq	r4, r8
     2ac:	00005800 	andeq	r5, r0, r0, lsl #16
     2b0:	0000cd00 	andeq	ip, r0, r0, lsl #26
     2b4:	02650900 	rsbeq	r0, r5, #0, 18
     2b8:	c2010000 	andgt	r0, r1, #0
     2bc:	000000f4 	strdeq	r0, [r0], -r4
     2c0:	0001fd09 	andeq	pc, r1, r9, lsl #26
     2c4:	44c20100 	strbmi	r0, [r2], #256	; 0x100
     2c8:	00000000 	andeq	r0, r0, r0
     2cc:	0104ec0a 	tsteq	r4, sl, lsl #24
     2d0:	00004800 	andeq	r4, r0, r0, lsl #16
     2d4:	02650900 	rsbeq	r0, r5, #0, 18
     2d8:	c4010000 	strgt	r0, [r1], #-0
     2dc:	000000f4 	strdeq	r0, [r0], -r4
     2e0:	0001fd09 	andeq	pc, r1, r9, lsl #26
     2e4:	44c40100 	strbmi	r0, [r4], #256	; 0x100
     2e8:	00000000 	andeq	r0, r0, r0
     2ec:	f9040b00 			; <UNDEFINED> instruction: 0xf9040b00
     2f0:	04000000 	streq	r0, [r0], #-0
     2f4:	000000ee 	andeq	r0, r0, lr, ror #1
     2f8:	02380d0c 	eorseq	r0, r8, #12, 26	; 0x300
     2fc:	9c010000 	stcls	0, cr0, [r1], {-0}
     300:	000103dc 	ldrdeq	r0, [r1], -ip
     304:	000000b4 	strheq	r0, [r0], -r4
     308:	01549c01 	cmpeq	r4, r1, lsl #24
     30c:	e0080000 	and	r0, r8, r0
     310:	58000103 	stmdapl	r0, {r0, r1, r8}
     314:	33000000 	movwcc	r0, #0
     318:	09000001 	stmdbeq	r0, {r0}
     31c:	00000265 	andeq	r0, r0, r5, ror #4
     320:	00f4a401 	rscseq	sl, r4, r1, lsl #8
     324:	fd090000 	stc2	0, cr0, [r9, #-0]
     328:	01000001 	tsteq	r0, r1
     32c:	000044a4 	andeq	r4, r0, r4, lsr #9
     330:	3c0a0000 	stccc	0, cr0, [sl], {-0}
     334:	48000104 	stmdami	r0, {r2, r8}
     338:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     33c:	00000265 	andeq	r0, r0, r5, ror #4
     340:	00f4aa01 	rscseq	sl, r4, r1, lsl #20
     344:	fd090000 	stc2	0, cr0, [r9, #-0]
     348:	01000001 	tsteq	r0, r1
     34c:	000044aa 	andeq	r4, r0, sl, lsr #9
     350:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
     354:	00000221 	andeq	r0, r0, r1, lsr #4
     358:	03447501 	movteq	r7, #17665	; 0x4501
     35c:	00980001 	addseq	r0, r8, r1
     360:	9c010000 	stcls	0, cr0, [r1], {-0}
     364:	01036c0a 	tsteq	r3, sl, lsl #24
     368:	00004800 	andeq	r4, r0, r0, lsl #16
     36c:	02650900 	rsbeq	r0, r5, #0, 18
     370:	88010000 	stmdahi	r1, {}	; <UNPREDICTABLE>
     374:	000000f4 	strdeq	r0, [r0], -r4
     378:	0001fd09 	andeq	pc, r1, r9, lsl #26
     37c:	44880100 	strmi	r0, [r8], #256	; 0x100
     380:	00000000 	andeq	r0, r0, r0
     384:	04700000 	ldrbteq	r0, [r0], #-0
     388:	00040000 	andeq	r0, r4, r0
     38c:	000001f4 	strdeq	r0, [r0], -r4
     390:	00e30104 	rsceq	r0, r3, r4, lsl #2
     394:	720c0000 	andvc	r0, ip, #0
     398:	f0000002 			; <UNDEFINED> instruction: 0xf0000002
     39c:	64000105 	strvs	r0, [r0], #-261	; 0xfffffefb
     3a0:	b3000007 	movwlt	r0, #7
     3a4:	02000001 	andeq	r0, r0, #1
     3a8:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     3ac:	04030074 	streq	r0, [r3], #-116	; 0xffffff8c
     3b0:	00061c07 	andeq	r1, r6, r7, lsl #24
     3b4:	05080300 	streq	r0, [r8, #-768]	; 0xfffffd00
     3b8:	0000012d 	andeq	r0, r0, sp, lsr #2
     3bc:	5b040803 	blpl	1023d0 <mailbuffer+0xeb310>
     3c0:	04000001 	streq	r0, [r0], #-1
     3c4:	000c0504 	andeq	r0, ip, r4, lsl #10
     3c8:	61030000 	mrsvs	r0, (UNDEF: 3)
     3cc:	0000004a 	andeq	r0, r0, sl, asr #32
     3d0:	17070403 	strne	r0, [r7, -r3, lsl #8]
     3d4:	06000006 	streq	r0, [r0], -r6
     3d8:	0000004a 	andeq	r0, r0, sl, asr #32
     3dc:	32050403 	andcc	r0, r5, #50331648	; 0x3000000
     3e0:	07000001 	streq	r0, [r0, -r1]
     3e4:	00000358 	andeq	r0, r0, r8, asr r3
     3e8:	a6690214 			; <UNDEFINED> instruction: 0xa6690214
     3ec:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     3f0:	0000030b 	andeq	r0, r0, fp, lsl #6
     3f4:	003f6b02 	eorseq	r6, pc, r2, lsl #22
     3f8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     3fc:	000004b1 			; <UNDEFINED> instruction: 0x000004b1
     400:	00ab6c02 	adceq	r6, fp, r2, lsl #24
     404:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
     408:	000003c8 	andeq	r0, r0, r8, asr #7
     40c:	00ab6d02 	adceq	r6, fp, r2, lsl #26
     410:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
     414:	0000032d 	andeq	r0, r0, sp, lsr #6
     418:	003d6e02 	eorseq	r6, sp, r2, lsl #28
     41c:	080c0000 	stmdaeq	ip, {}	; <UNPREDICTABLE>
     420:	000002d6 	ldrdeq	r0, [r0], -r6
     424:	003d6f02 	eorseq	r6, sp, r2, lsl #30
     428:	00100000 	andseq	r0, r0, r0
     42c:	00005d06 	andeq	r5, r0, r6, lsl #26
     430:	a6040900 	strge	r0, [r4], -r0, lsl #18
     434:	05000000 	streq	r0, [r0, #-0]
     438:	000004c4 	andeq	r0, r0, r4, asr #9
     43c:	005d7102 	subseq	r7, sp, r2, lsl #2
     440:	b1060000 	mrslt	r0, (UNDEF: 6)
     444:	07000000 	streq	r0, [r0, -r0]
     448:	00000520 	andeq	r0, r0, r0, lsr #10
     44c:	f273020c 	vhsub.s<illegal width 64>	d16, d3, d12
     450:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     454:	0000030b 	andeq	r0, r0, fp, lsl #6
     458:	003f7502 	eorseq	r7, pc, r2, lsl #10
     45c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     460:	000004b1 			; <UNDEFINED> instruction: 0x000004b1
     464:	00ab7602 	adceq	r7, fp, r2, lsl #12
     468:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
     46c:	000003c8 	andeq	r0, r0, r8, asr #7
     470:	00ab7702 	adceq	r7, fp, r2, lsl #14
     474:	00080000 	andeq	r0, r8, r0
     478:	00043805 	andeq	r3, r4, r5, lsl #16
     47c:	c1790200 	cmngt	r9, r0, lsl #4
     480:	06000000 	streq	r0, [r0], -r0
     484:	000000f2 	strdeq	r0, [r0], -r2
     488:	00053007 	andeq	r3, r5, r7
     48c:	7e021400 	cfcpysvc	mvf1, mvf2
     490:	00000133 	andeq	r0, r0, r3, lsr r1
     494:	00045708 	andeq	r5, r4, r8, lsl #14
     498:	51800200 	orrpl	r0, r0, r0, lsl #4
     49c:	00000000 	andeq	r0, r0, r0
     4a0:	00030308 	andeq	r0, r3, r8, lsl #6
     4a4:	33810200 	orrcc	r0, r1, #0, 4
     4a8:	04000001 	streq	r0, [r0], #-1
     4ac:	00032408 	andeq	r2, r3, r8, lsl #8
     4b0:	fd820200 	stc2	2, cr0, [r2]
     4b4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     4b8:	bc040900 			; <UNDEFINED> instruction: 0xbc040900
     4bc:	05000000 	streq	r0, [r0, #-0]
     4c0:	00000949 	andeq	r0, r0, r9, asr #18
     4c4:	01028302 	tsteq	r2, r2, lsl #6
     4c8:	390a0000 	stmdbcc	sl, {}	; <UNPREDICTABLE>
     4cc:	03000001 	movweq	r0, #1
     4d0:	086f0601 	stmdaeq	pc!, {r0, r9, sl}^	; <UNPREDICTABLE>
     4d4:	02030000 	andeq	r0, r3, #0
     4d8:	0000a007 	andeq	sl, r0, r7
     4dc:	07040300 	streq	r0, [r4, -r0, lsl #6]
     4e0:	000000da 	ldrdeq	r0, [r0], -sl
     4e4:	00048505 	andeq	r8, r4, r5, lsl #10
     4e8:	3d530400 	cfldrdcc	mvd0, [r3, #-0]
     4ec:	05000000 	streq	r0, [r0, #-0]
     4f0:	000005b6 			; <UNDEFINED> instruction: 0x000005b6
     4f4:	01745604 	cmneq	r4, r4, lsl #12
     4f8:	04090000 	streq	r0, [r9], #-0
     4fc:	0000017a 	andeq	r0, r0, sl, ror r1
     500:	00018a0b 	andeq	r8, r1, fp, lsl #20
     504:	015e0c00 	cmpeq	lr, r0, lsl #24
     508:	4a0c0000 	bmi	300510 <mailbuffer+0x2e9450>
     50c:	00000000 	andeq	r0, r0, r0
     510:	0003e307 	andeq	lr, r3, r7, lsl #6
     514:	58043800 	stmdapl	r4, {fp, ip, sp}
     518:	000001df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     51c:	0002e208 	andeq	lr, r2, r8, lsl #4
     520:	695a0400 	ldmdbvs	sl, {sl}^
     524:	00000001 	andeq	r0, r0, r1
     528:	00056608 	andeq	r6, r5, r8, lsl #12
     52c:	b15b0400 	cmplt	fp, r0, lsl #8
     530:	04000000 	streq	r0, [r0], #-0
     534:	00059308 	andeq	r9, r5, r8, lsl #6
     538:	b15c0400 	cmplt	ip, r0, lsl #8
     53c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     540:	00047a08 	andeq	r7, r4, r8, lsl #20
     544:	4a5d0400 	bmi	174154c <mailbuffer+0x172a48c>
     548:	2c000000 	stccs	0, cr0, [r0], {-0}
     54c:	00043008 	andeq	r3, r4, r8
     550:	4a5e0400 	bmi	1781558 <mailbuffer+0x176a498>
     554:	30000000 	andcc	r0, r0, r0
     558:	0004f908 	andeq	pc, r4, r8, lsl #18
     55c:	505f0400 	subspl	r0, pc, r0, lsl #8
     560:	34000001 	strcc	r0, [r0], #-1
     564:	03b90500 			; <UNDEFINED> instruction: 0x03b90500
     568:	60040000 	andvs	r0, r4, r0
     56c:	0000018a 	andeq	r0, r0, sl, lsl #3
     570:	0001390d 	andeq	r3, r1, sp, lsl #18
     574:	0001fa00 	andeq	pc, r1, r0, lsl #20
     578:	01570e00 	cmpeq	r7, r0, lsl #28
     57c:	00010000 	andeq	r0, r1, r0
     580:	00041a0f 	andeq	r1, r4, pc, lsl #20
     584:	ea510100 	b	144098c <mailbuffer+0x14298cc>
     588:	05000001 	streq	r0, [r0, #-1]
     58c:	015cc403 	cmpeq	ip, r3, lsl #8
     590:	038b0f00 	orreq	r0, fp, #0, 30
     594:	52010000 	andpl	r0, r1, #0
     598:	00000139 	andeq	r0, r0, r9, lsr r1
     59c:	5cec0305 	stclpl	3, cr0, [ip], #20
     5a0:	a20f0001 	andge	r0, pc, #1
     5a4:	01000003 	tsteq	r0, r3
     5a8:	00013953 	andeq	r3, r1, r3, asr r9
     5ac:	00030500 	andeq	r0, r3, r0, lsl #10
     5b0:	0f00015d 	svceq	0x0000015d
     5b4:	00000536 	andeq	r0, r0, r6, lsr r5
     5b8:	023e5401 	eorseq	r5, lr, #16777216	; 0x1000000
     5bc:	03050000 	movweq	r0, #20480	; 0x5000
     5c0:	00015d14 	andeq	r5, r1, r4, lsl sp
     5c4:	01390409 	teqeq	r9, r9, lsl #8
     5c8:	3e0a0000 	cdpcc	0, 0, cr0, cr10, cr0, {0}
     5cc:	0f000002 	svceq	0x00000002
     5d0:	00000501 	andeq	r0, r0, r1, lsl #10
     5d4:	023e5501 	eorseq	r5, lr, #4194304	; 0x400000
     5d8:	03050000 	movweq	r0, #20480	; 0x5000
     5dc:	00015d18 	andeq	r5, r1, r8, lsl sp
     5e0:	0004960f 	andeq	r9, r4, pc, lsl #12
     5e4:	39560100 	ldmdbcc	r6, {r8}^
     5e8:	05000001 	streq	r0, [r0, #-1]
     5ec:	015d1c03 	cmpeq	sp, r3, lsl #24
     5f0:	04671000 	strbteq	r1, [r7], #-0
     5f4:	59010000 	stmdbpl	r1, {}	; <UNPREDICTABLE>
     5f8:	0000027c 	andeq	r0, r0, ip, ror r2
     5fc:	5d300305 	ldcpl	3, cr0, [r0, #-20]!	; 0xffffffec
     600:	04090001 	streq	r0, [r9], #-1
     604:	000001df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     608:	00036f0f 	andeq	r6, r3, pc, lsl #30
     60c:	4a5a0100 	bmi	1680a14 <mailbuffer+0x1669954>
     610:	05000000 	streq	r0, [r0, #-0]
     614:	015d3403 	cmpeq	sp, r3, lsl #8
     618:	03440f00 	movteq	r0, #20224	; 0x4f00
     61c:	5b010000 	blpl	40624 <mailbuffer+0x29564>
     620:	0000003f 	andeq	r0, r0, pc, lsr r0
     624:	5d380305 	ldcpl	3, cr0, [r8, #-20]!	; 0xffffffec
     628:	350f0001 	strcc	r0, [pc, #-1]	; 62f <_start-0x79d1>
     62c:	01000003 	tsteq	r0, r3
     630:	00003f5b 	andeq	r3, r0, fp, asr pc
     634:	3c030500 	cfstr32cc	mvfx0, [r3], {-0}
     638:	0f00015d 	svceq	0x0000015d
     63c:	000002f6 	strdeq	r0, [r0], -r6
     640:	003f5b01 	eorseq	r5, pc, r1, lsl #22
     644:	03050000 	movweq	r0, #20480	; 0x5000
     648:	00015d40 	andeq	r5, r1, r0, asr #26
     64c:	0003fc11 	andeq	pc, r3, r1, lsl ip	; <UNPREDICTABLE>
     650:	016c0100 	cmneq	ip, r0, lsl #2
     654:	00000056 	andeq	r0, r0, r6, asr r0
     658:	00010cc8 	andeq	r0, r1, r8, asr #25
     65c:	0000008c 	andeq	r0, r0, ip, lsl #1
     660:	030e9c01 	movweq	r9, #60417	; 0xec01
     664:	b8120000 	ldmdalt	r2, {}	; <UNPREDICTABLE>
     668:	01000004 	tsteq	r0, r4
     66c:	030e016c 	movweq	r0, #57708	; 0xe16c
     670:	91020000 	mrsls	r0, (UNDEF: 2)
     674:	02a4136c 	adceq	r1, r4, #108, 6	; 0xb0000001
     678:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
     67c:	00027c01 	andeq	r7, r2, r1, lsl #24
     680:	70910200 	addsvc	r0, r1, r0, lsl #4
     684:	000bff13 	andeq	pc, fp, r3, lsl pc	; <UNPREDICTABLE>
     688:	016f0100 	cmneq	pc, r0, lsl #2
     68c:	00000056 	andeq	r0, r0, r6, asr r0
     690:	00749102 	rsbseq	r9, r4, r2, lsl #2
     694:	01440409 	cmpeq	r4, r9, lsl #8
     698:	77140000 	ldrvc	r0, [r4, -r0]
     69c:	01000005 	tsteq	r0, r5
     6a0:	0c200158 	stfeqs	f0, [r0], #-352	; 0xfffffea0
     6a4:	00a80001 	adceq	r0, r8, r1
     6a8:	9c010000 	stcls	0, cr0, [r1], {-0}
     6ac:	0000033a 	andeq	r0, r0, sl, lsr r3
     6b0:	00047a13 	andeq	r7, r4, r3, lsl sl
     6b4:	015a0100 	cmpeq	sl, r0, lsl #2
     6b8:	0000004a 	andeq	r0, r0, sl, asr #32
     6bc:	00749102 	rsbseq	r9, r4, r2, lsl #2
     6c0:	0004ce15 	andeq	ip, r4, r5, lsl lr
     6c4:	013a0100 	teqeq	sl, r0, lsl #2
     6c8:	00010af8 	strdeq	r0, [r1], -r8
     6cc:	00000128 	andeq	r0, r0, r8, lsr #2
     6d0:	036a9c01 	cmneq	sl, #256	; 0x100
     6d4:	60160000 	andsvs	r0, r6, r0
     6d8:	7800010b 	stmdavc	r0, {r0, r1, r3, r8}
     6dc:	13000000 	movwne	r0, #0
     6e0:	00000363 	andeq	r0, r0, r3, ror #6
     6e4:	44014f01 	strmi	r4, [r1], #-3841	; 0xfffff0ff
     6e8:	02000002 	andeq	r0, r0, #2
     6ec:	00007491 	muleq	r0, r1, r4
     6f0:	0005a214 	andeq	sl, r5, r4, lsl r2
     6f4:	01000100 	mrseq	r0, (UNDEF: 16)
     6f8:	00010928 	andeq	r0, r1, r8, lsr #18
     6fc:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     700:	03a99c01 			; <UNDEFINED> instruction: 0x03a99c01
     704:	c1130000 	tstgt	r3, r0
     708:	01000003 	tsteq	r0, r3
     70c:	027c0102 	rsbseq	r0, ip, #-2147483648	; 0x80000000
     710:	91020000 	mrsls	r0, (UNDEF: 2)
     714:	098c1670 	stmibeq	ip, {r4, r5, r6, r9, sl, ip}
     718:	00280001 	eoreq	r0, r8, r1
     71c:	b4130000 	ldrlt	r0, [r3], #-0
     720:	01000002 	tsteq	r0, r2
     724:	023e010d 	eorseq	r0, lr, #1073741827	; 0x40000003
     728:	91020000 	mrsls	r0, (UNDEF: 2)
     72c:	17000074 	smlsdxne	r0, r4, r0, r0
     730:	0000054d 	andeq	r0, r0, sp, asr #10
     734:	083ce901 	ldmdaeq	ip!, {r0, r8, fp, sp, lr, pc}
     738:	00ec0001 	rsceq	r0, ip, r1
     73c:	9c010000 	stcls	0, cr0, [r1], {-0}
     740:	000003d7 	ldrdeq	r0, [r0], -r7
     744:	01084c16 	tsteq	r8, r6, lsl ip
     748:	0000b400 	andeq	fp, r0, r0, lsl #8
     74c:	02a40f00 	adceq	r0, r4, #0, 30
     750:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
     754:	0000027c 	andeq	r0, r0, ip, ror r2
     758:	00749102 	rsbseq	r9, r4, r2, lsl #2
     75c:	02bb1800 	adcseq	r1, fp, #0, 16
     760:	c3010000 	movwgt	r0, #4096	; 0x1000
     764:	00010758 	andeq	r0, r1, r8, asr r7
     768:	000000e4 	andeq	r0, r0, r4, ror #1
     76c:	04179c01 	ldreq	r9, [r7], #-3073	; 0xfffff3ff
     770:	16190000 	ldrne	r0, [r9], -r0
     774:	01000003 	tsteq	r0, r3
     778:	00003fc3 	andeq	r3, r0, r3, asr #31
     77c:	6c910200 	lfmvs	f0, 4, [r1], {0}
     780:	0004b819 	andeq	fp, r4, r9, lsl r8
     784:	3ec30100 	polccs	f0, f3, f0
     788:	02000002 	andeq	r0, r0, #2
     78c:	e10f6891 			; <UNDEFINED> instruction: 0xe10f6891
     790:	01000004 	tsteq	r0, r4
     794:	00003fc5 	andeq	r3, r0, r5, asr #31
     798:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     79c:	04461a00 	strbeq	r1, [r6], #-2560	; 0xfffff600
     7a0:	8a010000 	bhi	407a8 <mailbuffer+0x296e8>
     7a4:	00000056 	andeq	r0, r0, r6, asr r0
     7a8:	000105f0 	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
     7ac:	00000168 	andeq	r0, r0, r8, ror #2
     7b0:	d3199c01 	tstle	r9, #256	; 0x100
     7b4:	01000003 	tsteq	r0, r3
     7b8:	0001698a 	andeq	r6, r1, sl, lsl #19
     7bc:	6c910200 	lfmvs	f0, 4, [r1], {0}
     7c0:	00047a19 	andeq	r7, r4, r9, lsl sl
     7c4:	4a8a0100 	bmi	fe280bcc <_estack+0xf6270bcc>
     7c8:	02000000 	andeq	r0, r0, #0
     7cc:	30196891 	mulscc	r9, r1, r8
     7d0:	01000004 	tsteq	r0, r4
     7d4:	00004a8a 	andeq	r4, r0, sl, lsl #21
     7d8:	64910200 	ldrvs	r0, [r1], #512	; 0x200
     7dc:	000bff0f 	andeq	pc, fp, pc, lsl #30
     7e0:	568c0100 	strpl	r0, [ip], r0, lsl #2
     7e4:	02000000 	andeq	r0, r0, #0
     7e8:	ed0f7491 	cfstrs	mvf7, [pc, #-580]	; 5ac <_start-0x7a54>
     7ec:	01000004 	tsteq	r0, r4
     7f0:	00027c8d 	andeq	r7, r2, sp, lsl #25
     7f4:	70910200 	addsvc	r0, r1, r0, lsl #4
     7f8:	0a900000 	beq	fe400800 <_estack+0xf63f0800>
     7fc:	00040000 	andeq	r0, r4, r0
     800:	00000377 	andeq	r0, r0, r7, ror r3
     804:	00e30104 	rsceq	r0, r3, r4, lsl #2
     808:	e00c0000 	and	r0, ip, r0
     80c:	54000007 	strpl	r0, [r0], #-7
     810:	9c00010d 	stflss	f0, [r0], {13}
     814:	72000002 	andvc	r0, r0, #2
     818:	02000003 	andeq	r0, r0, #3
     81c:	061c0704 	ldreq	r0, [ip], -r4, lsl #14
     820:	04030000 	streq	r0, [r3], #-0
     824:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
     828:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
     82c:	0000012d 	andeq	r0, r0, sp, lsr #2
     830:	5b040802 	blpl	102840 <mailbuffer+0xeb780>
     834:	02000001 	andeq	r0, r0, #1
     838:	086f0601 	stmdaeq	pc!, {r0, r9, sl}^	; <UNPREDICTABLE>
     83c:	01020000 	mrseq	r0, (UNDEF: 2)
     840:	00086d08 	andeq	r6, r8, r8, lsl #26
     844:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
     848:	00000889 	andeq	r0, r0, r9, lsl #17
     84c:	a0070202 	andge	r0, r7, r2, lsl #4
     850:	02000000 	andeq	r0, r0, #0
     854:	01320504 	teqeq	r2, r4, lsl #10
     858:	04020000 	streq	r0, [r2], #-0
     85c:	00061707 	andeq	r1, r6, r7, lsl #14
     860:	00600400 	rsbeq	r0, r0, r0, lsl #8
     864:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
     868:	00061207 	andeq	r1, r6, r7, lsl #4
     86c:	085b0500 	ldmdaeq	fp, {r8, sl}^
     870:	07020000 	streq	r0, [r2, -r0]
     874:	00000028 	andeq	r0, r0, r8, lsr #32
     878:	00084a05 	andeq	r4, r8, r5, lsl #20
     87c:	592c0300 	stmdbpl	ip!, {r8, r9}
     880:	05000000 	streq	r0, [r0, #-0]
     884:	00000940 	andeq	r0, r0, r0, asr #18
     888:	00597203 	subseq	r7, r9, r3, lsl #4
     88c:	b5060000 	strlt	r0, [r6, #-0]
     890:	04000007 	streq	r0, [r0], #-7
     894:	00210165 	eoreq	r0, r1, r5, ror #2
     898:	04070000 	streq	r0, [r7], #-0
     89c:	00bfa603 	adcseq	sl, pc, r3, lsl #12
     8a0:	af080000 	svcge	0x00080000
     8a4:	03000007 	movweq	r0, #7
     8a8:	000094a8 	andeq	r9, r0, r8, lsr #9
     8ac:	07610800 	strbeq	r0, [r1, -r0, lsl #16]!
     8b0:	a9030000 	stmdbge	r3, {}	; <UNPREDICTABLE>
     8b4:	000000bf 	strheq	r0, [r0], -pc	; <UNPREDICTABLE>
     8b8:	00440900 	subeq	r0, r4, r0, lsl #18
     8bc:	00cf0000 	sbceq	r0, pc, r0
     8c0:	cf0a0000 	svcgt	0x000a0000
     8c4:	03000000 	movweq	r0, #0
     8c8:	07040200 	streq	r0, [r4, -r0, lsl #4]
     8cc:	000000da 	ldrdeq	r0, [r0], -sl
     8d0:	a303080b 	movwge	r0, #14347	; 0x380b
     8d4:	000000f7 	strdeq	r0, [r0], -r7
     8d8:	00091e0c 	andeq	r1, r9, ip, lsl #28
     8dc:	28a50300 	stmiacs	r5!, {r8, r9}
     8e0:	00000000 	andeq	r0, r0, r0
     8e4:	0009260c 	andeq	r2, r9, ip, lsl #12
     8e8:	a0aa0300 	adcge	r0, sl, r0, lsl #6
     8ec:	04000000 	streq	r0, [r0], #-0
     8f0:	08b10500 	ldmeq	r1!, {r8, sl}
     8f4:	ab030000 	blge	c08fc <mailbuffer+0xa983c>
     8f8:	000000d6 	ldrdeq	r0, [r0], -r6
     8fc:	00072a05 	andeq	r2, r7, r5, lsl #20
     900:	73af0300 			; <UNDEFINED> instruction: 0x73af0300
     904:	0d000000 	stceq	0, cr0, [r0, #-0]
     908:	15040e04 	strne	r0, [r4, #-3588]	; 0xfffff1fc
     90c:	02000001 	andeq	r0, r0, #1
     910:	08760801 	ldmdaeq	r6!, {r0, fp}^
     914:	150f0000 	strne	r0, [pc, #-0]	; 91c <_start-0x76e4>
     918:	05000001 	streq	r0, [r0, #-1]
     91c:	00000984 	andeq	r0, r0, r4, lsl #19
     920:	00601605 	rsbeq	r1, r0, r5, lsl #12
     924:	3b100000 	blcc	40092c <mailbuffer+0x3e986c>
     928:	18000007 	stmdane	r0, {r0, r1, r2}
     92c:	017f2d05 	cmneq	pc, r5, lsl #26
     930:	d20c0000 	andle	r0, ip, #0
     934:	05000008 	streq	r0, [r0, #-8]
     938:	00017f2f 	andeq	r7, r1, pc, lsr #30
     93c:	5f110000 	svcpl	0x00110000
     940:	3005006b 	andcc	r0, r5, fp, rrx
     944:	00000028 	andeq	r0, r0, r8, lsr #32
     948:	09090c04 	stmdbeq	r9, {r2, sl, fp}
     94c:	30050000 	andcc	r0, r5, r0
     950:	00000028 	andeq	r0, r0, r8, lsr #32
     954:	07240c08 	streq	r0, [r4, -r8, lsl #24]!
     958:	30050000 	andcc	r0, r5, r0
     95c:	00000028 	andeq	r0, r0, r8, lsr #32
     960:	09db0c0c 	ldmibeq	fp, {r2, r3, sl, fp}^
     964:	30050000 	andcc	r0, r5, r0
     968:	00000028 	andeq	r0, r0, r8, lsr #32
     96c:	785f1110 	ldmdavc	pc, {r4, r8, ip}^	; <UNPREDICTABLE>
     970:	85310500 	ldrhi	r0, [r1, #-1280]!	; 0xfffffb00
     974:	14000001 	strne	r0, [r0], #-1
     978:	2c040e00 	stccs	14, cr0, [r4], {-0}
     97c:	09000001 	stmdbeq	r0, {r0}
     980:	00000121 	andeq	r0, r0, r1, lsr #2
     984:	00000195 	muleq	r0, r5, r1
     988:	0000cf0a 	andeq	ip, r0, sl, lsl #30
     98c:	10000000 	andne	r0, r0, r0
     990:	0000075c 	andeq	r0, r0, ip, asr r7
     994:	0e350524 	cdpeq	5, 3, cr0, cr5, cr4, {1}
     998:	0c000002 	stceq	0, cr0, [r0], {2}
     99c:	0000065d 	andeq	r0, r0, sp, asr r6
     9a0:	00283705 	eoreq	r3, r8, r5, lsl #14
     9a4:	0c000000 	stceq	0, cr0, [r0], {-0}
     9a8:	0000094f 	andeq	r0, r0, pc, asr #18
     9ac:	00283805 	eoreq	r3, r8, r5, lsl #16
     9b0:	0c040000 	stceq	0, cr0, [r4], {-0}
     9b4:	00000672 	andeq	r0, r0, r2, ror r6
     9b8:	00283905 	eoreq	r3, r8, r5, lsl #18
     9bc:	0c080000 	stceq	0, cr0, [r8], {-0}
     9c0:	00000a66 	andeq	r0, r0, r6, ror #20
     9c4:	00283a05 	eoreq	r3, r8, r5, lsl #20
     9c8:	0c0c0000 	stceq	0, cr0, [ip], {-0}
     9cc:	00000824 	andeq	r0, r0, r4, lsr #16
     9d0:	00283b05 	eoreq	r3, r8, r5, lsl #22
     9d4:	0c100000 	ldceq	0, cr0, [r0], {-0}
     9d8:	000007d6 	ldrdeq	r0, [r0], -r6
     9dc:	00283c05 	eoreq	r3, r8, r5, lsl #24
     9e0:	0c140000 	ldceq	0, cr0, [r4], {-0}
     9e4:	000009e0 	andeq	r0, r0, r0, ror #19
     9e8:	00283d05 	eoreq	r3, r8, r5, lsl #26
     9ec:	0c180000 	ldceq	0, cr0, [r8], {-0}
     9f0:	00000893 	muleq	r0, r3, r8
     9f4:	00283e05 	eoreq	r3, r8, r5, lsl #28
     9f8:	0c1c0000 	ldceq	0, cr0, [ip], {-0}
     9fc:	00000a2d 	andeq	r0, r0, sp, lsr #20
     a00:	00283f05 	eoreq	r3, r8, r5, lsl #30
     a04:	00200000 	eoreq	r0, r0, r0
     a08:	00068112 	andeq	r8, r6, r2, lsl r1
     a0c:	05010800 	streq	r0, [r1, #-2048]	; 0xfffff800
     a10:	00024e48 	andeq	r4, r2, r8, asr #28
     a14:	07030c00 	streq	r0, [r3, -r0, lsl #24]
     a18:	49050000 	stmdbmi	r5, {}	; <UNPREDICTABLE>
     a1c:	0000024e 	andeq	r0, r0, lr, asr #4
     a20:	05c70c00 	strbeq	r0, [r7, #3072]	; 0xc00
     a24:	4a050000 	bmi	140a2c <mailbuffer+0x12996c>
     a28:	0000024e 	andeq	r0, r0, lr, asr #4
     a2c:	096b1380 	stmdbeq	fp!, {r7, r8, r9, ip}^
     a30:	4c050000 	stcmi	0, cr0, [r5], {-0}
     a34:	00000121 	andeq	r0, r0, r1, lsr #2
     a38:	a6130100 	ldrge	r0, [r3], -r0, lsl #2
     a3c:	05000006 	streq	r0, [r0, #-6]
     a40:	0001214f 	andeq	r2, r1, pc, asr #2
     a44:	00010400 	andeq	r0, r1, r0, lsl #8
     a48:	00010d09 	andeq	r0, r1, r9, lsl #26
     a4c:	00025e00 	andeq	r5, r2, r0, lsl #28
     a50:	00cf0a00 	sbceq	r0, pc, r0, lsl #20
     a54:	001f0000 	andseq	r0, pc, r0
     a58:	00082d12 	andeq	r2, r8, r2, lsl sp
     a5c:	05019000 	streq	r9, [r1, #-0]
     a60:	00029c5b 	andeq	r9, r2, fp, asr ip
     a64:	08d20c00 	ldmeq	r2, {sl, fp}^
     a68:	5c050000 	stcpl	0, cr0, [r5], {-0}
     a6c:	0000029c 	muleq	r0, ip, r2
     a70:	08ea0c00 	stmiaeq	sl!, {sl, fp}^
     a74:	5d050000 	stcpl	0, cr0, [r5, #-0]
     a78:	00000028 	andeq	r0, r0, r8, lsr #32
     a7c:	070b0c04 	streq	r0, [fp, -r4, lsl #24]
     a80:	5f050000 	svcpl	0x00050000
     a84:	000002a2 	andeq	r0, r0, r2, lsr #5
     a88:	06810c08 	streq	r0, [r1], r8, lsl #24
     a8c:	60050000 	andvs	r0, r5, r0
     a90:	0000020e 	andeq	r0, r0, lr, lsl #4
     a94:	040e0088 	streq	r0, [lr], #-136	; 0xffffff78
     a98:	0000025e 	andeq	r0, r0, lr, asr r2
     a9c:	0002b209 	andeq	fp, r2, r9, lsl #4
     aa0:	0002b200 	andeq	fp, r2, r0, lsl #4
     aa4:	00cf0a00 	sbceq	r0, pc, r0, lsl #20
     aa8:	001f0000 	andseq	r0, pc, r0
     aac:	02b8040e 	adcseq	r0, r8, #234881024	; 0xe000000
     ab0:	10140000 	andsne	r0, r4, r0
     ab4:	0000089d 	muleq	r0, sp, r8
     ab8:	de730508 	cdple	5, 7, cr0, cr3, cr8, {0}
     abc:	0c000002 	stceq	0, cr0, [r0], {2}
     ac0:	0000066c 	andeq	r0, r0, ip, ror #12
     ac4:	02de7405 	sbcseq	r7, lr, #83886080	; 0x5000000
     ac8:	0c000000 	stceq	0, cr0, [r0], {-0}
     acc:	000005d3 	ldrdeq	r0, [r0], -r3
     ad0:	00287505 	eoreq	r7, r8, r5, lsl #10
     ad4:	00040000 	andeq	r0, r4, r0
     ad8:	0044040e 	subeq	r0, r4, lr, lsl #8
     adc:	bc100000 	ldclt	0, cr0, [r0], {-0}
     ae0:	68000008 	stmdavs	r0, {r3}
     ae4:	040eb305 	streq	fp, [lr], #-773	; 0xfffffcfb
     ae8:	5f110000 	svcpl	0x00110000
     aec:	b4050070 	strlt	r0, [r5], #-112	; 0xffffff90
     af0:	000002de 	ldrdeq	r0, [r0], -lr
     af4:	725f1100 	subsvc	r1, pc, #0, 2
     af8:	28b50500 	ldmcs	r5!, {r8, sl}
     afc:	04000000 	streq	r0, [r0], #-0
     b00:	00775f11 	rsbseq	r5, r7, r1, lsl pc
     b04:	0028b605 	eoreq	fp, r8, r5, lsl #12
     b08:	0c080000 	stceq	0, cr0, [r8], {-0}
     b0c:	0000069f 	muleq	r0, pc, r6	; <UNPREDICTABLE>
     b10:	004bb705 	subeq	fp, fp, r5, lsl #14
     b14:	0c0c0000 	stceq	0, cr0, [ip], {-0}
     b18:	00000778 	andeq	r0, r0, r8, ror r7
     b1c:	004bb805 	subeq	fp, fp, r5, lsl #16
     b20:	110e0000 	mrsne	r0, (UNDEF: 14)
     b24:	0066625f 	rsbeq	r6, r6, pc, asr r2
     b28:	02b9b905 	adcseq	fp, r9, #81920	; 0x14000
     b2c:	0c100000 	ldceq	0, cr0, [r0], {-0}
     b30:	00000629 	andeq	r0, r0, r9, lsr #12
     b34:	0028ba05 	eoreq	fp, r8, r5, lsl #20
     b38:	0c180000 	ldceq	0, cr0, [r8], {-0}
     b3c:	0000068f 	andeq	r0, r0, pc, lsl #13
     b40:	010dc105 	tsteq	sp, r5, lsl #2
     b44:	0c1c0000 	ldceq	0, cr0, [ip], {-0}
     b48:	0000157d 	andeq	r1, r0, sp, ror r5
     b4c:	0569c305 	strbeq	ip, [r9, #-773]!	; 0xfffffcfb
     b50:	0c200000 	stceq	0, cr0, [r0], #-0
     b54:	00001762 	andeq	r1, r0, r2, ror #14
     b58:	0593c505 	ldreq	ip, [r3, #1285]	; 0x505
     b5c:	0c240000 	stceq	0, cr0, [r4], #-0
     b60:	0000092e 	andeq	r0, r0, lr, lsr #18
     b64:	05b7c805 	ldreq	ip, [r7, #2053]!	; 0x805
     b68:	0c280000 	stceq	0, cr0, [r8], #-0
     b6c:	00000a47 	andeq	r0, r0, r7, asr #20
     b70:	05d1c905 	ldrbeq	ip, [r1, #2309]	; 0x905
     b74:	112c0000 			; <UNDEFINED> instruction: 0x112c0000
     b78:	0062755f 	rsbeq	r7, r2, pc, asr r5
     b7c:	02b9cc05 	adcseq	ip, r9, #1280	; 0x500
     b80:	11300000 	teqne	r0, r0
     b84:	0070755f 	rsbseq	r7, r0, pc, asr r5
     b88:	02decd05 	sbcseq	ip, lr, #320	; 0x140
     b8c:	11380000 	teqne	r8, r0
     b90:	0072755f 	rsbseq	r7, r2, pc, asr r5
     b94:	0028ce05 	eoreq	ip, r8, r5, lsl #28
     b98:	0c3c0000 	ldceq	0, cr0, [ip], #-0
     b9c:	00000666 	andeq	r0, r0, r6, ror #12
     ba0:	05d7d105 	ldrbeq	sp, [r7, #261]	; 0x105
     ba4:	0c400000 	mareq	acc0, r0, r0
     ba8:	00000a1f 	andeq	r0, r0, pc, lsl sl
     bac:	05e7d205 	strbeq	sp, [r7, #517]!	; 0x205
     bb0:	11430000 	mrsne	r0, (UNDEF: 67)
     bb4:	00626c5f 	rsbeq	r6, r2, pc, asr ip
     bb8:	02b9d505 	adcseq	sp, r9, #20971520	; 0x1400000
     bbc:	0c440000 	mareq	acc0, r0, r4
     bc0:	000006b5 			; <UNDEFINED> instruction: 0x000006b5
     bc4:	0028d805 	eoreq	sp, r8, r5, lsl #16
     bc8:	0c4c0000 	mareq	acc0, r0, ip
     bcc:	000006c6 	andeq	r0, r0, r6, asr #13
     bd0:	007ed905 	rsbseq	sp, lr, r5, lsl #18
     bd4:	0c500000 	mraeq	r0, r0, acc0
     bd8:	000005ec 	andeq	r0, r0, ip, ror #11
     bdc:	042cdc05 	strteq	sp, [ip], #-3077	; 0xfffff3fb
     be0:	0c540000 	mraeq	r0, r4, acc0
     be4:	000007bc 			; <UNDEFINED> instruction: 0x000007bc
     be8:	0102e005 	tsteq	r2, r5
     bec:	0c580000 	mraeq	r0, r8, acc0
     bf0:	000008c4 	andeq	r0, r0, r4, asr #17
     bf4:	00f7e205 	rscseq	lr, r7, r5, lsl #4
     bf8:	0c5c0000 	mraeq	r0, ip, acc0
     bfc:	000007ce 	andeq	r0, r0, lr, asr #15
     c00:	0028e305 	eoreq	lr, r8, r5, lsl #6
     c04:	00640000 	rsbeq	r0, r4, r0
     c08:	00002815 	andeq	r2, r0, r5, lsl r8
     c0c:	00042c00 	andeq	r2, r4, r0, lsl #24
     c10:	042c1600 	strteq	r1, [ip], #-1536	; 0xfffffa00
     c14:	0d160000 	ldceq	0, cr0, [r6, #-0]
     c18:	16000001 	strne	r0, [r0], -r1
     c1c:	0000010f 	andeq	r0, r0, pc, lsl #2
     c20:	00002816 	andeq	r2, r0, r6, lsl r8
     c24:	040e0000 	streq	r0, [lr], #-0
     c28:	00000437 	andeq	r0, r0, r7, lsr r4
     c2c:	00042c0f 	andeq	r2, r4, pc, lsl #24
     c30:	09111700 	ldmdbeq	r1, {r8, r9, sl, ip}
     c34:	04280000 	strteq	r0, [r8], #-0
     c38:	69023805 	stmdbvs	r2, {r0, r2, fp, ip, sp}
     c3c:	18000005 	stmdane	r0, {r0, r2}
     c40:	00000882 	andeq	r0, r0, r2, lsl #17
     c44:	28023a05 	stmdacs	r2, {r0, r2, r9, fp, ip, sp}
     c48:	00000000 	andeq	r0, r0, r0
     c4c:	0006ae18 	andeq	sl, r6, r8, lsl lr
     c50:	023f0500 	eorseq	r0, pc, #0, 10
     c54:	0000063e 	andeq	r0, r0, lr, lsr r6
     c58:	07681804 	strbeq	r1, [r8, -r4, lsl #16]!
     c5c:	3f050000 	svccc	0x00050000
     c60:	00063e02 	andeq	r3, r6, r2, lsl #28
     c64:	33180800 	tstcc	r8, #0, 16
     c68:	05000007 	streq	r0, [r0, #-7]
     c6c:	063e023f 			; <UNDEFINED> instruction: 0x063e023f
     c70:	180c0000 	stmdane	ip, {}	; <UNPREDICTABLE>
     c74:	000008e5 	andeq	r0, r0, r5, ror #17
     c78:	28024105 	stmdacs	r2, {r0, r2, r8, lr}
     c7c:	10000000 	andne	r0, r0, r0
     c80:	0005e118 	andeq	lr, r5, r8, lsl r1
     c84:	02420500 	subeq	r0, r2, #0, 10
     c88:	00000820 	andeq	r0, r0, r0, lsr #16
     c8c:	09ac1814 	stmibeq	ip!, {r2, r4, fp, ip}
     c90:	44050000 	strmi	r0, [r5], #-0
     c94:	00002802 	andeq	r2, r0, r2, lsl #16
     c98:	ef183000 	svc	0x00183000
     c9c:	05000008 	streq	r0, [r0, #-8]
     ca0:	058d0245 	streq	r0, [sp, #581]	; 0x245
     ca4:	18340000 	ldmdane	r4!, {}	; <UNPREDICTABLE>
     ca8:	0000083f 	andeq	r0, r0, pc, lsr r8
     cac:	28024705 	stmdacs	r2, {r0, r2, r8, r9, sl, lr}
     cb0:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
     cb4:	0008ff18 	andeq	pc, r8, r8, lsl pc	; <UNPREDICTABLE>
     cb8:	02490500 	subeq	r0, r9, #0, 10
     cbc:	0000083b 	andeq	r0, r0, fp, lsr r8
     cc0:	07a7183c 			; <UNDEFINED> instruction: 0x07a7183c
     cc4:	4c050000 	stcmi	0, cr0, [r5], {-0}
     cc8:	00017f02 	andeq	r7, r1, r2, lsl #30
     ccc:	52184000 	andspl	r4, r8, #0
     cd0:	05000007 	streq	r0, [r0, #-7]
     cd4:	0028024d 	eoreq	r0, r8, sp, asr #4
     cd8:	18440000 	stmdane	r4, {}^	; <UNPREDICTABLE>
     cdc:	00000a61 	andeq	r0, r0, r1, ror #20
     ce0:	7f024e05 	svcvc	0x00024e05
     ce4:	48000001 	stmdami	r0, {r0}
     ce8:	00085118 	andeq	r5, r8, r8, lsl r1
     cec:	024f0500 	subeq	r0, pc, #0, 10
     cf0:	00000841 	andeq	r0, r0, r1, asr #16
     cf4:	0770184c 	ldrbeq	r1, [r0, -ip, asr #16]!
     cf8:	52050000 	andpl	r0, r5, #0
     cfc:	00002802 	andeq	r2, r0, r2, lsl #16
     d00:	be185000 	cdplt	0, 1, cr5, cr8, cr0, {0}
     d04:	05000006 	streq	r0, [r0, #-6]
     d08:	010f0253 	tsteq	pc, r3, asr r2	; <UNPREDICTABLE>
     d0c:	18540000 	ldmdane	r4, {}^	; <UNPREDICTABLE>
     d10:	0000087b 	andeq	r0, r0, fp, ror r8
     d14:	fe027605 	cdp2	6, 0, cr7, cr2, cr5, {0}
     d18:	58000007 	stmdapl	r0, {r0, r1, r2}
     d1c:	00082d19 	andeq	r2, r8, r9, lsl sp
     d20:	027a0500 	rsbseq	r0, sl, #0, 10
     d24:	0000029c 	muleq	r0, ip, r2
     d28:	85190148 	ldrhi	r0, [r9, #-328]	; 0xfffffeb8
     d2c:	05000007 	streq	r0, [r0, #-7]
     d30:	025e027b 	subseq	r0, lr, #-1342177273	; 0xb0000007
     d34:	014c0000 	mrseq	r0, (UNDEF: 76)
     d38:	000a0319 	andeq	r0, sl, r9, lsl r3
     d3c:	027f0500 	rsbseq	r0, pc, #0, 10
     d40:	00000852 	andeq	r0, r0, r2, asr r8
     d44:	971902dc 			; <UNDEFINED> instruction: 0x971902dc
     d48:	05000006 	streq	r0, [r0, #-6]
     d4c:	06030284 	streq	r0, [r3], -r4, lsl #5
     d50:	02e00000 	rsceq	r0, r0, #0
     d54:	00067c19 	andeq	r7, r6, r9, lsl ip
     d58:	02850500 	addeq	r0, r5, #0, 10
     d5c:	0000085e 	andeq	r0, r0, lr, asr r8
     d60:	0e0002ec 	cdpeq	2, 0, cr0, cr0, cr12, {7}
     d64:	00040e04 	andeq	r0, r4, r4, lsl #28
     d68:	00281500 	eoreq	r1, r8, r0, lsl #10
     d6c:	058d0000 	streq	r0, [sp]
     d70:	2c160000 	ldccs	0, cr0, [r6], {-0}
     d74:	16000004 	strne	r0, [r0], -r4
     d78:	0000010d 	andeq	r0, r0, sp, lsl #2
     d7c:	00058d16 	andeq	r8, r5, r6, lsl sp
     d80:	00281600 	eoreq	r1, r8, r0, lsl #12
     d84:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
     d88:	00011c04 	andeq	r1, r1, r4, lsl #24
     d8c:	6f040e00 	svcvs	0x00040e00
     d90:	15000005 	strne	r0, [r0, #-5]
     d94:	00000089 	andeq	r0, r0, r9, lsl #1
     d98:	000005b7 			; <UNDEFINED> instruction: 0x000005b7
     d9c:	00042c16 	andeq	r2, r4, r6, lsl ip
     da0:	010d1600 	tsteq	sp, r0, lsl #12
     da4:	89160000 	ldmdbhi	r6, {}	; <UNPREDICTABLE>
     da8:	16000000 	strne	r0, [r0], -r0
     dac:	00000028 	andeq	r0, r0, r8, lsr #32
     db0:	99040e00 	stmdbls	r4, {r9, sl, fp}
     db4:	15000005 	strne	r0, [r0, #-5]
     db8:	00000028 	andeq	r0, r0, r8, lsr #32
     dbc:	000005d1 	ldrdeq	r0, [r0], -r1
     dc0:	00042c16 	andeq	r2, r4, r6, lsl ip
     dc4:	010d1600 	tsteq	sp, r0, lsl #12
     dc8:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
     dcc:	0005bd04 	andeq	fp, r5, r4, lsl #26
     dd0:	00440900 	subeq	r0, r4, r0, lsl #18
     dd4:	05e70000 	strbeq	r0, [r7, #0]!
     dd8:	cf0a0000 	svcgt	0x000a0000
     ddc:	02000000 	andeq	r0, r0, #0
     de0:	00440900 	subeq	r0, r4, r0, lsl #18
     de4:	05f70000 	ldrbeq	r0, [r7, #0]!
     de8:	cf0a0000 	svcgt	0x000a0000
     dec:	00000000 	andeq	r0, r0, r0
     df0:	08aa0600 	stmiaeq	sl!, {r9, sl}
     df4:	1d050000 	stcne	0, cr0, [r5, #-0]
     df8:	0002e401 	andeq	lr, r2, r1, lsl #8
     dfc:	09ea1a00 	stmibeq	sl!, {r9, fp, ip}^
     e00:	050c0000 	streq	r0, [ip, #-0]
     e04:	06380121 	ldrteq	r0, [r8], -r1, lsr #2
     e08:	d2180000 	andsle	r0, r8, #0
     e0c:	05000008 	streq	r0, [r0, #-8]
     e10:	06380123 	ldrteq	r0, [r8], -r3, lsr #2
     e14:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     e18:	0000077e 	andeq	r0, r0, lr, ror r7
     e1c:	28012405 	stmdacs	r1, {r0, r2, sl, sp}
     e20:	04000000 	streq	r0, [r0], #-0
     e24:	0008a418 	andeq	sl, r8, r8, lsl r4
     e28:	01250500 			; <UNDEFINED> instruction: 0x01250500
     e2c:	0000063e 	andeq	r0, r0, lr, lsr r6
     e30:	040e0008 	streq	r0, [lr], #-8
     e34:	00000603 	andeq	r0, r0, r3, lsl #12
     e38:	05f7040e 	ldrbeq	r0, [r7, #1038]!	; 0x40e
     e3c:	d91a0000 	ldmdble	sl, {}	; <UNPREDICTABLE>
     e40:	0e000005 	cdpeq	0, 0, cr0, cr0, cr5, {0}
     e44:	79013d05 	stmdbvc	r1, {r0, r2, r8, sl, fp, ip, sp}
     e48:	18000006 	stmdane	r0, {r1, r2}
     e4c:	00000918 	andeq	r0, r0, r8, lsl r9
     e50:	79013e05 	stmdbvc	r1, {r0, r2, r9, sl, fp, ip, sp}
     e54:	00000006 	andeq	r0, r0, r6
     e58:	00095818 	andeq	r5, r9, r8, lsl r8
     e5c:	013f0500 	teqeq	pc, r0, lsl #10
     e60:	00000679 	andeq	r0, r0, r9, ror r6
     e64:	09741806 	ldmdbeq	r4!, {r1, r2, fp, ip}^
     e68:	40050000 	andmi	r0, r5, r0
     e6c:	00005201 	andeq	r5, r0, r1, lsl #4
     e70:	09000c00 	stmdbeq	r0, {sl, fp}
     e74:	00000052 	andeq	r0, r0, r2, asr r0
     e78:	00000689 	andeq	r0, r0, r9, lsl #13
     e7c:	0000cf0a 	andeq	ip, r0, sl, lsl #30
     e80:	1b000200 	blne	1688 <_start-0x6978>
     e84:	025705d0 	subseq	r0, r7, #208, 10	; 0x34000000
     e88:	0000078a 	andeq	r0, r0, sl, lsl #15
     e8c:	0009be18 	andeq	fp, r9, r8, lsl lr
     e90:	02590500 	subseq	r0, r9, #0, 10
     e94:	00000021 	andeq	r0, r0, r1, lsr #32
     e98:	095e1800 	ldmdbeq	lr, {fp, ip}^
     e9c:	5a050000 	bpl	140ea4 <mailbuffer+0x129de4>
     ea0:	00010f02 	andeq	r0, r1, r2, lsl #30
     ea4:	9a180400 	bls	601eac <mailbuffer+0x5eadec>
     ea8:	05000007 	streq	r0, [r0, #-7]
     eac:	078a025b 			; <UNDEFINED> instruction: 0x078a025b
     eb0:	18080000 	stmdane	r8, {}	; <UNPREDICTABLE>
     eb4:	00000a38 	andeq	r0, r0, r8, lsr sl
     eb8:	95025c05 	strls	r5, [r2, #-3077]	; 0xfffff3fb
     ebc:	24000001 	strcs	r0, [r0], #-1
     ec0:	00074318 	andeq	r4, r7, r8, lsl r3
     ec4:	025d0500 	subseq	r0, sp, #0, 10
     ec8:	00000028 	andeq	r0, r0, r8, lsr #32
     ecc:	08cd1848 	stmiaeq	sp, {r3, r6, fp, ip}^
     ed0:	5e050000 	cdppl	0, 0, cr0, cr5, cr0, {0}
     ed4:	00006c02 	andeq	r6, r0, r2, lsl #24
     ed8:	4e185000 	cdpmi	0, 1, cr5, cr8, cr0, {0}
     edc:	0500000a 	streq	r0, [r0, #-10]
     ee0:	0644025f 			; <UNDEFINED> instruction: 0x0644025f
     ee4:	18580000 	ldmdane	r8, {}^	; <UNPREDICTABLE>
     ee8:	000008d8 	ldrdeq	r0, [r0], -r8
     eec:	f7026005 			; <UNDEFINED> instruction: 0xf7026005
     ef0:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
     ef4:	000a5318 	andeq	r5, sl, r8, lsl r3
     ef8:	02610500 	rsbeq	r0, r1, #0, 10
     efc:	000000f7 	strdeq	r0, [r0], -r7
     f00:	064f1870 			; <UNDEFINED> instruction: 0x064f1870
     f04:	62050000 	andvs	r0, r5, #0
     f08:	0000f702 	andeq	pc, r0, r2, lsl #14
     f0c:	f9187800 			; <UNDEFINED> instruction: 0xf9187800
     f10:	05000009 	streq	r0, [r0, #-9]
     f14:	079a0263 	ldreq	r0, [sl, r3, ror #4]
     f18:	18800000 	stmne	r0, {}	; <UNPREDICTABLE>
     f1c:	0000078e 	andeq	r0, r0, lr, lsl #15
     f20:	aa026405 	bge	99f3c <mailbuffer+0x82e7c>
     f24:	88000007 	stmdahi	r0, {r0, r1, r2}
     f28:	00098c18 	andeq	r8, r9, r8, lsl ip
     f2c:	02650500 	rsbeq	r0, r5, #0, 10
     f30:	00000028 	andeq	r0, r0, r8, lsr #32
     f34:	06f518a0 	ldrbteq	r1, [r5], r0, lsr #17
     f38:	66050000 	strvs	r0, [r5], -r0
     f3c:	0000f702 	andeq	pc, r0, r2, lsl #14
     f40:	4018a400 	andsmi	sl, r8, r0, lsl #8
     f44:	05000006 	streq	r0, [r0, #-6]
     f48:	00f70267 	rscseq	r0, r7, r7, ror #4
     f4c:	18ac0000 	stmiane	ip!, {}	; <UNPREDICTABLE>
     f50:	000006e4 	andeq	r0, r0, r4, ror #13
     f54:	f7026805 			; <UNDEFINED> instruction: 0xf7026805
     f58:	b4000000 	strlt	r0, [r0], #-0
     f5c:	0005f218 	andeq	pc, r5, r8, lsl r2	; <UNPREDICTABLE>
     f60:	02690500 	rsbeq	r0, r9, #0, 10
     f64:	000000f7 	strdeq	r0, [r0], -r7
     f68:	060118bc 			; <UNDEFINED> instruction: 0x060118bc
     f6c:	6a050000 	bvs	140f74 <mailbuffer+0x129eb4>
     f70:	0000f702 	andeq	pc, r0, r2, lsl #14
     f74:	8018c400 	andshi	ip, r8, r0, lsl #8
     f78:	05000008 	streq	r0, [r0, #-8]
     f7c:	0028026b 	eoreq	r0, r8, fp, ror #4
     f80:	00cc0000 	sbceq	r0, ip, r0
     f84:	00011509 	andeq	r1, r1, r9, lsl #10
     f88:	00079a00 	andeq	r9, r7, r0, lsl #20
     f8c:	00cf0a00 	sbceq	r0, pc, r0, lsl #20
     f90:	00190000 	andseq	r0, r9, r0
     f94:	00011509 	andeq	r1, r1, r9, lsl #10
     f98:	0007aa00 	andeq	sl, r7, r0, lsl #20
     f9c:	00cf0a00 	sbceq	r0, pc, r0, lsl #20
     fa0:	00070000 	andeq	r0, r7, r0
     fa4:	00011509 	andeq	r1, r1, r9, lsl #10
     fa8:	0007ba00 	andeq	fp, r7, r0, lsl #20
     fac:	00cf0a00 	sbceq	r0, pc, r0, lsl #20
     fb0:	00170000 	andseq	r0, r7, r0
     fb4:	7005f01b 	andvc	pc, r5, fp, lsl r0	; <UNPREDICTABLE>
     fb8:	0007de02 	andeq	sp, r7, r2, lsl #28
     fbc:	081d1800 	ldmdaeq	sp, {fp, ip}
     fc0:	73050000 	movwvc	r0, #20480	; 0x5000
     fc4:	0007de02 	andeq	sp, r7, r2, lsl #28
     fc8:	f0180000 			; <UNDEFINED> instruction: 0xf0180000
     fcc:	05000009 	streq	r0, [r0, #-9]
     fd0:	07ee0274 			; <UNDEFINED> instruction: 0x07ee0274
     fd4:	00780000 	rsbseq	r0, r8, r0
     fd8:	0002de09 	andeq	sp, r2, r9, lsl #28
     fdc:	0007ee00 	andeq	lr, r7, r0, lsl #28
     fe0:	00cf0a00 	sbceq	r0, pc, r0, lsl #20
     fe4:	001d0000 	andseq	r0, sp, r0
     fe8:	00002109 	andeq	r2, r0, r9, lsl #2
     fec:	0007fe00 	andeq	pc, r7, r0, lsl #28
     ff0:	00cf0a00 	sbceq	r0, pc, r0, lsl #20
     ff4:	001d0000 	andseq	r0, sp, r0
     ff8:	5505f01c 	strpl	pc, [r5, #-28]	; 0xffffffe4
     ffc:	00082002 	andeq	r2, r8, r2
    1000:	09111d00 	ldmdbeq	r1, {r8, sl, fp, ip}
    1004:	6c050000 	stcvs	0, cr0, [r5], {-0}
    1008:	00068902 	andeq	r8, r6, r2, lsl #18
    100c:	0a251d00 	beq	948414 <mailbuffer+0x931354>
    1010:	75050000 	strvc	r0, [r5, #-0]
    1014:	0007ba02 	andeq	fp, r7, r2, lsl #20
    1018:	15090000 	strne	r0, [r9, #-0]
    101c:	30000001 	andcc	r0, r0, r1
    1020:	0a000008 	beq	1048 <_start-0x6fb8>
    1024:	000000cf 	andeq	r0, r0, pc, asr #1
    1028:	3b1e0018 	blcc	781090 <mailbuffer+0x769fd0>
    102c:	16000008 	strne	r0, [r0], -r8
    1030:	0000042c 	andeq	r0, r0, ip, lsr #8
    1034:	30040e00 	andcc	r0, r4, r0, lsl #28
    1038:	0e000008 	cdpeq	0, 0, cr0, cr0, cr8, {0}
    103c:	00017f04 	andeq	r7, r1, r4, lsl #30
    1040:	08521e00 	ldmdaeq	r2, {r9, sl, fp, ip}^
    1044:	28160000 	ldmdacs	r6, {}	; <UNPREDICTABLE>
    1048:	00000000 	andeq	r0, r0, r0
    104c:	0858040e 	ldmdaeq	r8, {r1, r2, r3, sl}^
    1050:	040e0000 	streq	r0, [lr], #-0
    1054:	00000847 	andeq	r0, r0, r7, asr #16
    1058:	0005f709 	andeq	pc, r5, r9, lsl #14
    105c:	00086e00 	andeq	r6, r8, r0, lsl #28
    1060:	00cf0a00 	sbceq	r0, pc, r0, lsl #20
    1064:	00020000 	andeq	r0, r2, r0
    1068:	0009a01f 	andeq	sl, r9, pc, lsl r0
    106c:	02fd0500 	rscseq	r0, sp, #0, 10
    1070:	0000042c 	andeq	r0, r0, ip, lsr #8
    1074:	0009991f 	andeq	r9, r9, pc, lsl r9
    1078:	02fe0500 	rscseq	r0, lr, #0, 10
    107c:	00000432 	andeq	r0, r0, r2, lsr r4
    1080:	00083520 	andeq	r3, r8, r0, lsr #10
    1084:	0f5f0600 	svceq	0x005f0600
    1088:	05000001 	streq	r0, [r0, #-1]
    108c:	0000000c 	andeq	r0, r0, ip
    1090:	00606107 	rsbeq	r6, r0, r7, lsl #2
    1094:	58100000 	ldmdapl	r0, {}	; <UNPREDICTABLE>
    1098:	14000003 	strne	r0, [r0], #-3
    109c:	08e56908 	stmiaeq	r5!, {r3, r8, fp, sp, lr}^
    10a0:	0b0c0000 	bleq	3010a8 <mailbuffer+0x2e9fe8>
    10a4:	08000003 	stmdaeq	r0, {r0, r1}
    10a8:	0008916b 	andeq	r9, r8, fp, ror #2
    10ac:	b10c0000 	mrslt	r0, (UNDEF: 12)
    10b0:	08000004 	stmdaeq	r0, {r2}
    10b4:	0008ea6c 	andeq	lr, r8, ip, ror #20
    10b8:	c80c0400 	stmdagt	ip, {sl}
    10bc:	08000003 	stmdaeq	r0, {r0, r1}
    10c0:	0008ea6d 	andeq	lr, r8, sp, ror #20
    10c4:	2d0c0800 	stccs	8, cr0, [ip, #-0]
    10c8:	08000003 	stmdaeq	r0, {r0, r1}
    10cc:	00010d6e 	andeq	r0, r1, lr, ror #26
    10d0:	d60c0c00 	strle	r0, [ip], -r0, lsl #24
    10d4:	08000002 	stmdaeq	r0, {r1}
    10d8:	00010d6f 	andeq	r0, r1, pc, ror #26
    10dc:	04001000 	streq	r1, [r0], #-0
    10e0:	0000089c 	muleq	r0, ip, r8
    10e4:	08e5040e 	stmiaeq	r5!, {r1, r2, r3, sl}^
    10e8:	c4050000 	strgt	r0, [r5], #-0
    10ec:	08000004 	stmdaeq	r0, {r2}
    10f0:	00089c71 	andeq	r9, r8, r1, ror ip
    10f4:	08f00400 	ldmeq	r0!, {sl}^
    10f8:	20100000 	andscs	r0, r0, r0
    10fc:	0c000005 	stceq	0, cr0, [r0], {5}
    1100:	09317308 	ldmdbeq	r1!, {r3, r8, r9, ip, sp, lr}
    1104:	0b0c0000 	bleq	30110c <mailbuffer+0x2ea04c>
    1108:	08000003 	stmdaeq	r0, {r0, r1}
    110c:	00089175 	andeq	r9, r8, r5, ror r1
    1110:	b10c0000 	mrslt	r0, (UNDEF: 12)
    1114:	08000004 	stmdaeq	r0, {r2}
    1118:	0008ea76 	andeq	lr, r8, r6, ror sl
    111c:	c80c0400 	stmdagt	ip, {sl}
    1120:	08000003 	stmdaeq	r0, {r0, r1}
    1124:	0008ea77 	andeq	lr, r8, r7, ror sl
    1128:	05000800 	streq	r0, [r0, #-2048]	; 0xfffff800
    112c:	00000438 	andeq	r0, r0, r8, lsr r4
    1130:	09007908 	stmdbeq	r0, {r3, r8, fp, ip, sp, lr}
    1134:	31040000 	mrscc	r0, (UNDEF: 4)
    1138:	10000009 	andne	r0, r0, r9
    113c:	00000530 	andeq	r0, r0, r0, lsr r5
    1140:	727e0814 	rsbsvc	r0, lr, #20, 16	; 0x140000
    1144:	0c000009 	stceq	0, cr0, [r0], {9}
    1148:	00000457 	andeq	r0, r0, r7, asr r4
    114c:	00678008 	rsbeq	r8, r7, r8
    1150:	0c000000 	stceq	0, cr0, [r0], {-0}
    1154:	00000303 	andeq	r0, r0, r3, lsl #6
    1158:	09728108 	ldmdbeq	r2!, {r3, r8, pc}^
    115c:	0c040000 	stceq	0, cr0, [r4], {-0}
    1160:	00000324 	andeq	r0, r0, r4, lsr #6
    1164:	093c8208 	ldmdbeq	ip!, {r3, r9, pc}
    1168:	00080000 	andeq	r0, r8, r0
    116c:	08fb040e 	ldmeq	fp!, {r1, r2, r3, sl}^
    1170:	49050000 	stmdbmi	r5, {}	; <UNPREDICTABLE>
    1174:	08000009 	stmdaeq	r0, {r0, r3}
    1178:	00094183 	andeq	r4, r9, r3, lsl #3
    117c:	07c22100 	strbeq	r2, [r2, r0, lsl #2]
    1180:	b7010000 	strlt	r0, [r1, -r0]
    1184:	00010f58 	andeq	r0, r1, r8, asr pc
    1188:	00000098 	muleq	r0, r8, r0
    118c:	09b59c01 	ldmibeq	r5!, {r0, sl, fp, ip, pc}
    1190:	0e220000 	cdpeq	0, 2, cr0, cr2, cr0, {0}
    1194:	01000008 	tsteq	r0, r8
    1198:	0009b5b7 			; <UNDEFINED> instruction: 0x0009b5b7
    119c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    11a0:	00094823 	andeq	r4, r9, r3, lsr #16
    11a4:	bbb90100 	bllt	fee415ac <_estack+0xf6e315ac>
    11a8:	02000009 	andeq	r0, r0, #9
    11ac:	0e007491 	mcreq	4, 0, r7, cr0, cr1, {4}
    11b0:	0008f004 	andeq	pc, r8, r4
    11b4:	78040e00 	stmdavc	r4, {r9, sl, fp}
    11b8:	21000009 	tstcs	r0, r9
    11bc:	00000934 	andeq	r0, r0, r4, lsr r9
    11c0:	0e807e01 	cdpeq	14, 8, cr7, cr0, cr1, {0}
    11c4:	00d80001 	sbcseq	r0, r8, r1
    11c8:	9c010000 	stcls	0, cr0, [r1], {-0}
    11cc:	00000a0f 	andeq	r0, r0, pc, lsl #20
    11d0:	00094822 	andeq	r4, r9, r2, lsr #16
    11d4:	bb7e0100 	bllt	1f815dc <mailbuffer+0x1f6a51c>
    11d8:	02000009 	andeq	r0, r0, #9
    11dc:	32226c91 	eorcc	r6, r2, #37120	; 0x9100
    11e0:	01000006 	tsteq	r0, r6
    11e4:	0009b57e 	andeq	fp, r9, lr, ror r5
    11e8:	68910200 	ldmvs	r1, {r9}
    11ec:	00097923 	andeq	r7, r9, r3, lsr #18
    11f0:	72800100 	addvc	r0, r0, #0, 2
    11f4:	02000009 	andeq	r0, r0, #9
    11f8:	0d237491 	cfstrseq	mvf7, [r3, #-580]!	; 0xfffffdbc
    11fc:	0100000a 	tsteq	r0, sl
    1200:	00089181 	andeq	r9, r8, r1, lsl #3
    1204:	70910200 	addsvc	r0, r1, r0, lsl #4
    1208:	06d52100 	ldrbeq	r2, [r5], r0, lsl #2
    120c:	67010000 	strvs	r0, [r1, -r0]
    1210:	00010de8 	andeq	r0, r1, r8, ror #27
    1214:	00000098 	muleq	r0, r8, r0
    1218:	0a4f9c01 	beq	13e8224 <mailbuffer+0x13d1164>
    121c:	48220000 	stmdami	r2!, {}	; <UNPREDICTABLE>
    1220:	01000009 	tsteq	r0, r9
    1224:	0009bb67 	andeq	fp, r9, r7, ror #22
    1228:	6c910200 	lfmvs	f0, 4, [r1], {0}
    122c:	00063222 	andeq	r3, r6, r2, lsr #4
    1230:	b5670100 	strblt	r0, [r7, #-256]!	; 0xffffff00
    1234:	02000009 	andeq	r0, r0, #9
    1238:	03236891 			; <UNDEFINED> instruction: 0x03236891
    123c:	01000003 	tsteq	r0, r3
    1240:	00097269 	andeq	r7, r9, r9, ror #4
    1244:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1248:	07102100 	ldreq	r2, [r0, -r0, lsl #2]
    124c:	60010000 	andvs	r0, r1, r0
    1250:	00010dbc 			; <UNDEFINED> instruction: 0x00010dbc
    1254:	0000002c 	andeq	r0, r0, ip, lsr #32
    1258:	0a739c01 	beq	1ce8264 <mailbuffer+0x1cd11a4>
    125c:	ce220000 	cdpgt	0, 2, cr0, cr2, cr0, {0}
    1260:	01000006 	tsteq	r0, r6
    1264:	0009b560 	andeq	fp, r9, r0, ror #10
    1268:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    126c:	09cb2400 	stmibeq	fp, {sl, sp}^
    1270:	4c010000 	stcmi	0, cr0, [r1], {-0}
    1274:	00010d54 	andeq	r0, r1, r4, asr sp
    1278:	00000068 	andeq	r0, r0, r8, rrx
    127c:	48229c01 	stmdami	r2!, {r0, sl, fp, ip, pc}
    1280:	01000009 	tsteq	r0, r9
    1284:	0009bb4c 	andeq	fp, r9, ip, asr #22
    1288:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    128c:	0f2d0000 	svceq	0x002d0000
    1290:	00040000 	andeq	r0, r4, r0
    1294:	00000552 	andeq	r0, r0, r2, asr r5
    1298:	00e30104 	rsceq	r0, r3, r4, lsl #2
    129c:	370c0000 	strcc	r0, [ip, -r0]
    12a0:	f000000b 			; <UNDEFINED> instruction: 0xf000000b
    12a4:	b000010f 	andlt	r0, r0, pc, lsl #2
    12a8:	1e00000b 	cdpne	0, 0, cr0, cr0, cr11, {0}
    12ac:	02000005 	andeq	r0, r0, #5
    12b0:	00000acd 	andeq	r0, r0, sp, asr #21
    12b4:	002cd802 	eoreq	sp, ip, r2, lsl #16
    12b8:	04030000 	streq	r0, [r3], #-0
    12bc:	00061c07 	andeq	r1, r6, r7, lsl #24
    12c0:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    12c4:	00746e69 	rsbseq	r6, r4, r9, ror #28
    12c8:	2d050803 	stccs	8, cr0, [r5, #-12]
    12cc:	03000001 	movweq	r0, #1
    12d0:	015b0408 	cmpeq	fp, r8, lsl #8
    12d4:	01030000 	mrseq	r0, (UNDEF: 3)
    12d8:	00086f06 	andeq	r6, r8, r6, lsl #30
    12dc:	08010300 	stmdaeq	r1, {r8, r9}
    12e0:	0000086d 	andeq	r0, r0, sp, ror #16
    12e4:	89050203 	stmdbhi	r5, {r0, r1, r9}
    12e8:	03000008 	movweq	r0, #8
    12ec:	00a00702 	adceq	r0, r0, r2, lsl #14
    12f0:	04030000 	streq	r0, [r3], #-0
    12f4:	00013205 	andeq	r3, r1, r5, lsl #4
    12f8:	00640500 	rsbeq	r0, r4, r0, lsl #10
    12fc:	04030000 	streq	r0, [r3], #-0
    1300:	00061707 	andeq	r1, r6, r7, lsl #14
    1304:	00700500 	rsbseq	r0, r0, r0, lsl #10
    1308:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    130c:	00061207 	andeq	r1, r6, r7, lsl #4
    1310:	085b0200 	ldmdaeq	fp, {r9}^
    1314:	07030000 	streq	r0, [r3, -r0]
    1318:	00000033 	andeq	r0, r0, r3, lsr r0
    131c:	00084a02 	andeq	r4, r8, r2, lsl #20
    1320:	642c0400 	strtvs	r0, [ip], #-1024	; 0xfffffc00
    1324:	02000000 	andeq	r0, r0, #0
    1328:	00000940 	andeq	r0, r0, r0, asr #18
    132c:	00647204 	rsbeq	r7, r4, r4, lsl #4
    1330:	b5060000 	strlt	r0, [r6, #-0]
    1334:	02000007 	andeq	r0, r0, #7
    1338:	002c0165 	eoreq	r0, ip, r5, ror #2
    133c:	04070000 	streq	r0, [r7], #-0
    1340:	00cfa604 	sbceq	sl, pc, r4, lsl #12
    1344:	af080000 	svcge	0x00080000
    1348:	04000007 	streq	r0, [r0], #-7
    134c:	0000a4a8 	andeq	sl, r0, r8, lsr #9
    1350:	07610800 	strbeq	r0, [r1, -r0, lsl #16]!
    1354:	a9040000 	stmdbge	r4, {}	; <UNPREDICTABLE>
    1358:	000000cf 	andeq	r0, r0, pc, asr #1
    135c:	004f0900 	subeq	r0, pc, r0, lsl #18
    1360:	00df0000 	sbcseq	r0, pc, r0
    1364:	df0a0000 	svcle	0x000a0000
    1368:	03000000 	movweq	r0, #0
    136c:	07040300 	streq	r0, [r4, -r0, lsl #6]
    1370:	000000da 	ldrdeq	r0, [r0], -sl
    1374:	a304080b 	movwge	r0, #18443	; 0x480b
    1378:	00000107 	andeq	r0, r0, r7, lsl #2
    137c:	00091e0c 	andeq	r1, r9, ip, lsl #28
    1380:	33a50400 			; <UNDEFINED> instruction: 0x33a50400
    1384:	00000000 	andeq	r0, r0, r0
    1388:	0009260c 	andeq	r2, r9, ip, lsl #12
    138c:	b0aa0400 	adclt	r0, sl, r0, lsl #8
    1390:	04000000 	streq	r0, [r0], #-0
    1394:	08b10200 	ldmeq	r1!, {r9}
    1398:	ab040000 	blge	1013a0 <mailbuffer+0xea2e0>
    139c:	000000e6 	andeq	r0, r0, r6, ror #1
    13a0:	00072a02 	andeq	r2, r7, r2, lsl #20
    13a4:	83af0400 			; <UNDEFINED> instruction: 0x83af0400
    13a8:	0d000000 	stceq	0, cr0, [r0, #-0]
    13ac:	011d0e04 	tsteq	sp, r4, lsl #28
    13b0:	040f0000 	streq	r0, [pc], #-0	; 13b8 <_start-0x6c48>
    13b4:	0000012a 	andeq	r0, r0, sl, lsr #2
    13b8:	76080103 	strvc	r0, [r8], -r3, lsl #2
    13bc:	0e000008 	cdpeq	0, 0, cr0, cr0, cr8, {0}
    13c0:	0000012a 	andeq	r0, r0, sl, lsr #2
    13c4:	00098402 	andeq	r8, r9, r2, lsl #8
    13c8:	70160500 	andsvc	r0, r6, r0, lsl #10
    13cc:	10000000 	andne	r0, r0, r0
    13d0:	0000073b 	andeq	r0, r0, fp, lsr r7
    13d4:	942d0518 	strtls	r0, [sp], #-1304	; 0xfffffae8
    13d8:	0c000001 	stceq	0, cr0, [r0], {1}
    13dc:	000008d2 	ldrdeq	r0, [r0], -r2
    13e0:	01942f05 	orrseq	r2, r4, r5, lsl #30
    13e4:	11000000 	mrsne	r0, (UNDEF: 0)
    13e8:	05006b5f 	streq	r6, [r0, #-2911]	; 0xfffff4a1
    13ec:	00003330 	andeq	r3, r0, r0, lsr r3
    13f0:	090c0400 	stmdbeq	ip, {sl}
    13f4:	05000009 	streq	r0, [r0, #-9]
    13f8:	00003330 	andeq	r3, r0, r0, lsr r3
    13fc:	240c0800 	strcs	r0, [ip], #-2048	; 0xfffff800
    1400:	05000007 	streq	r0, [r0, #-7]
    1404:	00003330 	andeq	r3, r0, r0, lsr r3
    1408:	db0c0c00 	blle	304410 <mailbuffer+0x2ed350>
    140c:	05000009 	streq	r0, [r0, #-9]
    1410:	00003330 	andeq	r3, r0, r0, lsr r3
    1414:	5f111000 	svcpl	0x00111000
    1418:	31050078 	tstcc	r5, r8, ror r0
    141c:	0000019a 	muleq	r0, sl, r1
    1420:	040f0014 	streq	r0, [pc], #-20	; 1428 <_start-0x6bd8>
    1424:	00000141 	andeq	r0, r0, r1, asr #2
    1428:	00013609 	andeq	r3, r1, r9, lsl #12
    142c:	0001aa00 	andeq	sl, r1, r0, lsl #20
    1430:	00df0a00 	sbcseq	r0, pc, r0, lsl #20
    1434:	00000000 	andeq	r0, r0, r0
    1438:	00075c10 	andeq	r5, r7, r0, lsl ip
    143c:	35052400 	strcc	r2, [r5, #-1024]	; 0xfffffc00
    1440:	00000223 	andeq	r0, r0, r3, lsr #4
    1444:	00065d0c 	andeq	r5, r6, ip, lsl #26
    1448:	33370500 	teqcc	r7, #0, 10
    144c:	00000000 	andeq	r0, r0, r0
    1450:	00094f0c 	andeq	r4, r9, ip, lsl #30
    1454:	33380500 	teqcc	r8, #0, 10
    1458:	04000000 	streq	r0, [r0], #-0
    145c:	0006720c 	andeq	r7, r6, ip, lsl #4
    1460:	33390500 	teqcc	r9, #0, 10
    1464:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1468:	000a660c 	andeq	r6, sl, ip, lsl #12
    146c:	333a0500 	teqcc	sl, #0, 10
    1470:	0c000000 	stceq	0, cr0, [r0], {-0}
    1474:	0008240c 	andeq	r2, r8, ip, lsl #8
    1478:	333b0500 	teqcc	fp, #0, 10
    147c:	10000000 	andne	r0, r0, r0
    1480:	0007d60c 	andeq	sp, r7, ip, lsl #12
    1484:	333c0500 	teqcc	ip, #0, 10
    1488:	14000000 	strne	r0, [r0], #-0
    148c:	0009e00c 	andeq	lr, r9, ip
    1490:	333d0500 	teqcc	sp, #0, 10
    1494:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    1498:	0008930c 	andeq	r9, r8, ip, lsl #6
    149c:	333e0500 	teqcc	lr, #0, 10
    14a0:	1c000000 	stcne	0, cr0, [r0], {-0}
    14a4:	000a2d0c 	andeq	r2, sl, ip, lsl #26
    14a8:	333f0500 	teqcc	pc, #0, 10
    14ac:	20000000 	andcs	r0, r0, r0
    14b0:	06811200 	streq	r1, [r1], r0, lsl #4
    14b4:	01080000 	mrseq	r0, (UNDEF: 8)
    14b8:	02634805 	rsbeq	r4, r3, #327680	; 0x50000
    14bc:	030c0000 	movweq	r0, #49152	; 0xc000
    14c0:	05000007 	streq	r0, [r0, #-7]
    14c4:	00026349 	andeq	r6, r2, r9, asr #6
    14c8:	c70c0000 	strgt	r0, [ip, -r0]
    14cc:	05000005 	streq	r0, [r0, #-5]
    14d0:	0002634a 	andeq	r6, r2, sl, asr #6
    14d4:	6b138000 	blvs	4e14dc <mailbuffer+0x4ca41c>
    14d8:	05000009 	streq	r0, [r0, #-9]
    14dc:	0001364c 	andeq	r3, r1, ip, asr #12
    14e0:	13010000 	movwne	r0, #4096	; 0x1000
    14e4:	000006a6 	andeq	r0, r0, r6, lsr #13
    14e8:	01364f05 	teqeq	r6, r5, lsl #30
    14ec:	01040000 	mrseq	r0, (UNDEF: 4)
    14f0:	011d0900 	tsteq	sp, r0, lsl #18
    14f4:	02730000 	rsbseq	r0, r3, #0
    14f8:	df0a0000 	svcle	0x000a0000
    14fc:	1f000000 	svcne	0x00000000
    1500:	082d1200 	stmdaeq	sp!, {r9, ip}
    1504:	01900000 	orrseq	r0, r0, r0
    1508:	02b15b05 	adcseq	r5, r1, #5120	; 0x1400
    150c:	d20c0000 	andle	r0, ip, #0
    1510:	05000008 	streq	r0, [r0, #-8]
    1514:	0002b15c 	andeq	fp, r2, ip, asr r1
    1518:	ea0c0000 	b	301520 <mailbuffer+0x2ea460>
    151c:	05000008 	streq	r0, [r0, #-8]
    1520:	0000335d 	andeq	r3, r0, sp, asr r3
    1524:	0b0c0400 	bleq	30252c <mailbuffer+0x2eb46c>
    1528:	05000007 	streq	r0, [r0, #-7]
    152c:	0002b75f 	andeq	fp, r2, pc, asr r7
    1530:	810c0800 	tsthi	ip, r0, lsl #16
    1534:	05000006 	streq	r0, [r0, #-6]
    1538:	00022360 	andeq	r2, r2, r0, ror #6
    153c:	0f008800 	svceq	0x00008800
    1540:	00027304 	andeq	r7, r2, r4, lsl #6
    1544:	02c70900 	sbceq	r0, r7, #0, 18
    1548:	02c70000 	sbceq	r0, r7, #0
    154c:	df0a0000 	svcle	0x000a0000
    1550:	1f000000 	svcne	0x00000000
    1554:	cd040f00 	stcgt	15, cr0, [r4, #-0]
    1558:	14000002 	strne	r0, [r0], #-2
    155c:	00089d10 	andeq	r9, r8, r0, lsl sp
    1560:	73050800 	movwvc	r0, #22528	; 0x5800
    1564:	000002f3 	strdeq	r0, [r0], -r3
    1568:	00066c0c 	andeq	r6, r6, ip, lsl #24
    156c:	f3740500 	vrshl.u64	d16, d0, d4
    1570:	00000002 	andeq	r0, r0, r2
    1574:	0005d30c 	andeq	sp, r5, ip, lsl #6
    1578:	33750500 	cmncc	r5, #0, 10
    157c:	04000000 	streq	r0, [r0], #-0
    1580:	4f040f00 	svcmi	0x00040f00
    1584:	10000000 	andne	r0, r0, r0
    1588:	000008bc 			; <UNDEFINED> instruction: 0x000008bc
    158c:	23b30568 			; <UNDEFINED> instruction: 0x23b30568
    1590:	11000004 	tstne	r0, r4
    1594:	0500705f 	streq	r7, [r0, #-95]	; 0xffffffa1
    1598:	0002f3b4 			; <UNDEFINED> instruction: 0x0002f3b4
    159c:	5f110000 	svcpl	0x00110000
    15a0:	b5050072 	strlt	r0, [r5, #-114]	; 0xffffff8e
    15a4:	00000033 	andeq	r0, r0, r3, lsr r0
    15a8:	775f1104 	ldrbvc	r1, [pc, -r4, lsl #2]
    15ac:	33b60500 			; <UNDEFINED> instruction: 0x33b60500
    15b0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    15b4:	00069f0c 	andeq	r9, r6, ip, lsl #30
    15b8:	56b70500 	ldrtpl	r0, [r7], r0, lsl #10
    15bc:	0c000000 	stceq	0, cr0, [r0], {-0}
    15c0:	0007780c 	andeq	r7, r7, ip, lsl #16
    15c4:	56b80500 	ldrtpl	r0, [r8], r0, lsl #10
    15c8:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    15cc:	66625f11 	uqadd16vs	r5, r2, r1
    15d0:	ceb90500 	cdpgt	5, 11, cr0, cr9, cr0, {0}
    15d4:	10000002 	andne	r0, r0, r2
    15d8:	0006290c 	andeq	r2, r6, ip, lsl #18
    15dc:	33ba0500 			; <UNDEFINED> instruction: 0x33ba0500
    15e0:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    15e4:	00068f0c 	andeq	r8, r6, ip, lsl #30
    15e8:	1dc10500 	cfstr64ne	mvdx0, [r1]
    15ec:	1c000001 	stcne	0, cr0, [r0], {1}
    15f0:	00157d0c 	andseq	r7, r5, ip, lsl #26
    15f4:	7ec30500 	cdpvc	5, 12, cr0, cr3, cr0, {0}
    15f8:	20000005 	andcs	r0, r0, r5
    15fc:	0017620c 	andseq	r6, r7, ip, lsl #4
    1600:	a8c50500 	stmiage	r5, {r8, sl}^
    1604:	24000005 	strcs	r0, [r0], #-5
    1608:	00092e0c 	andeq	r2, r9, ip, lsl #28
    160c:	ccc80500 	cfstr64gt	mvdx0, [r8], {0}
    1610:	28000005 	stmdacs	r0, {r0, r2}
    1614:	000a470c 	andeq	r4, sl, ip, lsl #14
    1618:	e6c90500 	strb	r0, [r9], r0, lsl #10
    161c:	2c000005 	stccs	0, cr0, [r0], {5}
    1620:	62755f11 	rsbsvs	r5, r5, #17, 30	; 0x44
    1624:	cecc0500 	cdpgt	5, 12, cr0, cr12, cr0, {0}
    1628:	30000002 	andcc	r0, r0, r2
    162c:	70755f11 	rsbsvc	r5, r5, r1, lsl pc
    1630:	f3cd0500 	vabal.u8	q8, d13, d0
    1634:	38000002 	stmdacc	r0, {r1}
    1638:	72755f11 	rsbsvc	r5, r5, #17, 30	; 0x44
    163c:	33ce0500 	biccc	r0, lr, #0, 10
    1640:	3c000000 	stccc	0, cr0, [r0], {-0}
    1644:	0006660c 	andeq	r6, r6, ip, lsl #12
    1648:	ecd10500 	cfldr64	mvdx0, [r1], {0}
    164c:	40000005 	andmi	r0, r0, r5
    1650:	000a1f0c 	andeq	r1, sl, ip, lsl #30
    1654:	fcd20500 	ldc2l	5, cr0, [r2], {0}
    1658:	43000005 	movwmi	r0, #5
    165c:	626c5f11 	rsbvs	r5, ip, #17, 30	; 0x44
    1660:	ced50500 	cdpgt	5, 13, cr0, cr5, cr0, {0}
    1664:	44000002 	strmi	r0, [r0], #-2
    1668:	0006b50c 	andeq	fp, r6, ip, lsl #10
    166c:	33d80500 	bicscc	r0, r8, #0, 10
    1670:	4c000000 	stcmi	0, cr0, [r0], {-0}
    1674:	0006c60c 	andeq	ip, r6, ip, lsl #12
    1678:	8ed90500 	cdphi	5, 13, cr0, cr9, cr0, {0}
    167c:	50000000 	andpl	r0, r0, r0
    1680:	0005ec0c 	andeq	lr, r5, ip, lsl #24
    1684:	41dc0500 	bicsmi	r0, ip, r0, lsl #10
    1688:	54000004 	strpl	r0, [r0], #-4
    168c:	0007bc0c 	andeq	fp, r7, ip, lsl #24
    1690:	12e00500 	rscne	r0, r0, #0, 10
    1694:	58000001 	stmdapl	r0, {r0}
    1698:	0008c40c 	andeq	ip, r8, ip, lsl #8
    169c:	07e20500 	strbeq	r0, [r2, r0, lsl #10]!
    16a0:	5c000001 	stcpl	0, cr0, [r0], {1}
    16a4:	0007ce0c 	andeq	ip, r7, ip, lsl #28
    16a8:	33e30500 	mvncc	r0, #0, 10
    16ac:	64000000 	strvs	r0, [r0], #-0
    16b0:	00331500 	eorseq	r1, r3, r0, lsl #10
    16b4:	04410000 	strbeq	r0, [r1], #-0
    16b8:	41160000 	tstmi	r6, r0
    16bc:	16000004 	strne	r0, [r0], -r4
    16c0:	0000011d 	andeq	r0, r0, sp, lsl r1
    16c4:	00012416 	andeq	r2, r1, r6, lsl r4
    16c8:	00331600 	eorseq	r1, r3, r0, lsl #12
    16cc:	0f000000 	svceq	0x00000000
    16d0:	00044c04 	andeq	r4, r4, r4, lsl #24
    16d4:	04410e00 	strbeq	r0, [r1], #-3584	; 0xfffff200
    16d8:	11170000 	tstne	r7, r0
    16dc:	28000009 	stmdacs	r0, {r0, r3}
    16e0:	02380504 	eorseq	r0, r8, #4, 10	; 0x1000000
    16e4:	0000057e 	andeq	r0, r0, lr, ror r5
    16e8:	00088218 	andeq	r8, r8, r8, lsl r2
    16ec:	023a0500 	eorseq	r0, sl, #0, 10
    16f0:	00000033 	andeq	r0, r0, r3, lsr r0
    16f4:	06ae1800 	strteq	r1, [lr], r0, lsl #16
    16f8:	3f050000 	svccc	0x00050000
    16fc:	00065302 	andeq	r5, r6, r2, lsl #6
    1700:	68180400 	ldmdavs	r8, {sl}
    1704:	05000007 	streq	r0, [r0, #-7]
    1708:	0653023f 			; <UNDEFINED> instruction: 0x0653023f
    170c:	18080000 	stmdane	r8, {}	; <UNPREDICTABLE>
    1710:	00000733 	andeq	r0, r0, r3, lsr r7
    1714:	53023f05 	movwpl	r3, #12037	; 0x2f05
    1718:	0c000006 	stceq	0, cr0, [r0], {6}
    171c:	0008e518 	andeq	lr, r8, r8, lsl r5
    1720:	02410500 	subeq	r0, r1, #0, 10
    1724:	00000033 	andeq	r0, r0, r3, lsr r0
    1728:	05e11810 	strbeq	r1, [r1, #2064]!	; 0x810
    172c:	42050000 	andmi	r0, r5, #0
    1730:	00083502 	andeq	r3, r8, r2, lsl #10
    1734:	ac181400 	cfldrsge	mvf1, [r8], {-0}
    1738:	05000009 	streq	r0, [r0, #-9]
    173c:	00330244 	eorseq	r0, r3, r4, asr #4
    1740:	18300000 	ldmdane	r0!, {}	; <UNPREDICTABLE>
    1744:	000008ef 	andeq	r0, r0, pc, ror #17
    1748:	a2024505 	andge	r4, r2, #20971520	; 0x1400000
    174c:	34000005 	strcc	r0, [r0], #-5
    1750:	00083f18 	andeq	r3, r8, r8, lsl pc
    1754:	02470500 	subeq	r0, r7, #0, 10
    1758:	00000033 	andeq	r0, r0, r3, lsr r0
    175c:	08ff1838 	ldmeq	pc!, {r3, r4, r5, fp, ip}^	; <UNPREDICTABLE>
    1760:	49050000 	stmdbmi	r5, {}	; <UNPREDICTABLE>
    1764:	00085002 	andeq	r5, r8, r2
    1768:	a7183c00 	ldrge	r3, [r8, -r0, lsl #24]
    176c:	05000007 	streq	r0, [r0, #-7]
    1770:	0194024c 	orrseq	r0, r4, ip, asr #4
    1774:	18400000 	stmdane	r0, {}^	; <UNPREDICTABLE>
    1778:	00000752 	andeq	r0, r0, r2, asr r7
    177c:	33024d05 	movwcc	r4, #11525	; 0x2d05
    1780:	44000000 	strmi	r0, [r0], #-0
    1784:	000a6118 	andeq	r6, sl, r8, lsl r1
    1788:	024e0500 	subeq	r0, lr, #0, 10
    178c:	00000194 	muleq	r0, r4, r1
    1790:	08511848 	ldmdaeq	r1, {r3, r6, fp, ip}^
    1794:	4f050000 	svcmi	0x00050000
    1798:	00085602 	andeq	r5, r8, r2, lsl #12
    179c:	70184c00 	andsvc	r4, r8, r0, lsl #24
    17a0:	05000007 	streq	r0, [r0, #-7]
    17a4:	00330252 	eorseq	r0, r3, r2, asr r2
    17a8:	18500000 	ldmdane	r0, {}^	; <UNPREDICTABLE>
    17ac:	000006be 			; <UNDEFINED> instruction: 0x000006be
    17b0:	24025305 	strcs	r5, [r2], #-773	; 0xfffffcfb
    17b4:	54000001 	strpl	r0, [r0], #-1
    17b8:	00087b18 	andeq	r7, r8, r8, lsl fp
    17bc:	02760500 	rsbseq	r0, r6, #0, 10
    17c0:	00000813 	andeq	r0, r0, r3, lsl r8
    17c4:	082d1958 	stmdaeq	sp!, {r3, r4, r6, r8, fp, ip}
    17c8:	7a050000 	bvc	1417d0 <mailbuffer+0x12a710>
    17cc:	0002b102 	andeq	fp, r2, r2, lsl #2
    17d0:	19014800 	stmdbne	r1, {fp, lr}
    17d4:	00000785 	andeq	r0, r0, r5, lsl #15
    17d8:	73027b05 	movwvc	r7, #11013	; 0x2b05
    17dc:	4c000002 	stcmi	0, cr0, [r0], {2}
    17e0:	0a031901 	beq	c7bec <mailbuffer+0xb0b2c>
    17e4:	7f050000 	svcvc	0x00050000
    17e8:	00086702 	andeq	r6, r8, r2, lsl #14
    17ec:	1902dc00 	stmdbne	r2, {sl, fp, ip, lr, pc}
    17f0:	00000697 	muleq	r0, r7, r6
    17f4:	18028405 	stmdane	r2, {r0, r2, sl, pc}
    17f8:	e0000006 	and	r0, r0, r6
    17fc:	067c1902 	ldrbteq	r1, [ip], -r2, lsl #18
    1800:	85050000 	strhi	r0, [r5, #-0]
    1804:	00087302 	andeq	r7, r8, r2, lsl #6
    1808:	0002ec00 	andeq	lr, r2, r0, lsl #24
    180c:	0423040f 	strteq	r0, [r3], #-1039	; 0xfffffbf1
    1810:	33150000 	tstcc	r5, #0
    1814:	a2000000 	andge	r0, r0, #0
    1818:	16000005 	strne	r0, [r0], -r5
    181c:	00000441 	andeq	r0, r0, r1, asr #8
    1820:	00011d16 	andeq	r1, r1, r6, lsl sp
    1824:	05a21600 	streq	r1, [r2, #1536]!	; 0x600
    1828:	33160000 	tstcc	r6, #0
    182c:	00000000 	andeq	r0, r0, r0
    1830:	0131040f 	teqeq	r1, pc, lsl #8
    1834:	040f0000 	streq	r0, [pc], #-0	; 183c <_start-0x67c4>
    1838:	00000584 	andeq	r0, r0, r4, lsl #11
    183c:	00009915 	andeq	r9, r0, r5, lsl r9
    1840:	0005cc00 	andeq	ip, r5, r0, lsl #24
    1844:	04411600 	strbeq	r1, [r1], #-1536	; 0xfffffa00
    1848:	1d160000 	ldcne	0, cr0, [r6, #-0]
    184c:	16000001 	strne	r0, [r0], -r1
    1850:	00000099 	muleq	r0, r9, r0
    1854:	00003316 	andeq	r3, r0, r6, lsl r3
    1858:	040f0000 	streq	r0, [pc], #-0	; 1860 <_start-0x67a0>
    185c:	000005ae 	andeq	r0, r0, lr, lsr #11
    1860:	00003315 	andeq	r3, r0, r5, lsl r3
    1864:	0005e600 	andeq	lr, r5, r0, lsl #12
    1868:	04411600 	strbeq	r1, [r1], #-1536	; 0xfffffa00
    186c:	1d160000 	ldcne	0, cr0, [r6, #-0]
    1870:	00000001 	andeq	r0, r0, r1
    1874:	05d2040f 	ldrbeq	r0, [r2, #1039]	; 0x40f
    1878:	4f090000 	svcmi	0x00090000
    187c:	fc000000 	stc2	0, cr0, [r0], {-0}
    1880:	0a000005 	beq	189c <_start-0x6764>
    1884:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    1888:	4f090002 	svcmi	0x00090002
    188c:	0c000000 	stceq	0, cr0, [r0], {-0}
    1890:	0a000006 	beq	18b0 <_start-0x6750>
    1894:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    1898:	aa060000 	bge	1818a0 <mailbuffer+0x16a7e0>
    189c:	05000008 	streq	r0, [r0, #-8]
    18a0:	02f9011d 	rscseq	r0, r9, #1073741831	; 0x40000007
    18a4:	ea1a0000 	b	6818ac <mailbuffer+0x66a7ec>
    18a8:	0c000009 	stceq	0, cr0, [r0], {9}
    18ac:	4d012105 	stfmis	f2, [r1, #-20]	; 0xffffffec
    18b0:	18000006 	stmdane	r0, {r1, r2}
    18b4:	000008d2 	ldrdeq	r0, [r0], -r2
    18b8:	4d012305 	stcmi	3, cr2, [r1, #-20]	; 0xffffffec
    18bc:	00000006 	andeq	r0, r0, r6
    18c0:	00077e18 	andeq	r7, r7, r8, lsl lr
    18c4:	01240500 			; <UNDEFINED> instruction: 0x01240500
    18c8:	00000033 	andeq	r0, r0, r3, lsr r0
    18cc:	08a41804 	stmiaeq	r4!, {r2, fp, ip}
    18d0:	25050000 	strcs	r0, [r5, #-0]
    18d4:	00065301 	andeq	r5, r6, r1, lsl #6
    18d8:	0f000800 	svceq	0x00000800
    18dc:	00061804 	andeq	r1, r6, r4, lsl #16
    18e0:	0c040f00 	stceq	15, cr0, [r4], {-0}
    18e4:	1a000006 	bne	1904 <_start-0x66fc>
    18e8:	000005d9 	ldrdeq	r0, [r0], -r9
    18ec:	013d050e 	teqeq	sp, lr, lsl #10
    18f0:	0000068e 	andeq	r0, r0, lr, lsl #13
    18f4:	00091818 	andeq	r1, r9, r8, lsl r8
    18f8:	013e0500 	teqeq	lr, r0, lsl #10
    18fc:	0000068e 	andeq	r0, r0, lr, lsl #13
    1900:	09581800 	ldmdbeq	r8, {fp, ip}^
    1904:	3f050000 	svccc	0x00050000
    1908:	00068e01 	andeq	r8, r6, r1, lsl #28
    190c:	74180600 	ldrvc	r0, [r8], #-1536	; 0xfffffa00
    1910:	05000009 	streq	r0, [r0, #-9]
    1914:	005d0140 	subseq	r0, sp, r0, asr #2
    1918:	000c0000 	andeq	r0, ip, r0
    191c:	00005d09 	andeq	r5, r0, r9, lsl #26
    1920:	00069e00 	andeq	r9, r6, r0, lsl #28
    1924:	00df0a00 	sbcseq	r0, pc, r0, lsl #20
    1928:	00020000 	andeq	r0, r2, r0
    192c:	5705d01b 	smladpl	r5, fp, r0, sp
    1930:	00079f02 	andeq	r9, r7, r2, lsl #30
    1934:	09be1800 	ldmibeq	lr!, {fp, ip}
    1938:	59050000 	stmdbpl	r5, {}	; <UNPREDICTABLE>
    193c:	00002c02 	andeq	r2, r0, r2, lsl #24
    1940:	5e180000 	cdppl	0, 1, cr0, cr8, cr0, {0}
    1944:	05000009 	streq	r0, [r0, #-9]
    1948:	0124025a 			; <UNDEFINED> instruction: 0x0124025a
    194c:	18040000 	stmdane	r4, {}	; <UNPREDICTABLE>
    1950:	0000079a 	muleq	r0, sl, r7
    1954:	9f025b05 	svcls	0x00025b05
    1958:	08000007 	stmdaeq	r0, {r0, r1, r2}
    195c:	000a3818 	andeq	r3, sl, r8, lsl r8
    1960:	025c0500 	subseq	r0, ip, #0, 10
    1964:	000001aa 	andeq	r0, r0, sl, lsr #3
    1968:	07431824 	strbeq	r1, [r3, -r4, lsr #16]
    196c:	5d050000 	stcpl	0, cr0, [r5, #-0]
    1970:	00003302 	andeq	r3, r0, r2, lsl #6
    1974:	cd184800 	ldcgt	8, cr4, [r8, #-0]
    1978:	05000008 	streq	r0, [r0, #-8]
    197c:	007c025e 	rsbseq	r0, ip, lr, asr r2
    1980:	18500000 	ldmdane	r0, {}^	; <UNPREDICTABLE>
    1984:	00000a4e 	andeq	r0, r0, lr, asr #20
    1988:	59025f05 	stmdbpl	r2, {r0, r2, r8, r9, sl, fp, ip, lr}
    198c:	58000006 	stmdapl	r0, {r1, r2}
    1990:	0008d818 	andeq	sp, r8, r8, lsl r8
    1994:	02600500 	rsbeq	r0, r0, #0, 10
    1998:	00000107 	andeq	r0, r0, r7, lsl #2
    199c:	0a531868 	beq	14c7b44 <mailbuffer+0x14b0a84>
    19a0:	61050000 	mrsvs	r0, (UNDEF: 5)
    19a4:	00010702 	andeq	r0, r1, r2, lsl #14
    19a8:	4f187000 	svcmi	0x00187000
    19ac:	05000006 	streq	r0, [r0, #-6]
    19b0:	01070262 	tsteq	r7, r2, ror #4
    19b4:	18780000 	ldmdane	r8!, {}^	; <UNPREDICTABLE>
    19b8:	000009f9 	strdeq	r0, [r0], -r9
    19bc:	af026305 	svcge	0x00026305
    19c0:	80000007 	andhi	r0, r0, r7
    19c4:	00078e18 	andeq	r8, r7, r8, lsl lr
    19c8:	02640500 	rsbeq	r0, r4, #0, 10
    19cc:	000007bf 			; <UNDEFINED> instruction: 0x000007bf
    19d0:	098c1888 	stmibeq	ip, {r3, r7, fp, ip}
    19d4:	65050000 	strvs	r0, [r5, #-0]
    19d8:	00003302 	andeq	r3, r0, r2, lsl #6
    19dc:	f518a000 			; <UNDEFINED> instruction: 0xf518a000
    19e0:	05000006 	streq	r0, [r0, #-6]
    19e4:	01070266 	tsteq	r7, r6, ror #4
    19e8:	18a40000 	stmiane	r4!, {}	; <UNPREDICTABLE>
    19ec:	00000640 	andeq	r0, r0, r0, asr #12
    19f0:	07026705 	streq	r6, [r2, -r5, lsl #14]
    19f4:	ac000001 	stcge	0, cr0, [r0], {1}
    19f8:	0006e418 	andeq	lr, r6, r8, lsl r4
    19fc:	02680500 	rsbeq	r0, r8, #0, 10
    1a00:	00000107 	andeq	r0, r0, r7, lsl #2
    1a04:	05f218b4 	ldrbeq	r1, [r2, #2228]!	; 0x8b4
    1a08:	69050000 	stmdbvs	r5, {}	; <UNPREDICTABLE>
    1a0c:	00010702 	andeq	r0, r1, r2, lsl #14
    1a10:	0118bc00 	tsteq	r8, r0, lsl #24
    1a14:	05000006 	streq	r0, [r0, #-6]
    1a18:	0107026a 	tsteq	r7, sl, ror #4
    1a1c:	18c40000 	stmiane	r4, {}^	; <UNPREDICTABLE>
    1a20:	00000880 	andeq	r0, r0, r0, lsl #17
    1a24:	33026b05 	movwcc	r6, #11013	; 0x2b05
    1a28:	cc000000 	stcgt	0, cr0, [r0], {-0}
    1a2c:	012a0900 			; <UNDEFINED> instruction: 0x012a0900
    1a30:	07af0000 	streq	r0, [pc, r0]!
    1a34:	df0a0000 	svcle	0x000a0000
    1a38:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    1a3c:	012a0900 			; <UNDEFINED> instruction: 0x012a0900
    1a40:	07bf0000 	ldreq	r0, [pc, r0]!
    1a44:	df0a0000 	svcle	0x000a0000
    1a48:	07000000 	streq	r0, [r0, -r0]
    1a4c:	012a0900 			; <UNDEFINED> instruction: 0x012a0900
    1a50:	07cf0000 	strbeq	r0, [pc, r0]
    1a54:	df0a0000 	svcle	0x000a0000
    1a58:	17000000 	strne	r0, [r0, -r0]
    1a5c:	05f01b00 	ldrbeq	r1, [r0, #2816]!	; 0xb00
    1a60:	07f30270 			; <UNDEFINED> instruction: 0x07f30270
    1a64:	1d180000 	ldcne	0, cr0, [r8, #-0]
    1a68:	05000008 	streq	r0, [r0, #-8]
    1a6c:	07f30273 			; <UNDEFINED> instruction: 0x07f30273
    1a70:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    1a74:	000009f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1a78:	03027405 	movweq	r7, #9221	; 0x2405
    1a7c:	78000008 	stmdavc	r0, {r3}
    1a80:	02f30900 	rscseq	r0, r3, #0, 18
    1a84:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    1a88:	df0a0000 	svcle	0x000a0000
    1a8c:	1d000000 	stcne	0, cr0, [r0, #-0]
    1a90:	002c0900 	eoreq	r0, ip, r0, lsl #18
    1a94:	08130000 	ldmdaeq	r3, {}	; <UNPREDICTABLE>
    1a98:	df0a0000 	svcle	0x000a0000
    1a9c:	1d000000 	stcne	0, cr0, [r0, #-0]
    1aa0:	05f01c00 	ldrbeq	r1, [r0, #3072]!	; 0xc00
    1aa4:	08350255 	ldmdaeq	r5!, {r0, r2, r4, r6, r9}
    1aa8:	111d0000 	tstne	sp, r0
    1aac:	05000009 	streq	r0, [r0, #-9]
    1ab0:	069e026c 	ldreq	r0, [lr], ip, ror #4
    1ab4:	251d0000 	ldrcs	r0, [sp, #-0]
    1ab8:	0500000a 	streq	r0, [r0, #-10]
    1abc:	07cf0275 			; <UNDEFINED> instruction: 0x07cf0275
    1ac0:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    1ac4:	0000012a 	andeq	r0, r0, sl, lsr #2
    1ac8:	00000845 	andeq	r0, r0, r5, asr #16
    1acc:	0000df0a 	andeq	sp, r0, sl, lsl #30
    1ad0:	1e001800 	cdpne	8, 0, cr1, cr0, cr0, {0}
    1ad4:	00000850 	andeq	r0, r0, r0, asr r8
    1ad8:	00044116 	andeq	r4, r4, r6, lsl r1
    1adc:	040f0000 	streq	r0, [pc], #-0	; 1ae4 <_start-0x651c>
    1ae0:	00000845 	andeq	r0, r0, r5, asr #16
    1ae4:	0194040f 	orrseq	r0, r4, pc, lsl #8
    1ae8:	671e0000 	ldrvs	r0, [lr, -r0]
    1aec:	16000008 	strne	r0, [r0], -r8
    1af0:	00000033 	andeq	r0, r0, r3, lsr r0
    1af4:	6d040f00 	stcvs	15, cr0, [r4, #-0]
    1af8:	0f000008 	svceq	0x00000008
    1afc:	00085c04 	andeq	r5, r8, r4, lsl #24
    1b00:	060c0900 	streq	r0, [ip], -r0, lsl #18
    1b04:	08830000 	stmeq	r3, {}	; <UNPREDICTABLE>
    1b08:	df0a0000 	svcle	0x000a0000
    1b0c:	02000000 	andeq	r0, r0, #0
    1b10:	09a01f00 	stmibeq	r0!, {r8, r9, sl, fp, ip}
    1b14:	fd050000 	stc2	0, cr0, [r5, #-0]
    1b18:	00044102 	andeq	r4, r4, r2, lsl #2
    1b1c:	09991f00 	ldmibeq	r9, {r8, r9, sl, fp, ip}
    1b20:	fe050000 	cdp2	0, 0, cr0, cr5, cr0, {0}
    1b24:	00044702 	andeq	r4, r4, r2, lsl #14
    1b28:	a6040f00 	strge	r0, [r4], -r0, lsl #30
    1b2c:	0e000008 	cdpeq	0, 0, cr0, cr0, cr8, {0}
    1b30:	0000089b 	muleq	r0, fp, r8
    1b34:	08352120 	ldmdaeq	r5!, {r5, r8, sp}
    1b38:	5f060000 	svcpl	0x00060000
    1b3c:	00000124 	andeq	r0, r0, r4, lsr #2
    1b40:	00000c02 	andeq	r0, r0, r2, lsl #24
    1b44:	70610700 	rsbvc	r0, r1, r0, lsl #14
    1b48:	10000000 	andne	r0, r0, r0
    1b4c:	00000358 	andeq	r0, r0, r8, asr r3
    1b50:	06690814 			; <UNDEFINED> instruction: 0x06690814
    1b54:	0c000009 	stceq	0, cr0, [r0], {9}
    1b58:	0000030b 	andeq	r0, r0, fp, lsl #6
    1b5c:	08b26b08 	ldmeq	r2!, {r3, r8, r9, fp, sp, lr}
    1b60:	0c000000 	stceq	0, cr0, [r0], {-0}
    1b64:	000004b1 			; <UNDEFINED> instruction: 0x000004b1
    1b68:	090b6c08 	stmdbeq	fp, {r3, sl, fp, sp, lr}
    1b6c:	0c040000 	stceq	0, cr0, [r4], {-0}
    1b70:	000003c8 	andeq	r0, r0, r8, asr #7
    1b74:	090b6d08 	stmdbeq	fp, {r3, r8, sl, fp, sp, lr}
    1b78:	0c080000 	stceq	0, cr0, [r8], {-0}
    1b7c:	0000032d 	andeq	r0, r0, sp, lsr #6
    1b80:	011d6e08 	tsteq	sp, r8, lsl #28
    1b84:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    1b88:	000002d6 	ldrdeq	r0, [r0], -r6
    1b8c:	011d6f08 	tsteq	sp, r8, lsl #30
    1b90:	00100000 	andseq	r0, r0, r0
    1b94:	0008bd05 	andeq	fp, r8, r5, lsl #26
    1b98:	06040f00 	streq	r0, [r4], -r0, lsl #30
    1b9c:	02000009 	andeq	r0, r0, #9
    1ba0:	000004c4 	andeq	r0, r0, r4, asr #9
    1ba4:	08bd7108 	popeq	{r3, r8, ip, sp, lr}
    1ba8:	11050000 	mrsne	r0, (UNDEF: 5)
    1bac:	10000009 	andne	r0, r0, r9
    1bb0:	00000520 	andeq	r0, r0, r0, lsr #10
    1bb4:	5273080c 	rsbspl	r0, r3, #12, 16	; 0xc0000
    1bb8:	0c000009 	stceq	0, cr0, [r0], {9}
    1bbc:	0000030b 	andeq	r0, r0, fp, lsl #6
    1bc0:	08b27508 	ldmeq	r2!, {r3, r8, sl, ip, sp, lr}
    1bc4:	0c000000 	stceq	0, cr0, [r0], {-0}
    1bc8:	000004b1 			; <UNDEFINED> instruction: 0x000004b1
    1bcc:	090b7608 	stmdbeq	fp, {r3, r9, sl, ip, sp, lr}
    1bd0:	0c040000 	stceq	0, cr0, [r4], {-0}
    1bd4:	000003c8 	andeq	r0, r0, r8, asr #7
    1bd8:	090b7708 	stmdbeq	fp, {r3, r8, r9, sl, ip, sp, lr}
    1bdc:	00080000 	andeq	r0, r8, r0
    1be0:	00043802 	andeq	r3, r4, r2, lsl #16
    1be4:	21790800 	cmncs	r9, r0, lsl #16
    1be8:	05000009 	streq	r0, [r0, #-9]
    1bec:	00000952 	andeq	r0, r0, r2, asr r9
    1bf0:	00053010 	andeq	r3, r5, r0, lsl r0
    1bf4:	7e081400 	cfcpysvc	mvf1, mvf8
    1bf8:	00000993 	muleq	r0, r3, r9
    1bfc:	0004570c 	andeq	r5, r4, ip, lsl #14
    1c00:	77800800 	strvc	r0, [r0, r0, lsl #16]
    1c04:	00000000 	andeq	r0, r0, r0
    1c08:	0003030c 	andeq	r0, r3, ip, lsl #6
    1c0c:	93810800 	orrls	r0, r1, #0, 16
    1c10:	04000009 	streq	r0, [r0], #-9
    1c14:	0003240c 	andeq	r2, r3, ip, lsl #8
    1c18:	5d820800 	stcpl	8, cr0, [r2]
    1c1c:	08000009 	stmdaeq	r0, {r0, r3}
    1c20:	1c040f00 	stcne	15, cr0, [r4], {-0}
    1c24:	02000009 	andeq	r0, r0, #9
    1c28:	00000949 	andeq	r0, r0, r9, asr #18
    1c2c:	09628308 	stmdbeq	r2!, {r3, r8, r9, pc}^
    1c30:	2d100000 	ldccs	0, cr0, [r0, #-0]
    1c34:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    1c38:	09c96809 	stmibeq	r9, {r0, r3, fp, sp, lr}^
    1c3c:	800c0000 	andhi	r0, ip, r0
    1c40:	0900000b 	stmdbeq	r0, {r0, r1, r3}
    1c44:	0000646a 	andeq	r6, r0, sl, ror #8
    1c48:	8c0c0000 	stchi	0, cr0, [ip], {-0}
    1c4c:	0900000d 	stmdbeq	r0, {r0, r2, r3}
    1c50:	0008b26b 	andeq	fp, r8, fp, ror #4
    1c54:	02000400 	andeq	r0, r0, #0, 8
    1c58:	00000bf1 	strdeq	r0, [r0], -r1
    1c5c:	09a46c09 	stmibeq	r4!, {r0, r3, sl, fp, sp, lr}
    1c60:	b2100000 	andslt	r0, r0, #0
    1c64:	4c00000c 	stcmi	0, cr0, [r0], {12}
    1c68:	0a657901 	beq	1960074 <mailbuffer+0x1948fb4>
    1c6c:	bb0c0000 	bllt	301c74 <mailbuffer+0x2eabb4>
    1c70:	0100000b 	tsteq	r0, fp
    1c74:	000a657b 	andeq	r6, sl, fp, ror r5
    1c78:	400c0000 	andmi	r0, ip, r0
    1c7c:	0100000d 	tsteq	r0, sp
    1c80:	000a657c 	andeq	r6, sl, ip, ror r5
    1c84:	770c0400 	strvc	r0, [ip, -r0, lsl #8]
    1c88:	0100000d 	tsteq	r0, sp
    1c8c:	000a657e 	andeq	r6, sl, lr, ror r5
    1c90:	660c0800 	strvs	r0, [ip], -r0, lsl #16
    1c94:	0100000b 	tsteq	r0, fp
    1c98:	000a657f 	andeq	r6, sl, pc, ror r5
    1c9c:	510c0c00 	tstpl	ip, r0, lsl #24
    1ca0:	0100000d 	tsteq	r0, sp
    1ca4:	00099981 	andeq	r9, r9, r1, lsl #19
    1ca8:	030c1000 	movweq	r1, #49152	; 0xc000
    1cac:	0100000b 	tsteq	r0, fp
    1cb0:	00099982 	andeq	r9, r9, r2, lsl #19
    1cb4:	f60c2400 			; <UNDEFINED> instruction: 0xf60c2400
    1cb8:	0100000c 	tsteq	r0, ip
    1cbc:	00007784 	andeq	r7, r0, r4, lsl #15
    1cc0:	290c3800 	stmdbcs	ip, {fp, ip, sp}
    1cc4:	0100000c 	tsteq	r0, ip
    1cc8:	00007085 	andeq	r7, r0, r5, lsl #1
    1ccc:	810c3c00 	tsthi	ip, r0, lsl #24
    1cd0:	0100000d 	tsteq	r0, sp
    1cd4:	00007086 	andeq	r7, r0, r6, lsl #1
    1cd8:	380c4000 	stmdacc	ip, {lr}
    1cdc:	0100000d 	tsteq	r0, sp
    1ce0:	00006b88 	andeq	r6, r0, r8, lsl #23
    1ce4:	ee0c4400 	cfcpys	mvf4, mvf12
    1ce8:	0100000a 	tsteq	r0, sl
    1cec:	00006b89 	andeq	r6, r0, r9, lsl #23
    1cf0:	0f004800 	svceq	0x00004800
    1cf4:	00004804 	andeq	r4, r0, r4, lsl #16
    1cf8:	0c9d0200 	lfmeq	f0, 4, [sp], {0}
    1cfc:	90010000 	andls	r0, r1, r0
    1d00:	000009d4 	ldrdeq	r0, [r0], -r4
    1d04:	000c0702 	andeq	r0, ip, r2, lsl #14
    1d08:	86980100 	ldrhi	r0, [r8], r0, lsl #2
    1d0c:	0e00000a 	cdpeq	0, 0, cr0, cr0, cr10, {0}
    1d10:	00000a76 	andeq	r0, r0, r6, ror sl
    1d14:	0a6b040f 	beq	1ac2d58 <mailbuffer+0x1aabc98>
    1d18:	860e0000 	strhi	r0, [lr], -r0
    1d1c:	2200000a 	andcs	r0, r0, #10
    1d20:	00000a95 	muleq	r0, r5, sl
    1d24:	64056901 	strvs	r6, [r5], #-2305	; 0xfffff6ff
    1d28:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
    1d2c:	4800011b 	stmdami	r0, {r0, r1, r3, r4, r8}
    1d30:	01000000 	mrseq	r0, (UNDEF: 0)
    1d34:	000aca9c 	muleq	sl, ip, sl
    1d38:	0ac52300 	beq	ff14a940 <_estack+0xf713a940>
    1d3c:	69010000 	stmdbvs	r1, {}	; <UNPREDICTABLE>
    1d40:	000a8105 	andeq	r8, sl, r5, lsl #2
    1d44:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1d48:	000bff24 	andeq	pc, fp, r4, lsr #30
    1d4c:	056b0100 	strbeq	r0, [fp, #-256]!	; 0xffffff00
    1d50:	00000064 	andeq	r0, r0, r4, rrx
    1d54:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1d58:	000b7125 	andeq	r7, fp, r5, lsr #2
    1d5c:	055d0100 	ldrbeq	r0, [sp, #-256]	; 0xffffff00
    1d60:	00000064 	andeq	r0, r0, r4, rrx
    1d64:	00011b0c 	andeq	r1, r1, ip, lsl #22
    1d68:	0000004c 	andeq	r0, r0, ip, asr #32
    1d6c:	0b039c01 	bleq	e8d78 <mailbuffer+0xd1cb8>
    1d70:	c5230000 	strgt	r0, [r3, #-0]!
    1d74:	0100000a 	tsteq	r0, sl
    1d78:	0a81055d 	beq	fe0432f4 <_estack+0xf60332f4>
    1d7c:	91020000 	mrsls	r0, (UNDEF: 2)
    1d80:	0bff246c 	bleq	fffcaf38 <_estack+0xf7fbaf38>
    1d84:	5f010000 	svcpl	0x00010000
    1d88:	00006405 	andeq	r6, r0, r5, lsl #8
    1d8c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1d90:	0ad42200 	beq	ff50a598 <_estack+0xf74fa598>
    1d94:	52010000 	andpl	r0, r1, #0
    1d98:	00006405 	andeq	r6, r0, r5, lsl #8
    1d9c:	011acc00 	tsteq	sl, r0, lsl #24
    1da0:	00004000 	andeq	r4, r0, r0
    1da4:	3c9c0100 	ldfccs	f0, [ip], {0}
    1da8:	2300000b 	movwcs	r0, #11
    1dac:	00000ac5 	andeq	r0, r0, r5, asr #21
    1db0:	81055201 	tsthi	r5, r1, lsl #4
    1db4:	0200000a 	andeq	r0, r0, #10
    1db8:	ff246c91 			; <UNDEFINED> instruction: 0xff246c91
    1dbc:	0100000b 	tsteq	r0, fp
    1dc0:	00640554 	rsbeq	r0, r4, r4, asr r5
    1dc4:	91020000 	mrsls	r0, (UNDEF: 2)
    1dc8:	cf250074 	svcgt	0x00250074
    1dcc:	0100000b 	tsteq	r0, fp
    1dd0:	00640546 	rsbeq	r0, r4, r6, asr #10
    1dd4:	1a880000 	bne	fe201ddc <_estack+0xf61f1ddc>
    1dd8:	00440001 	subeq	r0, r4, r1
    1ddc:	9c010000 	stcls	0, cr0, [r1], {-0}
    1de0:	00000b75 	andeq	r0, r0, r5, ror fp
    1de4:	000ac523 	andeq	ip, sl, r3, lsr #10
    1de8:	05460100 	strbeq	r0, [r6, #-256]	; 0xffffff00
    1dec:	00000a81 	andeq	r0, r0, r1, lsl #21
    1df0:	246c9102 	strbtcs	r9, [ip], #-258	; 0xfffffefe
    1df4:	00000bff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    1df8:	64054801 	strvs	r4, [r5], #-2049	; 0xfffff7ff
    1dfc:	02000000 	andeq	r0, r0, #0
    1e00:	26007491 			; <UNDEFINED> instruction: 0x26007491
    1e04:	00000d29 	andeq	r0, r0, r9, lsr #26
    1e08:	84050601 	strhi	r0, [r5], #-1537	; 0xfffff9ff
    1e0c:	04000119 	streq	r0, [r0], #-281	; 0xfffffee7
    1e10:	01000001 	tsteq	r0, r1
    1e14:	000b9b9c 	muleq	fp, ip, fp
    1e18:	0ac52300 	beq	ff14aa20 <_estack+0xf713aa20>
    1e1c:	06010000 	streq	r0, [r1], -r0
    1e20:	000a7605 	andeq	r7, sl, r5, lsl #12
    1e24:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1e28:	0ce12600 	stcleq	6, cr2, [r1]
    1e2c:	f8010000 			; <UNDEFINED> instruction: 0xf8010000
    1e30:	0118f404 	tsteq	r8, r4, lsl #8	; <UNPREDICTABLE>
    1e34:	00009000 	andeq	r9, r0, r0
    1e38:	d09c0100 	addsle	r0, ip, r0, lsl #2
    1e3c:	2300000b 	movwcs	r0, #11
    1e40:	00000ac5 	andeq	r0, r0, r5, asr #21
    1e44:	8c04f801 	stchi	8, cr15, [r4], {1}
    1e48:	0200000a 	andeq	r0, r0, #10
    1e4c:	9c237491 	cfstrsls	mvf7, [r3], #-580	; 0xfffffdbc
    1e50:	0100000d 	tsteq	r0, sp
    1e54:	089b04f8 	ldmeq	fp, {r3, r4, r5, r6, r7, sl}
    1e58:	91020000 	mrsls	r0, (UNDEF: 2)
    1e5c:	1a260070 	bne	982024 <mailbuffer+0x96af64>
    1e60:	0100000b 	tsteq	r0, fp
    1e64:	17c804d2 			; <UNDEFINED> instruction: 0x17c804d2
    1e68:	012c0001 			; <UNDEFINED> instruction: 0x012c0001
    1e6c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1e70:	00000c14 	andeq	r0, r0, r4, lsl ip
    1e74:	000ac523 	andeq	ip, sl, r3, lsr #10
    1e78:	04d20100 	ldrbeq	r0, [r2], #256	; 0x100
    1e7c:	00000a86 	andeq	r0, r0, r6, lsl #21
    1e80:	23749102 	cmncs	r4, #-2147483648	; 0x80000000
    1e84:	00000c8f 	andeq	r0, r0, pc, lsl #25
    1e88:	9b04d201 	blls	136694 <mailbuffer+0x11f5d4>
    1e8c:	02000008 	andeq	r0, r0, #8
    1e90:	47237091 			; <UNDEFINED> instruction: 0x47237091
    1e94:	0100000d 	tsteq	r0, sp
    1e98:	006404d2 	ldrdeq	r0, [r4], #-66	; 0xffffffbe	; <UNPREDICTABLE>
    1e9c:	91020000 	mrsls	r0, (UNDEF: 2)
    1ea0:	f627006c 			; <UNDEFINED> instruction: 0xf627006c
    1ea4:	0100000a 	tsteq	r0, sl
    1ea8:	179404a9 	ldrne	r0, [r4, r9, lsr #9]
    1eac:	00340001 	eorseq	r0, r4, r1
    1eb0:	9c010000 	stcls	0, cr0, [r1], {-0}
    1eb4:	00000c3a 	andeq	r0, r0, sl, lsr ip
    1eb8:	000ac523 	andeq	ip, sl, r3, lsr #10
    1ebc:	04a90100 	strteq	r0, [r9], #256	; 0x100
    1ec0:	00000a76 	andeq	r0, r0, r6, ror sl
    1ec4:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1ec8:	000c7122 	andeq	r7, ip, r2, lsr #2
    1ecc:	049d0100 	ldreq	r0, [sp], #256	; 0x100
    1ed0:	00000070 	andeq	r0, r0, r0, ror r0
    1ed4:	00011764 	andeq	r1, r1, r4, ror #14
    1ed8:	00000030 	andeq	r0, r0, r0, lsr r0
    1edc:	0c739c01 	ldcleq	12, cr9, [r3], #-4
    1ee0:	c5230000 	strgt	r0, [r3, #-0]!
    1ee4:	0100000a 	tsteq	r0, sl
    1ee8:	0a81049d 	beq	fe043164 <_estack+0xf6033164>
    1eec:	91020000 	mrsls	r0, (UNDEF: 2)
    1ef0:	0bfe246c 	bleq	fff8b0a8 <_estack+0xf7f7b0a8>
    1ef4:	9f010000 	svcls	0x00010000
    1ef8:	00007004 	andeq	r7, r0, r4
    1efc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1f00:	0aae2800 	beq	feb8bf08 <_estack+0xf6b7bf08>
    1f04:	8f010000 	svchi	0x00010000
    1f08:	00007004 	andeq	r7, r0, r4
    1f0c:	01173000 	tsteq	r7, r0
    1f10:	00003400 	andeq	r3, r0, r0, lsl #8
    1f14:	ac9c0100 	ldfges	f0, [ip], {0}
    1f18:	2300000c 	movwcs	r0, #12
    1f1c:	00000ac5 	andeq	r0, r0, r5, asr #21
    1f20:	81048f01 	tsthi	r4, r1, lsl #30
    1f24:	0200000a 	andeq	r0, r0, #10
    1f28:	fe246c91 	mcr2	12, 1, r6, cr4, cr1, {4}
    1f2c:	0100000b 	tsteq	r0, fp
    1f30:	00700491 			; <UNDEFINED> instruction: 0x00700491
    1f34:	91020000 	mrsls	r0, (UNDEF: 2)
    1f38:	14280074 	strtne	r0, [r8], #-116	; 0xffffff8c
    1f3c:	0100000c 	tsteq	r0, ip
    1f40:	00640456 	rsbeq	r0, r4, r6, asr r4
    1f44:	16500000 	ldrbne	r0, [r0], -r0
    1f48:	00e00001 	rsceq	r0, r0, r1
    1f4c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1f50:	00000d12 	andeq	r0, r0, r2, lsl sp
    1f54:	000ac523 	andeq	ip, sl, r3, lsr #10
    1f58:	04560100 	ldrbeq	r0, [r6], #-256	; 0xffffff00
    1f5c:	00000a76 	andeq	r0, r0, r6, ror sl
    1f60:	236c9102 	cmncs	ip, #-2147483648	; 0x80000000
    1f64:	00000d9c 	muleq	r0, ip, sp
    1f68:	1f045601 	svcne	0x00045601
    1f6c:	02000001 	andeq	r0, r0, #1
    1f70:	49236891 	stmdbmi	r3!, {r0, r4, r7, fp, sp, lr}
    1f74:	0100000c 	tsteq	r0, ip
    1f78:	0d120456 	cfldrseq	mvf0, [r2, #-344]	; 0xfffffea8
    1f7c:	91020000 	mrsls	r0, (UNDEF: 2)
    1f80:	0bff2464 	bleq	fffcb118 <_estack+0xf7fbb118>
    1f84:	58010000 	stmdapl	r1, {}	; <UNPREDICTABLE>
    1f88:	00006404 	andeq	r6, r0, r4, lsl #8
    1f8c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1f90:	000ba424 	andeq	sl, fp, r4, lsr #8
    1f94:	04590100 	ldrbeq	r0, [r9], #-256	; 0xffffff00
    1f98:	00000070 	andeq	r0, r0, r0, ror r0
    1f9c:	00709102 	rsbseq	r9, r0, r2, lsl #2
    1fa0:	0064040f 	rsbeq	r0, r4, pc, lsl #8
    1fa4:	8f280000 	svchi	0x00280000
    1fa8:	0100000b 	tsteq	r0, fp
    1fac:	006403c1 	rsbeq	r0, r4, r1, asr #7
    1fb0:	144c0000 	strbne	r0, [ip], #-0
    1fb4:	02040001 	andeq	r0, r4, #1
    1fb8:	9c010000 	stcls	0, cr0, [r1], {-0}
    1fbc:	00000d9c 	muleq	r0, ip, sp
    1fc0:	000ac523 	andeq	ip, sl, r3, lsr #10
    1fc4:	03c10100 	biceq	r0, r1, #0, 2
    1fc8:	00000a76 	andeq	r0, r0, r6, ror sl
    1fcc:	23649102 	cmncs	r4, #-2147483648	; 0x80000000
    1fd0:	00000d9c 	muleq	r0, ip, sp
    1fd4:	1f03c101 	svcne	0x0003c101
    1fd8:	02000001 	andeq	r0, r0, #1
    1fdc:	25236091 	strcs	r6, [r3, #-145]!	; 0xffffff6f
    1fe0:	01000010 	tsteq	r0, r0, lsl r0
    1fe4:	08b203c1 	ldmeq	r2!, {r0, r6, r7, r8, r9}
    1fe8:	91020000 	mrsls	r0, (UNDEF: 2)
    1fec:	0bc2235c 	bleq	ff08ad64 <_estack+0xf707ad64>
    1ff0:	c1010000 	mrsgt	r0, (UNDEF: 1)
    1ff4:	00006403 	andeq	r6, r0, r3, lsl #8
    1ff8:	58910200 	ldmpl	r1, {r9}
    1ffc:	000ca424 	andeq	sl, ip, r4, lsr #8
    2000:	03c30100 	biceq	r0, r3, #0, 2
    2004:	00000064 	andeq	r0, r0, r4, rrx
    2008:	24749102 	ldrbtcs	r9, [r4], #-258	; 0xfffffefe
    200c:	00001152 	andeq	r1, r0, r2, asr r1
    2010:	c903c401 	stmdbgt	r3, {r0, sl, lr, pc}
    2014:	02000009 	andeq	r0, r0, #9
    2018:	32246891 	eorcc	r6, r4, #9502720	; 0x910000
    201c:	0100000c 	tsteq	r0, ip
    2020:	0a6503c5 	beq	1942f3c <mailbuffer+0x192be7c>
    2024:	91020000 	mrsls	r0, (UNDEF: 2)
    2028:	70280070 	eorvc	r0, r8, r0, ror r0
    202c:	0100000a 	tsteq	r0, sl
    2030:	00640386 	rsbeq	r0, r4, r6, lsl #7
    2034:	13700000 	cmnne	r0, #0
    2038:	00dc0001 	sbcseq	r0, ip, r1
    203c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2040:	00000e11 	andeq	r0, r0, r1, lsl lr
    2044:	000ac523 	andeq	ip, sl, r3, lsr #10
    2048:	03860100 	orreq	r0, r6, #0, 2
    204c:	00000a76 	andeq	r0, r0, r6, ror sl
    2050:	236c9102 	cmncs	ip, #-2147483648	; 0x80000000
    2054:	00000c8f 	andeq	r0, r0, pc, lsl #25
    2058:	a1038601 	tstge	r3, r1, lsl #12
    205c:	02000008 	andeq	r0, r0, #8
    2060:	49236891 	stmdbmi	r3!, {r0, r4, r7, fp, sp, lr}
    2064:	0100000c 	tsteq	r0, ip
    2068:	0d120386 	ldceq	3, cr0, [r2, #-536]	; 0xfffffde8
    206c:	91020000 	mrsls	r0, (UNDEF: 2)
    2070:	0d1b2364 	ldceq	3, cr2, [fp, #-400]	; 0xfffffe70
    2074:	86010000 	strhi	r0, [r1], -r0
    2078:	00006403 	andeq	r6, r0, r3, lsl #8
    207c:	60910200 	addsvs	r0, r1, r0, lsl #4
    2080:	000bff24 	andeq	pc, fp, r4, lsr #30
    2084:	03880100 	orreq	r0, r8, #0, 2
    2088:	00000064 	andeq	r0, r0, r4, rrx
    208c:	24749102 	ldrbtcs	r9, [r4], #-258	; 0xfffffefe
    2090:	00000ba4 	andeq	r0, r0, r4, lsr #23
    2094:	70038901 	andvc	r8, r3, r1, lsl #18
    2098:	02000000 	andeq	r0, r0, #0
    209c:	28007091 	stmdacs	r0, {r0, r4, r7, ip, sp, lr}
    20a0:	00000bdf 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    20a4:	64024101 	strvs	r4, [r2], #-257	; 0xfffffeff
    20a8:	cc000000 	stcgt	0, cr0, [r0], {-0}
    20ac:	a4000111 	strge	r0, [r0], #-273	; 0xfffffeef
    20b0:	01000001 	tsteq	r0, r1
    20b4:	000e869c 	muleq	lr, ip, r6
    20b8:	0ac52300 	beq	ff14acc0 <_estack+0xf713acc0>
    20bc:	41010000 	mrsmi	r0, (UNDEF: 1)
    20c0:	000a7602 	andeq	r7, sl, r2, lsl #12
    20c4:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    20c8:	000c8f23 	andeq	r8, ip, r3, lsr #30
    20cc:	02410100 	subeq	r0, r1, #0, 2
    20d0:	000008a1 	andeq	r0, r0, r1, lsr #17
    20d4:	23609102 	cmncs	r0, #-2147483648	; 0x80000000
    20d8:	00001025 	andeq	r1, r0, r5, lsr #32
    20dc:	b2024101 	andlt	r4, r2, #1073741824	; 0x40000000
    20e0:	02000008 	andeq	r0, r0, #8
    20e4:	1b235c91 	blne	8d9330 <mailbuffer+0x8c2270>
    20e8:	0100000d 	tsteq	r0, sp
    20ec:	00640241 	rsbeq	r0, r4, r1, asr #4
    20f0:	91020000 	mrsls	r0, (UNDEF: 2)
    20f4:	0ca42458 	cfstrseq	mvf2, [r4], #352	; 0x160
    20f8:	43010000 	movwmi	r0, #4096	; 0x1000
    20fc:	00006402 	andeq	r6, r0, r2, lsl #8
    2100:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2104:	00115224 	andseq	r5, r1, r4, lsr #4
    2108:	02440100 	subeq	r0, r4, #0, 2
    210c:	000009c9 	andeq	r0, r0, r9, asr #19
    2110:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    2114:	000ccd28 	andeq	ip, ip, r8, lsr #26
    2118:	01420100 	mrseq	r0, (UNDEF: 82)
    211c:	00000a76 	andeq	r0, r0, r6, ror sl
    2120:	00011104 	andeq	r1, r1, r4, lsl #2
    2124:	000000c8 	andeq	r0, r0, r8, asr #1
    2128:	0efb9c01 	cdpeq	12, 15, cr9, cr11, cr1, {0}
    212c:	63230000 			; <UNDEFINED> instruction: 0x63230000
    2130:	0100000c 	tsteq	r0, ip
    2134:	00700142 	rsbseq	r0, r0, r2, asr #2
    2138:	91020000 	mrsls	r0, (UNDEF: 2)
    213c:	0d812364 	stceq	3, cr2, [r1, #400]	; 0x190
    2140:	42010000 	andmi	r0, r1, #0
    2144:	00007001 	andeq	r7, r0, r1
    2148:	60910200 	addsvs	r0, r1, r0, lsl #4
    214c:	000a8923 	andeq	r8, sl, r3, lsr #18
    2150:	01420100 	mrseq	r0, (UNDEF: 82)
    2154:	0000004f 	andeq	r0, r0, pc, asr #32
    2158:	245f9102 	ldrbcs	r9, [pc], #-258	; 2160 <_start-0x5ea0>
    215c:	00000cc2 	andeq	r0, r0, r2, asr #25
    2160:	86014401 	strhi	r4, [r1], -r1, lsl #8
    2164:	0200000a 	andeq	r0, r0, #10
    2168:	65247091 	strvs	r7, [r4, #-145]!	; 0xffffff6f
    216c:	0100000d 	tsteq	r0, sp
    2170:	00210145 	eoreq	r0, r1, r5, asr #2
    2174:	91020000 	mrsls	r0, (UNDEF: 2)
    2178:	0bff246c 	bleq	fffcb330 <_estack+0xf7fbb330>
    217c:	46010000 	strmi	r0, [r1], -r0
    2180:	000a7601 	andeq	r7, sl, r1, lsl #12
    2184:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2188:	0d082900 	vstreq.16	s4, [r8, #-0]	; <UNPREDICTABLE>
    218c:	17010000 	strne	r0, [r1, -r0]
    2190:	00006401 	andeq	r6, r0, r1, lsl #8
    2194:	010ff000 	mrseq	pc, CPSR	; <UNPREDICTABLE>
    2198:	00011400 	andeq	r1, r1, r0, lsl #8
    219c:	239c0100 	orrscs	r0, ip, #0, 2
    21a0:	00000ac5 	andeq	r0, r0, r5, asr #21
    21a4:	76011701 	strvc	r1, [r1], -r1, lsl #14
    21a8:	0200000a 	andeq	r0, r0, #10
    21ac:	c3237491 			; <UNDEFINED> instruction: 0xc3237491
    21b0:	0100000c 	tsteq	r0, ip
    21b4:	00640117 	rsbeq	r0, r4, r7, lsl r1
    21b8:	91020000 	mrsls	r0, (UNDEF: 2)
    21bc:	32000070 	andcc	r0, r0, #112	; 0x70
    21c0:	04000015 	streq	r0, [r0], #-21	; 0xffffffeb
    21c4:	00079e00 	andeq	r9, r7, r0, lsl #28
    21c8:	e3010400 	movw	r0, #5120	; 0x1400
    21cc:	0c000000 	stceq	0, cr0, [r0], {-0}
    21d0:	00000f10 	andeq	r0, r0, r0, lsl pc
    21d4:	00000e36 	andeq	r0, r0, r6, lsr lr
    21d8:	00011ba0 	andeq	r1, r1, r0, lsr #23
    21dc:	00001920 	andeq	r1, r0, r0, lsr #18
    21e0:	000007cc 	andeq	r0, r0, ip, asr #15
    21e4:	6f060102 	svcvs	0x00060102
    21e8:	03000008 	movweq	r0, #8
    21ec:	00000025 	andeq	r0, r0, r5, lsr #32
    21f0:	6d080102 	stfvss	f0, [r8, #-8]
    21f4:	02000008 	andeq	r0, r0, #8
    21f8:	08890502 	stmeq	r9, {r1, r8, sl}
    21fc:	02020000 	andeq	r0, r2, #0
    2200:	0000a007 	andeq	sl, r0, r7
    2204:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    2208:	00000132 	andeq	r0, r0, r2, lsr r1
    220c:	00004604 	andeq	r4, r0, r4, lsl #12
    2210:	07040200 	streq	r0, [r4, -r0, lsl #4]
    2214:	00000617 	andeq	r0, r0, r7, lsl r6
    2218:	00005204 	andeq	r5, r0, r4, lsl #4
    221c:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    2220:	0000012d 	andeq	r0, r0, sp, lsr #2
    2224:	12070802 	andne	r0, r7, #131072	; 0x20000
    2228:	05000006 	streq	r0, [r0, #-6]
    222c:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    2230:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    2234:	00061c07 	andeq	r1, r6, r7, lsl #24
    2238:	0acd0600 	beq	ff343a40 <_estack+0xf7333a40>
    223c:	d8020000 	stmdale	r2, {}	; <UNPREDICTABLE>
    2240:	00000073 	andeq	r0, r0, r3, ror r0
    2244:	5b040802 	blpl	104254 <mailbuffer+0xed194>
    2248:	07000001 	streq	r0, [r0, -r1]
    224c:	085b0604 	ldmdaeq	fp, {r2, r9, sl}^
    2250:	07030000 	streq	r0, [r3, -r0]
    2254:	0000006c 	andeq	r0, r0, ip, rrx
    2258:	00084a06 	andeq	r4, r8, r6, lsl #20
    225c:	462c0400 	strtmi	r0, [ip], -r0, lsl #8
    2260:	06000000 	streq	r0, [r0], -r0
    2264:	00000940 	andeq	r0, r0, r0, asr #18
    2268:	00467204 	subeq	r7, r6, r4, lsl #4
    226c:	b5080000 	strlt	r0, [r8, #-0]
    2270:	02000007 	andeq	r0, r0, #7
    2274:	00730165 	rsbseq	r0, r3, r5, ror #2
    2278:	04090000 	streq	r0, [r9], #-0
    227c:	00daa604 	sbcseq	sl, sl, r4, lsl #12
    2280:	af0a0000 	svcge	0x000a0000
    2284:	04000007 	streq	r0, [r0], #-7
    2288:	0000afa8 	andeq	sl, r0, r8, lsr #31
    228c:	07610a00 	strbeq	r0, [r1, -r0, lsl #20]!
    2290:	a9040000 	stmdbge	r4, {}	; <UNPREDICTABLE>
    2294:	000000da 	ldrdeq	r0, [r0], -sl
    2298:	00310b00 	eorseq	r0, r1, r0, lsl #22
    229c:	00ea0000 	rsceq	r0, sl, r0
    22a0:	ea0c0000 	b	3022a8 <mailbuffer+0x2eb1e8>
    22a4:	03000000 	movweq	r0, #0
    22a8:	07040200 	streq	r0, [r4, -r0, lsl #4]
    22ac:	000000da 	ldrdeq	r0, [r0], -sl
    22b0:	a304080d 	movwge	r0, #18445	; 0x480d
    22b4:	00000112 	andeq	r0, r0, r2, lsl r1
    22b8:	00091e0e 	andeq	r1, r9, lr, lsl #28
    22bc:	6ca50400 	cfstrsvs	mvf0, [r5]
    22c0:	00000000 	andeq	r0, r0, r0
    22c4:	0009260e 	andeq	r2, r9, lr, lsl #12
    22c8:	bbaa0400 	bllt	fea832d0 <_estack+0xf6a732d0>
    22cc:	04000000 	streq	r0, [r0], #-0
    22d0:	08b10600 	ldmeq	r1!, {r9, sl}
    22d4:	ab040000 	blge	1022dc <mailbuffer+0xeb21c>
    22d8:	000000f1 	strdeq	r0, [r0], -r1
    22dc:	00072a06 	andeq	r2, r7, r6, lsl #20
    22e0:	8eaf0400 	cdphi	4, 10, cr0, cr15, cr0, {0}
    22e4:	06000000 	streq	r0, [r0], -r0
    22e8:	00000984 	andeq	r0, r0, r4, lsl #19
    22ec:	00521605 	subseq	r1, r2, r5, lsl #12
    22f0:	3b0f0000 	blcc	3c22f8 <mailbuffer+0x3ab238>
    22f4:	18000007 	stmdane	r0, {r0, r1, r2}
    22f8:	01862d05 	orreq	r2, r6, r5, lsl #26
    22fc:	d20e0000 	andle	r0, lr, #0
    2300:	05000008 	streq	r0, [r0, #-8]
    2304:	0001862f 	andeq	r8, r1, pc, lsr #12
    2308:	5f100000 	svcpl	0x00100000
    230c:	3005006b 	andcc	r0, r5, fp, rrx
    2310:	0000006c 	andeq	r0, r0, ip, rrx
    2314:	09090e04 	stmdbeq	r9, {r2, r9, sl, fp}
    2318:	30050000 	andcc	r0, r5, r0
    231c:	0000006c 	andeq	r0, r0, ip, rrx
    2320:	07240e08 	streq	r0, [r4, -r8, lsl #28]!
    2324:	30050000 	andcc	r0, r5, r0
    2328:	0000006c 	andeq	r0, r0, ip, rrx
    232c:	09db0e0c 	ldmibeq	fp, {r2, r3, r9, sl, fp}^
    2330:	30050000 	andcc	r0, r5, r0
    2334:	0000006c 	andeq	r0, r0, ip, rrx
    2338:	785f1010 	ldmdavc	pc, {r4, ip}^	; <UNPREDICTABLE>
    233c:	8c310500 	cfldr32hi	mvfx0, [r1], #-0
    2340:	14000001 	strne	r0, [r0], #-1
    2344:	33041100 	movwcc	r1, #16640	; 0x4100
    2348:	0b000001 	bleq	2354 <_start-0x5cac>
    234c:	00000128 	andeq	r0, r0, r8, lsr #2
    2350:	0000019c 	muleq	r0, ip, r1
    2354:	0000ea0c 	andeq	lr, r0, ip, lsl #20
    2358:	0f000000 	svceq	0x00000000
    235c:	0000075c 	andeq	r0, r0, ip, asr r7
    2360:	15350524 	ldrne	r0, [r5, #-1316]!	; 0xfffffadc
    2364:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    2368:	0000065d 	andeq	r0, r0, sp, asr r6
    236c:	006c3705 	rsbeq	r3, ip, r5, lsl #14
    2370:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    2374:	0000094f 	andeq	r0, r0, pc, asr #18
    2378:	006c3805 	rsbeq	r3, ip, r5, lsl #16
    237c:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
    2380:	00000672 	andeq	r0, r0, r2, ror r6
    2384:	006c3905 	rsbeq	r3, ip, r5, lsl #18
    2388:	0e080000 	cdpeq	0, 0, cr0, cr8, cr0, {0}
    238c:	00000a66 	andeq	r0, r0, r6, ror #20
    2390:	006c3a05 	rsbeq	r3, ip, r5, lsl #20
    2394:	0e0c0000 	cdpeq	0, 0, cr0, cr12, cr0, {0}
    2398:	00000824 	andeq	r0, r0, r4, lsr #16
    239c:	006c3b05 	rsbeq	r3, ip, r5, lsl #22
    23a0:	0e100000 	cdpeq	0, 1, cr0, cr0, cr0, {0}
    23a4:	000007d6 	ldrdeq	r0, [r0], -r6
    23a8:	006c3c05 	rsbeq	r3, ip, r5, lsl #24
    23ac:	0e140000 	cdpeq	0, 1, cr0, cr4, cr0, {0}
    23b0:	000009e0 	andeq	r0, r0, r0, ror #19
    23b4:	006c3d05 	rsbeq	r3, ip, r5, lsl #26
    23b8:	0e180000 	cdpeq	0, 1, cr0, cr8, cr0, {0}
    23bc:	00000893 	muleq	r0, r3, r8
    23c0:	006c3e05 	rsbeq	r3, ip, r5, lsl #28
    23c4:	0e1c0000 	cdpeq	0, 1, cr0, cr12, cr0, {0}
    23c8:	00000a2d 	andeq	r0, r0, sp, lsr #20
    23cc:	006c3f05 	rsbeq	r3, ip, r5, lsl #30
    23d0:	00200000 	eoreq	r0, r0, r0
    23d4:	00068112 	andeq	r8, r6, r2, lsl r1
    23d8:	05010800 	streq	r0, [r1, #-2048]	; 0xfffff800
    23dc:	00025548 	andeq	r5, r2, r8, asr #10
    23e0:	07030e00 	streq	r0, [r3, -r0, lsl #28]
    23e4:	49050000 	stmdbmi	r5, {}	; <UNPREDICTABLE>
    23e8:	00000255 	andeq	r0, r0, r5, asr r2
    23ec:	05c70e00 	strbeq	r0, [r7, #3584]	; 0xe00
    23f0:	4a050000 	bmi	1423f8 <mailbuffer+0x12b338>
    23f4:	00000255 	andeq	r0, r0, r5, asr r2
    23f8:	096b1380 	stmdbeq	fp!, {r7, r8, r9, ip}^
    23fc:	4c050000 	stcmi	0, cr0, [r5], {-0}
    2400:	00000128 	andeq	r0, r0, r8, lsr #2
    2404:	a6130100 	ldrge	r0, [r3], -r0, lsl #2
    2408:	05000006 	streq	r0, [r0, #-6]
    240c:	0001284f 	andeq	r2, r1, pc, asr #16
    2410:	00010400 	andeq	r0, r1, r0, lsl #8
    2414:	00008c0b 	andeq	r8, r0, fp, lsl #24
    2418:	00026500 	andeq	r6, r2, r0, lsl #10
    241c:	00ea0c00 	rsceq	r0, sl, r0, lsl #24
    2420:	001f0000 	andseq	r0, pc, r0
    2424:	00082d12 	andeq	r2, r8, r2, lsl sp
    2428:	05019000 	streq	r9, [r1, #-0]
    242c:	0002a35b 	andeq	sl, r2, fp, asr r3
    2430:	08d20e00 	ldmeq	r2, {r9, sl, fp}^
    2434:	5c050000 	stcpl	0, cr0, [r5], {-0}
    2438:	000002a3 	andeq	r0, r0, r3, lsr #5
    243c:	08ea0e00 	stmiaeq	sl!, {r9, sl, fp}^
    2440:	5d050000 	stcpl	0, cr0, [r5, #-0]
    2444:	0000006c 	andeq	r0, r0, ip, rrx
    2448:	070b0e04 	streq	r0, [fp, -r4, lsl #28]
    244c:	5f050000 	svcpl	0x00050000
    2450:	000002a9 	andeq	r0, r0, r9, lsr #5
    2454:	06810e08 	streq	r0, [r1], r8, lsl #28
    2458:	60050000 	andvs	r0, r5, r0
    245c:	00000215 	andeq	r0, r0, r5, lsl r2
    2460:	04110088 	ldreq	r0, [r1], #-136	; 0xffffff78
    2464:	00000265 	andeq	r0, r0, r5, ror #4
    2468:	0002b90b 	andeq	fp, r2, fp, lsl #18
    246c:	0002b900 	andeq	fp, r2, r0, lsl #18
    2470:	00ea0c00 	rsceq	r0, sl, r0, lsl #24
    2474:	001f0000 	andseq	r0, pc, r0
    2478:	02bf0411 	adcseq	r0, pc, #285212672	; 0x11000000
    247c:	0f140000 	svceq	0x00140000
    2480:	0000089d 	muleq	r0, sp, r8
    2484:	e5730508 	ldrb	r0, [r3, #-1288]!	; 0xfffffaf8
    2488:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    248c:	0000066c 	andeq	r0, r0, ip, ror #12
    2490:	02e57405 	rsceq	r7, r5, #83886080	; 0x5000000
    2494:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    2498:	000005d3 	ldrdeq	r0, [r0], -r3
    249c:	006c7505 	rsbeq	r7, ip, r5, lsl #10
    24a0:	00040000 	andeq	r0, r4, r0
    24a4:	00310411 	eorseq	r0, r1, r1, lsl r4
    24a8:	bc0f0000 	stclt	0, cr0, [pc], {-0}
    24ac:	68000008 	stmdavs	r0, {r3}
    24b0:	0415b305 	ldreq	fp, [r5], #-773	; 0xfffffcfb
    24b4:	5f100000 	svcpl	0x00100000
    24b8:	b4050070 	strlt	r0, [r5], #-112	; 0xffffff90
    24bc:	000002e5 	andeq	r0, r0, r5, ror #5
    24c0:	725f1000 	subsvc	r1, pc, #0
    24c4:	6cb50500 	cfldr32vs	mvfx0, [r5]
    24c8:	04000000 	streq	r0, [r0], #-0
    24cc:	00775f10 	rsbseq	r5, r7, r0, lsl pc
    24d0:	006cb605 	rsbeq	fp, ip, r5, lsl #12
    24d4:	0e080000 	cdpeq	0, 0, cr0, cr8, cr0, {0}
    24d8:	0000069f 	muleq	r0, pc, r6	; <UNPREDICTABLE>
    24dc:	0038b705 	eorseq	fp, r8, r5, lsl #14
    24e0:	0e0c0000 	cdpeq	0, 0, cr0, cr12, cr0, {0}
    24e4:	00000778 	andeq	r0, r0, r8, ror r7
    24e8:	0038b805 	eorseq	fp, r8, r5, lsl #16
    24ec:	100e0000 	andne	r0, lr, r0
    24f0:	0066625f 	rsbeq	r6, r6, pc, asr r2
    24f4:	02c0b905 	sbceq	fp, r0, #81920	; 0x14000
    24f8:	0e100000 	cdpeq	0, 1, cr0, cr0, cr0, {0}
    24fc:	00000629 	andeq	r0, r0, r9, lsr #12
    2500:	006cba05 	rsbeq	fp, ip, r5, lsl #20
    2504:	0e180000 	cdpeq	0, 1, cr0, cr8, cr0, {0}
    2508:	0000068f 	andeq	r0, r0, pc, lsl #13
    250c:	008cc105 	addeq	ip, ip, r5, lsl #2
    2510:	0e1c0000 	cdpeq	0, 1, cr0, cr12, cr0, {0}
    2514:	0000157d 	andeq	r1, r0, sp, ror r5
    2518:	0582c305 	streq	ip, [r2, #773]	; 0x305
    251c:	0e200000 	cdpeq	0, 2, cr0, cr0, cr0, {0}
    2520:	00001762 	andeq	r1, r0, r2, ror #14
    2524:	05acc505 	streq	ip, [ip, #1285]!	; 0x505
    2528:	0e240000 	cdpeq	0, 2, cr0, cr4, cr0, {0}
    252c:	0000092e 	andeq	r0, r0, lr, lsr #18
    2530:	05d0c805 	ldrbeq	ip, [r0, #2053]	; 0x805
    2534:	0e280000 	cdpeq	0, 2, cr0, cr8, cr0, {0}
    2538:	00000a47 	andeq	r0, r0, r7, asr #20
    253c:	05eac905 	strbeq	ip, [sl, #2309]!	; 0x905
    2540:	102c0000 	eorne	r0, ip, r0
    2544:	0062755f 	rsbeq	r7, r2, pc, asr r5
    2548:	02c0cc05 	sbceq	ip, r0, #1280	; 0x500
    254c:	10300000 	eorsne	r0, r0, r0
    2550:	0070755f 	rsbseq	r7, r0, pc, asr r5
    2554:	02e5cd05 	rsceq	ip, r5, #320	; 0x140
    2558:	10380000 	eorsne	r0, r8, r0
    255c:	0072755f 	rsbseq	r7, r2, pc, asr r5
    2560:	006cce05 	rsbeq	ip, ip, r5, lsl #28
    2564:	0e3c0000 	cdpeq	0, 3, cr0, cr12, cr0, {0}
    2568:	00000666 	andeq	r0, r0, r6, ror #12
    256c:	05f0d105 	ldrbeq	sp, [r0, #261]!	; 0x105
    2570:	0e400000 	cdpeq	0, 4, cr0, cr0, cr0, {0}
    2574:	00000a1f 	andeq	r0, r0, pc, lsl sl
    2578:	0600d205 	streq	sp, [r0], -r5, lsl #4
    257c:	10430000 	subne	r0, r3, r0
    2580:	00626c5f 	rsbeq	r6, r2, pc, asr ip
    2584:	02c0d505 	sbceq	sp, r0, #20971520	; 0x1400000
    2588:	0e440000 	cdpeq	0, 4, cr0, cr4, cr0, {0}
    258c:	000006b5 			; <UNDEFINED> instruction: 0x000006b5
    2590:	006cd805 	rsbeq	sp, ip, r5, lsl #16
    2594:	0e4c0000 	cdpeq	0, 4, cr0, cr12, cr0, {0}
    2598:	000006c6 	andeq	r0, r0, r6, asr #13
    259c:	0099d905 	addseq	sp, r9, r5, lsl #18
    25a0:	0e500000 	cdpeq	0, 5, cr0, cr0, cr0, {0}
    25a4:	000005ec 	andeq	r0, r0, ip, ror #11
    25a8:	0433dc05 	ldrteq	sp, [r3], #-3077	; 0xfffff3fb
    25ac:	0e540000 	cdpeq	0, 5, cr0, cr4, cr0, {0}
    25b0:	000007bc 			; <UNDEFINED> instruction: 0x000007bc
    25b4:	011de005 	tsteq	sp, r5
    25b8:	0e580000 	cdpeq	0, 5, cr0, cr8, cr0, {0}
    25bc:	000008c4 	andeq	r0, r0, r4, asr #17
    25c0:	0112e205 	tsteq	r2, r5, lsl #4
    25c4:	0e5c0000 	cdpeq	0, 5, cr0, cr12, cr0, {0}
    25c8:	000007ce 	andeq	r0, r0, lr, asr #15
    25cc:	006ce305 	rsbeq	lr, ip, r5, lsl #6
    25d0:	00640000 	rsbeq	r0, r4, r0
    25d4:	00006c15 	andeq	r6, r0, r5, lsl ip
    25d8:	00043300 	andeq	r3, r4, r0, lsl #6
    25dc:	04331600 	ldrteq	r1, [r3], #-1536	; 0xfffffa00
    25e0:	8c160000 	ldchi	0, cr0, [r6], {-0}
    25e4:	16000000 	strne	r0, [r0], -r0
    25e8:	00000570 	andeq	r0, r0, r0, ror r5
    25ec:	00006c16 	andeq	r6, r0, r6, lsl ip
    25f0:	04110000 	ldreq	r0, [r1], #-0
    25f4:	0000043e 	andeq	r0, r0, lr, lsr r4
    25f8:	00043303 	andeq	r3, r4, r3, lsl #6
    25fc:	09111700 	ldmdbeq	r1, {r8, r9, sl, ip}
    2600:	04280000 	strteq	r0, [r8], #-0
    2604:	70023805 	andvc	r3, r2, r5, lsl #16
    2608:	18000005 	stmdane	r0, {r0, r2}
    260c:	00000882 	andeq	r0, r0, r2, lsl #17
    2610:	6c023a05 			; <UNDEFINED> instruction: 0x6c023a05
    2614:	00000000 	andeq	r0, r0, r0
    2618:	0006ae18 	andeq	sl, r6, r8, lsl lr
    261c:	023f0500 	eorseq	r0, pc, #0, 10
    2620:	00000657 	andeq	r0, r0, r7, asr r6
    2624:	07681804 	strbeq	r1, [r8, -r4, lsl #16]!
    2628:	3f050000 	svccc	0x00050000
    262c:	00065702 	andeq	r5, r6, r2, lsl #14
    2630:	33180800 	tstcc	r8, #0, 16
    2634:	05000007 	streq	r0, [r0, #-7]
    2638:	0657023f 			; <UNDEFINED> instruction: 0x0657023f
    263c:	180c0000 	stmdane	ip, {}	; <UNPREDICTABLE>
    2640:	000008e5 	andeq	r0, r0, r5, ror #17
    2644:	6c024105 	stfvss	f4, [r2], {5}
    2648:	10000000 	andne	r0, r0, r0
    264c:	0005e118 	andeq	lr, r5, r8, lsl r1
    2650:	02420500 	subeq	r0, r2, #0, 10
    2654:	00000839 	andeq	r0, r0, r9, lsr r8
    2658:	09ac1814 	stmibeq	ip!, {r2, r4, fp, ip}
    265c:	44050000 	strmi	r0, [r5], #-0
    2660:	00006c02 	andeq	r6, r0, r2, lsl #24
    2664:	ef183000 	svc	0x00183000
    2668:	05000008 	streq	r0, [r0, #-8]
    266c:	05a60245 	streq	r0, [r6, #581]!	; 0x245
    2670:	18340000 	ldmdane	r4!, {}	; <UNPREDICTABLE>
    2674:	0000083f 	andeq	r0, r0, pc, lsr r8
    2678:	6c024705 	stcvs	7, cr4, [r2], {5}
    267c:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    2680:	0008ff18 	andeq	pc, r8, r8, lsl pc	; <UNPREDICTABLE>
    2684:	02490500 	subeq	r0, r9, #0, 10
    2688:	00000854 	andeq	r0, r0, r4, asr r8
    268c:	07a7183c 			; <UNDEFINED> instruction: 0x07a7183c
    2690:	4c050000 	stcmi	0, cr0, [r5], {-0}
    2694:	00018602 	andeq	r8, r1, r2, lsl #12
    2698:	52184000 	andspl	r4, r8, #0
    269c:	05000007 	streq	r0, [r0, #-7]
    26a0:	006c024d 	rsbeq	r0, ip, sp, asr #4
    26a4:	18440000 	stmdane	r4, {}^	; <UNPREDICTABLE>
    26a8:	00000a61 	andeq	r0, r0, r1, ror #20
    26ac:	86024e05 	strhi	r4, [r2], -r5, lsl #28
    26b0:	48000001 	stmdami	r0, {r0}
    26b4:	00085118 	andeq	r5, r8, r8, lsl r1
    26b8:	024f0500 	subeq	r0, pc, #0, 10
    26bc:	0000085a 	andeq	r0, r0, sl, asr r8
    26c0:	0770184c 	ldrbeq	r1, [r0, -ip, asr #16]!
    26c4:	52050000 	andpl	r0, r5, #0
    26c8:	00006c02 	andeq	r6, r0, r2, lsl #24
    26cc:	be185000 	cdplt	0, 1, cr5, cr8, cr0, {0}
    26d0:	05000006 	streq	r0, [r0, #-6]
    26d4:	05700253 	ldrbeq	r0, [r0, #-595]!	; 0xfffffdad
    26d8:	18540000 	ldmdane	r4, {}^	; <UNPREDICTABLE>
    26dc:	0000087b 	andeq	r0, r0, fp, ror r8
    26e0:	17027605 	strne	r7, [r2, -r5, lsl #12]
    26e4:	58000008 	stmdapl	r0, {r3}
    26e8:	00082d19 	andeq	r2, r8, r9, lsl sp
    26ec:	027a0500 	rsbseq	r0, sl, #0, 10
    26f0:	000002a3 	andeq	r0, r0, r3, lsr #5
    26f4:	85190148 	ldrhi	r0, [r9, #-328]	; 0xfffffeb8
    26f8:	05000007 	streq	r0, [r0, #-7]
    26fc:	0265027b 	rsbeq	r0, r5, #-1342177273	; 0xb0000007
    2700:	014c0000 	mrseq	r0, (UNDEF: 76)
    2704:	000a0319 	andeq	r0, sl, r9, lsl r3
    2708:	027f0500 	rsbseq	r0, pc, #0, 10
    270c:	0000086b 	andeq	r0, r0, fp, ror #16
    2710:	971902dc 			; <UNDEFINED> instruction: 0x971902dc
    2714:	05000006 	streq	r0, [r0, #-6]
    2718:	061c0284 	ldreq	r0, [ip], -r4, lsl #5
    271c:	02e00000 	rsceq	r0, r0, #0
    2720:	00067c19 	andeq	r7, r6, r9, lsl ip
    2724:	02850500 	addeq	r0, r5, #0, 10
    2728:	00000877 	andeq	r0, r0, r7, ror r8
    272c:	110002ec 	smlattne	r0, ip, r2, r0
    2730:	00057604 	andeq	r7, r5, r4, lsl #12
    2734:	08010200 	stmdaeq	r1, {r9}
    2738:	00000876 	andeq	r0, r0, r6, ror r8
    273c:	00057603 	andeq	r7, r5, r3, lsl #12
    2740:	15041100 	strne	r1, [r4, #-256]	; 0xffffff00
    2744:	15000004 	strne	r0, [r0, #-4]
    2748:	0000006c 	andeq	r0, r0, ip, rrx
    274c:	000005a6 	andeq	r0, r0, r6, lsr #11
    2750:	00043316 	andeq	r3, r4, r6, lsl r3
    2754:	008c1600 	addeq	r1, ip, r0, lsl #12
    2758:	a6160000 	ldrge	r0, [r6], -r0
    275c:	16000005 	strne	r0, [r0], -r5
    2760:	0000006c 	andeq	r0, r0, ip, rrx
    2764:	7d041100 	stfvcs	f1, [r4, #-0]
    2768:	11000005 	tstne	r0, r5
    276c:	00058804 	andeq	r8, r5, r4, lsl #16
    2770:	00a41500 	adceq	r1, r4, r0, lsl #10
    2774:	05d00000 	ldrbeq	r0, [r0]
    2778:	33160000 	tstcc	r6, #0
    277c:	16000004 	strne	r0, [r0], -r4
    2780:	0000008c 	andeq	r0, r0, ip, lsl #1
    2784:	0000a416 	andeq	sl, r0, r6, lsl r4
    2788:	006c1600 	rsbeq	r1, ip, r0, lsl #12
    278c:	11000000 	mrsne	r0, (UNDEF: 0)
    2790:	0005b204 	andeq	fp, r5, r4, lsl #4
    2794:	006c1500 	rsbeq	r1, ip, r0, lsl #10
    2798:	05ea0000 	strbeq	r0, [sl, #0]!
    279c:	33160000 	tstcc	r6, #0
    27a0:	16000004 	strne	r0, [r0], -r4
    27a4:	0000008c 	andeq	r0, r0, ip, lsl #1
    27a8:	d6041100 	strle	r1, [r4], -r0, lsl #2
    27ac:	0b000005 	bleq	27c8 <_start-0x5838>
    27b0:	00000031 	andeq	r0, r0, r1, lsr r0
    27b4:	00000600 	andeq	r0, r0, r0, lsl #12
    27b8:	0000ea0c 	andeq	lr, r0, ip, lsl #20
    27bc:	0b000200 	bleq	2fc4 <_start-0x503c>
    27c0:	00000031 	andeq	r0, r0, r1, lsr r0
    27c4:	00000610 	andeq	r0, r0, r0, lsl r6
    27c8:	0000ea0c 	andeq	lr, r0, ip, lsl #20
    27cc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    27d0:	000008aa 	andeq	r0, r0, sl, lsr #17
    27d4:	eb011d05 	bl	49bf0 <mailbuffer+0x32b30>
    27d8:	1a000002 	bne	27e8 <_start-0x5818>
    27dc:	000009ea 	andeq	r0, r0, sl, ror #19
    27e0:	0121050c 			; <UNDEFINED> instruction: 0x0121050c
    27e4:	00000651 	andeq	r0, r0, r1, asr r6
    27e8:	0008d218 	andeq	sp, r8, r8, lsl r2
    27ec:	01230500 			; <UNDEFINED> instruction: 0x01230500
    27f0:	00000651 	andeq	r0, r0, r1, asr r6
    27f4:	077e1800 	ldrbeq	r1, [lr, -r0, lsl #16]!
    27f8:	24050000 	strcs	r0, [r5], #-0
    27fc:	00006c01 	andeq	r6, r0, r1, lsl #24
    2800:	a4180400 	ldrge	r0, [r8], #-1024	; 0xfffffc00
    2804:	05000008 	streq	r0, [r0, #-8]
    2808:	06570125 	ldrbeq	r0, [r7], -r5, lsr #2
    280c:	00080000 	andeq	r0, r8, r0
    2810:	061c0411 			; <UNDEFINED> instruction: 0x061c0411
    2814:	04110000 	ldreq	r0, [r1], #-0
    2818:	00000610 	andeq	r0, r0, r0, lsl r6
    281c:	0005d91a 	andeq	sp, r5, sl, lsl r9
    2820:	3d050e00 	stccc	14, cr0, [r5, #-0]
    2824:	00069201 	andeq	r9, r6, r1, lsl #4
    2828:	09181800 	ldmdbeq	r8, {fp, ip}
    282c:	3e050000 	cdpcc	0, 0, cr0, cr5, cr0, {0}
    2830:	00069201 	andeq	r9, r6, r1, lsl #4
    2834:	58180000 	ldmdapl	r8, {}	; <UNPREDICTABLE>
    2838:	05000009 	streq	r0, [r0, #-9]
    283c:	0692013f 			; <UNDEFINED> instruction: 0x0692013f
    2840:	18060000 	stmdane	r6, {}	; <UNPREDICTABLE>
    2844:	00000974 	andeq	r0, r0, r4, ror r9
    2848:	3f014005 	svccc	0x00014005
    284c:	0c000000 	stceq	0, cr0, [r0], {-0}
    2850:	003f0b00 	eorseq	r0, pc, r0, lsl #22
    2854:	06a20000 	strteq	r0, [r2], r0
    2858:	ea0c0000 	b	302860 <mailbuffer+0x2eb7a0>
    285c:	02000000 	andeq	r0, r0, #0
    2860:	05d01b00 	ldrbeq	r1, [r0, #2816]	; 0xb00
    2864:	07a30257 	sbfxeq	r0, r7, #4, #4
    2868:	be180000 	cdplt	0, 1, cr0, cr8, cr0, {0}
    286c:	05000009 	streq	r0, [r0, #-9]
    2870:	00730259 	rsbseq	r0, r3, r9, asr r2
    2874:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    2878:	0000095e 	andeq	r0, r0, lr, asr r9
    287c:	70025a05 	andvc	r5, r2, r5, lsl #20
    2880:	04000005 	streq	r0, [r0], #-5
    2884:	00079a18 	andeq	r9, r7, r8, lsl sl
    2888:	025b0500 	subseq	r0, fp, #0, 10
    288c:	000007a3 	andeq	r0, r0, r3, lsr #15
    2890:	0a381808 	beq	e088b8 <mailbuffer+0xdf17f8>
    2894:	5c050000 	stcpl	0, cr0, [r5], {-0}
    2898:	00019c02 	andeq	r9, r1, r2, lsl #24
    289c:	43182400 	tstmi	r8, #0, 8
    28a0:	05000007 	streq	r0, [r0, #-7]
    28a4:	006c025d 	rsbeq	r0, ip, sp, asr r2
    28a8:	18480000 	stmdane	r8, {}^	; <UNPREDICTABLE>
    28ac:	000008cd 	andeq	r0, r0, sp, asr #17
    28b0:	65025e05 	strvs	r5, [r2, #-3589]	; 0xfffff1fb
    28b4:	50000000 	andpl	r0, r0, r0
    28b8:	000a4e18 	andeq	r4, sl, r8, lsl lr
    28bc:	025f0500 	subseq	r0, pc, #0, 10
    28c0:	0000065d 	andeq	r0, r0, sp, asr r6
    28c4:	08d81858 	ldmeq	r8, {r3, r4, r6, fp, ip}^
    28c8:	60050000 	andvs	r0, r5, r0
    28cc:	00011202 	andeq	r1, r1, r2, lsl #4
    28d0:	53186800 	tstpl	r8, #0, 16
    28d4:	0500000a 	streq	r0, [r0, #-10]
    28d8:	01120261 	tsteq	r2, r1, ror #4
    28dc:	18700000 	ldmdane	r0!, {}^	; <UNPREDICTABLE>
    28e0:	0000064f 	andeq	r0, r0, pc, asr #12
    28e4:	12026205 	andne	r6, r2, #1342177280	; 0x50000000
    28e8:	78000001 	stmdavc	r0, {r0}
    28ec:	0009f918 	andeq	pc, r9, r8, lsl r9	; <UNPREDICTABLE>
    28f0:	02630500 	rsbeq	r0, r3, #0, 10
    28f4:	000007b3 			; <UNDEFINED> instruction: 0x000007b3
    28f8:	078e1880 	streq	r1, [lr, r0, lsl #17]
    28fc:	64050000 	strvs	r0, [r5], #-0
    2900:	0007c302 	andeq	ip, r7, r2, lsl #6
    2904:	8c188800 	ldchi	8, cr8, [r8], {-0}
    2908:	05000009 	streq	r0, [r0, #-9]
    290c:	006c0265 	rsbeq	r0, ip, r5, ror #4
    2910:	18a00000 	stmiane	r0!, {}	; <UNPREDICTABLE>
    2914:	000006f5 	strdeq	r0, [r0], -r5
    2918:	12026605 	andne	r6, r2, #5242880	; 0x500000
    291c:	a4000001 	strge	r0, [r0], #-1
    2920:	00064018 	andeq	r4, r6, r8, lsl r0
    2924:	02670500 	rsbeq	r0, r7, #0, 10
    2928:	00000112 	andeq	r0, r0, r2, lsl r1
    292c:	06e418ac 	strbteq	r1, [r4], ip, lsr #17
    2930:	68050000 	stmdavs	r5, {}	; <UNPREDICTABLE>
    2934:	00011202 	andeq	r1, r1, r2, lsl #4
    2938:	f218b400 	vshl.s16	d11, d0, d8
    293c:	05000005 	streq	r0, [r0, #-5]
    2940:	01120269 	tsteq	r2, r9, ror #4
    2944:	18bc0000 	ldmne	ip!, {}	; <UNPREDICTABLE>
    2948:	00000601 	andeq	r0, r0, r1, lsl #12
    294c:	12026a05 	andne	r6, r2, #20480	; 0x5000
    2950:	c4000001 	strgt	r0, [r0], #-1
    2954:	00088018 	andeq	r8, r8, r8, lsl r0
    2958:	026b0500 	rsbeq	r0, fp, #0, 10
    295c:	0000006c 	andeq	r0, r0, ip, rrx
    2960:	760b00cc 	strvc	r0, [fp], -ip, asr #1
    2964:	b3000005 	movwlt	r0, #5
    2968:	0c000007 	stceq	0, cr0, [r0], {7}
    296c:	000000ea 	andeq	r0, r0, sl, ror #1
    2970:	760b0019 			; <UNDEFINED> instruction: 0x760b0019
    2974:	c3000005 	movwgt	r0, #5
    2978:	0c000007 	stceq	0, cr0, [r0], {7}
    297c:	000000ea 	andeq	r0, r0, sl, ror #1
    2980:	760b0007 	strvc	r0, [fp], -r7
    2984:	d3000005 	movwle	r0, #5
    2988:	0c000007 	stceq	0, cr0, [r0], {7}
    298c:	000000ea 	andeq	r0, r0, sl, ror #1
    2990:	f01b0017 			; <UNDEFINED> instruction: 0xf01b0017
    2994:	f7027005 			; <UNDEFINED> instruction: 0xf7027005
    2998:	18000007 	stmdane	r0, {r0, r1, r2}
    299c:	0000081d 	andeq	r0, r0, sp, lsl r8
    29a0:	f7027305 			; <UNDEFINED> instruction: 0xf7027305
    29a4:	00000007 	andeq	r0, r0, r7
    29a8:	0009f018 	andeq	pc, r9, r8, lsl r0	; <UNPREDICTABLE>
    29ac:	02740500 	rsbseq	r0, r4, #0, 10
    29b0:	00000807 	andeq	r0, r0, r7, lsl #16
    29b4:	e50b0078 	str	r0, [fp, #-120]	; 0xffffff88
    29b8:	07000002 	streq	r0, [r0, -r2]
    29bc:	0c000008 	stceq	0, cr0, [r0], {8}
    29c0:	000000ea 	andeq	r0, r0, sl, ror #1
    29c4:	730b001d 	movwvc	r0, #45085	; 0xb01d
    29c8:	17000000 	strne	r0, [r0, -r0]
    29cc:	0c000008 	stceq	0, cr0, [r0], {8}
    29d0:	000000ea 	andeq	r0, r0, sl, ror #1
    29d4:	f01c001d 			; <UNDEFINED> instruction: 0xf01c001d
    29d8:	39025505 	stmdbcc	r2, {r0, r2, r8, sl, ip, lr}
    29dc:	1d000008 	stcne	0, cr0, [r0, #-32]	; 0xffffffe0
    29e0:	00000911 	andeq	r0, r0, r1, lsl r9
    29e4:	a2026c05 	andge	r6, r2, #1280	; 0x500
    29e8:	1d000006 	stcne	0, cr0, [r0, #-24]	; 0xffffffe8
    29ec:	00000a25 	andeq	r0, r0, r5, lsr #20
    29f0:	d3027505 	movwle	r7, #9477	; 0x2505
    29f4:	00000007 	andeq	r0, r0, r7
    29f8:	0005760b 	andeq	r7, r5, fp, lsl #12
    29fc:	00084900 	andeq	r4, r8, r0, lsl #18
    2a00:	00ea0c00 	rsceq	r0, sl, r0, lsl #24
    2a04:	00180000 	andseq	r0, r8, r0
    2a08:	0008541e 	andeq	r5, r8, lr, lsl r4
    2a0c:	04331600 	ldrteq	r1, [r3], #-1536	; 0xfffffa00
    2a10:	11000000 	mrsne	r0, (UNDEF: 0)
    2a14:	00084904 	andeq	r4, r8, r4, lsl #18
    2a18:	86041100 	strhi	r1, [r4], -r0, lsl #2
    2a1c:	1e000001 	cdpne	0, 0, cr0, cr0, cr1, {0}
    2a20:	0000086b 	andeq	r0, r0, fp, ror #16
    2a24:	00006c16 	andeq	r6, r0, r6, lsl ip
    2a28:	04110000 	ldreq	r0, [r1], #-0
    2a2c:	00000871 	andeq	r0, r0, r1, ror r8
    2a30:	08600411 	stmdaeq	r0!, {r0, r4, sl}^
    2a34:	100b0000 	andne	r0, fp, r0
    2a38:	87000006 	strhi	r0, [r0, -r6]
    2a3c:	0c000008 	stceq	0, cr0, [r0], {8}
    2a40:	000000ea 	andeq	r0, r0, sl, ror #1
    2a44:	a01f0002 	andsge	r0, pc, r2
    2a48:	05000009 	streq	r0, [r0, #-9]
    2a4c:	043302fd 	ldrteq	r0, [r3], #-765	; 0xfffffd03
    2a50:	991f0000 	ldmdbls	pc, {}	; <UNPREDICTABLE>
    2a54:	05000009 	streq	r0, [r0, #-9]
    2a58:	043902fe 	ldrteq	r0, [r9], #-766	; 0xfffffd02
    2a5c:	35200000 	strcc	r0, [r0, #-0]!
    2a60:	06000008 	streq	r0, [r0], -r8
    2a64:	0005705f 	andeq	r7, r5, pc, asr r0
    2a68:	00b30600 	adcseq	r0, r3, r0, lsl #12
    2a6c:	47070000 	strmi	r0, [r7, -r0]
    2a70:	000008b5 			; <UNDEFINED> instruction: 0x000008b5
    2a74:	08bb0411 	ldmeq	fp!, {r0, r4, sl}
    2a78:	c61e0000 	ldrgt	r0, [lr], -r0
    2a7c:	16000008 	strne	r0, [r0], -r8
    2a80:	0000008c 	andeq	r0, r0, ip, lsl #1
    2a84:	000c0600 	andeq	r0, ip, r0, lsl #12
    2a88:	61080000 	mrsvs	r0, (UNDEF: 8)
    2a8c:	00000052 	andeq	r0, r0, r2, asr r0
    2a90:	0008c604 	andeq	ip, r8, r4, lsl #12
    2a94:	10c00600 	sbcne	r0, r0, r0, lsl #12
    2a98:	57090000 	strpl	r0, [r9, -r0]
    2a9c:	000008e1 	andeq	r0, r0, r1, ror #17
    2aa0:	08e70411 	stmiaeq	r7!, {r0, r4, sl}^
    2aa4:	46150000 	ldrmi	r0, [r5], -r0
    2aa8:	f6000000 			; <UNDEFINED> instruction: 0xf6000000
    2aac:	16000008 	strne	r0, [r0], -r8
    2ab0:	0000008c 	andeq	r0, r0, ip, lsl #1
    2ab4:	03580f00 	cmpeq	r8, #0, 30
    2ab8:	0a140000 	beq	502ac0 <mailbuffer+0x4eba00>
    2abc:	00093f69 	andeq	r3, r9, r9, ror #30
    2ac0:	030b0e00 	movweq	r0, #48640	; 0xbe00
    2ac4:	6b0a0000 	blvs	282acc <mailbuffer+0x26ba0c>
    2ac8:	000008c6 	andeq	r0, r0, r6, asr #17
    2acc:	04b10e00 	ldrteq	r0, [r1], #3584	; 0xe00
    2ad0:	6c0a0000 	stcvs	0, cr0, [sl], {-0}
    2ad4:	00000944 	andeq	r0, r0, r4, asr #18
    2ad8:	03c80e04 	biceq	r0, r8, #4, 28	; 0x40
    2adc:	6d0a0000 	stcvs	0, cr0, [sl, #-0]
    2ae0:	00000944 	andeq	r0, r0, r4, asr #18
    2ae4:	032d0e08 			; <UNDEFINED> instruction: 0x032d0e08
    2ae8:	6e0a0000 	cdpvs	0, 0, cr0, cr10, cr0, {0}
    2aec:	0000008c 	andeq	r0, r0, ip, lsl #1
    2af0:	02d60e0c 	sbcseq	r0, r6, #12, 28	; 0xc0
    2af4:	6f0a0000 	svcvs	0x000a0000
    2af8:	0000008c 	andeq	r0, r0, ip, lsl #1
    2afc:	f6040010 			; <UNDEFINED> instruction: 0xf6040010
    2b00:	11000008 	tstne	r0, r8
    2b04:	00093f04 	andeq	r3, r9, r4, lsl #30
    2b08:	04c40600 	strbeq	r0, [r4], #1536	; 0x600
    2b0c:	710a0000 	mrsvc	r0, (UNDEF: 10)
    2b10:	000008f6 	strdeq	r0, [r0], -r6
    2b14:	00094a04 	andeq	r4, r9, r4, lsl #20
    2b18:	05200f00 	streq	r0, [r0, #-3840]!	; 0xfffff100
    2b1c:	0a0c0000 	beq	302b24 <mailbuffer+0x2eba64>
    2b20:	00098b73 	andeq	r8, r9, r3, ror fp
    2b24:	030b0e00 	movweq	r0, #48640	; 0xbe00
    2b28:	750a0000 	strvc	r0, [sl, #-0]
    2b2c:	000008c6 	andeq	r0, r0, r6, asr #17
    2b30:	04b10e00 	ldrteq	r0, [r1], #3584	; 0xe00
    2b34:	760a0000 	strvc	r0, [sl], -r0
    2b38:	00000944 	andeq	r0, r0, r4, asr #18
    2b3c:	03c80e04 	biceq	r0, r8, #4, 28	; 0x40
    2b40:	770a0000 	strvc	r0, [sl, -r0]
    2b44:	00000944 	andeq	r0, r0, r4, asr #18
    2b48:	38060008 	stmdacc	r6, {r3}
    2b4c:	0a000004 	beq	2b64 <_start-0x549c>
    2b50:	00095a79 	andeq	r5, r9, r9, ror sl
    2b54:	098b0400 	stmibeq	fp, {sl}
    2b58:	300f0000 	andcc	r0, pc, r0
    2b5c:	14000005 	strne	r0, [r0], #-5
    2b60:	09cc7e0a 	stmibeq	ip, {r1, r3, r9, sl, fp, ip, sp, lr}^
    2b64:	570e0000 	strpl	r0, [lr, -r0]
    2b68:	0a000004 	beq	2b80 <_start-0x5480>
    2b6c:	00005980 	andeq	r5, r0, r0, lsl #19
    2b70:	030e0000 	movweq	r0, #57344	; 0xe000
    2b74:	0a000003 	beq	2b88 <_start-0x5478>
    2b78:	0009cc81 	andeq	ip, r9, r1, lsl #25
    2b7c:	240e0400 	strcs	r0, [lr], #-1024	; 0xfffffc00
    2b80:	0a000003 	beq	2b94 <_start-0x546c>
    2b84:	00099682 	andeq	r9, r9, r2, lsl #13
    2b88:	11000800 	tstne	r0, r0, lsl #16
    2b8c:	00095504 	andeq	r5, r9, r4, lsl #10
    2b90:	09490600 	stmdbeq	r9, {r9, sl}^
    2b94:	830a0000 	movwhi	r0, #40960	; 0xa000
    2b98:	0000099b 	muleq	r0, fp, r9
    2b9c:	0009d203 	andeq	sp, r9, r3, lsl #4
    2ba0:	10110600 	andsne	r0, r1, r0, lsl #12
    2ba4:	630b0000 	movwvs	r0, #45056	; 0xb000
    2ba8:	0000008c 	andeq	r0, r0, ip, lsl #1
    2bac:	000b2d0f 	andeq	r2, fp, pc, lsl #26
    2bb0:	680b0800 	stmdavs	fp, {fp}
    2bb4:	00000a12 	andeq	r0, r0, r2, lsl sl
    2bb8:	000b800e 	andeq	r8, fp, lr
    2bbc:	466a0b00 	strbtmi	r0, [sl], -r0, lsl #22
    2bc0:	00000000 	andeq	r0, r0, r0
    2bc4:	000d8c0e 	andeq	r8, sp, lr, lsl #24
    2bc8:	c66b0b00 	strbtgt	r0, [fp], -r0, lsl #22
    2bcc:	04000008 	streq	r0, [r0], #-8
    2bd0:	0bf10600 	bleq	ffc443d8 <_estack+0xf7c343d8>
    2bd4:	6c0b0000 	stcvs	0, cr0, [fp], {-0}
    2bd8:	000009ed 	andeq	r0, r0, sp, ror #19
    2bdc:	0011b40f 	andseq	fp, r1, pc, lsl #8
    2be0:	710b0c00 	tstvc	fp, r0, lsl #24
    2be4:	00000a4e 	andeq	r0, r0, lr, asr #20
    2be8:	0013250e 	andseq	r2, r3, lr, lsl #10
    2bec:	8c730b00 			; <UNDEFINED> instruction: 0x8c730b00
    2bf0:	00000000 	andeq	r0, r0, r0
    2bf4:	0012ae0e 	andseq	sl, r2, lr, lsl #28
    2bf8:	52740b00 	rsbspl	r0, r4, #0, 22
    2bfc:	04000000 	streq	r0, [r0], #-0
    2c00:	000e4d0e 	andeq	r4, lr, lr, lsl #26
    2c04:	52750b00 	rsbspl	r0, r5, #0, 22
    2c08:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2c0c:	11790600 	cmnne	r9, r0, lsl #12
    2c10:	760b0000 	strvc	r0, [fp], -r0
    2c14:	00000a1d 	andeq	r0, r0, sp, lsl sl
    2c18:	000a4e03 	andeq	r4, sl, r3, lsl #28
    2c1c:	2c041100 	stfcss	f1, [r4], {-0}
    2c20:	03000000 	movweq	r0, #0
    2c24:	00000a5e 	andeq	r0, r0, lr, asr sl
    2c28:	00520411 	subseq	r0, r2, r1, lsl r4
    2c2c:	c20f0000 	andgt	r0, pc, #0
    2c30:	4800000d 	stmdami	r0, {r0, r2, r3}
    2c34:	0ad06601 	beq	ff41c440 <_estack+0xf740c440>
    2c38:	4e0e0000 	cdpmi	0, 0, cr0, cr14, cr0, {0}
    2c3c:	01000001 	tsteq	r0, r1
    2c40:	000ad068 	andeq	sp, sl, r8, rrx
    2c44:	660e0000 	strvs	r0, [lr], -r0
    2c48:	01000005 	tsteq	r0, r5
    2c4c:	00094a6e 	andeq	r4, r9, lr, ror #20
    2c50:	930e0400 	movwls	r0, #58368	; 0xe400
    2c54:	01000005 	tsteq	r0, r5
    2c58:	00094a6f 	andeq	r4, r9, pc, ror #20
    2c5c:	7a0e1800 	bvc	388c64 <mailbuffer+0x371ba4>
    2c60:	01000004 	tsteq	r0, r4
    2c64:	00005270 	andeq	r5, r0, r0, ror r2
    2c68:	2c0e2c00 	stccs	12, cr2, [lr], {-0}
    2c6c:	01000012 	tsteq	r0, r2, lsl r0
    2c70:	000a6971 	andeq	r6, sl, r1, ror r9
    2c74:	a50e3000 	strge	r3, [lr, #-0]
    2c78:	0100000d 	tsteq	r0, sp
    2c7c:	000ad672 	andeq	sp, sl, r2, ror r6
    2c80:	220e3400 	andcs	r3, lr, #0, 8
    2c84:	01000012 	tsteq	r0, r2, lsl r0
    2c88:	0008d686 	andeq	sp, r8, r6, lsl #13
    2c8c:	11004400 	tstne	r0, r0, lsl #8
    2c90:	00005904 	andeq	r5, r0, r4, lsl #18
    2c94:	00250b00 	eoreq	r0, r5, r0, lsl #22
    2c98:	0ae60000 	beq	ff982ca0 <_estack+0xf7972ca0>
    2c9c:	ea0c0000 	b	302ca4 <mailbuffer+0x2ebbe4>
    2ca0:	0f000000 	svceq	0x00000000
    2ca4:	101d0600 	andsne	r0, sp, r0, lsl #12
    2ca8:	93010000 	movwls	r0, #4096	; 0x1000
    2cac:	00000a6f 	andeq	r0, r0, pc, ror #20
    2cb0:	000ae603 	andeq	lr, sl, r3, lsl #12
    2cb4:	02652100 	rsbeq	r2, r5, #0, 2
    2cb8:	9f010000 	svcls	0x00010000
    2cbc:	00000b0d 	andeq	r0, r0, sp, lsl #22
    2cc0:	5d440305 	stclpl	3, cr0, [r4, #-20]	; 0xffffffec
    2cc4:	04110001 	ldreq	r0, [r1], #-1
    2cc8:	00000ae6 	andeq	r0, r0, r6, ror #21
    2ccc:	000b0704 	andeq	r0, fp, r4, lsl #14
    2cd0:	09d20b00 	ldmibeq	r2, {r8, r9, fp}^
    2cd4:	0b220000 	bleq	882cdc <mailbuffer+0x86bc1c>
    2cd8:	ea0c0000 	b	302ce0 <mailbuffer+0x2ebc20>
    2cdc:	04000000 	streq	r0, [r0], #-0
    2ce0:	0e242200 	cdpeq	2, 2, cr2, cr4, cr0, {0}
    2ce4:	a3010000 	movwge	r0, #4096	; 0x1000
    2ce8:	00000b12 	andeq	r0, r0, r2, lsl fp
    2cec:	5d480305 	stclpl	3, cr0, [r8, #-20]	; 0xffffffec
    2cf0:	81220001 			; <UNDEFINED> instruction: 0x81220001
    2cf4:	0100000e 	tsteq	r0, lr
    2cf8:	0009d2a4 	andeq	sp, r9, r4, lsr #5
    2cfc:	ac030500 	cfstr32ge	mvfx0, [r3], {-0}
    2d00:	2200015d 	andcs	r0, r0, #1073741847	; 0x40000017
    2d04:	00000e93 	muleq	r0, r3, lr
    2d08:	09d2a501 	ldmibeq	r2, {r0, r8, sl, sp, pc}^
    2d0c:	03050000 	movweq	r0, #20480	; 0x5000
    2d10:	00015dc0 	andeq	r5, r1, r0, asr #27
    2d14:	00124322 	andseq	r4, r2, r2, lsr #6
    2d18:	6ca60100 	stfvss	f0, [r6]
    2d1c:	0500000b 	streq	r0, [r0, #-11]
    2d20:	015dd403 	cmpeq	sp, r3, lsl #8
    2d24:	d2041100 	andle	r1, r4, #0, 2
    2d28:	04000009 	streq	r0, [r0], #-9
    2d2c:	00000b66 	andeq	r0, r0, r6, ror #22
    2d30:	000b6603 	andeq	r6, fp, r3, lsl #12
    2d34:	104c2200 	subne	r2, ip, r0, lsl #4
    2d38:	a7010000 	strge	r0, [r1, -r0]
    2d3c:	00000b6c 	andeq	r0, r0, ip, ror #22
    2d40:	5dd80305 	ldclpl	3, cr0, [r8, #20]
    2d44:	82220001 	eorhi	r0, r2, #1
    2d48:	0100000f 	tsteq	r0, pc
    2d4c:	0009d2a8 	andeq	sp, r9, r8, lsr #5
    2d50:	dc030500 	cfstr32le	mvfx0, [r3], {-0}
    2d54:	2200015d 	andcs	r0, r0, #1073741847	; 0x40000017
    2d58:	00000fdb 	ldrdeq	r0, [r0], -fp
    2d5c:	09d2ac01 	ldmibeq	r2, {r0, sl, fp, sp, pc}^
    2d60:	03050000 	movweq	r0, #20480	; 0x5000
    2d64:	00015df0 	strdeq	r5, [r1], -r0
    2d68:	00103222 	andseq	r3, r0, r2, lsr #4
    2d6c:	59ad0100 	stmibpl	sp!, {r8}
    2d70:	05000000 	streq	r0, [r0, #-0]
    2d74:	015e0403 	cmpeq	lr, r3, lsl #8
    2d78:	0f562200 	svceq	0x00562200
    2d7c:	b3010000 	movwlt	r0, #4096	; 0x1000
    2d80:	000009d2 	ldrdeq	r0, [r0], -r2
    2d84:	5e080305 	cdppl	3, 0, cr0, cr8, cr5, {0}
    2d88:	a1220001 			; <UNDEFINED> instruction: 0xa1220001
    2d8c:	01000013 	tsteq	r0, r3, lsl r0
    2d90:	000059be 			; <UNDEFINED> instruction: 0x000059be
    2d94:	1c030500 	cfstr32ne	mvfx0, [r3], {-0}
    2d98:	2200015e 	andcs	r0, r0, #-2147483625	; 0x80000017
    2d9c:	00001041 	andeq	r1, r0, r1, asr #32
    2da0:	08d1bf01 	ldmeq	r1, {r0, r8, r9, sl, fp, ip, sp, pc}^
    2da4:	03050000 	movweq	r0, #20480	; 0x5000
    2da8:	00015e20 	andeq	r5, r1, r0, lsr #28
    2dac:	00125522 	andseq	r5, r2, r2, lsr #10
    2db0:	52c00100 	sbcpl	r0, r0, #0, 2
    2db4:	05000000 	streq	r0, [r0, #-0]
    2db8:	015e2403 	cmpeq	lr, r3, lsl #8
    2dbc:	0ded2200 	sfmeq	f2, 2, [sp]
    2dc0:	c1010000 	mrsgt	r0, (UNDEF: 1)
    2dc4:	00000059 	andeq	r0, r0, r9, asr r0
    2dc8:	5e280305 	cdppl	3, 2, cr0, cr8, cr5, {0}
    2dcc:	12220001 	eorne	r0, r2, #1
    2dd0:	0100000e 	tsteq	r0, lr
    2dd4:	00004dc2 	andeq	r4, r0, r2, asr #27
    2dd8:	2c030500 	cfstr32cs	mvfx0, [r3], {-0}
    2ddc:	2200015e 	andcs	r0, r0, #-2147483625	; 0x80000017
    2de0:	00000eec 	andeq	r0, r0, ip, ror #29
    2de4:	0059c301 	subseq	ip, r9, r1, lsl #6
    2de8:	03050000 	movweq	r0, #20480	; 0x5000
    2dec:	00015e30 	andeq	r5, r1, r0, lsr lr
    2df0:	000ec022 	andeq	ip, lr, r2, lsr #32
    2df4:	59c40100 	stmibpl	r4, {r8}^
    2df8:	05000000 	streq	r0, [r0, #-0]
    2dfc:	015e3403 	cmpeq	lr, r3, lsl #8
    2e00:	0ff42200 	svceq	0x00f42200
    2e04:	c5010000 	strgt	r0, [r1, #-0]
    2e08:	0000004d 	andeq	r0, r0, sp, asr #32
    2e0c:	5e380305 	cdppl	3, 3, cr0, cr8, cr5, {0}
    2e10:	12220001 	eorne	r0, r2, #1
    2e14:	01000012 	tsteq	r0, r2, lsl r0
    2e18:	00004dc6 	andeq	r4, r0, r6, asr #27
    2e1c:	3c030500 	cfstr32cc	mvfx0, [r3], {-0}
    2e20:	2200015e 	andcs	r0, r0, #-2147483625	; 0x80000017
    2e24:	0000115b 	andeq	r1, r0, fp, asr r1
    2e28:	0052c701 	subseq	ip, r2, r1, lsl #14
    2e2c:	03050000 	movweq	r0, #20480	; 0x5000
    2e30:	00015e40 	andeq	r5, r1, r0, asr #28
    2e34:	00111322 	andseq	r1, r1, r2, lsr #6
    2e38:	c6c80100 	strbgt	r0, [r8], r0, lsl #2
    2e3c:	05000008 	streq	r0, [r0, #-8]
    2e40:	015cb003 	cmpeq	ip, r3
    2e44:	13432300 	movtne	r2, #13056	; 0x3300
    2e48:	29010000 	stmdbcs	r1, {}	; <UNPREDICTABLE>
    2e4c:	01348c09 	teqeq	r4, r9, lsl #24
    2e50:	00003400 	andeq	r3, r0, r0, lsl #8
    2e54:	ac9c0100 	ldfges	f0, [ip], {0}
    2e58:	2400000c 	strcs	r0, [r0], #-12
    2e5c:	000013c7 	andeq	r1, r0, r7, asr #7
    2e60:	07092901 	streq	r2, [r9, -r1, lsl #18]
    2e64:	0200000b 	andeq	r0, r0, #11
    2e68:	25007491 	strcs	r7, [r0, #-1169]	; 0xfffffb6f
    2e6c:	00000f3f 	andeq	r0, r0, pc, lsr pc
    2e70:	07086a01 	streq	r6, [r8, -r1, lsl #20]
    2e74:	dc00000b 	stcle	0, cr0, [r0], {11}
    2e78:	b0000133 	andlt	r0, r0, r3, lsr r1
    2e7c:	01000000 	mrseq	r0, (UNDEF: 0)
    2e80:	000cf49c 	muleq	ip, ip, r4
    2e84:	11282400 			; <UNDEFINED> instruction: 0x11282400
    2e88:	6a010000 	bvs	42e90 <mailbuffer+0x2bdd0>
    2e8c:	00003f08 	andeq	r3, r0, r8, lsl #30
    2e90:	6e910200 	cdpvs	2, 9, cr0, cr1, cr0, {0}
    2e94:	0012e224 	andseq	lr, r2, r4, lsr #4
    2e98:	086a0100 	stmdaeq	sl!, {r8}^
    2e9c:	00000a69 	andeq	r0, r0, r9, ror #20
    2ea0:	26689102 	strbtcs	r9, [r8], -r2, lsl #2
    2ea4:	000010ed 	andeq	r1, r0, sp, ror #1
    2ea8:	07086c01 	streq	r6, [r8, -r1, lsl #24]
    2eac:	0200000b 	andeq	r0, r0, #11
    2eb0:	23007491 	movwcs	r7, #1169	; 0x491
    2eb4:	00001382 	andeq	r1, r0, r2, lsl #7
    2eb8:	24085001 	strcs	r5, [r8], #-1
    2ebc:	b8000133 	stmdalt	r0, {r0, r1, r4, r5, r8}
    2ec0:	01000000 	mrseq	r0, (UNDEF: 0)
    2ec4:	000d1a9c 	muleq	sp, ip, sl
    2ec8:	04e12400 	strbteq	r2, [r1], #1024	; 0x400
    2ecc:	50010000 	andpl	r0, r1, r0
    2ed0:	0008c608 	andeq	ip, r8, r8, lsl #12
    2ed4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2ed8:	13052300 	movwne	r2, #21248	; 0x5300
    2edc:	2d010000 	stccs	0, cr0, [r1, #-0]
    2ee0:	01326808 	teqeq	r2, r8, lsl #16
    2ee4:	0000bc00 	andeq	fp, r0, r0, lsl #24
    2ee8:	639c0100 	orrsvs	r0, ip, #0, 2
    2eec:	2700000d 	strcs	r0, [r0, -sp]
    2ef0:	00013274 	andeq	r3, r1, r4, ror r2
    2ef4:	00000098 	muleq	r0, r8, r0
    2ef8:	0010d126 	andseq	sp, r0, r6, lsr #2
    2efc:	08310100 	ldmdaeq	r1!, {r8}
    2f00:	00000046 	andeq	r0, r0, r6, asr #32
    2f04:	27749102 	ldrbcs	r9, [r4, -r2, lsl #2]!
    2f08:	000132b4 			; <UNDEFINED> instruction: 0x000132b4
    2f0c:	00000058 	andeq	r0, r0, r8, asr r0
    2f10:	0013c726 	andseq	ip, r3, r6, lsr #14
    2f14:	083d0100 	ldmdaeq	sp!, {r8}
    2f18:	00000b07 	andeq	r0, r0, r7, lsl #22
    2f1c:	00709102 	rsbseq	r9, r0, r2, lsl #2
    2f20:	a9230000 	stmdbge	r3!, {}	; <UNPREDICTABLE>
    2f24:	0100000f 	tsteq	r0, pc
    2f28:	31a8080d 			; <UNDEFINED> instruction: 0x31a8080d
    2f2c:	00c00001 	sbceq	r0, r0, r1
    2f30:	9c010000 	stcls	0, cr0, [r1], {-0}
    2f34:	00000d89 	andeq	r0, r0, r9, lsl #27
    2f38:	00047a26 	andeq	r7, r4, r6, lsr #20
    2f3c:	080f0100 	stmdaeq	pc, {r8}	; <UNPREDICTABLE>
    2f40:	00000052 	andeq	r0, r0, r2, asr r0
    2f44:	00749102 	rsbseq	r9, r4, r2, lsl #2
    2f48:	00119a23 	andseq	r9, r1, r3, lsr #20
    2f4c:	07b70100 	ldreq	r0, [r7, r0, lsl #2]!
    2f50:	000130e8 	andeq	r3, r1, r8, ror #1
    2f54:	000000c0 	andeq	r0, r0, r0, asr #1
    2f58:	0deb9c01 	stcleq	12, cr9, [fp, #4]!
    2f5c:	c7240000 	strgt	r0, [r4, -r0]!
    2f60:	01000013 	tsteq	r0, r3, lsl r0
    2f64:	0b0707b7 	bleq	1c4e48 <mailbuffer+0x1add88>
    2f68:	91020000 	mrsls	r0, (UNDEF: 2)
    2f6c:	114a2474 	hvcne	41540	; 0xa244
    2f70:	b7010000 	strlt	r0, [r1, -r0]
    2f74:	000a6407 	andeq	r6, sl, r7, lsl #8
    2f78:	70910200 	addsvc	r0, r1, r0, lsl #4
    2f7c:	00047a24 	andeq	r7, r4, r4, lsr #20
    2f80:	07b70100 	ldreq	r0, [r7, r0, lsl #2]!
    2f84:	00000052 	andeq	r0, r0, r2, asr r0
    2f88:	246c9102 	strbtcs	r9, [ip], #-258	; 0xfffffefe
    2f8c:	00001379 	andeq	r1, r0, r9, ror r3
    2f90:	f107b701 			; <UNDEFINED> instruction: 0xf107b701
    2f94:	0200000d 	andeq	r0, r0, #13
    2f98:	28246891 	stmdacs	r4!, {r0, r4, r7, fp, sp, lr}
    2f9c:	01000011 	tsteq	r0, r1, lsl r0
    2fa0:	003f07b7 	ldrhteq	r0, [pc], -r7
    2fa4:	91020000 	mrsls	r0, (UNDEF: 2)
    2fa8:	04110000 	ldreq	r0, [r1], #-0
    2fac:	00000a59 	andeq	r0, r0, r9, asr sl
    2fb0:	000deb03 	andeq	lr, sp, r3, lsl #22
    2fb4:	10b42300 	adcsne	r2, r4, r0, lsl #6
    2fb8:	76010000 	strvc	r0, [r1], -r0
    2fbc:	0130b807 	teqeq	r0, r7, lsl #16
    2fc0:	00003000 	andeq	r3, r0, r0
    2fc4:	1c9c0100 	ldfnes	f0, [ip], {0}
    2fc8:	2400000e 	strcs	r0, [r0], #-14
    2fcc:	0000013b 	andeq	r0, r0, fp, lsr r1
    2fd0:	8c077601 	stchi	6, cr7, [r7], {1}
    2fd4:	02000000 	andeq	r0, r0, #0
    2fd8:	28007491 	stmdacs	r0, {r0, r4, r7, sl, ip, sp, lr}
    2fdc:	000012d1 	ldrdeq	r1, [r0], -r1	; <UNPREDICTABLE>
    2fe0:	90074201 	andls	r4, r7, r1, lsl #4
    2fe4:	28000130 	stmdacs	r0, {r4, r5, r8}
    2fe8:	01000000 	mrseq	r0, (UNDEF: 0)
    2fec:	1267299c 	rsbne	r2, r7, #156, 18	; 0x270000
    2ff0:	14010000 	strne	r0, [r1], #-0
    2ff4:	00004607 	andeq	r4, r0, r7, lsl #12
    2ff8:	012f9c00 			; <UNDEFINED> instruction: 0x012f9c00
    2ffc:	0000f400 	andeq	pc, r0, r0, lsl #8
    3000:	769c0100 	ldrvc	r0, [ip], r0, lsl #2
    3004:	2400000e 	strcs	r0, [r0], #-14
    3008:	00001151 	andeq	r1, r0, r1, asr r1
    300c:	7c071401 	cfstrsvc	mvf1, [r7], {1}
    3010:	0200000e 	andeq	r0, r0, #14
    3014:	24246c91 	strtcs	r6, [r4], #-3217	; 0xfffff36f
    3018:	01000010 	tsteq	r0, r0, lsl r0
    301c:	0e870714 	mcreq	7, 4, r0, cr7, cr4, {0}
    3020:	91020000 	mrsls	r0, (UNDEF: 2)
    3024:	0bff2668 	bleq	fffcc9cc <_estack+0xf7fbc9cc>
    3028:	16010000 	strne	r0, [r1], -r0
    302c:	00004607 	andeq	r4, r0, r7, lsl #12
    3030:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3034:	12041100 	andne	r1, r4, #0, 2
    3038:	0300000a 	movweq	r0, #10
    303c:	00000e76 	andeq	r0, r0, r6, ror lr
    3040:	08c60411 	stmiaeq	r6, {r0, r4, sl}^
    3044:	81030000 	mrshi	r0, (UNDEF: 3)
    3048:	2a00000e 	bcs	3088 <_start-0x4f78>
    304c:	00000e5a 	andeq	r0, r0, sl, asr lr
    3050:	54070c01 	strpl	r0, [r7], #-3073	; 0xfffff3ff
    3054:	4800012f 	stmdami	r0, {r0, r1, r2, r3, r5, r8}
    3058:	01000000 	mrseq	r0, (UNDEF: 0)
    305c:	000eb29c 	muleq	lr, ip, r2
    3060:	11512400 	cmpne	r1, r0, lsl #8
    3064:	0c010000 	stceq	0, cr0, [r1], {-0}
    3068:	000e7c07 	andeq	r7, lr, r7, lsl #24
    306c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3070:	108e2900 	addne	r2, lr, r0, lsl #18
    3074:	d9010000 	stmdble	r1, {}	; <UNPREDICTABLE>
    3078:	00004606 	andeq	r4, r0, r6, lsl #12
    307c:	012e3c00 			; <UNDEFINED> instruction: 0x012e3c00
    3080:	00011800 	andeq	r1, r1, r0, lsl #16
    3084:	fa9c0100 	blx	fe70348c <_estack+0xf66f348c>
    3088:	2400000e 	strcs	r0, [r0], #-14
    308c:	000004b8 			; <UNDEFINED> instruction: 0x000004b8
    3090:	0006d901 	andeq	sp, r6, r1, lsl #18
    3094:	0200000f 	andeq	r0, r0, #15
    3098:	01266c91 			; <UNDEFINED> instruction: 0x01266c91
    309c:	0100000f 	tsteq	r0, pc
    30a0:	0b0706db 	bleq	1c4c14 <mailbuffer+0x1adb54>
    30a4:	91020000 	mrsls	r0, (UNDEF: 2)
    30a8:	0bff2670 	bleq	fffcca70 <_estack+0xf7fbca70>
    30ac:	dc010000 	stcle	0, cr0, [r1], {-0}
    30b0:	00004606 	andeq	r4, r0, r6, lsl #12
    30b4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    30b8:	dd041100 	stfles	f1, [r4, #-0]
    30bc:	03000009 	movweq	r0, #9
    30c0:	00000efa 	strdeq	r0, [r0], -sl
    30c4:	0010662b 	andseq	r6, r0, fp, lsr #12
    30c8:	06870100 	streq	r0, [r7], r0, lsl #2
    30cc:	00012da0 	andeq	r2, r1, r0, lsr #27
    30d0:	0000009c 	muleq	r0, ip, r0
    30d4:	0f499c01 	svceq	0x00499c01
    30d8:	b8240000 	stmdalt	r4!, {}	; <UNPREDICTABLE>
    30dc:	01000004 	tsteq	r0, r4
    30e0:	0f000687 	svceq	0x00000687
    30e4:	91020000 	mrsls	r0, (UNDEF: 2)
    30e8:	1025246c 	eorne	r2, r5, ip, ror #8
    30ec:	87010000 	strhi	r0, [r1, -r0]
    30f0:	0008c606 	andeq	ip, r8, r6, lsl #12
    30f4:	68910200 	ldmvs	r1, {r9}
    30f8:	0004e126 	andeq	lr, r4, r6, lsr #2
    30fc:	06890100 	streq	r0, [r9], r0, lsl #2
    3100:	000008c6 	andeq	r0, r0, r6, asr #17
    3104:	00749102 	rsbseq	r9, r4, r2, lsl #2
    3108:	0011ff2a 	andseq	pc, r1, sl, lsr #30
    310c:	064b0100 	strbeq	r0, [fp], -r0, lsl #2
    3110:	00012c98 	muleq	r1, r8, ip
    3114:	00000108 	andeq	r0, r0, r8, lsl #2
    3118:	0f799c01 	svceq	0x00799c01
    311c:	04270000 	strteq	r0, [r7], #-0
    3120:	7800012d 	stmdavc	r0, {r0, r2, r3, r5, r8}
    3124:	26000000 	strcs	r0, [r0], -r0
    3128:	00000363 	andeq	r0, r0, r3, ror #6
    312c:	71067c01 	tstvc	r6, r1, lsl #24
    3130:	0200000b 	andeq	r0, r0, #11
    3134:	00007491 	muleq	r0, r1, r4
    3138:	0011cf29 	andseq	ip, r1, r9, lsr #30
    313c:	062d0100 	strteq	r0, [sp], -r0, lsl #2
    3140:	00000046 	andeq	r0, r0, r6, asr #32
    3144:	00012c1c 	andeq	r2, r1, ip, lsl ip
    3148:	0000007c 	andeq	r0, r0, ip, ror r0
    314c:	0fd09c01 	svceq	0x00d09c01
    3150:	88240000 	stmdahi	r4!, {}	; <UNPREDICTABLE>
    3154:	01000010 	tsteq	r0, r0, lsl r0
    3158:	09e2062d 	stmibeq	r2!, {r0, r2, r3, r5, r9, sl}^
    315c:	91020000 	mrsls	r0, (UNDEF: 2)
    3160:	136d246c 	cmnne	sp, #108, 8	; 0x6c000000
    3164:	2d010000 	stccs	0, cr0, [r1, #-0]
    3168:	00008c06 	andeq	r8, r0, r6, lsl #24
    316c:	68910200 	ldmvs	r1, {r9}
    3170:	0013c826 	andseq	ip, r3, r6, lsr #16
    3174:	062f0100 	strteq	r0, [pc], -r0, lsl #2
    3178:	00000b07 	andeq	r0, r0, r7, lsl #22
    317c:	26749102 	ldrbtcs	r9, [r4], -r2, lsl #2
    3180:	00000bff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    3184:	46063001 	strmi	r3, [r6], -r1
    3188:	02000000 	andeq	r0, r0, #0
    318c:	29007091 	stmdbcs	r0, {r0, r4, r7, ip, sp, lr}
    3190:	00000fc0 	andeq	r0, r0, r0, asr #31
    3194:	d6061001 	strle	r1, [r6], -r1
    3198:	c0000008 	andgt	r0, r0, r8
    319c:	5c00012b 	stfpls	f0, [r0], {43}	; 0x2b
    31a0:	01000000 	mrseq	r0, (UNDEF: 0)
    31a4:	0010189c 	mulseq	r0, ip, r8
    31a8:	10882400 	addne	r2, r8, r0, lsl #8
    31ac:	10010000 	andne	r0, r1, r0
    31b0:	0009e206 	andeq	lr, r9, r6, lsl #4
    31b4:	6c910200 	lfmvs	f0, 4, [r1], {0}
    31b8:	0013c826 	andseq	ip, r3, r6, lsr #16
    31bc:	06120100 	ldreq	r0, [r2], -r0, lsl #2
    31c0:	00000b07 	andeq	r0, r0, r7, lsl #22
    31c4:	26749102 	ldrbtcs	r9, [r4], -r2, lsl #2
    31c8:	00000bff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    31cc:	d6061301 	strle	r1, [r6], -r1, lsl #6
    31d0:	02000008 	andeq	r0, r0, #8
    31d4:	2b007091 	blcs	1f420 <mailbuffer+0x8360>
    31d8:	00000ea5 	andeq	r0, r0, r5, lsr #29
    31dc:	6405f601 	strvs	pc, [r5], #-1537	; 0xfffff9ff
    31e0:	5c00012b 	stfpls	f0, [r0], {43}	; 0x2b
    31e4:	01000000 	mrseq	r0, (UNDEF: 0)
    31e8:	00105c9c 	mulseq	r0, ip, ip
    31ec:	10882400 	addne	r2, r8, r0, lsl #8
    31f0:	f6010000 			; <UNDEFINED> instruction: 0xf6010000
    31f4:	0009e205 	andeq	lr, r9, r5, lsl #4
    31f8:	6c910200 	lfmvs	f0, 4, [r1], {0}
    31fc:	0010de24 	andseq	sp, r0, r4, lsr #28
    3200:	05f60100 	ldrbeq	r0, [r6, #256]!	; 0x100
    3204:	000008d6 	ldrdeq	r0, [r0], -r6
    3208:	26689102 	strbtcs	r9, [r8], -r2, lsl #2
    320c:	000013c8 	andeq	r1, r0, r8, asr #7
    3210:	0705f801 	streq	pc, [r5, -r1, lsl #16]
    3214:	0200000b 	andeq	r0, r0, #11
    3218:	2b007491 	blcs	20464 <mailbuffer+0x93a4>
    321c:	00001187 	andeq	r1, r0, r7, lsl #3
    3220:	4805a901 	stmdami	r5, {r0, r8, fp, sp, pc}
    3224:	1c000129 	stfnes	f0, [r0], {41}	; 0x29
    3228:	01000002 	tsteq	r0, r2
    322c:	0010b89c 	mulseq	r0, ip, r8
    3230:	13c72600 	bicne	r2, r7, #0, 12
    3234:	ab010000 	blge	4323c <mailbuffer+0x2c17c>
    3238:	000b0705 	andeq	r0, fp, r5, lsl #14
    323c:	70910200 	addsvc	r0, r1, r0, lsl #4
    3240:	0129882c 			; <UNDEFINED> instruction: 0x0129882c
    3244:	00008400 	andeq	r8, r0, r0, lsl #8
    3248:	00109e00 	andseq	r9, r0, r0, lsl #28
    324c:	02b42600 	adcseq	r2, r4, #0, 12
    3250:	b5010000 	strlt	r0, [r1, #-0]
    3254:	000b6605 	andeq	r6, fp, r5, lsl #12
    3258:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    325c:	2a0c2700 	bcs	30ce64 <mailbuffer+0x2f5da4>
    3260:	01100001 	tsteq	r0, r1
    3264:	0b260000 	bleq	98326c <mailbuffer+0x96c1ac>
    3268:	01000003 	tsteq	r0, r3
    326c:	08c605d6 	stmiaeq	r6, {r1, r2, r4, r6, r7, r8, sl}^
    3270:	91020000 	mrsls	r0, (UNDEF: 2)
    3274:	2d00006c 	stccs	0, cr0, [r0, #-432]	; 0xfffffe50
    3278:	00000dd6 	ldrdeq	r0, [r0], -r6
    327c:	5204f701 	andpl	pc, r4, #262144	; 0x40000
    3280:	24000000 	strcs	r0, [r0], #-0
    3284:	24000129 	strcs	r0, [r0], #-297	; 0xfffffed7
    3288:	01000000 	mrseq	r0, (UNDEF: 0)
    328c:	0f692e9c 	svceq	0x00692e9c
    3290:	ea010000 	b	43298 <mailbuffer+0x2c1d8>
    3294:	0008c604 	andeq	ip, r8, r4, lsl #12
    3298:	0128ec00 			; <UNDEFINED> instruction: 0x0128ec00
    329c:	00003800 	andeq	r3, r0, r0, lsl #16
    32a0:	079c0100 	ldreq	r0, [ip, r0, lsl #2]
    32a4:	26000011 			; <UNDEFINED> instruction: 0x26000011
    32a8:	00000bff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    32ac:	c604ec01 	strgt	lr, [r4], -r1, lsl #24
    32b0:	02000008 	andeq	r0, r0, #8
    32b4:	a4267091 	strtge	r7, [r6], #-145	; 0xffffff6f
    32b8:	0100000b 	tsteq	r0, fp
    32bc:	005204ed 	subseq	r0, r2, sp, ror #9
    32c0:	91020000 	mrsls	r0, (UNDEF: 2)
    32c4:	01290074 			; <UNDEFINED> instruction: 0x01290074
    32c8:	01000011 	tsteq	r0, r1, lsl r0
    32cc:	08c604db 	stmiaeq	r6, {r0, r1, r3, r4, r6, r7, sl}^
    32d0:	28b80000 	ldmcs	r8!, {}	; <UNPREDICTABLE>
    32d4:	00340001 	eorseq	r0, r4, r1
    32d8:	9c010000 	stcls	0, cr0, [r1], {-0}
    32dc:	00001131 	andeq	r1, r0, r1, lsr r1
    32e0:	00113526 	andseq	r3, r1, r6, lsr #10
    32e4:	04dd0100 	ldrbeq	r0, [sp], #256	; 0x100
    32e8:	000008c6 	andeq	r0, r0, r6, asr #17
    32ec:	00749102 	rsbseq	r9, r4, r2, lsl #2
    32f0:	00123429 	andseq	r3, r2, r9, lsr #8
    32f4:	04840100 	streq	r0, [r4], #256	; 0x100
    32f8:	00000046 	andeq	r0, r0, r6, asr #32
    32fc:	00012714 	andeq	r2, r1, r4, lsl r7
    3300:	000001a4 	andeq	r0, r0, r4, lsr #3
    3304:	11829c01 	orrne	r9, r2, r1, lsl #24
    3308:	c7260000 	strgt	r0, [r6, -r0]!
    330c:	01000013 	tsteq	r0, r3, lsl r0
    3310:	0b070486 	bleq	1c4530 <mailbuffer+0x1ad470>
    3314:	54010000 	strpl	r0, [r1], #-0
    3318:	00135d26 	andseq	r5, r3, r6, lsr #26
    331c:	04870100 	streq	r0, [r7], #256	; 0x100
    3320:	00000046 	andeq	r0, r0, r6, asr #32
    3324:	276c9102 	strbcs	r9, [ip, -r2, lsl #2]!
    3328:	00012760 	andeq	r2, r1, r0, ror #14
    332c:	00000124 	andeq	r0, r0, r4, lsr #2
    3330:	000edd26 	andeq	sp, lr, r6, lsr #26
    3334:	049a0100 	ldreq	r0, [sl], #256	; 0x100
    3338:	00000046 	andeq	r0, r0, r6, asr #32
    333c:	00689102 	rsbeq	r9, r8, r2, lsl #2
    3340:	10012800 	andne	r2, r1, r0, lsl #16
    3344:	7c010000 	stcvc	0, cr0, [r1], {-0}
    3348:	0126e404 			; <UNDEFINED> instruction: 0x0126e404
    334c:	00003000 	andeq	r3, r0, r0
    3350:	2f9c0100 	svccs	0x009c0100
    3354:	00000db0 			; <UNDEFINED> instruction: 0x00000db0
    3358:	ac047101 	stfges	f7, [r4], {1}
    335c:	38000126 	stmdacc	r0, {r1, r2, r5, r8}
    3360:	01000000 	mrseq	r0, (UNDEF: 0)
    3364:	12f12b9c 	rscsne	r2, r1, #156, 22	; 0x27000
    3368:	30010000 	andcc	r0, r1, r0
    336c:	01261004 			; <UNDEFINED> instruction: 0x01261004
    3370:	00009c00 	andeq	r9, r0, r0, lsl #24
    3374:	cc9c0100 	ldfgts	f0, [ip], {0}
    3378:	26000011 			; <UNDEFINED> instruction: 0x26000011
    337c:	00000bff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    3380:	46043201 	strmi	r3, [r4], -r1, lsl #4
    3384:	02000000 	andeq	r0, r0, #0
    3388:	29007491 	stmdbcs	r0, {r0, r4, r7, sl, ip, sp, lr}
    338c:	000012be 			; <UNDEFINED> instruction: 0x000012be
    3390:	46040201 	strmi	r0, [r4], -r1, lsl #4
    3394:	f4000000 	vst4.8	{d0-d3}, [r0], r0
    3398:	1c000124 	stfnes	f0, [r0], {36}	; 0x24
    339c:	01000001 	tsteq	r0, r1
    33a0:	0012239c 	mulseq	r2, ip, r3
    33a4:	0ece2400 	cdpeq	4, 12, cr2, cr14, cr0, {0}
    33a8:	02010000 	andeq	r0, r1, #0
    33ac:	0009e204 	andeq	lr, r9, r4, lsl #4
    33b0:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    33b4:	000edd26 	andeq	sp, lr, r6, lsr #26
    33b8:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    33bc:	00000046 	andeq	r0, r0, r6, asr #32
    33c0:	26749102 	ldrbtcs	r9, [r4], -r2, lsl #2
    33c4:	000013c7 	andeq	r1, r0, r7, asr #7
    33c8:	07040501 	streq	r0, [r4, -r1, lsl #10]
    33cc:	0200000b 	andeq	r0, r0, #11
    33d0:	a4267091 	strtge	r7, [r6], #-145	; 0xffffff6f
    33d4:	0100000b 	tsteq	r0, fp
    33d8:	00520406 	subseq	r0, r2, r6, lsl #8
    33dc:	91020000 	mrsls	r0, (UNDEF: 2)
    33e0:	cd2b006c 	stcgt	0, cr0, [fp, #-432]!	; 0xfffffe50
    33e4:	01000013 	tsteq	r0, r3, lsl r0
    33e8:	23fc03d5 	mvnscs	r0, #1409286147	; 0x54000003
    33ec:	00f80001 	rscseq	r0, r8, r1
    33f0:	9c010000 	stcls	0, cr0, [r1], {-0}
    33f4:	00001258 	andeq	r1, r0, r8, asr r2
    33f8:	000ece24 	andeq	ip, lr, r4, lsr #28
    33fc:	03d50100 	bicseq	r0, r5, #0, 2
    3400:	000009e2 	andeq	r0, r0, r2, ror #19
    3404:	266c9102 	strbtcs	r9, [ip], -r2, lsl #2
    3408:	000013c7 	andeq	r1, r0, r7, asr #7
    340c:	0703d701 	streq	sp, [r3, -r1, lsl #14]
    3410:	0200000b 	andeq	r0, r0, #11
    3414:	2e007491 	mcrcs	4, 0, r7, cr0, cr1, {4}
    3418:	00000f94 	muleq	r0, r4, pc	; <UNPREDICTABLE>
    341c:	4603b301 	strmi	fp, [r3], -r1, lsl #6
    3420:	80000000 	andhi	r0, r0, r0
    3424:	7c000123 	stfvcs	f0, [r0], {35}	; 0x23
    3428:	01000000 	mrseq	r0, (UNDEF: 0)
    342c:	0012a09c 	mulseq	r2, ip, r0
    3430:	10882400 	addne	r2, r8, r0, lsl #8
    3434:	b3010000 	movwlt	r0, #4096	; 0x1000
    3438:	0009e203 	andeq	lr, r9, r3, lsl #4
    343c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    3440:	000bff26 	andeq	pc, fp, r6, lsr #30
    3444:	03b50100 			; <UNDEFINED> instruction: 0x03b50100
    3448:	00000046 	andeq	r0, r0, r6, asr #32
    344c:	26749102 	ldrbtcs	r9, [r4], -r2, lsl #2
    3450:	000013c7 	andeq	r1, r0, r7, asr #7
    3454:	a603b601 	strge	fp, [r3], -r1, lsl #12
    3458:	02000012 	andeq	r0, r0, #18
    345c:	11007091 	swpne	r7, r1, [r0]
    3460:	000af104 	andeq	pc, sl, r4, lsl #2
    3464:	12a00300 	adcne	r0, r0, #0, 6
    3468:	502b0000 	eorpl	r0, fp, r0
    346c:	01000013 	tsteq	r0, r3, lsl r0
    3470:	227c0373 	rsbscs	r0, ip, #-872415231	; 0xcc000001
    3474:	01040001 	tsteq	r4, r1
    3478:	9c010000 	stcls	0, cr0, [r1], {-0}
    347c:	000012e0 	andeq	r1, r0, r0, ror #5
    3480:	00127c24 	andseq	r7, r2, r4, lsr #24
    3484:	03730100 	cmneq	r3, #0, 2
    3488:	000009e2 	andeq	r0, r0, r2, ror #19
    348c:	266c9102 	strbtcs	r9, [ip], -r2, lsl #2
    3490:	000013c7 	andeq	r1, r0, r7, asr #7
    3494:	07037501 	streq	r7, [r3, -r1, lsl #10]
    3498:	0200000b 	andeq	r0, r0, #11
    349c:	2b007491 	blcs	206e8 <mailbuffer+0x9628>
    34a0:	00001168 	andeq	r1, r0, r8, ror #2
    34a4:	d4030701 	strle	r0, [r3], #-1793	; 0xfffff8ff
    34a8:	a8000120 	stmdage	r0, {r5, r8}
    34ac:	01000001 	tsteq	r0, r1
    34b0:	0013429c 	mulseq	r3, ip, r2
    34b4:	10872400 	addne	r2, r7, r0, lsl #8
    34b8:	07010000 	streq	r0, [r1, -r0]
    34bc:	0009e203 	andeq	lr, r9, r3, lsl #4
    34c0:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    34c4:	00113c24 	andseq	r3, r1, r4, lsr #24
    34c8:	03070100 	movweq	r0, #28928	; 0x7100
    34cc:	00000052 	andeq	r0, r0, r2, asr r0
    34d0:	26609102 	strbtcs	r9, [r0], -r2, lsl #2
    34d4:	000013c7 	andeq	r1, r0, r7, asr #7
    34d8:	07030901 	streq	r0, [r3, -r1, lsl #18]
    34dc:	0200000b 	andeq	r0, r0, #11
    34e0:	6f267091 	svcvs	0x00267091
    34e4:	0100000e 	tsteq	r0, lr
    34e8:	0052030a 	subseq	r0, r2, sl, lsl #6
    34ec:	91020000 	mrsls	r0, (UNDEF: 2)
    34f0:	0edd266c 	cdpeq	6, 13, cr2, cr13, cr12, {3}
    34f4:	0b010000 	bleq	434fc <mailbuffer+0x2c43c>
    34f8:	00004603 	andeq	r4, r0, r3, lsl #12
    34fc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3500:	0e002900 	vmlaeq.f16	s4, s0, s0	; <UNPREDICTABLE>
    3504:	f1010000 	setend	le
    3508:	00005202 	andeq	r5, r0, r2, lsl #4
    350c:	01207c00 			; <UNDEFINED> instruction: 0x01207c00
    3510:	00005800 	andeq	r5, r0, r0, lsl #16
    3514:	8a9c0100 	bhi	fe70391c <_estack+0xf66f391c>
    3518:	24000013 	strcs	r0, [r0], #-19	; 0xffffffed
    351c:	00001087 	andeq	r1, r0, r7, lsl #1
    3520:	e202f101 	and	pc, r2, #1073741824	; 0x40000000
    3524:	02000009 	andeq	r0, r0, #9
    3528:	c7266c91 			; <UNDEFINED> instruction: 0xc7266c91
    352c:	01000013 	tsteq	r0, r3, lsl r0
    3530:	0b0702f3 	bleq	1c4104 <mailbuffer+0x1ad044>
    3534:	91020000 	mrsls	r0, (UNDEF: 2)
    3538:	0bfe2674 	bleq	fff8cf10 <_estack+0xf7f7cf10>
    353c:	f4010000 	vst4.8	{d0-d3}, [r1], r0
    3540:	00005202 	andeq	r5, r0, r2, lsl #4
    3544:	70910200 	addsvc	r0, r1, r0, lsl #4
    3548:	107c2b00 	rsbsne	r2, ip, r0, lsl #22
    354c:	c3010000 	movwgt	r0, #4096	; 0x1000
    3550:	011ff802 	tsteq	pc, r2, lsl #16	; <UNPREDICTABLE>
    3554:	00008400 	andeq	r8, r0, r0, lsl #8
    3558:	ce9c0100 	fmlgte	f0, f4, f0
    355c:	24000013 	strcs	r0, [r0], #-19	; 0xffffffed
    3560:	00000316 	andeq	r0, r0, r6, lsl r3
    3564:	c602c301 	strgt	ip, [r2], -r1, lsl #6
    3568:	02000008 	andeq	r0, r0, #8
    356c:	e1266c91 			; <UNDEFINED> instruction: 0xe1266c91
    3570:	01000004 	tsteq	r0, r4
    3574:	08c602c5 	stmiaeq	r6, {r0, r2, r6, r7, r9}^
    3578:	91020000 	mrsls	r0, (UNDEF: 2)
    357c:	135d2670 	cmpne	sp, #112, 12	; 0x7000000
    3580:	c6010000 	strgt	r0, [r1], -r0
    3584:	00004602 	andeq	r4, r0, r2, lsl #12
    3588:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    358c:	13332b00 	teqne	r3, #0, 22
    3590:	82010000 	andhi	r0, r1, #0
    3594:	011ee802 	tsteq	lr, r2, lsl #16
    3598:	00011000 	andeq	r1, r1, r0
    359c:	309c0100 	addscc	r0, ip, r0, lsl #2
    35a0:	24000014 	strcs	r0, [r0], #-20	; 0xffffffec
    35a4:	0000128c 	andeq	r1, r0, ip, lsl #5
    35a8:	87028201 	strhi	r8, [r2, -r1, lsl #4]
    35ac:	0200000e 	andeq	r0, r0, #14
    35b0:	b8246491 	stmdalt	r4!, {r0, r4, r7, sl, sp, lr}
    35b4:	01000013 	tsteq	r0, r3, lsl r0
    35b8:	08c60282 	stmiaeq	r6, {r1, r7, r9}^
    35bc:	91020000 	mrsls	r0, (UNDEF: 2)
    35c0:	04e12660 	strbteq	r2, [r1], #1632	; 0x660
    35c4:	84010000 	strhi	r0, [r1], #-0
    35c8:	0008c602 	andeq	ip, r8, r2, lsl #12
    35cc:	70910200 	addsvc	r0, r1, r0, lsl #4
    35d0:	00135d26 	andseq	r5, r3, r6, lsr #26
    35d4:	02850100 	addeq	r0, r5, #0, 2
    35d8:	00000046 	andeq	r0, r0, r6, asr #32
    35dc:	266c9102 	strbtcs	r9, [ip], -r2, lsl #2
    35e0:	000010a7 	andeq	r1, r0, r7, lsr #1
    35e4:	46028501 	strmi	r8, [r2], -r1, lsl #10
    35e8:	02000000 	andeq	r0, r0, #0
    35ec:	2b007491 	blcs	20838 <mailbuffer+0x9778>
    35f0:	000011c3 	andeq	r1, r0, r3, asr #3
    35f4:	e8024001 	stmda	r2, {r0, lr}
    35f8:	0000011d 	andeq	r0, r0, sp, lsl r1
    35fc:	01000001 	tsteq	r0, r1
    3600:	0014659c 	mulseq	r4, ip, r5
    3604:	129f2400 	addsne	r2, pc, #0, 8
    3608:	40010000 	andmi	r0, r1, r0
    360c:	0009e202 	andeq	lr, r9, r2, lsl #4
    3610:	6c910200 	lfmvs	f0, 4, [r1], {0}
    3614:	0013c726 	andseq	ip, r3, r6, lsr #14
    3618:	02420100 	subeq	r0, r2, #0, 2
    361c:	00000b07 	andeq	r0, r0, r7, lsl #22
    3620:	00749102 	rsbseq	r9, r4, r2, lsl #2
    3624:	0011ec29 	andseq	lr, r1, r9, lsr #24
    3628:	019b0100 	orrseq	r0, fp, r0, lsl #2
    362c:	00000046 	andeq	r0, r0, r6, asr #32
    3630:	00011ba0 	andeq	r1, r1, r0, lsr #23
    3634:	00000248 	andeq	r0, r0, r8, asr #4
    3638:	152f9c01 	strne	r9, [pc, #-3073]!	; 2a3f <_start-0x55c1>
    363c:	f6240000 			; <UNDEFINED> instruction: 0xf6240000
    3640:	01000010 	tsteq	r0, r0, lsl r0
    3644:	08aa019b 	stmiaeq	sl!, {r0, r1, r3, r4, r7, r8}
    3648:	91020000 	mrsls	r0, (UNDEF: 2)
    364c:	114a2464 	cmpne	sl, r4, ror #8
    3650:	9b010000 	blls	43658 <mailbuffer+0x2c598>
    3654:	000a6401 	andeq	r6, sl, r1, lsl #8
    3658:	60910200 	addsvs	r0, r1, r0, lsl #4
    365c:	00112824 	andseq	r2, r1, r4, lsr #16
    3660:	019b0100 	orrseq	r0, fp, r0, lsl #2
    3664:	0000003f 	andeq	r0, r0, pc, lsr r0
    3668:	245e9102 	ldrbcs	r9, [lr], #-258	; 0xfffffefe
    366c:	0000013b 	andeq	r0, r0, fp, lsr r1
    3670:	8c019b01 			; <UNDEFINED> instruction: 0x8c019b01
    3674:	02000000 	andeq	r0, r0, #0
    3678:	7a245891 	bvc	9198c4 <mailbuffer+0x902804>
    367c:	01000004 	tsteq	r0, r4
    3680:	0052019b 			; <UNDEFINED> instruction: 0x0052019b
    3684:	91020000 	mrsls	r0, (UNDEF: 2)
    3688:	13d92400 	bicsne	r2, r9, #0, 8
    368c:	9b010000 	blls	43694 <mailbuffer+0x2c5d4>
    3690:	00152f01 	andseq	r2, r5, r1, lsl #30
    3694:	04910200 	ldreq	r0, [r1], #512	; 0x200
    3698:	0012e224 	andseq	lr, r2, r4, lsr #4
    369c:	019b0100 	orrseq	r0, fp, r0, lsl #2
    36a0:	00000a69 	andeq	r0, r0, r9, ror #20
    36a4:	24089102 	strcs	r9, [r8], #-258	; 0xfffffefe
    36a8:	00001379 	andeq	r1, r0, r9, ror r3
    36ac:	f1019b01 			; <UNDEFINED> instruction: 0xf1019b01
    36b0:	0200000d 	andeq	r0, r0, #13
    36b4:	ff260c91 			; <UNDEFINED> instruction: 0xff260c91
    36b8:	0100000b 	tsteq	r0, fp
    36bc:	0046019d 	umaaleq	r0, r6, sp, r1
    36c0:	91020000 	mrsls	r0, (UNDEF: 2)
    36c4:	10ed2674 	rscne	r2, sp, r4, ror r6
    36c8:	9e010000 	cdpls	0, 0, cr0, cr1, cr0, {0}
    36cc:	000b0701 	andeq	r0, fp, r1, lsl #14
    36d0:	70910200 	addsvc	r0, r1, r0, lsl #4
    36d4:	011bdc27 	tsteq	fp, r7, lsr #24
    36d8:	00019c00 	andeq	r9, r1, r0, lsl #24
    36dc:	014e2600 	cmpeq	lr, r0, lsl #12
    36e0:	a9010000 	stmdbge	r1, {}	; <UNPREDICTABLE>
    36e4:	000a6901 	andeq	r6, sl, r1, lsl #18
    36e8:	6c910200 	lfmvs	f0, 4, [r1], {0}
    36ec:	04110000 	ldreq	r0, [r1], #-0
    36f0:	000009e2 	andeq	r0, r0, r2, ror #19
    36f4:	0002b300 	andeq	fp, r2, r0, lsl #6
    36f8:	65000400 	strvs	r0, [r0, #-1024]	; 0xfffffc00
    36fc:	0400000a 	streq	r0, [r0], #-10
    3700:	0000e301 	andeq	lr, r0, r1, lsl #6
    3704:	14f20c00 	ldrbtne	r0, [r2], #3072	; 0xc00
    3708:	34c00000 	strbcc	r0, [r0], #0
    370c:	03a00001 	moveq	r0, #1
    3710:	0c950000 	ldceq	0, cr0, [r5], {0}
    3714:	cc020000 	stcgt	0, cr0, [r2], {-0}
    3718:	02000014 	andeq	r0, r0, #20
    371c:	00002c0b 	andeq	r2, r0, fp, lsl #24
    3720:	32040300 	andcc	r0, r4, #0, 6
    3724:	04000000 	streq	r0, [r0], #-0
    3728:	00000042 	andeq	r0, r0, r2, asr #32
    372c:	00004205 	andeq	r4, r0, r5, lsl #4
    3730:	004e0500 	subeq	r0, lr, r0, lsl #10
    3734:	06000000 	streq	r0, [r0], -r0
    3738:	061c0704 	ldreq	r0, [ip], -r4, lsl #14
    373c:	42070000 	andmi	r0, r7, #0
    3740:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    3744:	02080904 	andeq	r0, r8, #4, 18	; 0x10000
    3748:	0000710d 	andeq	r7, r0, sp, lsl #2
    374c:	14790a00 	ldrbtne	r0, [r9], #-2560	; 0xfffff600
    3750:	0e020000 	cdpeq	0, 0, cr0, cr2, cr0, {0}
    3754:	00000021 	andeq	r0, r0, r1, lsr #32
    3758:	00770a00 	rsbseq	r0, r7, r0, lsl #20
    375c:	0f020000 	svceq	0x00020000
    3760:	0000004e 	andeq	r0, r0, lr, asr #32
    3764:	e1020004 	tst	r2, r4
    3768:	02000014 	andeq	r0, r0, #20
    376c:	00005010 	andeq	r5, r0, r0, lsl r0
    3770:	00710b00 	rsbseq	r0, r1, r0, lsl #22
    3774:	008c0000 	addeq	r0, ip, r0
    3778:	8c0c0000 	stchi	0, cr0, [ip], {-0}
    377c:	47000000 	strmi	r0, [r0, -r0]
    3780:	07040600 	streq	r0, [r4, -r0, lsl #12]
    3784:	000000da 	ldrdeq	r0, [r0], -sl
    3788:	0014b40d 	andseq	fp, r4, sp, lsl #8
    378c:	7c090100 	stfvcs	f0, [r9], {-0}
    3790:	05000000 	streq	r0, [r0, #-0]
    3794:	015e4403 	cmpeq	lr, r3, lsl #8
    3798:	01280900 			; <UNDEFINED> instruction: 0x01280900
    379c:	0001250c 	andeq	r2, r1, ip, lsl #10
    37a0:	14700a00 	ldrbtne	r0, [r0], #-2560	; 0xfffff600
    37a4:	0d010000 	stceq	0, cr0, [r1, #-0]
    37a8:	00000125 	andeq	r0, r0, r5, lsr #2
    37ac:	13e70a00 	mvnne	r0, #0, 20
    37b0:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
    37b4:	00000125 	andeq	r0, r0, r5, lsr #2
    37b8:	13f00a04 	mvnsne	r0, #4, 20	; 0x4000
    37bc:	0f010000 	svceq	0x00010000
    37c0:	00000125 	andeq	r0, r0, r5, lsr #2
    37c4:	14180a08 	ldrne	r0, [r8], #-2568	; 0xfffff5f8
    37c8:	10010000 	andne	r0, r1, r0
    37cc:	00000125 	andeq	r0, r0, r5, lsr #2
    37d0:	15280a0c 	strne	r0, [r8, #-2572]!	; 0xfffff5f4
    37d4:	11010000 	mrsne	r0, (UNDEF: 1)
    37d8:	00000125 	andeq	r0, r0, r5, lsr #2
    37dc:	149a0a10 	ldrne	r0, [sl], #2576	; 0xa10
    37e0:	12010000 	andne	r0, r1, #0
    37e4:	00000125 	andeq	r0, r0, r5, lsr #2
    37e8:	151c0a14 	ldrne	r0, [ip, #-2580]	; 0xfffff5ec
    37ec:	13010000 	movwne	r0, #4096	; 0x1000
    37f0:	00000125 	andeq	r0, r0, r5, lsr #2
    37f4:	14a20a18 	strtne	r0, [r2], #2584	; 0xa18
    37f8:	14010000 	strne	r0, [r1], #-0
    37fc:	00000125 	andeq	r0, r0, r5, lsr #2
    3800:	14ab0a1c 	strtne	r0, [fp], #2588	; 0xa1c
    3804:	15010000 	strne	r0, [r1, #-0]
    3808:	00000125 	andeq	r0, r0, r5, lsr #2
    380c:	13f90a20 	mvnsne	r0, #32, 20	; 0x20000
    3810:	16010000 	strne	r0, [r1], -r0
    3814:	00000125 	andeq	r0, r0, r5, lsr #2
    3818:	04060024 	streq	r0, [r6], #-36	; 0xffffffdc
    381c:	00061707 	andeq	r1, r6, r7, lsl #14
    3820:	14060200 	strne	r0, [r6], #-512	; 0xfffffe00
    3824:	17010000 	strne	r0, [r1, -r0]
    3828:	000000a4 	andeq	r0, r0, r4, lsr #1
    382c:	00012c0e 	andeq	r2, r1, lr, lsl #24
    3830:	01480d00 	cmpeq	r8, r0, lsl #26
    3834:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
    3838:	00000153 	andeq	r0, r0, r3, asr r1
    383c:	5a200305 	bpl	804458 <mailbuffer+0x7ed398>
    3840:	04030001 	streq	r0, [r3], #-1
    3844:	00000137 	andeq	r0, r0, r7, lsr r1
    3848:	00014d07 	andeq	r4, r1, r7, lsl #26
    384c:	01250b00 			; <UNDEFINED> instruction: 0x01250b00
    3850:	01680000 	cmneq	r8, r0
    3854:	8c0c0000 	stchi	0, cr0, [ip], {-0}
    3858:	02000000 	andeq	r0, r0, #0
    385c:	14440d00 	strbne	r0, [r4], #-3328	; 0xfffff300
    3860:	1c010000 	stcne	0, cr0, [r1], {-0}
    3864:	00000158 	andeq	r0, r0, r8, asr r1
    3868:	60840305 	addvs	r0, r4, r5, lsl #6
    386c:	840f0001 	strhi	r0, [pc], #-1	; 3874 <_start-0x478c>
    3870:	01000014 	tsteq	r0, r4, lsl r0
    3874:	0137806d 	teqeq	r7, sp, rrx
    3878:	0000e000 	andeq	lr, r0, r0
    387c:	ab9c0100 	blge	fe703c84 <_estack+0xf66f3c84>
    3880:	10000001 	andne	r0, r0, r1
    3884:	00717269 	rsbseq	r7, r1, r9, ror #4
    3888:	00496d01 	subeq	r6, r9, r1, lsl #26
    388c:	91020000 	mrsls	r0, (UNDEF: 2)
    3890:	146b0d6c 	strbtne	r0, [fp], #-3436	; 0xfffff294
    3894:	6f010000 	svcvs	0x00010000
    3898:	00000125 	andeq	r0, r0, r5, lsr #2
    389c:	00749102 	rsbseq	r9, r4, r2, lsl #2
    38a0:	0014c20f 	andseq	ip, r4, pc, lsl #4
    38a4:	ac5b0100 	ldfgee	f0, [fp], {-0}
    38a8:	d4000136 	strle	r0, [r0], #-310	; 0xfffffeca
    38ac:	01000000 	mrseq	r0, (UNDEF: 0)
    38b0:	0001dd9c 	muleq	r1, ip, sp
    38b4:	72691000 	rsbvc	r1, r9, #0
    38b8:	5b010071 	blpl	43a84 <mailbuffer+0x2c9c4>
    38bc:	00000049 	andeq	r0, r0, r9, asr #32
    38c0:	0d6c9102 	stfeqp	f1, [ip, #-8]!
    38c4:	0000146b 	andeq	r1, r0, fp, ror #8
    38c8:	01255d01 			; <UNDEFINED> instruction: 0x01255d01
    38cc:	91020000 	mrsls	r0, (UNDEF: 2)
    38d0:	20110074 	andscs	r0, r1, r4, ror r0
    38d4:	01000014 	tsteq	r0, r4, lsl r0
    38d8:	01364851 	teqeq	r6, r1, asr r8
    38dc:	00006400 	andeq	r6, r0, r0, lsl #8
    38e0:	1d9c0100 	ldfnes	f0, [ip]
    38e4:	10000002 	andne	r0, r0, r2
    38e8:	00717269 	rsbseq	r7, r1, r9, ror #4
    38ec:	00495101 	subeq	r5, r9, r1, lsl #2
    38f0:	91020000 	mrsls	r0, (UNDEF: 2)
    38f4:	14791274 	ldrbtne	r1, [r9], #-628	; 0xfffffd8c
    38f8:	51010000 	mrspl	r0, (UNDEF: 1)
    38fc:	00000021 	andeq	r0, r0, r1, lsr #32
    3900:	12709102 	rsbsne	r9, r0, #-2147483648	; 0x80000000
    3904:	00000077 	andeq	r0, r0, r7, ror r0
    3908:	004e5101 	subeq	r5, lr, r1, lsl #2
    390c:	91020000 	mrsls	r0, (UNDEF: 2)
    3910:	2c13006c 	ldccs	0, cr0, [r3], {108}	; 0x6c
    3914:	01000014 	tsteq	r0, r4, lsl r0
    3918:	01362c4c 	teqeq	r6, ip, asr #24
    391c:	00001c00 	andeq	r1, r0, r0, lsl #24
    3920:	139c0100 	orrsne	r0, ip, #0, 2
    3924:	00001460 	andeq	r1, r0, r0, ror #8
    3928:	36104701 	ldrcc	r4, [r0], -r1, lsl #14
    392c:	001c0001 	andseq	r0, ip, r1
    3930:	9c010000 	stcls	0, cr0, [r1], {-0}
    3934:	00148f11 	andseq	r8, r4, r1, lsl pc
    3938:	70360100 	eorsvc	r0, r6, r0, lsl #2
    393c:	a0000135 	andge	r0, r0, r5, lsr r1
    3940:	01000000 	mrseq	r0, (UNDEF: 0)
    3944:	0002629c 	muleq	r2, ip, r2
    3948:	14350d00 	ldrtne	r0, [r5], #-3328	; 0xfffff300
    394c:	38010000 	stmdacc	r1, {}	; <UNPREDICTABLE>
    3950:	00000125 	andeq	r0, r0, r5, lsr #2
    3954:	14005401 	strne	r5, [r0], #-1025	; 0xfffffbff
    3958:	00001454 	andeq	r1, r0, r4, asr r4
    395c:	34c01e01 	strbcc	r1, [r0], #3585	; 0xe01
    3960:	00b00001 	adcseq	r0, r0, r1
    3964:	9c010000 	stcls	0, cr0, [r1], {-0}
    3968:	00144c12 	andseq	r4, r4, r2, lsl ip
    396c:	251e0100 	ldrcs	r0, [lr, #-256]	; 0xffffff00
    3970:	02000001 	andeq	r0, r0, #1
    3974:	6d126c91 	ldcvs	12, cr6, [r2, #-580]	; 0xfffffdbc
    3978:	01000006 	tsteq	r0, r6
    397c:	0000491e 	andeq	r4, r0, lr, lsl r9
    3980:	68910200 	ldmvs	r1, {r9}
    3984:	0134d815 	teqeq	r4, r5, lsl r8
    3988:	00007c00 	andeq	r7, r0, r0, lsl #24
    398c:	69621600 	stmdbvs	r2!, {r9, sl, ip}^
    3990:	23010074 	movwcs	r0, #4212	; 0x1074
    3994:	00000042 	andeq	r0, r0, r2, asr #32
    3998:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
    399c:	00717269 	rsbseq	r7, r1, r9, ror #4
    39a0:	00422601 	subeq	r2, r2, r1, lsl #12
    39a4:	91020000 	mrsls	r0, (UNDEF: 2)
    39a8:	00000070 	andeq	r0, r0, r0, ror r0
    39ac:	00000d1f 	andeq	r0, r0, pc, lsl sp
    39b0:	0b920004 	bleq	fe4839c8 <_estack+0xf64739c8>
    39b4:	01040000 	mrseq	r0, (UNDEF: 4)
    39b8:	000000e3 	andeq	r0, r0, r3, ror #1
    39bc:	00159d0c 	andseq	r9, r5, ip, lsl #26
    39c0:	01386000 	teqeq	r8, r0
    39c4:	00077800 	andeq	r7, r7, r0, lsl #16
    39c8:	000d3e00 	andeq	r3, sp, r0, lsl #28
    39cc:	07040200 	streq	r0, [r4, -r0, lsl #4]
    39d0:	0000061c 	andeq	r0, r0, ip, lsl r6
    39d4:	69050403 	stmdbvs	r5, {r0, r1, sl}
    39d8:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    39dc:	012d0508 			; <UNDEFINED> instruction: 0x012d0508
    39e0:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    39e4:	00015b04 	andeq	r5, r1, r4, lsl #22
    39e8:	06010200 	streq	r0, [r1], -r0, lsl #4
    39ec:	0000086f 	andeq	r0, r0, pc, ror #16
    39f0:	6d080102 	stfvss	f0, [r8, #-8]
    39f4:	02000008 	andeq	r0, r0, #8
    39f8:	08890502 	stmeq	r9, {r1, r8, sl}
    39fc:	02020000 	andeq	r0, r2, #0
    3a00:	0000a007 	andeq	sl, r0, r7
    3a04:	171f0400 	ldrne	r0, [pc, -r0, lsl #8]
    3a08:	3f020000 	svccc	0x00020000
    3a0c:	00000064 	andeq	r0, r0, r4, rrx
    3a10:	32050402 	andcc	r0, r5, #33554432	; 0x2000000
    3a14:	04000001 	streq	r0, [r0], #-1
    3a18:	0000158c 	andeq	r1, r0, ip, lsl #11
    3a1c:	00764102 	rsbseq	r4, r6, r2, lsl #2
    3a20:	04020000 	streq	r0, [r2], #-0
    3a24:	00061707 	andeq	r1, r6, r7, lsl #14
    3a28:	07080200 	streq	r0, [r8, -r0, lsl #4]
    3a2c:	00000612 	andeq	r0, r0, r2, lsl r6
    3a30:	00085b04 	andeq	r5, r8, r4, lsl #22
    3a34:	28070300 	stmdacs	r7, {r8, r9}
    3a38:	04000000 	streq	r0, [r0], #-0
    3a3c:	0000084a 	andeq	r0, r0, sl, asr #16
    3a40:	00642c04 	rsbeq	r2, r4, r4, lsl #24
    3a44:	40040000 	andmi	r0, r4, r0
    3a48:	04000009 	streq	r0, [r0], #-9
    3a4c:	00006472 	andeq	r6, r0, r2, ror r4
    3a50:	07b50500 	ldreq	r0, [r5, r0, lsl #10]!
    3a54:	65050000 	strvs	r0, [r5, #-0]
    3a58:	00002101 	andeq	r2, r0, r1, lsl #2
    3a5c:	04040600 	streq	r0, [r4], #-1536	; 0xfffffa00
    3a60:	0000d0a6 	andeq	sp, r0, r6, lsr #1
    3a64:	07af0700 	streq	r0, [pc, r0, lsl #14]!
    3a68:	a8040000 	stmdage	r4, {}	; <UNPREDICTABLE>
    3a6c:	000000a5 	andeq	r0, r0, r5, lsr #1
    3a70:	00076107 	andeq	r6, r7, r7, lsl #2
    3a74:	d0a90400 	adcle	r0, r9, r0, lsl #8
    3a78:	00000000 	andeq	r0, r0, r0
    3a7c:	00004408 	andeq	r4, r0, r8, lsl #8
    3a80:	0000e000 	andeq	lr, r0, r0
    3a84:	00e00900 	rsceq	r0, r0, r0, lsl #18
    3a88:	00030000 	andeq	r0, r3, r0
    3a8c:	da070402 	ble	1c4a9c <mailbuffer+0x1ad9dc>
    3a90:	0a000000 	beq	3a98 <_start-0x4568>
    3a94:	08a30408 	stmiaeq	r3!, {r3, sl}
    3a98:	0b000001 	bleq	3aa4 <_start-0x455c>
    3a9c:	0000091e 	andeq	r0, r0, lr, lsl r9
    3aa0:	0028a504 	eoreq	sl, r8, r4, lsl #10
    3aa4:	0b000000 	bleq	3aac <_start-0x4554>
    3aa8:	00000926 	andeq	r0, r0, r6, lsr #18
    3aac:	00b1aa04 	adcseq	sl, r1, r4, lsl #20
    3ab0:	00040000 	andeq	r0, r4, r0
    3ab4:	0008b104 	andeq	fp, r8, r4, lsl #2
    3ab8:	e7ab0400 	str	r0, [fp, r0, lsl #8]!
    3abc:	04000000 	streq	r0, [r0], #-0
    3ac0:	0000072a 	andeq	r0, r0, sl, lsr #14
    3ac4:	0084af04 	addeq	sl, r4, r4, lsl #30
    3ac8:	040c0000 	streq	r0, [ip], #-0
    3acc:	0126040d 			; <UNDEFINED> instruction: 0x0126040d
    3ad0:	01020000 	mrseq	r0, (UNDEF: 2)
    3ad4:	00087608 	andeq	r7, r8, r8, lsl #12
    3ad8:	01260e00 			; <UNDEFINED> instruction: 0x01260e00
    3adc:	84040000 	strhi	r0, [r4], #-0
    3ae0:	06000009 	streq	r0, [r0], -r9
    3ae4:	00007616 	andeq	r7, r0, r6, lsl r6
    3ae8:	073b0f00 	ldreq	r0, [fp, -r0, lsl #30]!
    3aec:	06180000 	ldreq	r0, [r8], -r0
    3af0:	0001902d 	andeq	r9, r1, sp, lsr #32
    3af4:	08d20b00 	ldmeq	r2, {r8, r9, fp}^
    3af8:	2f060000 	svccs	0x00060000
    3afc:	00000190 	muleq	r0, r0, r1
    3b00:	6b5f1000 	blvs	17c7b08 <mailbuffer+0x17b0a48>
    3b04:	28300600 	ldmdacs	r0!, {r9, sl}
    3b08:	04000000 	streq	r0, [r0], #-0
    3b0c:	0009090b 	andeq	r0, r9, fp, lsl #18
    3b10:	28300600 	ldmdacs	r0!, {r9, sl}
    3b14:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    3b18:	0007240b 	andeq	r2, r7, fp, lsl #8
    3b1c:	28300600 	ldmdacs	r0!, {r9, sl}
    3b20:	0c000000 	stceq	0, cr0, [r0], {-0}
    3b24:	0009db0b 	andeq	sp, r9, fp, lsl #22
    3b28:	28300600 	ldmdacs	r0!, {r9, sl}
    3b2c:	10000000 	andne	r0, r0, r0
    3b30:	00785f10 	rsbseq	r5, r8, r0, lsl pc
    3b34:	01963106 	orrseq	r3, r6, r6, lsl #2
    3b38:	00140000 	andseq	r0, r4, r0
    3b3c:	013d040d 	teqeq	sp, sp, lsl #8
    3b40:	32080000 	andcc	r0, r8, #0
    3b44:	a6000001 	strge	r0, [r0], -r1
    3b48:	09000001 	stmdbeq	r0, {r0}
    3b4c:	000000e0 	andeq	r0, r0, r0, ror #1
    3b50:	5c0f0000 	stcpl	0, cr0, [pc], {-0}
    3b54:	24000007 	strcs	r0, [r0], #-7
    3b58:	021f3506 	andseq	r3, pc, #25165824	; 0x1800000
    3b5c:	5d0b0000 	stcpl	0, cr0, [fp, #-0]
    3b60:	06000006 	streq	r0, [r0], -r6
    3b64:	00002837 	andeq	r2, r0, r7, lsr r8
    3b68:	4f0b0000 	svcmi	0x000b0000
    3b6c:	06000009 	streq	r0, [r0], -r9
    3b70:	00002838 	andeq	r2, r0, r8, lsr r8
    3b74:	720b0400 	andvc	r0, fp, #0, 8
    3b78:	06000006 	streq	r0, [r0], -r6
    3b7c:	00002839 	andeq	r2, r0, r9, lsr r8
    3b80:	660b0800 	strvs	r0, [fp], -r0, lsl #16
    3b84:	0600000a 	streq	r0, [r0], -sl
    3b88:	0000283a 	andeq	r2, r0, sl, lsr r8
    3b8c:	240b0c00 	strcs	r0, [fp], #-3072	; 0xfffff400
    3b90:	06000008 	streq	r0, [r0], -r8
    3b94:	0000283b 	andeq	r2, r0, fp, lsr r8
    3b98:	d60b1000 	strle	r1, [fp], -r0
    3b9c:	06000007 	streq	r0, [r0], -r7
    3ba0:	0000283c 	andeq	r2, r0, ip, lsr r8
    3ba4:	e00b1400 	and	r1, fp, r0, lsl #8
    3ba8:	06000009 	streq	r0, [r0], -r9
    3bac:	0000283d 	andeq	r2, r0, sp, lsr r8
    3bb0:	930b1800 	movwls	r1, #47104	; 0xb800
    3bb4:	06000008 	streq	r0, [r0], -r8
    3bb8:	0000283e 	andeq	r2, r0, lr, lsr r8
    3bbc:	2d0b1c00 	stccs	12, cr1, [fp, #-0]
    3bc0:	0600000a 	streq	r0, [r0], -sl
    3bc4:	0000283f 	andeq	r2, r0, pc, lsr r8
    3bc8:	11002000 	mrsne	r2, (UNDEF: 0)
    3bcc:	00000681 	andeq	r0, r0, r1, lsl #13
    3bd0:	48060108 	stmdami	r6, {r3, r8}
    3bd4:	0000025f 	andeq	r0, r0, pc, asr r2
    3bd8:	0007030b 	andeq	r0, r7, fp, lsl #6
    3bdc:	5f490600 	svcpl	0x00490600
    3be0:	00000002 	andeq	r0, r0, r2
    3be4:	0005c70b 	andeq	ip, r5, fp, lsl #14
    3be8:	5f4a0600 	svcpl	0x004a0600
    3bec:	80000002 	andhi	r0, r0, r2
    3bf0:	00096b12 	andeq	r6, r9, r2, lsl fp
    3bf4:	324c0600 	subcc	r0, ip, #0, 12
    3bf8:	00000001 	andeq	r0, r0, r1
    3bfc:	06a61201 	strteq	r1, [r6], r1, lsl #4
    3c00:	4f060000 	svcmi	0x00060000
    3c04:	00000132 	andeq	r0, r0, r2, lsr r1
    3c08:	08000104 	stmdaeq	r0, {r2, r8}
    3c0c:	0000011e 	andeq	r0, r0, lr, lsl r1
    3c10:	0000026f 	andeq	r0, r0, pc, ror #4
    3c14:	0000e009 	andeq	lr, r0, r9
    3c18:	11001f00 	tstne	r0, r0, lsl #30
    3c1c:	0000082d 	andeq	r0, r0, sp, lsr #16
    3c20:	5b060190 	blpl	184268 <mailbuffer+0x16d1a8>
    3c24:	000002ad 	andeq	r0, r0, sp, lsr #5
    3c28:	0008d20b 	andeq	sp, r8, fp, lsl #4
    3c2c:	ad5c0600 	ldclge	6, cr0, [ip, #-0]
    3c30:	00000002 	andeq	r0, r0, r2
    3c34:	0008ea0b 	andeq	lr, r8, fp, lsl #20
    3c38:	285d0600 	ldmdacs	sp, {r9, sl}^
    3c3c:	04000000 	streq	r0, [r0], #-0
    3c40:	00070b0b 	andeq	r0, r7, fp, lsl #22
    3c44:	b35f0600 	cmplt	pc, #0, 12
    3c48:	08000002 	stmdaeq	r0, {r1}
    3c4c:	0006810b 	andeq	r8, r6, fp, lsl #2
    3c50:	1f600600 	svcne	0x00600600
    3c54:	88000002 	stmdahi	r0, {r1}
    3c58:	6f040d00 	svcvs	0x00040d00
    3c5c:	08000002 	stmdaeq	r0, {r1}
    3c60:	000002c3 	andeq	r0, r0, r3, asr #5
    3c64:	000002c3 	andeq	r0, r0, r3, asr #5
    3c68:	0000e009 	andeq	lr, r0, r9
    3c6c:	0d001f00 	stceq	15, cr1, [r0, #-0]
    3c70:	0002c904 	andeq	ip, r2, r4, lsl #18
    3c74:	9d0f1300 	stcls	3, cr1, [pc, #-0]	; 3c7c <_start-0x4384>
    3c78:	08000008 	stmdaeq	r0, {r3}
    3c7c:	02ef7306 	rsceq	r7, pc, #402653184	; 0x18000000
    3c80:	6c0b0000 	stcvs	0, cr0, [fp], {-0}
    3c84:	06000006 	streq	r0, [r0], -r6
    3c88:	0002ef74 	andeq	lr, r2, r4, ror pc
    3c8c:	d30b0000 	movwle	r0, #45056	; 0xb000
    3c90:	06000005 	streq	r0, [r0], -r5
    3c94:	00002875 	andeq	r2, r0, r5, ror r8
    3c98:	0d000400 	cfstrseq	mvf0, [r0, #-0]
    3c9c:	00004404 	andeq	r4, r0, r4, lsl #8
    3ca0:	08bc0f00 	ldmeq	ip!, {r8, r9, sl, fp}
    3ca4:	06680000 	strbteq	r0, [r8], -r0
    3ca8:	00041fb3 			; <UNDEFINED> instruction: 0x00041fb3
    3cac:	705f1000 	subsvc	r1, pc, r0
    3cb0:	efb40600 	svc	0x00b40600
    3cb4:	00000002 	andeq	r0, r0, r2
    3cb8:	00725f10 	rsbseq	r5, r2, r0, lsl pc
    3cbc:	0028b506 	eoreq	fp, r8, r6, lsl #10
    3cc0:	10040000 	andne	r0, r4, r0
    3cc4:	0600775f 			; <UNDEFINED> instruction: 0x0600775f
    3cc8:	000028b6 			; <UNDEFINED> instruction: 0x000028b6
    3ccc:	9f0b0800 	svcls	0x000b0800
    3cd0:	06000006 	streq	r0, [r0], -r6
    3cd4:	00004bb7 			; <UNDEFINED> instruction: 0x00004bb7
    3cd8:	780b0c00 	stmdavc	fp, {sl, fp}
    3cdc:	06000007 	streq	r0, [r0], -r7
    3ce0:	00004bb8 			; <UNDEFINED> instruction: 0x00004bb8
    3ce4:	5f100e00 	svcpl	0x00100e00
    3ce8:	06006662 	streq	r6, [r0], -r2, ror #12
    3cec:	0002cab9 			; <UNDEFINED> instruction: 0x0002cab9
    3cf0:	290b1000 	stmdbcs	fp, {ip}
    3cf4:	06000006 	streq	r0, [r0], -r6
    3cf8:	000028ba 			; <UNDEFINED> instruction: 0x000028ba
    3cfc:	8f0b1800 	svchi	0x000b1800
    3d00:	06000006 	streq	r0, [r0], -r6
    3d04:	00011ec1 	andeq	r1, r1, r1, asr #29
    3d08:	7d0b1c00 	stcvc	12, cr1, [fp, #-0]
    3d0c:	06000015 			; <UNDEFINED> instruction: 0x06000015
    3d10:	00057ac3 	andeq	r7, r5, r3, asr #21
    3d14:	620b2000 	andvs	r2, fp, #0
    3d18:	06000017 			; <UNDEFINED> instruction: 0x06000017
    3d1c:	0005a4c5 	andeq	sl, r5, r5, asr #9
    3d20:	2e0b2400 	cfcpyscs	mvf2, mvf11
    3d24:	06000009 	streq	r0, [r0], -r9
    3d28:	0005c8c8 	andeq	ip, r5, r8, asr #17
    3d2c:	470b2800 	strmi	r2, [fp, -r0, lsl #16]
    3d30:	0600000a 	streq	r0, [r0], -sl
    3d34:	0005e2c9 	andeq	lr, r5, r9, asr #5
    3d38:	5f102c00 	svcpl	0x00102c00
    3d3c:	06006275 			; <UNDEFINED> instruction: 0x06006275
    3d40:	0002cacc 	andeq	ip, r2, ip, asr #21
    3d44:	5f103000 	svcpl	0x00103000
    3d48:	06007075 			; <UNDEFINED> instruction: 0x06007075
    3d4c:	0002efcd 	andeq	lr, r2, sp, asr #31
    3d50:	5f103800 	svcpl	0x00103800
    3d54:	06007275 			; <UNDEFINED> instruction: 0x06007275
    3d58:	000028ce 	andeq	r2, r0, lr, asr #17
    3d5c:	660b3c00 	strvs	r3, [fp], -r0, lsl #24
    3d60:	06000006 	streq	r0, [r0], -r6
    3d64:	0005e8d1 	ldrdeq	lr, [r5], -r1
    3d68:	1f0b4000 	svcne	0x000b4000
    3d6c:	0600000a 	streq	r0, [r0], -sl
    3d70:	0005f8d2 	ldrdeq	pc, [r5], -r2
    3d74:	5f104300 	svcpl	0x00104300
    3d78:	0600626c 	streq	r6, [r0], -ip, ror #4
    3d7c:	0002cad5 	ldrdeq	ip, [r2], -r5
    3d80:	b50b4400 	strlt	r4, [fp, #-1024]	; 0xfffffc00
    3d84:	06000006 	streq	r0, [r0], -r6
    3d88:	000028d8 	ldrdeq	r2, [r0], -r8
    3d8c:	c60b4c00 	strgt	r4, [fp], -r0, lsl #24
    3d90:	06000006 	streq	r0, [r0], -r6
    3d94:	00008fd9 	ldrdeq	r8, [r0], -r9
    3d98:	ec0b5000 	stc	0, cr5, [fp], {-0}
    3d9c:	06000005 	streq	r0, [r0], -r5
    3da0:	00043ddc 	ldrdeq	r3, [r4], -ip
    3da4:	bc0b5400 	cfstrslt	mvf5, [fp], {-0}
    3da8:	06000007 	streq	r0, [r0], -r7
    3dac:	000113e0 	andeq	r1, r1, r0, ror #7
    3db0:	c40b5800 	strgt	r5, [fp], #-2048	; 0xfffff800
    3db4:	06000008 	streq	r0, [r0], -r8
    3db8:	000108e2 	andeq	r0, r1, r2, ror #17
    3dbc:	ce0b5c00 	cdpgt	12, 0, cr5, cr11, cr0, {0}
    3dc0:	06000007 	streq	r0, [r0], -r7
    3dc4:	000028e3 	andeq	r2, r0, r3, ror #17
    3dc8:	14006400 	strne	r6, [r0], #-1024	; 0xfffffc00
    3dcc:	00000028 	andeq	r0, r0, r8, lsr #32
    3dd0:	0000043d 	andeq	r0, r0, sp, lsr r4
    3dd4:	00043d15 	andeq	r3, r4, r5, lsl sp
    3dd8:	011e1500 	tsteq	lr, r0, lsl #10
    3ddc:	20150000 	andscs	r0, r5, r0
    3de0:	15000001 	strne	r0, [r0, #-1]
    3de4:	00000028 	andeq	r0, r0, r8, lsr #32
    3de8:	48040d00 	stmdami	r4, {r8, sl, fp}
    3dec:	0e000004 	cdpeq	0, 0, cr0, cr0, cr4, {0}
    3df0:	0000043d 	andeq	r0, r0, sp, lsr r4
    3df4:	00091116 	andeq	r1, r9, r6, lsl r1
    3df8:	06042800 	streq	r2, [r4], -r0, lsl #16
    3dfc:	057a0238 	ldrbeq	r0, [sl, #-568]!	; 0xfffffdc8
    3e00:	82170000 	andshi	r0, r7, #0
    3e04:	06000008 	streq	r0, [r0], -r8
    3e08:	0028023a 	eoreq	r0, r8, sl, lsr r2
    3e0c:	17000000 	strne	r0, [r0, -r0]
    3e10:	000006ae 	andeq	r0, r0, lr, lsr #13
    3e14:	4f023f06 	svcmi	0x00023f06
    3e18:	04000006 	streq	r0, [r0], #-6
    3e1c:	00076817 	andeq	r6, r7, r7, lsl r8
    3e20:	023f0600 	eorseq	r0, pc, #0, 12
    3e24:	0000064f 	andeq	r0, r0, pc, asr #12
    3e28:	07331708 	ldreq	r1, [r3, -r8, lsl #14]!
    3e2c:	3f060000 	svccc	0x00060000
    3e30:	00064f02 	andeq	r4, r6, r2, lsl #30
    3e34:	e5170c00 	ldr	r0, [r7, #-3072]	; 0xfffff400
    3e38:	06000008 	streq	r0, [r0], -r8
    3e3c:	00280241 	eoreq	r0, r8, r1, asr #4
    3e40:	17100000 	ldrne	r0, [r0, -r0]
    3e44:	000005e1 	andeq	r0, r0, r1, ror #11
    3e48:	31024206 	tstcc	r2, r6, lsl #4
    3e4c:	14000008 	strne	r0, [r0], #-8
    3e50:	0009ac17 	andeq	sl, r9, r7, lsl ip
    3e54:	02440600 	subeq	r0, r4, #0, 12
    3e58:	00000028 	andeq	r0, r0, r8, lsr #32
    3e5c:	08ef1730 	stmiaeq	pc!, {r4, r5, r8, r9, sl, ip}^	; <UNPREDICTABLE>
    3e60:	45060000 	strmi	r0, [r6, #-0]
    3e64:	00059e02 	andeq	r9, r5, r2, lsl #28
    3e68:	3f173400 	svccc	0x00173400
    3e6c:	06000008 	streq	r0, [r0], -r8
    3e70:	00280247 	eoreq	r0, r8, r7, asr #4
    3e74:	17380000 	ldrne	r0, [r8, -r0]!
    3e78:	000008ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    3e7c:	4c024906 			; <UNDEFINED> instruction: 0x4c024906
    3e80:	3c000008 	stccc	0, cr0, [r0], {8}
    3e84:	0007a717 	andeq	sl, r7, r7, lsl r7
    3e88:	024c0600 	subeq	r0, ip, #0, 12
    3e8c:	00000190 	muleq	r0, r0, r1
    3e90:	07521740 	ldrbeq	r1, [r2, -r0, asr #14]
    3e94:	4d060000 	stcmi	0, cr0, [r6, #-0]
    3e98:	00002802 	andeq	r2, r0, r2, lsl #16
    3e9c:	61174400 	tstvs	r7, r0, lsl #8
    3ea0:	0600000a 	streq	r0, [r0], -sl
    3ea4:	0190024e 	orrseq	r0, r0, lr, asr #4
    3ea8:	17480000 	strbne	r0, [r8, -r0]
    3eac:	00000851 	andeq	r0, r0, r1, asr r8
    3eb0:	52024f06 	andpl	r4, r2, #6, 30
    3eb4:	4c000008 	stcmi	0, cr0, [r0], {8}
    3eb8:	00077017 	andeq	r7, r7, r7, lsl r0
    3ebc:	02520600 	subseq	r0, r2, #0, 12
    3ec0:	00000028 	andeq	r0, r0, r8, lsr #32
    3ec4:	06be1750 	ssateq	r1, #31, r0, asr #14
    3ec8:	53060000 	movwpl	r0, #24576	; 0x6000
    3ecc:	00012002 	andeq	r2, r1, r2
    3ed0:	7b175400 	blvc	5d8ed8 <mailbuffer+0x5c1e18>
    3ed4:	06000008 	streq	r0, [r0], -r8
    3ed8:	080f0276 	stmdaeq	pc, {r1, r2, r4, r5, r6, r9}	; <UNPREDICTABLE>
    3edc:	18580000 	ldmdane	r8, {}^	; <UNPREDICTABLE>
    3ee0:	0000082d 	andeq	r0, r0, sp, lsr #16
    3ee4:	ad027a06 	vstrge	s14, [r2, #-24]	; 0xffffffe8
    3ee8:	48000002 	stmdami	r0, {r1}
    3eec:	07851801 	streq	r1, [r5, r1, lsl #16]
    3ef0:	7b060000 	blvc	183ef8 <mailbuffer+0x16ce38>
    3ef4:	00026f02 	andeq	r6, r2, r2, lsl #30
    3ef8:	18014c00 	stmdane	r1, {sl, fp, lr}
    3efc:	00000a03 	andeq	r0, r0, r3, lsl #20
    3f00:	63027f06 	movwvs	r7, #12038	; 0x2f06
    3f04:	dc000008 	stcle	0, cr0, [r0], {8}
    3f08:	06971802 	ldreq	r1, [r7], r2, lsl #16
    3f0c:	84060000 	strhi	r0, [r6], #-0
    3f10:	00061402 	andeq	r1, r6, r2, lsl #8
    3f14:	1802e000 	stmdane	r2, {sp, lr, pc}
    3f18:	0000067c 	andeq	r0, r0, ip, ror r6
    3f1c:	6f028506 	svcvs	0x00028506
    3f20:	ec000008 	stc	0, cr0, [r0], {8}
    3f24:	040d0002 	streq	r0, [sp], #-2
    3f28:	0000041f 	andeq	r0, r0, pc, lsl r4
    3f2c:	00002814 	andeq	r2, r0, r4, lsl r8
    3f30:	00059e00 	andeq	r9, r5, r0, lsl #28
    3f34:	043d1500 	ldrteq	r1, [sp], #-1280	; 0xfffffb00
    3f38:	1e150000 	cdpne	0, 1, cr0, cr5, cr0, {0}
    3f3c:	15000001 	strne	r0, [r0, #-1]
    3f40:	0000059e 	muleq	r0, lr, r5
    3f44:	00002815 	andeq	r2, r0, r5, lsl r8
    3f48:	040d0000 	streq	r0, [sp], #-0
    3f4c:	0000012d 	andeq	r0, r0, sp, lsr #2
    3f50:	0580040d 	streq	r0, [r0, #1037]	; 0x40d
    3f54:	9a140000 	bls	503f5c <mailbuffer+0x4ece9c>
    3f58:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
    3f5c:	15000005 	strne	r0, [r0, #-5]
    3f60:	0000043d 	andeq	r0, r0, sp, lsr r4
    3f64:	00011e15 	andeq	r1, r1, r5, lsl lr
    3f68:	009a1500 	addseq	r1, sl, r0, lsl #10
    3f6c:	28150000 	ldmdacs	r5, {}	; <UNPREDICTABLE>
    3f70:	00000000 	andeq	r0, r0, r0
    3f74:	05aa040d 	streq	r0, [sl, #1037]!	; 0x40d
    3f78:	28140000 	ldmdacs	r4, {}	; <UNPREDICTABLE>
    3f7c:	e2000000 	and	r0, r0, #0
    3f80:	15000005 	strne	r0, [r0, #-5]
    3f84:	0000043d 	andeq	r0, r0, sp, lsr r4
    3f88:	00011e15 	andeq	r1, r1, r5, lsl lr
    3f8c:	040d0000 	streq	r0, [sp], #-0
    3f90:	000005ce 	andeq	r0, r0, lr, asr #11
    3f94:	00004408 	andeq	r4, r0, r8, lsl #8
    3f98:	0005f800 	andeq	pc, r5, r0, lsl #16
    3f9c:	00e00900 	rsceq	r0, r0, r0, lsl #18
    3fa0:	00020000 	andeq	r0, r2, r0
    3fa4:	00004408 	andeq	r4, r0, r8, lsl #8
    3fa8:	00060800 	andeq	r0, r6, r0, lsl #16
    3fac:	00e00900 	rsceq	r0, r0, r0, lsl #18
    3fb0:	00000000 	andeq	r0, r0, r0
    3fb4:	0008aa05 	andeq	sl, r8, r5, lsl #20
    3fb8:	011d0600 	tsteq	sp, r0, lsl #12
    3fbc:	000002f5 	strdeq	r0, [r0], -r5
    3fc0:	0009ea19 	andeq	lr, r9, r9, lsl sl
    3fc4:	21060c00 	tstcs	r6, r0, lsl #24
    3fc8:	00064901 	andeq	r4, r6, r1, lsl #18
    3fcc:	08d21700 	ldmeq	r2, {r8, r9, sl, ip}^
    3fd0:	23060000 	movwcs	r0, #24576	; 0x6000
    3fd4:	00064901 	andeq	r4, r6, r1, lsl #18
    3fd8:	7e170000 	cdpvc	0, 1, cr0, cr7, cr0, {0}
    3fdc:	06000007 	streq	r0, [r0], -r7
    3fe0:	00280124 	eoreq	r0, r8, r4, lsr #2
    3fe4:	17040000 	strne	r0, [r4, -r0]
    3fe8:	000008a4 	andeq	r0, r0, r4, lsr #17
    3fec:	4f012506 	svcmi	0x00012506
    3ff0:	08000006 	stmdaeq	r0, {r1, r2}
    3ff4:	14040d00 	strne	r0, [r4], #-3328	; 0xfffff300
    3ff8:	0d000006 	stceq	0, cr0, [r0, #-24]	; 0xffffffe8
    3ffc:	00060804 	andeq	r0, r6, r4, lsl #16
    4000:	05d91900 	ldrbeq	r1, [r9, #2304]	; 0x900
    4004:	060e0000 	streq	r0, [lr], -r0
    4008:	068a013d 			; <UNDEFINED> instruction: 0x068a013d
    400c:	18170000 	ldmdane	r7, {}	; <UNPREDICTABLE>
    4010:	06000009 	streq	r0, [r0], -r9
    4014:	068a013e 			; <UNDEFINED> instruction: 0x068a013e
    4018:	17000000 	strne	r0, [r0, -r0]
    401c:	00000958 	andeq	r0, r0, r8, asr r9
    4020:	8a013f06 	bhi	53c40 <mailbuffer+0x3cb80>
    4024:	06000006 	streq	r0, [r0], -r6
    4028:	00097417 	andeq	r7, r9, r7, lsl r4
    402c:	01400600 	cmpeq	r0, r0, lsl #12
    4030:	00000052 	andeq	r0, r0, r2, asr r0
    4034:	5208000c 	andpl	r0, r8, #12
    4038:	9a000000 	bls	4040 <_start-0x3fc0>
    403c:	09000006 	stmdbeq	r0, {r1, r2}
    4040:	000000e0 	andeq	r0, r0, r0, ror #1
    4044:	d01a0002 	andsle	r0, sl, r2
    4048:	9b025706 	blls	99c68 <mailbuffer+0x82ba8>
    404c:	17000007 	strne	r0, [r0, -r7]
    4050:	000009be 			; <UNDEFINED> instruction: 0x000009be
    4054:	21025906 	tstcs	r2, r6, lsl #18
    4058:	00000000 	andeq	r0, r0, r0
    405c:	00095e17 	andeq	r5, r9, r7, lsl lr
    4060:	025a0600 	subseq	r0, sl, #0, 12
    4064:	00000120 	andeq	r0, r0, r0, lsr #2
    4068:	079a1704 	ldreq	r1, [sl, r4, lsl #14]
    406c:	5b060000 	blpl	184074 <mailbuffer+0x16cfb4>
    4070:	00079b02 	andeq	r9, r7, r2, lsl #22
    4074:	38170800 	ldmdacc	r7, {fp}
    4078:	0600000a 	streq	r0, [r0], -sl
    407c:	01a6025c 			; <UNDEFINED> instruction: 0x01a6025c
    4080:	17240000 	strne	r0, [r4, -r0]!
    4084:	00000743 	andeq	r0, r0, r3, asr #14
    4088:	28025d06 	stmdacs	r2, {r1, r2, r8, sl, fp, ip, lr}
    408c:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    4090:	0008cd17 	andeq	ip, r8, r7, lsl sp
    4094:	025e0600 	subseq	r0, lr, #0, 12
    4098:	0000007d 	andeq	r0, r0, sp, ror r0
    409c:	0a4e1750 	beq	1389de4 <mailbuffer+0x1372d24>
    40a0:	5f060000 	svcpl	0x00060000
    40a4:	00065502 	andeq	r5, r6, r2, lsl #10
    40a8:	d8175800 	ldmdale	r7, {fp, ip, lr}
    40ac:	06000008 	streq	r0, [r0], -r8
    40b0:	01080260 	tsteq	r8, r0, ror #4
    40b4:	17680000 	strbne	r0, [r8, -r0]!
    40b8:	00000a53 	andeq	r0, r0, r3, asr sl
    40bc:	08026106 	stmdaeq	r2, {r1, r2, r8, sp, lr}
    40c0:	70000001 	andvc	r0, r0, r1
    40c4:	00064f17 	andeq	r4, r6, r7, lsl pc
    40c8:	02620600 	rsbeq	r0, r2, #0, 12
    40cc:	00000108 	andeq	r0, r0, r8, lsl #2
    40d0:	09f91778 	ldmibeq	r9!, {r3, r4, r5, r6, r8, r9, sl, ip}^
    40d4:	63060000 	movwvs	r0, #24576	; 0x6000
    40d8:	0007ab02 	andeq	sl, r7, r2, lsl #22
    40dc:	8e178000 	cdphi	0, 1, cr8, cr7, cr0, {0}
    40e0:	06000007 	streq	r0, [r0], -r7
    40e4:	07bb0264 	ldreq	r0, [fp, r4, ror #4]!
    40e8:	17880000 	strne	r0, [r8, r0]
    40ec:	0000098c 	andeq	r0, r0, ip, lsl #19
    40f0:	28026506 	stmdacs	r2, {r1, r2, r8, sl, sp, lr}
    40f4:	a0000000 	andge	r0, r0, r0
    40f8:	0006f517 	andeq	pc, r6, r7, lsl r5	; <UNPREDICTABLE>
    40fc:	02660600 	rsbeq	r0, r6, #0, 12
    4100:	00000108 	andeq	r0, r0, r8, lsl #2
    4104:	064017a4 	strbeq	r1, [r0], -r4, lsr #15
    4108:	67060000 	strvs	r0, [r6, -r0]
    410c:	00010802 	andeq	r0, r1, r2, lsl #16
    4110:	e417ac00 	ldr	sl, [r7], #-3072	; 0xfffff400
    4114:	06000006 	streq	r0, [r0], -r6
    4118:	01080268 	tsteq	r8, r8, ror #4
    411c:	17b40000 	ldrne	r0, [r4, r0]!
    4120:	000005f2 	strdeq	r0, [r0], -r2
    4124:	08026906 	stmdaeq	r2, {r1, r2, r8, fp, sp, lr}
    4128:	bc000001 	stclt	0, cr0, [r0], {1}
    412c:	00060117 	andeq	r0, r6, r7, lsl r1
    4130:	026a0600 	rsbeq	r0, sl, #0, 12
    4134:	00000108 	andeq	r0, r0, r8, lsl #2
    4138:	088017c4 	stmeq	r0, {r2, r6, r7, r8, r9, sl, ip}
    413c:	6b060000 	blvs	184144 <mailbuffer+0x16d084>
    4140:	00002802 	andeq	r2, r0, r2, lsl #16
    4144:	0800cc00 	stmdaeq	r0, {sl, fp, lr, pc}
    4148:	00000126 	andeq	r0, r0, r6, lsr #2
    414c:	000007ab 	andeq	r0, r0, fp, lsr #15
    4150:	0000e009 	andeq	lr, r0, r9
    4154:	08001900 	stmdaeq	r0, {r8, fp, ip}
    4158:	00000126 	andeq	r0, r0, r6, lsr #2
    415c:	000007bb 			; <UNDEFINED> instruction: 0x000007bb
    4160:	0000e009 	andeq	lr, r0, r9
    4164:	08000700 	stmdaeq	r0, {r8, r9, sl}
    4168:	00000126 	andeq	r0, r0, r6, lsr #2
    416c:	000007cb 	andeq	r0, r0, fp, asr #15
    4170:	0000e009 	andeq	lr, r0, r9
    4174:	1a001700 	bne	9d7c <__module_entries_end+0x1cd8>
    4178:	027006f0 	rsbseq	r0, r0, #240, 12	; 0xf000000
    417c:	000007ef 	andeq	r0, r0, pc, ror #15
    4180:	00081d17 	andeq	r1, r8, r7, lsl sp
    4184:	02730600 	rsbseq	r0, r3, #0, 12
    4188:	000007ef 	andeq	r0, r0, pc, ror #15
    418c:	09f01700 	ldmibeq	r0!, {r8, r9, sl, ip}^
    4190:	74060000 	strvc	r0, [r6], #-0
    4194:	0007ff02 	andeq	pc, r7, r2, lsl #30
    4198:	08007800 	stmdaeq	r0, {fp, ip, sp, lr}
    419c:	000002ef 	andeq	r0, r0, pc, ror #5
    41a0:	000007ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    41a4:	0000e009 	andeq	lr, r0, r9
    41a8:	08001d00 	stmdaeq	r0, {r8, sl, fp, ip}
    41ac:	00000021 	andeq	r0, r0, r1, lsr #32
    41b0:	0000080f 	andeq	r0, r0, pc, lsl #16
    41b4:	0000e009 	andeq	lr, r0, r9
    41b8:	1b001d00 	blne	b5c0 <__module_entries_end+0x351c>
    41bc:	025506f0 	subseq	r0, r5, #240, 12	; 0xf000000
    41c0:	00000831 	andeq	r0, r0, r1, lsr r8
    41c4:	0009111c 	andeq	r1, r9, ip, lsl r1
    41c8:	026c0600 	rsbeq	r0, ip, #0, 12
    41cc:	0000069a 	muleq	r0, sl, r6
    41d0:	000a251c 	andeq	r2, sl, ip, lsl r5
    41d4:	02750600 	rsbseq	r0, r5, #0, 12
    41d8:	000007cb 	andeq	r0, r0, fp, asr #15
    41dc:	01260800 			; <UNDEFINED> instruction: 0x01260800
    41e0:	08410000 	stmdaeq	r1, {}^	; <UNPREDICTABLE>
    41e4:	e0090000 	and	r0, r9, r0
    41e8:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    41ec:	084c1d00 	stmdaeq	ip, {r8, sl, fp, ip}^
    41f0:	3d150000 	ldccc	0, cr0, [r5, #-0]
    41f4:	00000004 	andeq	r0, r0, r4
    41f8:	0841040d 	stmdaeq	r1, {r0, r2, r3, sl}^
    41fc:	040d0000 	streq	r0, [sp], #-0
    4200:	00000190 	muleq	r0, r0, r1
    4204:	0008631d 	andeq	r6, r8, sp, lsl r3
    4208:	00281500 	eoreq	r1, r8, r0, lsl #10
    420c:	0d000000 	stceq	0, cr0, [r0, #-0]
    4210:	00086904 	andeq	r6, r8, r4, lsl #18
    4214:	58040d00 	stmdapl	r4, {r8, sl, fp}
    4218:	08000008 	stmdaeq	r0, {r3}
    421c:	00000608 	andeq	r0, r0, r8, lsl #12
    4220:	0000087f 	andeq	r0, r0, pc, ror r8
    4224:	0000e009 	andeq	lr, r0, r9
    4228:	1e000200 	cdpne	2, 0, cr0, cr0, cr0, {0}
    422c:	000009a0 	andeq	r0, r0, r0, lsr #19
    4230:	3d02fd06 	stccc	13, cr15, [r2, #-24]	; 0xffffffe8
    4234:	1e000004 	cdpne	0, 0, cr0, cr0, cr4, {0}
    4238:	00000999 	muleq	r0, r9, r9
    423c:	4302fe06 	movwmi	pc, #11782	; 0x2e06	; <UNPREDICTABLE>
    4240:	1f000004 	svcne	0x00000004
    4244:	00000835 	andeq	r0, r0, r5, lsr r8
    4248:	01205f07 			; <UNDEFINED> instruction: 0x01205f07
    424c:	21040000 	mrscs	r0, (UNDEF: 4)
    4250:	08000017 	stmdaeq	r0, {r0, r1, r2, r4}
    4254:	0000592c 	andeq	r5, r0, ip, lsr #18
    4258:	158e0400 	strne	r0, [lr, #1024]	; 0x400
    425c:	30080000 	andcc	r0, r8, r0
    4260:	0000006b 	andeq	r0, r0, fp, rrx
    4264:	0016ec20 	andseq	lr, r6, r0, lsr #24
    4268:	00440100 	subeq	r0, r4, r0, lsl #2
    426c:	49090000 	stmdbmi	r9, {}	; <UNPREDICTABLE>
    4270:	000008f3 	strdeq	r0, [r0], -r3
    4274:	00176921 	andseq	r6, r7, r1, lsr #18
    4278:	30210000 	eorcc	r0, r1, r0
    427c:	01000015 	tsteq	r0, r5, lsl r0
    4280:	00168721 	andseq	r8, r6, r1, lsr #14
    4284:	13210200 			; <UNDEFINED> instruction: 0x13210200
    4288:	03000017 	movweq	r0, #23
    428c:	00166921 	andseq	r6, r6, r1, lsr #18
    4290:	33210400 			; <UNDEFINED> instruction: 0x33210400
    4294:	05000016 	streq	r0, [r0, #-22]	; 0xffffffea
    4298:	0016fe21 	andseq	pc, r6, r1, lsr #28
    429c:	20000600 	andcs	r0, r0, r0, lsl #12
    42a0:	00001583 	andeq	r1, r0, r3, lsl #11
    42a4:	00004401 	andeq	r4, r0, r1, lsl #8
    42a8:	105c0900 	subsne	r0, ip, r0, lsl #18
    42ac:	21000009 	tstcs	r0, r9
    42b0:	000016a7 	andeq	r1, r0, r7, lsr #13
    42b4:	17292100 	strne	r2, [r9, -r0, lsl #2]!
    42b8:	00010000 	andeq	r0, r1, r0
    42bc:	4b01a00a 	blmi	6c2ec <mailbuffer+0x5522c>
    42c0:	00000a39 	andeq	r0, r0, r9, lsr sl
    42c4:	0015600b 	andseq	r6, r5, fp
    42c8:	394c0100 	stmdbcc	ip, {r8}^
    42cc:	0000000a 	andeq	r0, r0, sl
    42d0:	0015d00b 	andseq	sp, r5, fp
    42d4:	764d0100 	strbvc	r0, [sp], -r0, lsl #2
    42d8:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    42dc:	0016570b 	andseq	r5, r6, fp, lsl #14
    42e0:	494e0100 	stmdbmi	lr, {r8}^
    42e4:	1c00000a 	stcne	0, cr0, [r0], {10}
    42e8:	0016d10b 	andseq	sp, r6, fp, lsl #2
    42ec:	764f0100 	strbvc	r0, [pc], -r0, lsl #2
    42f0:	24000000 	strcs	r0, [r0], #-0
    42f4:	0015970b 	andseq	r9, r5, fp, lsl #14
    42f8:	49500100 	ldmdbmi	r0, {r8}^
    42fc:	2800000a 	stmdacs	r0, {r1, r3}
    4300:	0015db0b 	andseq	sp, r5, fp, lsl #22
    4304:	76510100 	ldrbvc	r0, [r1], -r0, lsl #2
    4308:	30000000 	andcc	r0, r0, r0
    430c:	0016f80b 	andseq	pc, r6, fp, lsl #16
    4310:	49520100 	ldmdbmi	r2, {r8}^
    4314:	3400000a 	strcc	r0, [r0], #-10
    4318:	00154f0b 	andseq	r4, r5, fp, lsl #30
    431c:	76530100 	ldrbvc	r0, [r3], -r0, lsl #2
    4320:	3c000000 	stccc	0, cr0, [r0], {-0}
    4324:	0017490b 	andseq	r4, r7, fp, lsl #18
    4328:	49540100 	ldmdbmi	r4, {r8}^
    432c:	4000000a 	andmi	r0, r0, sl
    4330:	0015e60b 	andseq	lr, r5, fp, lsl #12
    4334:	76550100 	ldrbvc	r0, [r5], -r0, lsl #2
    4338:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    433c:	0017430b 	andseq	r4, r7, fp, lsl #6
    4340:	49560100 	ldmdbmi	r6, {r8}^
    4344:	4c00000a 	stcmi	0, cr0, [r0], {10}
    4348:	0015f10b 	andseq	pc, r5, fp, lsl #2
    434c:	76570100 	ldrbvc	r0, [r7], -r0, lsl #2
    4350:	54000000 	strpl	r0, [r0], #-0
    4354:	0016740b 	andseq	r7, r6, fp, lsl #8
    4358:	49580100 	ldmdbmi	r8, {r8}^
    435c:	5800000a 	stmdapl	r0, {r1, r3}
    4360:	0015fc0b 	andseq	pc, r5, fp, lsl #24
    4364:	76590100 	ldrbvc	r0, [r9], -r0, lsl #2
    4368:	60000000 	andvs	r0, r0, r0
    436c:	0016810b 	andseq	r8, r6, fp, lsl #2
    4370:	495a0100 	ldmdbmi	sl, {r8}^
    4374:	6400000a 	strvs	r0, [r0], #-10
    4378:	0016070b 	andseq	r0, r6, fp, lsl #14
    437c:	765b0100 	ldrbvc	r0, [fp], -r0, lsl #2
    4380:	6c000000 	stcvs	0, cr0, [r0], {-0}
    4384:	0016e60b 	andseq	lr, r6, fp, lsl #12
    4388:	495c0100 	ldmdbmi	ip, {r8}^
    438c:	7000000a 	andvc	r0, r0, sl
    4390:	0016120b 	andseq	r1, r6, fp, lsl #4
    4394:	765d0100 	ldrbvc	r0, [sp], -r0, lsl #2
    4398:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
    439c:	0017570b 	andseq	r5, r7, fp, lsl #14
    43a0:	495e0100 	ldmdbmi	lr, {r8}^
    43a4:	7c00000a 	stcvc	0, cr0, [r0], {10}
    43a8:	00161d0b 	andseq	r1, r6, fp, lsl #26
    43ac:	765f0100 	ldrbvc	r0, [pc], -r0, lsl #2
    43b0:	84000000 	strhi	r0, [r0], #-0
    43b4:	0015480b 	andseq	r4, r5, fp, lsl #16
    43b8:	49600100 	stmdbmi	r0!, {r8}^
    43bc:	8800000a 	stmdahi	r0, {r1, r3}
    43c0:	0016280b 	andseq	r2, r6, fp, lsl #16
    43c4:	76610100 	strbtvc	r0, [r1], -r0, lsl #2
    43c8:	90000000 	andls	r0, r0, r0
    43cc:	00155a0b 	andseq	r5, r5, fp, lsl #20
    43d0:	59620100 	stmdbpl	r2!, {r8}^
    43d4:	9400000a 	strls	r0, [r0], #-10
    43d8:	0017750b 	andseq	r7, r7, fp, lsl #10
    43dc:	49630100 	stmdbmi	r3!, {r8}^
    43e0:	9800000a 	stmdals	r0, {r1, r3}
    43e4:	00760800 	rsbseq	r0, r6, r0, lsl #16
    43e8:	0a490000 	beq	12443f0 <mailbuffer+0x122d330>
    43ec:	e0090000 	and	r0, r9, r0
    43f0:	05000000 	streq	r0, [r0, #-0]
    43f4:	00760800 	rsbseq	r0, r6, r0, lsl #16
    43f8:	0a590000 	beq	1644400 <mailbuffer+0x162d340>
    43fc:	e0090000 	and	r0, r9, r0
    4400:	01000000 	mrseq	r0, (UNDEF: 0)
    4404:	00760800 	rsbseq	r0, r6, r0, lsl #16
    4408:	0a690000 	beq	1a44410 <mailbuffer+0x1a2d350>
    440c:	e0090000 	and	r0, r9, r0
    4410:	00000000 	andeq	r0, r0, r0
    4414:	177e0400 	ldrbne	r0, [lr, -r0, lsl #8]!
    4418:	65010000 	strvs	r0, [r1, #-0]
    441c:	00000910 	andeq	r0, r0, r0, lsl r9
    4420:	000a6922 	andeq	r6, sl, r2, lsr #18
    4424:	01482300 	mrseq	r2, (UNDEF: 120)
    4428:	67010000 	strvs	r0, [r1, -r0]
    442c:	00000a90 	muleq	r0, r0, sl
    4430:	5a240305 	bpl	90504c <mailbuffer+0x8edf8c>
    4434:	040d0001 	streq	r0, [sp], #-1
    4438:	00000a74 	andeq	r0, r0, r4, ror sl
    443c:	000a8a0e 	andeq	r8, sl, lr, lsl #20
    4440:	16dc2400 	ldrbne	r2, [ip], r0, lsl #8
    4444:	e8010000 	stmda	r1, {}	; <UNPREDICTABLE>
    4448:	00013f84 	andeq	r3, r1, r4, lsl #31
    444c:	00000054 	andeq	r0, r0, r4, asr r0
    4450:	0ab79c01 	beq	fedeb45c <_estack+0xf6ddb45c>
    4454:	63250000 			; <UNDEFINED> instruction: 0x63250000
    4458:	44e80100 	strbtmi	r0, [r8], #256	; 0x100
    445c:	02000000 	andeq	r0, r0, #0
    4460:	26007791 			; <UNDEFINED> instruction: 0x26007791
    4464:	00001579 	andeq	r1, r0, r9, ror r5
    4468:	08ade401 	stmiaeq	sp!, {r0, sl, sp, lr, pc}
    446c:	3f5c0000 	svccc	0x005c0000
    4470:	00280001 	eoreq	r0, r8, r1
    4474:	9c010000 	stcls	0, cr0, [r1], {-0}
    4478:	00000adf 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    447c:	67657225 	strbvs	r7, [r5, -r5, lsr #4]!
    4480:	ade40100 	stfgee	f0, [r4]
    4484:	02000008 	andeq	r0, r0, #8
    4488:	27007491 			; <UNDEFINED> instruction: 0x27007491
    448c:	0000175e 	andeq	r1, r0, lr, asr r7
    4490:	3f2cde01 	svccc	0x002cde01
    4494:	00300001 	eorseq	r0, r0, r1
    4498:	9c010000 	stcls	0, cr0, [r1], {-0}
    449c:	00000b11 	andeq	r0, r0, r1, lsl fp
    44a0:	67657225 	strbvs	r7, [r5, -r5, lsr #4]!
    44a4:	adde0100 	ldfgee	f0, [lr]
    44a8:	02000008 	andeq	r0, r0, #8
    44ac:	ed287491 	cfstrs	mvf7, [r8, #-580]!	; 0xfffffdbc
    44b0:	01000005 	tsteq	r0, r5
    44b4:	0008adde 	ldrdeq	sl, [r8], -lr
    44b8:	70910200 	addsvc	r0, r1, r0, lsl #4
    44bc:	16b82900 	ldrtne	r2, [r8], r0, lsl #18
    44c0:	d7010000 	strle	r0, [r1, -r0]
    44c4:	00013ed4 	ldrdeq	r3, [r1], -r4
    44c8:	00000058 	andeq	r0, r0, r8, asr r0
    44cc:	0b519c01 	bleq	146b4d8 <mailbuffer+0x1454418>
    44d0:	5d280000 	stcpl	0, cr0, [r8, #-0]
    44d4:	01000016 	tsteq	r0, r6, lsl r0
    44d8:	000021d7 	ldrdeq	r2, [r0], -r7
    44dc:	6c910200 	lfmvs	f0, 4, [r1], {0}
    44e0:	00146b2a 	andseq	r6, r4, sl, lsr #22
    44e4:	76d90100 	ldrbvc	r0, [r9], r0, lsl #2
    44e8:	02000000 	andeq	r0, r0, #0
    44ec:	c72a7491 			; <UNDEFINED> instruction: 0xc72a7491
    44f0:	01000006 	tsteq	r0, r6
    44f4:	000076da 	ldrdeq	r7, [r0], -sl
    44f8:	70910200 	addsvc	r0, r1, r0, lsl #4
    44fc:	153e2b00 	ldrne	r2, [lr, #-2816]!	; 0xfffff500
    4500:	c7010000 	strgt	r0, [r1, -r0]
    4504:	00013e10 	andeq	r3, r1, r0, lsl lr
    4508:	000000c4 	andeq	r0, r0, r4, asr #1
    450c:	cb279c01 	blgt	9eb518 <mailbuffer+0x9d4458>
    4510:	01000016 	tsteq	r0, r6, lsl r0
    4514:	013de0c2 	teqeq	sp, r2, asr #1
    4518:	00003000 	andeq	r3, r0, r0
    451c:	869c0100 	ldrhi	r0, [ip], r0, lsl #2
    4520:	2800000b 	stmdacs	r0, {r0, r1, r3}
    4524:	00000920 	andeq	r0, r0, r0, lsr #18
    4528:	08a2c201 	stmiaeq	r2!, {r0, r9, lr, pc}
    452c:	91020000 	mrsls	r0, (UNDEF: 2)
    4530:	67290074 			; <UNDEFINED> instruction: 0x67290074
    4534:	01000015 	tsteq	r0, r5, lsl r0
    4538:	013c28a6 	teqeq	ip, r6, lsr #17
    453c:	0001b800 	andeq	fp, r1, r0, lsl #16
    4540:	d49c0100 	ldrle	r0, [ip], #256	; 0x100
    4544:	2800000b 	stmdacs	r0, {r0, r1, r3}
    4548:	0000165d 	andeq	r1, r0, sp, asr r6
    454c:	0021a601 	eoreq	sl, r1, r1, lsl #12
    4550:	91020000 	mrsls	r0, (UNDEF: 2)
    4554:	00de286c 	sbcseq	r2, lr, ip, ror #16
    4558:	a6010000 	strge	r0, [r1], -r0
    455c:	000008b8 			; <UNDEFINED> instruction: 0x000008b8
    4560:	2a6b9102 	bcs	1ae8970 <mailbuffer+0x1ad18b0>
    4564:	0000146b 	andeq	r1, r0, fp, ror #8
    4568:	0076a801 	rsbseq	sl, r6, r1, lsl #16
    456c:	91020000 	mrsls	r0, (UNDEF: 2)
    4570:	06c72a74 			; <UNDEFINED> instruction: 0x06c72a74
    4574:	a9010000 	stmdbge	r1, {}	; <UNPREDICTABLE>
    4578:	00000076 	andeq	r0, r0, r6, ror r0
    457c:	00709102 	rsbseq	r9, r0, r2, lsl #2
    4580:	00173229 	andseq	r3, r7, r9, lsr #4
    4584:	78890100 	stmvc	r9, {r8}
    4588:	b000013a 	andlt	r0, r0, sl, lsr r1
    458c:	01000001 	tsteq	r0, r1
    4590:	000c229c 	muleq	ip, ip, r2
    4594:	165d2800 	ldrbne	r2, [sp], -r0, lsl #16
    4598:	89010000 	stmdbhi	r1, {}	; <UNPREDICTABLE>
    459c:	00000021 	andeq	r0, r0, r1, lsr #32
    45a0:	286c9102 	stmdacs	ip!, {r1, r8, ip, pc}^
    45a4:	000000de 	ldrdeq	r0, [r0], -lr
    45a8:	08b88901 	ldmeq	r8!, {r0, r8, fp, pc}
    45ac:	91020000 	mrsls	r0, (UNDEF: 2)
    45b0:	146b2a6b 	strbtne	r2, [fp], #-2667	; 0xfffff595
    45b4:	8b010000 	blhi	445bc <mailbuffer+0x2d4fc>
    45b8:	00000076 	andeq	r0, r0, r6, ror r0
    45bc:	2a749102 	bcs	1d289cc <mailbuffer+0x1d1190c>
    45c0:	000006c7 	andeq	r0, r0, r7, asr #13
    45c4:	00768c01 	rsbseq	r8, r6, r1, lsl #24
    45c8:	91020000 	mrsls	r0, (UNDEF: 2)
    45cc:	af2c0070 	svcge	0x002c0070
    45d0:	01000016 	tsteq	r0, r6, lsl r0
    45d4:	00002885 	andeq	r2, r0, r5, lsl #17
    45d8:	013a2800 	teqeq	sl, r0, lsl #16
    45dc:	00005000 	andeq	r5, r0, r0
    45e0:	4a9c0100 	bmi	fe7049e8 <_estack+0xf66f49e8>
    45e4:	2800000c 	stmdacs	r0, {r2, r3}
    45e8:	0000165d 	andeq	r1, r0, sp, asr r6
    45ec:	00218501 	eoreq	r8, r1, r1, lsl #10
    45f0:	91020000 	mrsls	r0, (UNDEF: 2)
    45f4:	4f290074 	svcmi	0x00290074
    45f8:	01000017 	tsteq	r0, r7, lsl r0
    45fc:	0139707a 	teqeq	r9, sl, ror r0
    4600:	0000b800 	andeq	fp, r0, r0, lsl #16
    4604:	989c0100 	ldmls	ip, {r8}
    4608:	2800000c 	stmdacs	r0, {r2, r3}
    460c:	0000165d 	andeq	r1, r0, sp, asr r6
    4610:	00217a01 	eoreq	r7, r1, r1, lsl #20
    4614:	91020000 	mrsls	r0, (UNDEF: 2)
    4618:	167a286c 	ldrbtne	r2, [sl], -ip, ror #16
    461c:	7a010000 	bvc	44624 <mailbuffer+0x2d564>
    4620:	00000021 	andeq	r0, r0, r1, lsr #32
    4624:	2a689102 	bcs	1a28a34 <mailbuffer+0x1a11974>
    4628:	000006c7 	andeq	r0, r0, r7, asr #13
    462c:	00767b01 	rsbseq	r7, r6, r1, lsl #22
    4630:	91020000 	mrsls	r0, (UNDEF: 2)
    4634:	146b2a74 	strbtne	r2, [fp], #-2676	; 0xfffff58c
    4638:	7c010000 	stcvc	0, cr0, [r1], {-0}
    463c:	00000076 	andeq	r0, r0, r6, ror r0
    4640:	00709102 	rsbseq	r9, r0, r2, lsl #2
    4644:	00169624 	andseq	r9, r6, r4, lsr #12
    4648:	3c760100 	ldfcce	f0, [r6], #-0
    464c:	34000139 	strcc	r0, [r0], #-313	; 0xfffffec7
    4650:	01000000 	mrseq	r0, (UNDEF: 0)
    4654:	000cca9c 	muleq	ip, ip, sl
    4658:	165d2800 	ldrbne	r2, [sp], -r0, lsl #16
    465c:	76010000 	strvc	r0, [r1], -r0
    4660:	00000021 	andeq	r0, r0, r1, lsr #32
    4664:	25749102 	ldrbcs	r9, [r4, #-258]!	; 0xfffffefe
    4668:	00726964 	rsbseq	r6, r2, r4, ror #18
    466c:	08f37601 	ldmeq	r3!, {r0, r9, sl, ip, sp, lr}^
    4670:	91020000 	mrsls	r0, (UNDEF: 2)
    4674:	472d0073 			; <UNDEFINED> instruction: 0x472d0073
    4678:	01000016 	tsteq	r0, r6, lsl r0
    467c:	0138606a 	teqeq	r8, sl, rrx
    4680:	0000dc00 	andeq	sp, r0, r0, lsl #24
    4684:	289c0100 	ldmcs	ip, {r8}
    4688:	0000165d 	andeq	r1, r0, sp, asr r6
    468c:	00216a01 	eoreq	r6, r1, r1, lsl #20
    4690:	91020000 	mrsls	r0, (UNDEF: 2)
    4694:	15c82864 	strbne	r2, [r8, #2148]	; 0x864
    4698:	6a010000 	bvs	446a0 <mailbuffer+0x2d5e0>
    469c:	00000021 	andeq	r0, r0, r1, lsr #32
    46a0:	2a609102 	bcs	1828ab0 <mailbuffer+0x18119f0>
    46a4:	000006c7 	andeq	r0, r0, r7, asr #13
    46a8:	00286c01 	eoreq	r6, r8, r1, lsl #24
    46ac:	91020000 	mrsls	r0, (UNDEF: 2)
    46b0:	61762e74 	cmnvs	r6, r4, ror lr
    46b4:	6e01006c 	cdpvs	0, 0, cr0, cr1, cr12, {3}
    46b8:	00000076 	andeq	r0, r0, r6, ror r0
    46bc:	2a709102 	bcs	1c28acc <mailbuffer+0x1c11a0c>
    46c0:	00001664 	andeq	r1, r0, r4, ror #12
    46c4:	00287001 	eoreq	r7, r8, r1
    46c8:	91020000 	mrsls	r0, (UNDEF: 2)
    46cc:	0800006c 	stmdaeq	r0, {r2, r3, r5, r6}
    46d0:	04000009 	streq	r0, [r0], #-9
    46d4:	000e3400 	andeq	r3, lr, r0, lsl #8
    46d8:	e3010400 	movw	r0, #5120	; 0x1400
    46dc:	0c000000 	stceq	0, cr0, [r0], {-0}
    46e0:	000017c3 	andeq	r1, r0, r3, asr #15
    46e4:	00013fd8 	ldrdeq	r3, [r1], -r8
    46e8:	000000ec 	andeq	r0, r0, ip, ror #1
    46ec:	00000ee3 	andeq	r0, r0, r3, ror #29
    46f0:	1c070402 	cfstrsne	mvf0, [r7], {2}
    46f4:	03000006 	movweq	r0, #6
    46f8:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    46fc:	08020074 	stmdaeq	r2, {r2, r4, r5, r6}
    4700:	00012d05 	andeq	r2, r1, r5, lsl #26
    4704:	04080200 	streq	r0, [r8], #-512	; 0xfffffe00
    4708:	0000015b 	andeq	r0, r0, fp, asr r1
    470c:	6f060102 	svcvs	0x00060102
    4710:	02000008 	andeq	r0, r0, #8
    4714:	086d0801 	stmdaeq	sp!, {r0, fp}^
    4718:	02020000 	andeq	r0, r2, #0
    471c:	00088905 	andeq	r8, r8, r5, lsl #18
    4720:	07020200 	streq	r0, [r2, -r0, lsl #4]
    4724:	000000a0 	andeq	r0, r0, r0, lsr #1
    4728:	32050402 	andcc	r0, r5, #33554432	; 0x2000000
    472c:	02000001 	andeq	r0, r0, #1
    4730:	06170704 	ldreq	r0, [r7], -r4, lsl #14
    4734:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    4738:	00061207 	andeq	r1, r6, r7, lsl #4
    473c:	085b0400 	ldmdaeq	fp, {sl}^
    4740:	07020000 	streq	r0, [r2, -r0]
    4744:	00000028 	andeq	r0, r0, r8, lsr #32
    4748:	00084a04 	andeq	r4, r8, r4, lsl #20
    474c:	592c0300 	stmdbpl	ip!, {r8, r9}
    4750:	04000000 	streq	r0, [r0], #-0
    4754:	00000940 	andeq	r0, r0, r0, asr #18
    4758:	00597203 	subseq	r7, r9, r3, lsl #4
    475c:	b5050000 	strlt	r0, [r5, #-0]
    4760:	04000007 	streq	r0, [r0], #-7
    4764:	00210165 	eoreq	r0, r1, r5, ror #2
    4768:	04060000 	streq	r0, [r6], #-0
    476c:	00baa603 	adcseq	sl, sl, r3, lsl #12
    4770:	af070000 	svcge	0x00070000
    4774:	03000007 	movweq	r0, #7
    4778:	00008fa8 	andeq	r8, r0, r8, lsr #31
    477c:	07610700 	strbeq	r0, [r1, -r0, lsl #14]!
    4780:	a9030000 	stmdbge	r3, {}	; <UNPREDICTABLE>
    4784:	000000ba 	strheq	r0, [r0], -sl
    4788:	00440800 	subeq	r0, r4, r0, lsl #16
    478c:	00ca0000 	sbceq	r0, sl, r0
    4790:	ca090000 	bgt	244798 <mailbuffer+0x22d6d8>
    4794:	03000000 	movweq	r0, #0
    4798:	07040200 	streq	r0, [r4, -r0, lsl #4]
    479c:	000000da 	ldrdeq	r0, [r0], -sl
    47a0:	a303080a 	movwge	r0, #14346	; 0x380a
    47a4:	000000f2 	strdeq	r0, [r0], -r2
    47a8:	00091e0b 	andeq	r1, r9, fp, lsl #28
    47ac:	28a50300 	stmiacs	r5!, {r8, r9}
    47b0:	00000000 	andeq	r0, r0, r0
    47b4:	0009260b 	andeq	r2, r9, fp, lsl #12
    47b8:	9baa0300 	blls	fea853c0 <_estack+0xf6a753c0>
    47bc:	04000000 	streq	r0, [r0], #-0
    47c0:	08b10400 	ldmeq	r1!, {sl}
    47c4:	ab030000 	blge	c47cc <mailbuffer+0xad70c>
    47c8:	000000d1 	ldrdeq	r0, [r0], -r1
    47cc:	00072a04 	andeq	r2, r7, r4, lsl #20
    47d0:	6eaf0300 	cdpvs	3, 10, cr0, cr15, cr0, {0}
    47d4:	0c000000 	stceq	0, cr0, [r0], {-0}
    47d8:	10040d04 	andne	r0, r4, r4, lsl #26
    47dc:	02000001 	andeq	r0, r0, #1
    47e0:	08760801 	ldmdaeq	r6!, {r0, fp}^
    47e4:	100e0000 	andne	r0, lr, r0
    47e8:	04000001 	streq	r0, [r0], #-1
    47ec:	00000984 	andeq	r0, r0, r4, lsl #19
    47f0:	00601605 	rsbeq	r1, r0, r5, lsl #12
    47f4:	3b0f0000 	blcc	3c47fc <mailbuffer+0x3ad73c>
    47f8:	18000007 	stmdane	r0, {r0, r1, r2}
    47fc:	017a2d05 	cmneq	sl, r5, lsl #26
    4800:	d20b0000 	andle	r0, fp, #0
    4804:	05000008 	streq	r0, [r0, #-8]
    4808:	00017a2f 	andeq	r7, r1, pc, lsr #20
    480c:	5f100000 	svcpl	0x00100000
    4810:	3005006b 	andcc	r0, r5, fp, rrx
    4814:	00000028 	andeq	r0, r0, r8, lsr #32
    4818:	09090b04 	stmdbeq	r9, {r2, r8, r9, fp}
    481c:	30050000 	andcc	r0, r5, r0
    4820:	00000028 	andeq	r0, r0, r8, lsr #32
    4824:	07240b08 	streq	r0, [r4, -r8, lsl #22]!
    4828:	30050000 	andcc	r0, r5, r0
    482c:	00000028 	andeq	r0, r0, r8, lsr #32
    4830:	09db0b0c 	ldmibeq	fp, {r2, r3, r8, r9, fp}^
    4834:	30050000 	andcc	r0, r5, r0
    4838:	00000028 	andeq	r0, r0, r8, lsr #32
    483c:	785f1010 	ldmdavc	pc, {r4, ip}^	; <UNPREDICTABLE>
    4840:	80310500 	eorshi	r0, r1, r0, lsl #10
    4844:	14000001 	strne	r0, [r0], #-1
    4848:	27040d00 	strcs	r0, [r4, -r0, lsl #26]
    484c:	08000001 	stmdaeq	r0, {r0}
    4850:	0000011c 	andeq	r0, r0, ip, lsl r1
    4854:	00000190 	muleq	r0, r0, r1
    4858:	0000ca09 	andeq	ip, r0, r9, lsl #20
    485c:	0f000000 	svceq	0x00000000
    4860:	0000075c 	andeq	r0, r0, ip, asr r7
    4864:	09350524 	ldmdbeq	r5!, {r2, r5, r8, sl}
    4868:	0b000002 	bleq	4878 <_start-0x3788>
    486c:	0000065d 	andeq	r0, r0, sp, asr r6
    4870:	00283705 	eoreq	r3, r8, r5, lsl #14
    4874:	0b000000 	bleq	487c <_start-0x3784>
    4878:	0000094f 	andeq	r0, r0, pc, asr #18
    487c:	00283805 	eoreq	r3, r8, r5, lsl #16
    4880:	0b040000 	bleq	104888 <mailbuffer+0xed7c8>
    4884:	00000672 	andeq	r0, r0, r2, ror r6
    4888:	00283905 	eoreq	r3, r8, r5, lsl #18
    488c:	0b080000 	bleq	204894 <mailbuffer+0x1ed7d4>
    4890:	00000a66 	andeq	r0, r0, r6, ror #20
    4894:	00283a05 	eoreq	r3, r8, r5, lsl #20
    4898:	0b0c0000 	bleq	3048a0 <mailbuffer+0x2ed7e0>
    489c:	00000824 	andeq	r0, r0, r4, lsr #16
    48a0:	00283b05 	eoreq	r3, r8, r5, lsl #22
    48a4:	0b100000 	bleq	4048ac <mailbuffer+0x3ed7ec>
    48a8:	000007d6 	ldrdeq	r0, [r0], -r6
    48ac:	00283c05 	eoreq	r3, r8, r5, lsl #24
    48b0:	0b140000 	bleq	5048b8 <mailbuffer+0x4ed7f8>
    48b4:	000009e0 	andeq	r0, r0, r0, ror #19
    48b8:	00283d05 	eoreq	r3, r8, r5, lsl #26
    48bc:	0b180000 	bleq	6048c4 <mailbuffer+0x5ed804>
    48c0:	00000893 	muleq	r0, r3, r8
    48c4:	00283e05 	eoreq	r3, r8, r5, lsl #28
    48c8:	0b1c0000 	bleq	7048d0 <mailbuffer+0x6ed810>
    48cc:	00000a2d 	andeq	r0, r0, sp, lsr #20
    48d0:	00283f05 	eoreq	r3, r8, r5, lsl #30
    48d4:	00200000 	eoreq	r0, r0, r0
    48d8:	00068111 	andeq	r8, r6, r1, lsl r1
    48dc:	05010800 	streq	r0, [r1, #-2048]	; 0xfffff800
    48e0:	00024948 	andeq	r4, r2, r8, asr #18
    48e4:	07030b00 	streq	r0, [r3, -r0, lsl #22]
    48e8:	49050000 	stmdbmi	r5, {}	; <UNPREDICTABLE>
    48ec:	00000249 	andeq	r0, r0, r9, asr #4
    48f0:	05c70b00 	strbeq	r0, [r7, #2816]	; 0xb00
    48f4:	4a050000 	bmi	1448fc <mailbuffer+0x12d83c>
    48f8:	00000249 	andeq	r0, r0, r9, asr #4
    48fc:	096b1280 	stmdbeq	fp!, {r7, r9, ip}^
    4900:	4c050000 	stcmi	0, cr0, [r5], {-0}
    4904:	0000011c 	andeq	r0, r0, ip, lsl r1
    4908:	a6120100 	ldrge	r0, [r2], -r0, lsl #2
    490c:	05000006 	streq	r0, [r0, #-6]
    4910:	00011c4f 	andeq	r1, r1, pc, asr #24
    4914:	00010400 	andeq	r0, r1, r0, lsl #8
    4918:	00010808 	andeq	r0, r1, r8, lsl #16
    491c:	00025900 	andeq	r5, r2, r0, lsl #18
    4920:	00ca0900 	sbceq	r0, sl, r0, lsl #18
    4924:	001f0000 	andseq	r0, pc, r0
    4928:	00082d11 	andeq	r2, r8, r1, lsl sp
    492c:	05019000 	streq	r9, [r1, #-0]
    4930:	0002975b 	andeq	r9, r2, fp, asr r7
    4934:	08d20b00 	ldmeq	r2, {r8, r9, fp}^
    4938:	5c050000 	stcpl	0, cr0, [r5], {-0}
    493c:	00000297 	muleq	r0, r7, r2
    4940:	08ea0b00 	stmiaeq	sl!, {r8, r9, fp}^
    4944:	5d050000 	stcpl	0, cr0, [r5, #-0]
    4948:	00000028 	andeq	r0, r0, r8, lsr #32
    494c:	070b0b04 	streq	r0, [fp, -r4, lsl #22]
    4950:	5f050000 	svcpl	0x00050000
    4954:	0000029d 	muleq	r0, sp, r2
    4958:	06810b08 	streq	r0, [r1], r8, lsl #22
    495c:	60050000 	andvs	r0, r5, r0
    4960:	00000209 	andeq	r0, r0, r9, lsl #4
    4964:	040d0088 	streq	r0, [sp], #-136	; 0xffffff78
    4968:	00000259 	andeq	r0, r0, r9, asr r2
    496c:	0002ad08 	andeq	sl, r2, r8, lsl #26
    4970:	0002ad00 	andeq	sl, r2, r0, lsl #26
    4974:	00ca0900 	sbceq	r0, sl, r0, lsl #18
    4978:	001f0000 	andseq	r0, pc, r0
    497c:	02b3040d 	adcseq	r0, r3, #218103808	; 0xd000000
    4980:	0f130000 	svceq	0x00130000
    4984:	0000089d 	muleq	r0, sp, r8
    4988:	d9730508 	ldmdble	r3!, {r3, r8, sl}^
    498c:	0b000002 	bleq	499c <_start-0x3664>
    4990:	0000066c 	andeq	r0, r0, ip, ror #12
    4994:	02d97405 	sbcseq	r7, r9, #83886080	; 0x5000000
    4998:	0b000000 	bleq	49a0 <_start-0x3660>
    499c:	000005d3 	ldrdeq	r0, [r0], -r3
    49a0:	00287505 	eoreq	r7, r8, r5, lsl #10
    49a4:	00040000 	andeq	r0, r4, r0
    49a8:	0044040d 	subeq	r0, r4, sp, lsl #8
    49ac:	bc0f0000 	stclt	0, cr0, [pc], {-0}
    49b0:	68000008 	stmdavs	r0, {r3}
    49b4:	0409b305 	streq	fp, [r9], #-773	; 0xfffffcfb
    49b8:	5f100000 	svcpl	0x00100000
    49bc:	b4050070 	strlt	r0, [r5], #-112	; 0xffffff90
    49c0:	000002d9 	ldrdeq	r0, [r0], -r9
    49c4:	725f1000 	subsvc	r1, pc, #0
    49c8:	28b50500 	ldmcs	r5!, {r8, sl}
    49cc:	04000000 	streq	r0, [r0], #-0
    49d0:	00775f10 	rsbseq	r5, r7, r0, lsl pc
    49d4:	0028b605 	eoreq	fp, r8, r5, lsl #12
    49d8:	0b080000 	bleq	2049e0 <mailbuffer+0x1ed920>
    49dc:	0000069f 	muleq	r0, pc, r6	; <UNPREDICTABLE>
    49e0:	004bb705 	subeq	fp, fp, r5, lsl #14
    49e4:	0b0c0000 	bleq	3049ec <mailbuffer+0x2ed92c>
    49e8:	00000778 	andeq	r0, r0, r8, ror r7
    49ec:	004bb805 	subeq	fp, fp, r5, lsl #16
    49f0:	100e0000 	andne	r0, lr, r0
    49f4:	0066625f 	rsbeq	r6, r6, pc, asr r2
    49f8:	02b4b905 	adcseq	fp, r4, #81920	; 0x14000
    49fc:	0b100000 	bleq	404a04 <mailbuffer+0x3ed944>
    4a00:	00000629 	andeq	r0, r0, r9, lsr #12
    4a04:	0028ba05 	eoreq	fp, r8, r5, lsl #20
    4a08:	0b180000 	bleq	604a10 <mailbuffer+0x5ed950>
    4a0c:	0000068f 	andeq	r0, r0, pc, lsl #13
    4a10:	0108c105 	tsteq	r8, r5, lsl #2
    4a14:	0b1c0000 	bleq	704a1c <mailbuffer+0x6ed95c>
    4a18:	0000157d 	andeq	r1, r0, sp, ror r5
    4a1c:	0564c305 	strbeq	ip, [r4, #-773]!	; 0xfffffcfb
    4a20:	0b200000 	bleq	804a28 <mailbuffer+0x7ed968>
    4a24:	00001762 	andeq	r1, r0, r2, ror #14
    4a28:	058ec505 	streq	ip, [lr, #1285]	; 0x505
    4a2c:	0b240000 	bleq	904a34 <mailbuffer+0x8ed974>
    4a30:	0000092e 	andeq	r0, r0, lr, lsr #18
    4a34:	05b2c805 	ldreq	ip, [r2, #2053]!	; 0x805
    4a38:	0b280000 	bleq	a04a40 <mailbuffer+0x9ed980>
    4a3c:	00000a47 	andeq	r0, r0, r7, asr #20
    4a40:	05ccc905 	strbeq	ip, [ip, #2309]	; 0x905
    4a44:	102c0000 	eorne	r0, ip, r0
    4a48:	0062755f 	rsbeq	r7, r2, pc, asr r5
    4a4c:	02b4cc05 	adcseq	ip, r4, #1280	; 0x500
    4a50:	10300000 	eorsne	r0, r0, r0
    4a54:	0070755f 	rsbseq	r7, r0, pc, asr r5
    4a58:	02d9cd05 	sbcseq	ip, r9, #320	; 0x140
    4a5c:	10380000 	eorsne	r0, r8, r0
    4a60:	0072755f 	rsbseq	r7, r2, pc, asr r5
    4a64:	0028ce05 	eoreq	ip, r8, r5, lsl #28
    4a68:	0b3c0000 	bleq	f04a70 <mailbuffer+0xeed9b0>
    4a6c:	00000666 	andeq	r0, r0, r6, ror #12
    4a70:	05d2d105 	ldrbeq	sp, [r2, #261]	; 0x105
    4a74:	0b400000 	bleq	1004a7c <mailbuffer+0xfed9bc>
    4a78:	00000a1f 	andeq	r0, r0, pc, lsl sl
    4a7c:	05e2d205 	strbeq	sp, [r2, #517]!	; 0x205
    4a80:	10430000 	subne	r0, r3, r0
    4a84:	00626c5f 	rsbeq	r6, r2, pc, asr ip
    4a88:	02b4d505 	adcseq	sp, r4, #20971520	; 0x1400000
    4a8c:	0b440000 	bleq	1104a94 <mailbuffer+0x10ed9d4>
    4a90:	000006b5 			; <UNDEFINED> instruction: 0x000006b5
    4a94:	0028d805 	eoreq	sp, r8, r5, lsl #16
    4a98:	0b4c0000 	bleq	1304aa0 <mailbuffer+0x12ed9e0>
    4a9c:	000006c6 	andeq	r0, r0, r6, asr #13
    4aa0:	0079d905 	rsbseq	sp, r9, r5, lsl #18
    4aa4:	0b500000 	bleq	1404aac <mailbuffer+0x13ed9ec>
    4aa8:	000005ec 	andeq	r0, r0, ip, ror #11
    4aac:	0427dc05 	strteq	sp, [r7], #-3077	; 0xfffff3fb
    4ab0:	0b540000 	bleq	1504ab8 <mailbuffer+0x14ed9f8>
    4ab4:	000007bc 			; <UNDEFINED> instruction: 0x000007bc
    4ab8:	00fde005 	rscseq	lr, sp, r5
    4abc:	0b580000 	bleq	1604ac4 <mailbuffer+0x15eda04>
    4ac0:	000008c4 	andeq	r0, r0, r4, asr #17
    4ac4:	00f2e205 	rscseq	lr, r2, r5, lsl #4
    4ac8:	0b5c0000 	bleq	1704ad0 <mailbuffer+0x16eda10>
    4acc:	000007ce 	andeq	r0, r0, lr, asr #15
    4ad0:	0028e305 	eoreq	lr, r8, r5, lsl #6
    4ad4:	00640000 	rsbeq	r0, r4, r0
    4ad8:	00002814 	andeq	r2, r0, r4, lsl r8
    4adc:	00042700 	andeq	r2, r4, r0, lsl #14
    4ae0:	04271500 	strteq	r1, [r7], #-1280	; 0xfffffb00
    4ae4:	08150000 	ldmdaeq	r5, {}	; <UNPREDICTABLE>
    4ae8:	15000001 	strne	r0, [r0, #-1]
    4aec:	0000010a 	andeq	r0, r0, sl, lsl #2
    4af0:	00002815 	andeq	r2, r0, r5, lsl r8
    4af4:	040d0000 	streq	r0, [sp], #-0
    4af8:	00000432 	andeq	r0, r0, r2, lsr r4
    4afc:	0004270e 	andeq	r2, r4, lr, lsl #14
    4b00:	09111600 	ldmdbeq	r1, {r9, sl, ip}
    4b04:	04280000 	strteq	r0, [r8], #-0
    4b08:	64023805 	strvs	r3, [r2], #-2053	; 0xfffff7fb
    4b0c:	17000005 	strne	r0, [r0, -r5]
    4b10:	00000882 	andeq	r0, r0, r2, lsl #17
    4b14:	28023a05 	stmdacs	r2, {r0, r2, r9, fp, ip, sp}
    4b18:	00000000 	andeq	r0, r0, r0
    4b1c:	0006ae17 	andeq	sl, r6, r7, lsl lr
    4b20:	023f0500 	eorseq	r0, pc, #0, 10
    4b24:	00000639 	andeq	r0, r0, r9, lsr r6
    4b28:	07681704 	strbeq	r1, [r8, -r4, lsl #14]!
    4b2c:	3f050000 	svccc	0x00050000
    4b30:	00063902 	andeq	r3, r6, r2, lsl #18
    4b34:	33170800 	tstcc	r7, #0, 16
    4b38:	05000007 	streq	r0, [r0, #-7]
    4b3c:	0639023f 			; <UNDEFINED> instruction: 0x0639023f
    4b40:	170c0000 	strne	r0, [ip, -r0]
    4b44:	000008e5 	andeq	r0, r0, r5, ror #17
    4b48:	28024105 	stmdacs	r2, {r0, r2, r8, lr}
    4b4c:	10000000 	andne	r0, r0, r0
    4b50:	0005e117 	andeq	lr, r5, r7, lsl r1
    4b54:	02420500 	subeq	r0, r2, #0, 10
    4b58:	0000081b 	andeq	r0, r0, fp, lsl r8
    4b5c:	09ac1714 	stmibeq	ip!, {r2, r4, r8, r9, sl, ip}
    4b60:	44050000 	strmi	r0, [r5], #-0
    4b64:	00002802 	andeq	r2, r0, r2, lsl #16
    4b68:	ef173000 	svc	0x00173000
    4b6c:	05000008 	streq	r0, [r0, #-8]
    4b70:	05880245 	streq	r0, [r8, #581]	; 0x245
    4b74:	17340000 	ldrne	r0, [r4, -r0]!
    4b78:	0000083f 	andeq	r0, r0, pc, lsr r8
    4b7c:	28024705 	stmdacs	r2, {r0, r2, r8, r9, sl, lr}
    4b80:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    4b84:	0008ff17 	andeq	pc, r8, r7, lsl pc	; <UNPREDICTABLE>
    4b88:	02490500 	subeq	r0, r9, #0, 10
    4b8c:	00000836 	andeq	r0, r0, r6, lsr r8
    4b90:	07a7173c 			; <UNDEFINED> instruction: 0x07a7173c
    4b94:	4c050000 	stcmi	0, cr0, [r5], {-0}
    4b98:	00017a02 	andeq	r7, r1, r2, lsl #20
    4b9c:	52174000 	andspl	r4, r7, #0
    4ba0:	05000007 	streq	r0, [r0, #-7]
    4ba4:	0028024d 	eoreq	r0, r8, sp, asr #4
    4ba8:	17440000 	strbne	r0, [r4, -r0]
    4bac:	00000a61 	andeq	r0, r0, r1, ror #20
    4bb0:	7a024e05 	bvc	983cc <mailbuffer+0x8130c>
    4bb4:	48000001 	stmdami	r0, {r0}
    4bb8:	00085117 	andeq	r5, r8, r7, lsl r1
    4bbc:	024f0500 	subeq	r0, pc, #0, 10
    4bc0:	0000083c 	andeq	r0, r0, ip, lsr r8
    4bc4:	0770174c 	ldrbeq	r1, [r0, -ip, asr #14]!
    4bc8:	52050000 	andpl	r0, r5, #0
    4bcc:	00002802 	andeq	r2, r0, r2, lsl #16
    4bd0:	be175000 	cdplt	0, 1, cr5, cr7, cr0, {0}
    4bd4:	05000006 	streq	r0, [r0, #-6]
    4bd8:	010a0253 	tsteq	sl, r3, asr r2
    4bdc:	17540000 	ldrbne	r0, [r4, -r0]
    4be0:	0000087b 	andeq	r0, r0, fp, ror r8
    4be4:	f9027605 			; <UNDEFINED> instruction: 0xf9027605
    4be8:	58000007 	stmdapl	r0, {r0, r1, r2}
    4bec:	00082d18 	andeq	r2, r8, r8, lsl sp
    4bf0:	027a0500 	rsbseq	r0, sl, #0, 10
    4bf4:	00000297 	muleq	r0, r7, r2
    4bf8:	85180148 	ldrhi	r0, [r8, #-328]	; 0xfffffeb8
    4bfc:	05000007 	streq	r0, [r0, #-7]
    4c00:	0259027b 	subseq	r0, r9, #-1342177273	; 0xb0000007
    4c04:	014c0000 	mrseq	r0, (UNDEF: 76)
    4c08:	000a0318 	andeq	r0, sl, r8, lsl r3
    4c0c:	027f0500 	rsbseq	r0, pc, #0, 10
    4c10:	0000084d 	andeq	r0, r0, sp, asr #16
    4c14:	971802dc 			; <UNDEFINED> instruction: 0x971802dc
    4c18:	05000006 	streq	r0, [r0, #-6]
    4c1c:	05fe0284 	ldrbeq	r0, [lr, #644]!	; 0x284
    4c20:	02e00000 	rsceq	r0, r0, #0
    4c24:	00067c18 	andeq	r7, r6, r8, lsl ip
    4c28:	02850500 	addeq	r0, r5, #0, 10
    4c2c:	00000859 	andeq	r0, r0, r9, asr r8
    4c30:	0d0002ec 	sfmeq	f0, 4, [r0, #-944]	; 0xfffffc50
    4c34:	00040904 	andeq	r0, r4, r4, lsl #18
    4c38:	00281400 	eoreq	r1, r8, r0, lsl #8
    4c3c:	05880000 	streq	r0, [r8]
    4c40:	27150000 	ldrcs	r0, [r5, -r0]
    4c44:	15000004 	strne	r0, [r0, #-4]
    4c48:	00000108 	andeq	r0, r0, r8, lsl #2
    4c4c:	00058815 	andeq	r8, r5, r5, lsl r8
    4c50:	00281500 	eoreq	r1, r8, r0, lsl #10
    4c54:	0d000000 	stceq	0, cr0, [r0, #-0]
    4c58:	00011704 	andeq	r1, r1, r4, lsl #14
    4c5c:	6a040d00 	bvs	108064 <mailbuffer+0xf0fa4>
    4c60:	14000005 	strne	r0, [r0], #-5
    4c64:	00000084 	andeq	r0, r0, r4, lsl #1
    4c68:	000005b2 			; <UNDEFINED> instruction: 0x000005b2
    4c6c:	00042715 	andeq	r2, r4, r5, lsl r7
    4c70:	01081500 	tsteq	r8, r0, lsl #10
    4c74:	84150000 	ldrhi	r0, [r5], #-0
    4c78:	15000000 	strne	r0, [r0, #-0]
    4c7c:	00000028 	andeq	r0, r0, r8, lsr #32
    4c80:	94040d00 	strls	r0, [r4], #-3328	; 0xfffff300
    4c84:	14000005 	strne	r0, [r0], #-5
    4c88:	00000028 	andeq	r0, r0, r8, lsr #32
    4c8c:	000005cc 	andeq	r0, r0, ip, asr #11
    4c90:	00042715 	andeq	r2, r4, r5, lsl r7
    4c94:	01081500 	tsteq	r8, r0, lsl #10
    4c98:	0d000000 	stceq	0, cr0, [r0, #-0]
    4c9c:	0005b804 	andeq	fp, r5, r4, lsl #16
    4ca0:	00440800 	subeq	r0, r4, r0, lsl #16
    4ca4:	05e20000 	strbeq	r0, [r2, #0]!
    4ca8:	ca090000 	bgt	244cb0 <mailbuffer+0x22dbf0>
    4cac:	02000000 	andeq	r0, r0, #0
    4cb0:	00440800 	subeq	r0, r4, r0, lsl #16
    4cb4:	05f20000 	ldrbeq	r0, [r2, #0]!
    4cb8:	ca090000 	bgt	244cc0 <mailbuffer+0x22dc00>
    4cbc:	00000000 	andeq	r0, r0, r0
    4cc0:	08aa0500 	stmiaeq	sl!, {r8, sl}
    4cc4:	1d050000 	stcne	0, cr0, [r5, #-0]
    4cc8:	0002df01 	andeq	sp, r2, r1, lsl #30
    4ccc:	09ea1900 	stmibeq	sl!, {r8, fp, ip}^
    4cd0:	050c0000 	streq	r0, [ip, #-0]
    4cd4:	06330121 	ldrteq	r0, [r3], -r1, lsr #2
    4cd8:	d2170000 	andsle	r0, r7, #0
    4cdc:	05000008 	streq	r0, [r0, #-8]
    4ce0:	06330123 	ldrteq	r0, [r3], -r3, lsr #2
    4ce4:	17000000 	strne	r0, [r0, -r0]
    4ce8:	0000077e 	andeq	r0, r0, lr, ror r7
    4cec:	28012405 	stmdacs	r1, {r0, r2, sl, sp}
    4cf0:	04000000 	streq	r0, [r0], #-0
    4cf4:	0008a417 	andeq	sl, r8, r7, lsl r4
    4cf8:	01250500 			; <UNDEFINED> instruction: 0x01250500
    4cfc:	00000639 	andeq	r0, r0, r9, lsr r6
    4d00:	040d0008 	streq	r0, [sp], #-8
    4d04:	000005fe 	strdeq	r0, [r0], -lr
    4d08:	05f2040d 	ldrbeq	r0, [r2, #1037]!	; 0x40d
    4d0c:	d9190000 	ldmdble	r9, {}	; <UNPREDICTABLE>
    4d10:	0e000005 	cdpeq	0, 0, cr0, cr0, cr5, {0}
    4d14:	74013d05 	strvc	r3, [r1], #-3333	; 0xfffff2fb
    4d18:	17000006 	strne	r0, [r0, -r6]
    4d1c:	00000918 	andeq	r0, r0, r8, lsl r9
    4d20:	74013e05 	strvc	r3, [r1], #-3589	; 0xfffff1fb
    4d24:	00000006 	andeq	r0, r0, r6
    4d28:	00095817 	andeq	r5, r9, r7, lsl r8
    4d2c:	013f0500 	teqeq	pc, r0, lsl #10
    4d30:	00000674 	andeq	r0, r0, r4, ror r6
    4d34:	09741706 	ldmdbeq	r4!, {r1, r2, r8, r9, sl, ip}^
    4d38:	40050000 	andmi	r0, r5, r0
    4d3c:	00005201 	andeq	r5, r0, r1, lsl #4
    4d40:	08000c00 	stmdaeq	r0, {sl, fp}
    4d44:	00000052 	andeq	r0, r0, r2, asr r0
    4d48:	00000684 	andeq	r0, r0, r4, lsl #13
    4d4c:	0000ca09 	andeq	ip, r0, r9, lsl #20
    4d50:	1a000200 	bne	5558 <_start-0x2aa8>
    4d54:	025705d0 	subseq	r0, r7, #208, 10	; 0x34000000
    4d58:	00000785 	andeq	r0, r0, r5, lsl #15
    4d5c:	0009be17 	andeq	fp, r9, r7, lsl lr
    4d60:	02590500 	subseq	r0, r9, #0, 10
    4d64:	00000021 	andeq	r0, r0, r1, lsr #32
    4d68:	095e1700 	ldmdbeq	lr, {r8, r9, sl, ip}^
    4d6c:	5a050000 	bpl	144d74 <mailbuffer+0x12dcb4>
    4d70:	00010a02 	andeq	r0, r1, r2, lsl #20
    4d74:	9a170400 	bls	5c5d7c <mailbuffer+0x5aecbc>
    4d78:	05000007 	streq	r0, [r0, #-7]
    4d7c:	0785025b 			; <UNDEFINED> instruction: 0x0785025b
    4d80:	17080000 	strne	r0, [r8, -r0]
    4d84:	00000a38 	andeq	r0, r0, r8, lsr sl
    4d88:	90025c05 	andls	r5, r2, r5, lsl #24
    4d8c:	24000001 	strcs	r0, [r0], #-1
    4d90:	00074317 	andeq	r4, r7, r7, lsl r3
    4d94:	025d0500 	subseq	r0, sp, #0, 10
    4d98:	00000028 	andeq	r0, r0, r8, lsr #32
    4d9c:	08cd1748 	stmiaeq	sp, {r3, r6, r8, r9, sl, ip}^
    4da0:	5e050000 	cdppl	0, 0, cr0, cr5, cr0, {0}
    4da4:	00006702 	andeq	r6, r0, r2, lsl #14
    4da8:	4e175000 	cdpmi	0, 1, cr5, cr7, cr0, {0}
    4dac:	0500000a 	streq	r0, [r0, #-10]
    4db0:	063f025f 			; <UNDEFINED> instruction: 0x063f025f
    4db4:	17580000 	ldrbne	r0, [r8, -r0]
    4db8:	000008d8 	ldrdeq	r0, [r0], -r8
    4dbc:	f2026005 	vhadd.s8	d6, d2, d5
    4dc0:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    4dc4:	000a5317 	andeq	r5, sl, r7, lsl r3
    4dc8:	02610500 	rsbeq	r0, r1, #0, 10
    4dcc:	000000f2 	strdeq	r0, [r0], -r2
    4dd0:	064f1770 			; <UNDEFINED> instruction: 0x064f1770
    4dd4:	62050000 	andvs	r0, r5, #0
    4dd8:	0000f202 	andeq	pc, r0, r2, lsl #4
    4ddc:	f9177800 			; <UNDEFINED> instruction: 0xf9177800
    4de0:	05000009 	streq	r0, [r0, #-9]
    4de4:	07950263 	ldreq	r0, [r5, r3, ror #4]
    4de8:	17800000 	strne	r0, [r0, r0]
    4dec:	0000078e 	andeq	r0, r0, lr, lsl #15
    4df0:	a5026405 	strge	r6, [r2, #-1029]	; 0xfffffbfb
    4df4:	88000007 	stmdahi	r0, {r0, r1, r2}
    4df8:	00098c17 	andeq	r8, r9, r7, lsl ip
    4dfc:	02650500 	rsbeq	r0, r5, #0, 10
    4e00:	00000028 	andeq	r0, r0, r8, lsr #32
    4e04:	06f517a0 	ldrbteq	r1, [r5], r0, lsr #15
    4e08:	66050000 	strvs	r0, [r5], -r0
    4e0c:	0000f202 	andeq	pc, r0, r2, lsl #4
    4e10:	4017a400 	andsmi	sl, r7, r0, lsl #8
    4e14:	05000006 	streq	r0, [r0, #-6]
    4e18:	00f20267 	rscseq	r0, r2, r7, ror #4
    4e1c:	17ac0000 	strne	r0, [ip, r0]!
    4e20:	000006e4 	andeq	r0, r0, r4, ror #13
    4e24:	f2026805 	vadd.i8	d6, d2, d5
    4e28:	b4000000 	strlt	r0, [r0], #-0
    4e2c:	0005f217 	andeq	pc, r5, r7, lsl r2	; <UNPREDICTABLE>
    4e30:	02690500 	rsbeq	r0, r9, #0, 10
    4e34:	000000f2 	strdeq	r0, [r0], -r2
    4e38:	060117bc 			; <UNDEFINED> instruction: 0x060117bc
    4e3c:	6a050000 	bvs	144e44 <mailbuffer+0x12dd84>
    4e40:	0000f202 	andeq	pc, r0, r2, lsl #4
    4e44:	8017c400 	andshi	ip, r7, r0, lsl #8
    4e48:	05000008 	streq	r0, [r0, #-8]
    4e4c:	0028026b 	eoreq	r0, r8, fp, ror #4
    4e50:	00cc0000 	sbceq	r0, ip, r0
    4e54:	00011008 	andeq	r1, r1, r8
    4e58:	00079500 	andeq	r9, r7, r0, lsl #10
    4e5c:	00ca0900 	sbceq	r0, sl, r0, lsl #18
    4e60:	00190000 	andseq	r0, r9, r0
    4e64:	00011008 	andeq	r1, r1, r8
    4e68:	0007a500 	andeq	sl, r7, r0, lsl #10
    4e6c:	00ca0900 	sbceq	r0, sl, r0, lsl #18
    4e70:	00070000 	andeq	r0, r7, r0
    4e74:	00011008 	andeq	r1, r1, r8
    4e78:	0007b500 	andeq	fp, r7, r0, lsl #10
    4e7c:	00ca0900 	sbceq	r0, sl, r0, lsl #18
    4e80:	00170000 	andseq	r0, r7, r0
    4e84:	7005f01a 	andvc	pc, r5, sl, lsl r0	; <UNPREDICTABLE>
    4e88:	0007d902 	andeq	sp, r7, r2, lsl #18
    4e8c:	081d1700 	ldmdaeq	sp, {r8, r9, sl, ip}
    4e90:	73050000 	movwvc	r0, #20480	; 0x5000
    4e94:	0007d902 	andeq	sp, r7, r2, lsl #18
    4e98:	f0170000 			; <UNDEFINED> instruction: 0xf0170000
    4e9c:	05000009 	streq	r0, [r0, #-9]
    4ea0:	07e90274 			; <UNDEFINED> instruction: 0x07e90274
    4ea4:	00780000 	rsbseq	r0, r8, r0
    4ea8:	0002d908 	andeq	sp, r2, r8, lsl #18
    4eac:	0007e900 	andeq	lr, r7, r0, lsl #18
    4eb0:	00ca0900 	sbceq	r0, sl, r0, lsl #18
    4eb4:	001d0000 	andseq	r0, sp, r0
    4eb8:	00002108 	andeq	r2, r0, r8, lsl #2
    4ebc:	0007f900 	andeq	pc, r7, r0, lsl #18
    4ec0:	00ca0900 	sbceq	r0, sl, r0, lsl #18
    4ec4:	001d0000 	andseq	r0, sp, r0
    4ec8:	5505f01b 	strpl	pc, [r5, #-27]	; 0xffffffe5
    4ecc:	00081b02 	andeq	r1, r8, r2, lsl #22
    4ed0:	09111c00 	ldmdbeq	r1, {sl, fp, ip}
    4ed4:	6c050000 	stcvs	0, cr0, [r5], {-0}
    4ed8:	00068402 	andeq	r8, r6, r2, lsl #8
    4edc:	0a251c00 	beq	94bee4 <mailbuffer+0x934e24>
    4ee0:	75050000 	strvc	r0, [r5, #-0]
    4ee4:	0007b502 	andeq	fp, r7, r2, lsl #10
    4ee8:	10080000 	andne	r0, r8, r0
    4eec:	2b000001 	blcs	4ef8 <_start-0x3108>
    4ef0:	09000008 	stmdbeq	r0, {r3}
    4ef4:	000000ca 	andeq	r0, r0, sl, asr #1
    4ef8:	361d0018 			; <UNDEFINED> instruction: 0x361d0018
    4efc:	15000008 	strne	r0, [r0, #-8]
    4f00:	00000427 	andeq	r0, r0, r7, lsr #8
    4f04:	2b040d00 	blcs	10830c <mailbuffer+0xf124c>
    4f08:	0d000008 	stceq	0, cr0, [r0, #-32]	; 0xffffffe0
    4f0c:	00017a04 	andeq	r7, r1, r4, lsl #20
    4f10:	084d1d00 	stmdaeq	sp, {r8, sl, fp, ip}^
    4f14:	28150000 	ldmdacs	r5, {}	; <UNPREDICTABLE>
    4f18:	00000000 	andeq	r0, r0, r0
    4f1c:	0853040d 	ldmdaeq	r3, {r0, r2, r3, sl}^
    4f20:	040d0000 	streq	r0, [sp], #-0
    4f24:	00000842 	andeq	r0, r0, r2, asr #16
    4f28:	0005f208 	andeq	pc, r5, r8, lsl #4
    4f2c:	00086900 	andeq	r6, r8, r0, lsl #18
    4f30:	00ca0900 	sbceq	r0, sl, r0, lsl #18
    4f34:	00020000 	andeq	r0, r2, r0
    4f38:	0009a01e 	andeq	sl, r9, lr, lsl r0
    4f3c:	02fd0500 	rscseq	r0, sp, #0, 10
    4f40:	00000427 	andeq	r0, r0, r7, lsr #8
    4f44:	0009991e 	andeq	r9, r9, lr, lsl r9
    4f48:	02fe0500 	rscseq	r0, lr, #0, 10
    4f4c:	0000042d 	andeq	r0, r0, sp, lsr #8
    4f50:	0008351f 	andeq	r3, r8, pc, lsl r5
    4f54:	0a5f0600 	beq	17c675c <mailbuffer+0x17af69c>
    4f58:	20000001 	andcs	r0, r0, r1
    4f5c:	000017b7 			; <UNDEFINED> instruction: 0x000017b7
    4f60:	00281a01 	eoreq	r1, r8, r1, lsl #20
    4f64:	40440000 	submi	r0, r4, r0
    4f68:	00800001 	addeq	r0, r0, r1
    4f6c:	9c010000 	stcls	0, cr0, [r1], {-0}
    4f70:	000008cf 	andeq	r0, r0, pc, asr #17
    4f74:	0017af21 	andseq	sl, r7, r1, lsr #30
    4f78:	281a0100 	ldmdacs	sl, {r8}
    4f7c:	02000000 	andeq	r0, r0, #0
    4f80:	72226c91 	eorvc	r6, r2, #37120	; 0x9100
    4f84:	1b010061 	blne	45110 <mailbuffer+0x2e050>
    4f88:	00000028 	andeq	r0, r0, r8, lsr #32
    4f8c:	23709102 	cmncs	r0, #-2147483648	; 0x80000000
    4f90:	0000179d 	muleq	r0, sp, r7
    4f94:	00281c01 	eoreq	r1, r8, r1, lsl #24
    4f98:	91020000 	mrsls	r0, (UNDEF: 2)
    4f9c:	90240074 	eorls	r0, r4, r4, ror r0
    4fa0:	01000017 	tsteq	r0, r7, lsl r0
    4fa4:	013fd811 	teqeq	pc, r1, lsl r8	; <UNPREDICTABLE>
    4fa8:	00006c00 	andeq	r6, r0, r0, lsl #24
    4fac:	219c0100 	orrscs	r0, ip, r0, lsl #2
    4fb0:	000017a5 	andeq	r1, r0, r5, lsr #15
    4fb4:	00281101 	eoreq	r1, r8, r1, lsl #2
    4fb8:	91020000 	mrsls	r0, (UNDEF: 2)
    4fbc:	17af216c 	strne	r2, [pc, ip, ror #2]!
    4fc0:	11010000 	mrsne	r0, (UNDEF: 1)
    4fc4:	00000028 	andeq	r0, r0, r8, lsr #32
    4fc8:	23689102 	cmncs	r8, #-2147483648	; 0x80000000
    4fcc:	0000179d 	muleq	r0, sp, r7
    4fd0:	00281201 	eoreq	r1, r8, r1, lsl #4
    4fd4:	91020000 	mrsls	r0, (UNDEF: 2)
    4fd8:	cd000074 	stcgt	0, cr0, [r0, #-464]	; 0xfffffe30
    4fdc:	04000003 	streq	r0, [r0], #-3
    4fe0:	00101900 	andseq	r1, r0, r0, lsl #18
    4fe4:	e3010400 	movw	r0, #5120	; 0x1400
    4fe8:	0c000000 	stceq	0, cr0, [r0], {-0}
    4fec:	000018c7 	andeq	r1, r0, r7, asr #17
    4ff0:	000140c4 	andeq	r4, r1, r4, asr #1
    4ff4:	0000098c 	andeq	r0, r0, ip, lsl #19
    4ff8:	00000fe2 	andeq	r0, r0, r2, ror #31
    4ffc:	00183d02 	andseq	r3, r8, r2, lsl #26
    5000:	32030200 	andcc	r0, r3, #0, 4
    5004:	05000000 	streq	r0, [r0, #-0]
    5008:	01609003 	cmneq	r0, r3
    500c:	08010300 	stmdaeq	r1, {r8, r9}
    5010:	00000876 	andeq	r0, r0, r6, ror r8
    5014:	00003204 	andeq	r3, r0, r4, lsl #4
    5018:	00670500 	rsbeq	r0, r7, r0, lsl #10
    501c:	00540000 	subseq	r0, r4, r0
    5020:	59060000 	stmdbpl	r6, {}	; <UNPREDICTABLE>
    5024:	5f000000 	svcpl	0x00000000
    5028:	00005906 	andeq	r5, r0, r6, lsl #18
    502c:	04000500 	streq	r0, [r0], #-1280	; 0xfffffb00
    5030:	0000003e 	andeq	r0, r0, lr, lsr r0
    5034:	da070403 	ble	1c6048 <mailbuffer+0x1aef88>
    5038:	03000000 	movweq	r0, #0
    503c:	086d0801 	stmdaeq	sp!, {r0, fp}^
    5040:	60040000 	andvs	r0, r4, r0
    5044:	02000000 	andeq	r0, r0, #0
    5048:	00001874 	andeq	r1, r0, r4, ror r8
    504c:	00540103 	subseq	r0, r4, r3, lsl #2
    5050:	03050000 	movweq	r0, #20480	; 0x5000
    5054:	00015a28 	andeq	r5, r1, r8, lsr #20
    5058:	00189702 	andseq	r9, r8, r2, lsl #14
    505c:	8e0c0100 	adfhie	f0, f4, f0
    5060:	05000000 	streq	r0, [r0, #-0]
    5064:	0170b003 	cmneq	r0, r3
    5068:	05040700 	streq	r0, [r4, #-1792]	; 0xfffff900
    506c:	00746e69 	rsbseq	r6, r4, r9, ror #28
    5070:	00008e08 	andeq	r8, r0, r8, lsl #28
    5074:	18200200 	stmdane	r0!, {r9}
    5078:	0d010000 	stceq	0, cr0, [r1, #-0]
    507c:	0000008e 	andeq	r0, r0, lr, lsl #1
    5080:	70b40305 	adcsvc	r0, r4, r5, lsl #6
    5084:	bb050001 	bllt	145090 <mailbuffer+0x12dfd0>
    5088:	bb000000 	bllt	5090 <_start-0x2f70>
    508c:	06000000 	streq	r0, [r0], -r0
    5090:	00000059 	andeq	r0, r0, r9, asr r0
    5094:	04030015 	streq	r0, [r3], #-21	; 0xffffffeb
    5098:	00061c07 	andeq	r1, r6, r7, lsl #24
    509c:	18000200 	stmdane	r0, {r9}
    50a0:	12010000 	andne	r0, r1, #0
    50a4:	000000ab 	andeq	r0, r0, fp, lsr #1
    50a8:	70c00305 	sbcvc	r0, r0, r5, lsl #6
    50ac:	0b020001 	bleq	850b8 <mailbuffer+0x6dff8>
    50b0:	01000018 	tsteq	r0, r8, lsl r0
    50b4:	0000e413 	andeq	lr, r0, r3, lsl r4
    50b8:	b8030500 	stmdalt	r3, {r8, sl}
    50bc:	09000170 	stmdbeq	r0, {r4, r5, r6, r8}
    50c0:	0000bb04 	andeq	fp, r0, r4, lsl #22
    50c4:	18590200 	ldmdane	r9, {r9}^
    50c8:	96010000 	strls	r0, [r1], -r0
    50cc:	0000008e 	andeq	r0, r0, lr, lsl #1
    50d0:	60940305 	addsvs	r0, r4, r5, lsl #6
    50d4:	64020001 	strvs	r0, [r2], #-1
    50d8:	01000018 	tsteq	r0, r8, lsl r0
    50dc:	00008e97 	muleq	r0, r7, lr
    50e0:	98030500 	stmdals	r3, {r8, sl}
    50e4:	0a000160 	beq	566c <_start-0x2994>
    50e8:	000018b6 			; <UNDEFINED> instruction: 0x000018b6
    50ec:	4964d001 	stmdbmi	r4!, {r0, ip, lr, pc}^
    50f0:	00ec0001 	rsceq	r0, ip, r1
    50f4:	9c010000 	stcls	0, cr0, [r1], {-0}
    50f8:	00000138 	andeq	r0, r0, r8, lsr r1
    50fc:	0149700b 	cmpeq	r9, fp
    5100:	00005400 	andeq	r5, r0, r0, lsl #8
    5104:	00780c00 	rsbseq	r0, r8, r0, lsl #24
    5108:	008ed401 	addeq	sp, lr, r1, lsl #8
    510c:	91020000 	mrsls	r0, (UNDEF: 2)
    5110:	0d000074 	stceq	0, cr0, [r0, #-464]	; 0xfffffe30
    5114:	00001817 	andeq	r1, r0, r7, lsl r8
    5118:	4748b901 	strbmi	fp, [r8, -r1, lsl #18]
    511c:	021c0001 	andseq	r0, ip, #1
    5120:	9c010000 	stcls	0, cr0, [r1], {-0}
    5124:	000001a2 	andeq	r0, r0, r2, lsr #3
    5128:	0017f10e 	andseq	pc, r7, lr, lsl #2
    512c:	a2b90100 	adcsge	r0, r9, #0, 2
    5130:	03000001 	movweq	r0, #1
    5134:	0e7e9491 	mrceq	4, 3, r9, cr14, cr1, {4}
    5138:	0000186f 	andeq	r1, r0, pc, ror #16
    513c:	008eb901 	addeq	fp, lr, r1, lsl #18
    5140:	91030000 	mrsls	r0, (UNDEF: 3)
    5144:	f90e7e90 			; <UNDEFINED> instruction: 0xf90e7e90
    5148:	01000017 	tsteq	r0, r7, lsl r0
    514c:	00008eb9 			; <UNDEFINED> instruction: 0x00008eb9
    5150:	8c910300 	ldchi	3, cr0, [r1], {0}
    5154:	65680c7e 	strbvs	r0, [r8, #-3198]!	; 0xfffff382
    5158:	bb010078 	bllt	45340 <mailbuffer+0x2e280>
    515c:	000001a8 	andeq	r0, r0, r8, lsr #3
    5160:	0c649102 	stfeqp	f1, [r4], #-8
    5164:	bd01006d 	stclt	0, cr0, [r1, #-436]	; 0xfffffe4c
    5168:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
    516c:	7e9c9103 	cosvce	f1, f3
    5170:	0100690c 	tsteq	r0, ip, lsl #18
    5174:	00008ebe 			; <UNDEFINED> instruction: 0x00008ebe
    5178:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    517c:	39040900 	stmdbcc	r4, {r8, fp}
    5180:	05000000 	streq	r0, [r0, #-0]
    5184:	00000032 	andeq	r0, r0, r2, lsr r0
    5188:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
    518c:	00005906 	andeq	r5, r0, r6, lsl #18
    5190:	05000f00 	streq	r0, [r0, #-3840]	; 0xfffff100
    5194:	00000032 	andeq	r0, r0, r2, lsr r0
    5198:	000001c8 	andeq	r0, r0, r8, asr #3
    519c:	00005906 	andeq	r5, r0, r6, lsl #18
    51a0:	0d00c700 	stceq	7, cr12, [r0, #-0]
    51a4:	000018ae 	andeq	r1, r0, lr, lsr #17
    51a8:	45449901 	strbmi	r9, [r4, #-2305]	; 0xfffff6ff
    51ac:	02040001 	andeq	r0, r4, #1
    51b0:	9c010000 	stcls	0, cr0, [r1], {-0}
    51b4:	00000252 	andeq	r0, r0, r2, asr r2
    51b8:	0017f10e 	andseq	pc, r7, lr, lsl #2
    51bc:	a2990100 	addsge	r0, r9, #0, 2
    51c0:	02000001 	andeq	r0, r0, #1
    51c4:	f90e5c91 			; <UNDEFINED> instruction: 0xf90e5c91
    51c8:	01000017 	tsteq	r0, r7, lsl r0
    51cc:	00008e99 	muleq	r0, r9, lr
    51d0:	58910200 	ldmpl	r1, {r9}
    51d4:	0018900f 	andseq	r9, r8, pc
    51d8:	8e9c0100 	fmlhie	f0, f4, f0
    51dc:	02000000 	andeq	r0, r0, #0
    51e0:	2e0f7091 	mcrcs	0, 0, r7, cr15, cr1, {4}
    51e4:	01000018 	tsteq	r0, r8, lsl r0
    51e8:	0000329e 	muleq	r0, lr, r2
    51ec:	6f910200 	svcvs	0x00910200
    51f0:	0146200b 	cmpeq	r6, fp
    51f4:	0000a400 	andeq	sl, r0, r0, lsl #8
    51f8:	18440f00 	stmdane	r4, {r8, r9, sl, fp}^
    51fc:	a6010000 	strge	r0, [r1], -r0
    5200:	00000252 	andeq	r0, r0, r2, asr r2
    5204:	0f689102 	svceq	0x00689102
    5208:	00001882 	andeq	r1, r0, r2, lsl #17
    520c:	008ea701 	addeq	sl, lr, r1, lsl #14
    5210:	91020000 	mrsls	r0, (UNDEF: 2)
    5214:	46580b64 	ldrbmi	r0, [r8], -r4, ror #22
    5218:	00540001 	subseq	r0, r4, r1
    521c:	780c0000 	stmdavc	ip, {}	; <UNPREDICTABLE>
    5220:	8eaa0100 	fdvhie	f0, f2, f0
    5224:	02000000 	andeq	r0, r0, #0
    5228:	00007491 	muleq	r0, r1, r4
    522c:	95040900 	strls	r0, [r4, #-2304]	; 0xfffff700
    5230:	0d000000 	stceq	0, cr0, [r0, #-0]
    5234:	0000184e 	andeq	r1, r0, lr, asr #16
    5238:	44dc8f01 	ldrbmi	r8, [ip], #3841	; 0xf01
    523c:	00680001 	rsbeq	r0, r8, r1
    5240:	9c010000 	stcls	0, cr0, [r1], {-0}
    5244:	000002a2 	andeq	r0, r0, r2, lsr #5
    5248:	72747310 	rsbsvc	r7, r4, #16, 6	; 0x40000000
    524c:	a28f0100 	addge	r0, pc, #0, 2
    5250:	02000001 	andeq	r0, r0, #1
    5254:	78107491 	ldmdavc	r0, {r0, r4, r7, sl, ip, sp, lr}
    5258:	8e8f0100 	rmfhie	f0, f7, f0
    525c:	02000000 	andeq	r0, r0, #0
    5260:	79107091 	ldmdbvc	r0, {r0, r4, r7, ip, sp, lr}
    5264:	8e8f0100 	rmfhie	f0, f7, f0
    5268:	02000000 	andeq	r0, r0, #0
    526c:	f90e6c91 			; <UNDEFINED> instruction: 0xf90e6c91
    5270:	01000017 	tsteq	r0, r7, lsl r0
    5274:	00008e8f 	andeq	r8, r0, pc, lsl #29
    5278:	68910200 	ldmvs	r1, {r9}
    527c:	18791100 	ldmdane	r9!, {r8, ip}^
    5280:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
    5284:	000143a8 	andeq	r4, r1, r8, lsr #7
    5288:	00000134 	andeq	r0, r0, r4, lsr r1
    528c:	03029c01 	movweq	r9, #11265	; 0x2c01
    5290:	63100000 	tstvs	r0, #0
    5294:	60780100 	rsbsvs	r0, r8, r0, lsl #2
    5298:	02000000 	andeq	r0, r0, #0
    529c:	78106f91 	ldmdavc	r0, {r0, r4, r7, r8, r9, sl, fp, sp, lr}
    52a0:	8e780100 	rpwhie	f0, f0, f0
    52a4:	02000000 	andeq	r0, r0, #0
    52a8:	79106891 	ldmdbvc	r0, {r0, r4, r7, fp, sp, lr}
    52ac:	8e780100 	rpwhie	f0, f0, f0
    52b0:	02000000 	andeq	r0, r0, #0
    52b4:	f90e6491 			; <UNDEFINED> instruction: 0xf90e6491
    52b8:	01000017 	tsteq	r0, r7, lsl r0
    52bc:	00008e78 	andeq	r8, r0, r8, ror lr
    52c0:	60910200 	addsvs	r0, r1, r0, lsl #4
    52c4:	0100690c 	tsteq	r0, ip, lsl #18
    52c8:	00008e79 	andeq	r8, r0, r9, ror lr
    52cc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    52d0:	01006a0c 	tsteq	r0, ip, lsl #20
    52d4:	00008e79 	andeq	r8, r0, r9, ror lr
    52d8:	70910200 	addsvc	r0, r1, r0, lsl #4
    52dc:	18870d00 	stmne	r7, {r8, sl, fp}
    52e0:	63010000 	movwvs	r0, #4096	; 0x1000
    52e4:	00014318 	andeq	r4, r1, r8, lsl r3
    52e8:	00000090 	muleq	r0, r0, r0
    52ec:	03729c01 	cmneq	r2, #256	; 0x100
    52f0:	78100000 	ldmdavc	r0, {}	; <UNPREDICTABLE>
    52f4:	63010031 	movwvs	r0, #4145	; 0x1031
    52f8:	000000bb 	strheq	r0, [r0], -fp
    52fc:	106c9102 	rsbne	r9, ip, r2, lsl #2
    5300:	01003179 	tsteq	r0, r9, ror r1
    5304:	0000bb63 	andeq	fp, r0, r3, ror #22
    5308:	68910200 	ldmvs	r1, {r9}
    530c:	00327810 	eorseq	r7, r2, r0, lsl r8
    5310:	00bb6301 	adcseq	r6, fp, r1, lsl #6
    5314:	91020000 	mrsls	r0, (UNDEF: 2)
    5318:	32791064 	rsbscc	r1, r9, #100	; 0x64
    531c:	bb630100 	bllt	18c5724 <mailbuffer+0x18ae664>
    5320:	02000000 	andeq	r0, r0, #0
    5324:	f90e6091 			; <UNDEFINED> instruction: 0xf90e6091
    5328:	01000017 	tsteq	r0, r7, lsl r0
    532c:	00008e63 	andeq	r8, r0, r3, ror #28
    5330:	00910200 	addseq	r0, r1, r0, lsl #4
    5334:	0100690c 	tsteq	r0, ip, lsl #18
    5338:	0000bb64 	andeq	fp, r0, r4, ror #22
    533c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    5340:	01006a0c 	tsteq	r0, ip, lsl #20
    5344:	0000bb64 	andeq	fp, r0, r4, ror #22
    5348:	70910200 	addsvc	r0, r1, r0, lsl #4
    534c:	18a41100 	stmiane	r4!, {r8, ip}
    5350:	5e010000 	cdppl	0, 0, cr0, cr1, cr0, {0}
    5354:	000142b4 			; <UNDEFINED> instruction: 0x000142b4
    5358:	00000064 	andeq	r0, r0, r4, rrx
    535c:	03ae9c01 			; <UNDEFINED> instruction: 0x03ae9c01
    5360:	78100000 	ldmdavc	r0, {}	; <UNPREDICTABLE>
    5364:	bb5e0100 	bllt	178576c <mailbuffer+0x176e6ac>
    5368:	02000000 	andeq	r0, r0, #0
    536c:	79107491 	ldmdbvc	r0, {r0, r4, r7, sl, ip, sp, lr}
    5370:	bb5e0100 	bllt	1785778 <mailbuffer+0x176e6b8>
    5374:	02000000 	andeq	r0, r0, #0
    5378:	f90e7091 			; <UNDEFINED> instruction: 0xf90e7091
    537c:	01000017 	tsteq	r0, r7, lsl r0
    5380:	00008e5e 	andeq	r8, r0, lr, asr lr
    5384:	6c910200 	lfmvs	f0, 4, [r1], {0}
    5388:	18c01200 	stmiane	r0, {r9, ip}^
    538c:	15010000 	strne	r0, [r1, #-0]
    5390:	000140ec 	andeq	r4, r1, ip, ror #1
    5394:	000001c8 	andeq	r0, r0, r8, asr #3
    5398:	f3139c01 			; <UNDEFINED> instruction: 0xf3139c01
    539c:	01000018 	tsteq	r0, r8, lsl r0
    53a0:	0140c40f 	cmpeq	r0, pc, lsl #8
    53a4:	00002800 	andeq	r2, r0, r0, lsl #16
    53a8:	009c0100 	addseq	r0, ip, r0, lsl #2
    53ac:	00000af2 	strdeq	r0, [r0], -r2
    53b0:	11380004 	teqne	r8, r4
    53b4:	01040000 	mrseq	r0, (UNDEF: 4)
    53b8:	000000e3 	andeq	r0, r0, r3, ror #1
    53bc:	0019190c 	andseq	r1, r9, ip, lsl #18
    53c0:	014a5000 	mrseq	r5, (UNDEF: 74)
    53c4:	0003d400 	andeq	sp, r3, r0, lsl #8
    53c8:	00114a00 	andseq	r4, r1, r0, lsl #20
    53cc:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    53d0:	00746e69 	rsbseq	r6, r4, r9, ror #28
    53d4:	000acd03 	andeq	ip, sl, r3, lsl #26
    53d8:	33d80200 	bicscc	r0, r8, #0, 4
    53dc:	04000000 	streq	r0, [r0], #-0
    53e0:	061c0704 	ldreq	r0, [ip], -r4, lsl #14
    53e4:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
    53e8:	00012d05 	andeq	r2, r1, r5, lsl #26
    53ec:	04080400 	streq	r0, [r8], #-1024	; 0xfffffc00
    53f0:	0000015b 	andeq	r0, r0, fp, asr r1
    53f4:	04040405 	streq	r0, [r4], #-1029	; 0xfffffbfb
    53f8:	00061707 	andeq	r1, r6, r7, lsl #14
    53fc:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    5400:	00000132 	andeq	r0, r0, r2, lsr r1
    5404:	6f060104 	svcvs	0x00060104
    5408:	04000008 	streq	r0, [r0], #-8
    540c:	086d0801 	stmdaeq	sp!, {r0, fp}^
    5410:	5f060000 	svcpl	0x00060000
    5414:	04000000 	streq	r0, [r0], #-0
    5418:	08890502 	stmeq	r9, {r1, r8, sl}
    541c:	02040000 	andeq	r0, r4, #0
    5420:	0000a007 	andeq	sl, r0, r7
    5424:	07080400 	streq	r0, [r8, -r0, lsl #8]
    5428:	00000612 	andeq	r0, r0, r2, lsl r6
    542c:	00085b03 	andeq	r5, r8, r3, lsl #22
    5430:	21070300 	mrscs	r0, SP_und
    5434:	03000000 	movweq	r0, #0
    5438:	0000084a 	andeq	r0, r0, sl, asr #16
    543c:	00512c04 	subseq	r2, r1, r4, lsl #24
    5440:	40030000 	andmi	r0, r3, r0
    5444:	04000009 	streq	r0, [r0], #-9
    5448:	00005172 	andeq	r5, r0, r2, ror r1
    544c:	07b50700 	ldreq	r0, [r5, r0, lsl #14]!
    5450:	65020000 	strvs	r0, [r2, #-0]
    5454:	00003301 	andeq	r3, r0, r1, lsl #6
    5458:	04040800 	streq	r0, [r4], #-2048	; 0xfffff800
    545c:	0000cca6 	andeq	ip, r0, r6, lsr #25
    5460:	07af0900 	streq	r0, [pc, r0, lsl #18]!
    5464:	a8040000 	stmdage	r4, {}	; <UNPREDICTABLE>
    5468:	000000a1 	andeq	r0, r0, r1, lsr #1
    546c:	00076109 	andeq	r6, r7, r9, lsl #2
    5470:	cca90400 	cfstrsgt	mvf0, [r9]
    5474:	00000000 	andeq	r0, r0, r0
    5478:	00005f0a 	andeq	r5, r0, sl, lsl #30
    547c:	0000dc00 	andeq	sp, r0, r0, lsl #24
    5480:	00dc0b00 	sbcseq	r0, ip, r0, lsl #22
    5484:	00030000 	andeq	r0, r3, r0
    5488:	da070404 	ble	1c64a0 <mailbuffer+0x1af3e0>
    548c:	0c000000 	stceq	0, cr0, [r0], {-0}
    5490:	04a30408 	strteq	r0, [r3], #1032	; 0x408
    5494:	0d000001 	stceq	0, cr0, [r0, #-4]
    5498:	0000091e 	andeq	r0, r0, lr, lsl r9
    549c:	0021a504 	eoreq	sl, r1, r4, lsl #10
    54a0:	0d000000 	stceq	0, cr0, [r0, #-0]
    54a4:	00000926 	andeq	r0, r0, r6, lsr #18
    54a8:	00adaa04 	adceq	sl, sp, r4, lsl #20
    54ac:	00040000 	andeq	r0, r4, r0
    54b0:	0008b103 	andeq	fp, r8, r3, lsl #2
    54b4:	e3ab0400 			; <UNDEFINED> instruction: 0xe3ab0400
    54b8:	03000000 	movweq	r0, #0
    54bc:	0000072a 	andeq	r0, r0, sl, lsr #14
    54c0:	0080af04 	addeq	sl, r0, r4, lsl #30
    54c4:	040e0000 	streq	r0, [lr], #-0
    54c8:	00000120 	andeq	r0, r0, r0, lsr #2
    54cc:	76080104 	strvc	r0, [r8], -r4, lsl #2
    54d0:	06000008 	streq	r0, [r0], -r8
    54d4:	00000120 	andeq	r0, r0, r0, lsr #2
    54d8:	00098403 	andeq	r8, r9, r3, lsl #8
    54dc:	4a160500 	bmi	5868e4 <mailbuffer+0x56f824>
    54e0:	0f000000 	svceq	0x00000000
    54e4:	0000073b 	andeq	r0, r0, fp, lsr r7
    54e8:	8a2d0518 	bhi	b46950 <mailbuffer+0xb2f890>
    54ec:	0d000001 	stceq	0, cr0, [r0, #-4]
    54f0:	000008d2 	ldrdeq	r0, [r0], -r2
    54f4:	018a2f05 	orreq	r2, sl, r5, lsl #30
    54f8:	10000000 	andne	r0, r0, r0
    54fc:	05006b5f 	streq	r6, [r0, #-2911]	; 0xfffff4a1
    5500:	00002130 	andeq	r2, r0, r0, lsr r1
    5504:	090d0400 	stmdbeq	sp, {sl}
    5508:	05000009 	streq	r0, [r0, #-9]
    550c:	00002130 	andeq	r2, r0, r0, lsr r1
    5510:	240d0800 	strcs	r0, [sp], #-2048	; 0xfffff800
    5514:	05000007 	streq	r0, [r0, #-7]
    5518:	00002130 	andeq	r2, r0, r0, lsr r1
    551c:	db0d0c00 	blle	348524 <mailbuffer+0x331464>
    5520:	05000009 	streq	r0, [r0, #-9]
    5524:	00002130 	andeq	r2, r0, r0, lsr r1
    5528:	5f101000 	svcpl	0x00101000
    552c:	31050078 	tstcc	r5, r8, ror r0
    5530:	00000190 	muleq	r0, r0, r1
    5534:	040e0014 	streq	r0, [lr], #-20	; 0xffffffec
    5538:	00000137 	andeq	r0, r0, r7, lsr r1
    553c:	00012c0a 	andeq	r2, r1, sl, lsl #24
    5540:	0001a000 	andeq	sl, r1, r0
    5544:	00dc0b00 	sbcseq	r0, ip, r0, lsl #22
    5548:	00000000 	andeq	r0, r0, r0
    554c:	00075c0f 	andeq	r5, r7, pc, lsl #24
    5550:	35052400 	strcc	r2, [r5, #-1024]	; 0xfffffc00
    5554:	00000219 	andeq	r0, r0, r9, lsl r2
    5558:	00065d0d 	andeq	r5, r6, sp, lsl #26
    555c:	21370500 	teqcs	r7, r0, lsl #10
    5560:	00000000 	andeq	r0, r0, r0
    5564:	00094f0d 	andeq	r4, r9, sp, lsl #30
    5568:	21380500 	teqcs	r8, r0, lsl #10
    556c:	04000000 	streq	r0, [r0], #-0
    5570:	0006720d 	andeq	r7, r6, sp, lsl #4
    5574:	21390500 	teqcs	r9, r0, lsl #10
    5578:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    557c:	000a660d 	andeq	r6, sl, sp, lsl #12
    5580:	213a0500 	teqcs	sl, r0, lsl #10
    5584:	0c000000 	stceq	0, cr0, [r0], {-0}
    5588:	0008240d 	andeq	r2, r8, sp, lsl #8
    558c:	213b0500 	teqcs	fp, r0, lsl #10
    5590:	10000000 	andne	r0, r0, r0
    5594:	0007d60d 	andeq	sp, r7, sp, lsl #12
    5598:	213c0500 	teqcs	ip, r0, lsl #10
    559c:	14000000 	strne	r0, [r0], #-0
    55a0:	0009e00d 	andeq	lr, r9, sp
    55a4:	213d0500 	teqcs	sp, r0, lsl #10
    55a8:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    55ac:	0008930d 	andeq	r9, r8, sp, lsl #6
    55b0:	213e0500 	teqcs	lr, r0, lsl #10
    55b4:	1c000000 	stcne	0, cr0, [r0], {-0}
    55b8:	000a2d0d 	andeq	r2, sl, sp, lsl #26
    55bc:	213f0500 	teqcs	pc, r0, lsl #10
    55c0:	20000000 	andcs	r0, r0, r0
    55c4:	06811100 	streq	r1, [r1], r0, lsl #2
    55c8:	01080000 	mrseq	r0, (UNDEF: 8)
    55cc:	02594805 	subseq	r4, r9, #327680	; 0x50000
    55d0:	030d0000 	movweq	r0, #53248	; 0xd000
    55d4:	05000007 	streq	r0, [r0, #-7]
    55d8:	00025949 	andeq	r5, r2, r9, asr #18
    55dc:	c70d0000 	strgt	r0, [sp, -r0]
    55e0:	05000005 	streq	r0, [r0, #-5]
    55e4:	0002594a 	andeq	r5, r2, sl, asr #18
    55e8:	6b128000 	blvs	4a55f0 <mailbuffer+0x48e530>
    55ec:	05000009 	streq	r0, [r0, #-9]
    55f0:	00012c4c 	andeq	r2, r1, ip, asr #24
    55f4:	12010000 	andne	r0, r1, #0
    55f8:	000006a6 	andeq	r0, r0, r6, lsr #13
    55fc:	012c4f05 			; <UNDEFINED> instruction: 0x012c4f05
    5600:	01040000 	mrseq	r0, (UNDEF: 4)
    5604:	00480a00 	subeq	r0, r8, r0, lsl #20
    5608:	02690000 	rsbeq	r0, r9, #0
    560c:	dc0b0000 	stcle	0, cr0, [fp], {-0}
    5610:	1f000000 	svcne	0x00000000
    5614:	082d1100 	stmdaeq	sp!, {r8, ip}
    5618:	01900000 	orrseq	r0, r0, r0
    561c:	02a75b05 	adceq	r5, r7, #5120	; 0x1400
    5620:	d20d0000 	andle	r0, sp, #0
    5624:	05000008 	streq	r0, [r0, #-8]
    5628:	0002a75c 	andeq	sl, r2, ip, asr r7
    562c:	ea0d0000 	b	345634 <mailbuffer+0x32e574>
    5630:	05000008 	streq	r0, [r0, #-8]
    5634:	0000215d 	andeq	r2, r0, sp, asr r1
    5638:	0b0d0400 	bleq	346640 <mailbuffer+0x32f580>
    563c:	05000007 	streq	r0, [r0, #-7]
    5640:	0002ad5f 	andeq	sl, r2, pc, asr sp
    5644:	810d0800 	tsthi	sp, r0, lsl #16
    5648:	05000006 	streq	r0, [r0, #-6]
    564c:	00021960 	andeq	r1, r2, r0, ror #18
    5650:	0e008800 	cdpeq	8, 0, cr8, cr0, cr0, {0}
    5654:	00026904 	andeq	r6, r2, r4, lsl #18
    5658:	02bd0a00 	adcseq	r0, sp, #0, 20
    565c:	02bd0000 	adcseq	r0, sp, #0
    5660:	dc0b0000 	stcle	0, cr0, [fp], {-0}
    5664:	1f000000 	svcne	0x00000000
    5668:	c3040e00 	movwgt	r0, #19968	; 0x4e00
    566c:	13000002 	movwne	r0, #2
    5670:	00089d0f 	andeq	r9, r8, pc, lsl #26
    5674:	73050800 	movwvc	r0, #22528	; 0x5800
    5678:	000002e9 	andeq	r0, r0, r9, ror #5
    567c:	00066c0d 	andeq	r6, r6, sp, lsl #24
    5680:	e9740500 	ldmdb	r4!, {r8, sl}^
    5684:	00000002 	andeq	r0, r0, r2
    5688:	0005d30d 	andeq	sp, r5, sp, lsl #6
    568c:	21750500 	cmncs	r5, r0, lsl #10
    5690:	04000000 	streq	r0, [r0], #-0
    5694:	5f040e00 	svcpl	0x00040e00
    5698:	0f000000 	svceq	0x00000000
    569c:	000008bc 			; <UNDEFINED> instruction: 0x000008bc
    56a0:	19b30568 	ldmibne	r3!, {r3, r5, r6, r8, sl}
    56a4:	10000004 	andne	r0, r0, r4
    56a8:	0500705f 	streq	r7, [r0, #-95]	; 0xffffffa1
    56ac:	0002e9b4 			; <UNDEFINED> instruction: 0x0002e9b4
    56b0:	5f100000 	svcpl	0x00100000
    56b4:	b5050072 	strlt	r0, [r5, #-114]	; 0xffffff8e
    56b8:	00000021 	andeq	r0, r0, r1, lsr #32
    56bc:	775f1004 	ldrbvc	r1, [pc, -r4]
    56c0:	21b60500 			; <UNDEFINED> instruction: 0x21b60500
    56c4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    56c8:	00069f0d 	andeq	r9, r6, sp, lsl #30
    56cc:	6bb70500 	blvs	fedc6ad4 <_estack+0xf6db6ad4>
    56d0:	0c000000 	stceq	0, cr0, [r0], {-0}
    56d4:	0007780d 	andeq	r7, r7, sp, lsl #16
    56d8:	6bb80500 	blvs	fee06ae0 <_estack+0xf6df6ae0>
    56dc:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    56e0:	66625f10 	uqadd16vs	r5, r2, r0
    56e4:	c4b90500 	ldrtgt	r0, [r9], #1280	; 0x500
    56e8:	10000002 	andne	r0, r0, r2
    56ec:	0006290d 	andeq	r2, r6, sp, lsl #18
    56f0:	21ba0500 			; <UNDEFINED> instruction: 0x21ba0500
    56f4:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    56f8:	00068f0d 	andeq	r8, r6, sp, lsl #30
    56fc:	48c10500 	stmiami	r1, {r8, sl}^
    5700:	1c000000 	stcne	0, cr0, [r0], {-0}
    5704:	00157d0d 	andseq	r7, r5, sp, lsl #26
    5708:	74c30500 	strbvc	r0, [r3], #1280	; 0x500
    570c:	20000005 	andcs	r0, r0, r5
    5710:	0017620d 	andseq	r6, r7, sp, lsl #4
    5714:	9ec50500 	cdpls	5, 12, cr0, cr5, cr0, {0}
    5718:	24000005 	strcs	r0, [r0], #-5
    571c:	00092e0d 	andeq	r2, r9, sp, lsl #28
    5720:	c2c80500 	sbcgt	r0, r8, #0, 10
    5724:	28000005 	stmdacs	r0, {r0, r2}
    5728:	000a470d 	andeq	r4, sl, sp, lsl #14
    572c:	dcc90500 	cfstr64le	mvdx0, [r9], {0}
    5730:	2c000005 	stccs	0, cr0, [r0], {5}
    5734:	62755f10 	rsbsvs	r5, r5, #16, 30	; 0x40
    5738:	c4cc0500 	strbgt	r0, [ip], #1280	; 0x500
    573c:	30000002 	andcc	r0, r0, r2
    5740:	70755f10 	rsbsvc	r5, r5, r0, lsl pc
    5744:	e9cd0500 	stmib	sp, {r8, sl}^
    5748:	38000002 	stmdacc	r0, {r1}
    574c:	72755f10 	rsbsvc	r5, r5, #16, 30	; 0x40
    5750:	21ce0500 	biccs	r0, lr, r0, lsl #10
    5754:	3c000000 	stccc	0, cr0, [r0], {-0}
    5758:	0006660d 	andeq	r6, r6, sp, lsl #12
    575c:	e2d10500 	sbcs	r0, r1, #0, 10
    5760:	40000005 	andmi	r0, r0, r5
    5764:	000a1f0d 	andeq	r1, sl, sp, lsl #30
    5768:	f2d20500 	vabal.s16	q8, d2, d0
    576c:	43000005 	movwmi	r0, #5
    5770:	626c5f10 	rsbvs	r5, ip, #16, 30	; 0x40
    5774:	c4d50500 	ldrbgt	r0, [r5], #1280	; 0x500
    5778:	44000002 	strmi	r0, [r0], #-2
    577c:	0006b50d 	andeq	fp, r6, sp, lsl #10
    5780:	21d80500 	bicscs	r0, r8, r0, lsl #10
    5784:	4c000000 	stcmi	0, cr0, [r0], {-0}
    5788:	0006c60d 	andeq	ip, r6, sp, lsl #12
    578c:	8bd90500 	blhi	ff646b94 <_estack+0xf7636b94>
    5790:	50000000 	andpl	r0, r0, r0
    5794:	0005ec0d 	andeq	lr, r5, sp, lsl #24
    5798:	37dc0500 	ldrbcc	r0, [ip, r0, lsl #10]
    579c:	54000004 	strpl	r0, [r0], #-4
    57a0:	0007bc0d 	andeq	fp, r7, sp, lsl #24
    57a4:	0fe00500 	svceq	0x00e00500
    57a8:	58000001 	stmdapl	r0, {r0}
    57ac:	0008c40d 	andeq	ip, r8, sp, lsl #8
    57b0:	04e20500 	strbteq	r0, [r2], #1280	; 0x500
    57b4:	5c000001 	stcpl	0, cr0, [r0], {1}
    57b8:	0007ce0d 	andeq	ip, r7, sp, lsl #28
    57bc:	21e30500 	mvncs	r0, r0, lsl #10
    57c0:	64000000 	strvs	r0, [r0], #-0
    57c4:	00211400 	eoreq	r1, r1, r0, lsl #8
    57c8:	04370000 	ldrteq	r0, [r7], #-0
    57cc:	37150000 	ldrcc	r0, [r5, -r0]
    57d0:	15000004 	strne	r0, [r0, #-4]
    57d4:	00000048 	andeq	r0, r0, r8, asr #32
    57d8:	00011a15 	andeq	r1, r1, r5, lsl sl
    57dc:	00211500 	eoreq	r1, r1, r0, lsl #10
    57e0:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    57e4:	00044204 	andeq	r4, r4, r4, lsl #4
    57e8:	04370600 	ldrteq	r0, [r7], #-1536	; 0xfffffa00
    57ec:	11160000 	tstne	r6, r0
    57f0:	28000009 	stmdacs	r0, {r0, r3}
    57f4:	02380504 	eorseq	r0, r8, #4, 10	; 0x1000000
    57f8:	00000574 	andeq	r0, r0, r4, ror r5
    57fc:	00088217 	andeq	r8, r8, r7, lsl r2
    5800:	023a0500 	eorseq	r0, sl, #0, 10
    5804:	00000021 	andeq	r0, r0, r1, lsr #32
    5808:	06ae1700 	strteq	r1, [lr], r0, lsl #14
    580c:	3f050000 	svccc	0x00050000
    5810:	00064902 	andeq	r4, r6, r2, lsl #18
    5814:	68170400 	ldmdavs	r7, {sl}
    5818:	05000007 	streq	r0, [r0, #-7]
    581c:	0649023f 			; <UNDEFINED> instruction: 0x0649023f
    5820:	17080000 	strne	r0, [r8, -r0]
    5824:	00000733 	andeq	r0, r0, r3, lsr r7
    5828:	49023f05 	stmdbmi	r2, {r0, r2, r8, r9, sl, fp, ip, sp}
    582c:	0c000006 	stceq	0, cr0, [r0], {6}
    5830:	0008e517 	andeq	lr, r8, r7, lsl r5
    5834:	02410500 	subeq	r0, r1, #0, 10
    5838:	00000021 	andeq	r0, r0, r1, lsr #32
    583c:	05e11710 	strbeq	r1, [r1, #1808]!	; 0x710
    5840:	42050000 	andmi	r0, r5, #0
    5844:	00082b02 	andeq	r2, r8, r2, lsl #22
    5848:	ac171400 	cfldrsge	mvf1, [r7], {-0}
    584c:	05000009 	streq	r0, [r0, #-9]
    5850:	00210244 	eoreq	r0, r1, r4, asr #4
    5854:	17300000 	ldrne	r0, [r0, -r0]!
    5858:	000008ef 	andeq	r0, r0, pc, ror #17
    585c:	98024505 	stmdals	r2, {r0, r2, r8, sl, lr}
    5860:	34000005 	strcc	r0, [r0], #-5
    5864:	00083f17 	andeq	r3, r8, r7, lsl pc
    5868:	02470500 	subeq	r0, r7, #0, 10
    586c:	00000021 	andeq	r0, r0, r1, lsr #32
    5870:	08ff1738 	ldmeq	pc!, {r3, r4, r5, r8, r9, sl, ip}^	; <UNPREDICTABLE>
    5874:	49050000 	stmdbmi	r5, {}	; <UNPREDICTABLE>
    5878:	00084602 	andeq	r4, r8, r2, lsl #12
    587c:	a7173c00 	ldrge	r3, [r7, -r0, lsl #24]
    5880:	05000007 	streq	r0, [r0, #-7]
    5884:	018a024c 	orreq	r0, sl, ip, asr #4
    5888:	17400000 	strbne	r0, [r0, -r0]
    588c:	00000752 	andeq	r0, r0, r2, asr r7
    5890:	21024d05 	tstcs	r2, r5, lsl #26
    5894:	44000000 	strmi	r0, [r0], #-0
    5898:	000a6117 	andeq	r6, sl, r7, lsl r1
    589c:	024e0500 	subeq	r0, lr, #0, 10
    58a0:	0000018a 	andeq	r0, r0, sl, lsl #3
    58a4:	08511748 	ldmdaeq	r1, {r3, r6, r8, r9, sl, ip}^
    58a8:	4f050000 	svcmi	0x00050000
    58ac:	00084c02 	andeq	r4, r8, r2, lsl #24
    58b0:	70174c00 	andsvc	r4, r7, r0, lsl #24
    58b4:	05000007 	streq	r0, [r0, #-7]
    58b8:	00210252 	eoreq	r0, r1, r2, asr r2
    58bc:	17500000 	ldrbne	r0, [r0, -r0]
    58c0:	000006be 			; <UNDEFINED> instruction: 0x000006be
    58c4:	1a025305 	bne	9a4e0 <mailbuffer+0x83420>
    58c8:	54000001 	strpl	r0, [r0], #-1
    58cc:	00087b17 	andeq	r7, r8, r7, lsl fp
    58d0:	02760500 	rsbseq	r0, r6, #0, 10
    58d4:	00000809 	andeq	r0, r0, r9, lsl #16
    58d8:	082d1858 	stmdaeq	sp!, {r3, r4, r6, fp, ip}
    58dc:	7a050000 	bvc	1458e4 <mailbuffer+0x12e824>
    58e0:	0002a702 	andeq	sl, r2, r2, lsl #14
    58e4:	18014800 	stmdane	r1, {fp, lr}
    58e8:	00000785 	andeq	r0, r0, r5, lsl #15
    58ec:	69027b05 	stmdbvs	r2, {r0, r2, r8, r9, fp, ip, sp, lr}
    58f0:	4c000002 	stcmi	0, cr0, [r0], {2}
    58f4:	0a031801 	beq	cb900 <mailbuffer+0xb4840>
    58f8:	7f050000 	svcvc	0x00050000
    58fc:	00085d02 	andeq	r5, r8, r2, lsl #26
    5900:	1802dc00 	stmdane	r2, {sl, fp, ip, lr, pc}
    5904:	00000697 	muleq	r0, r7, r6
    5908:	0e028405 	cdpeq	4, 0, cr8, cr2, cr5, {0}
    590c:	e0000006 	and	r0, r0, r6
    5910:	067c1802 	ldrbteq	r1, [ip], -r2, lsl #16
    5914:	85050000 	strhi	r0, [r5, #-0]
    5918:	00086902 	andeq	r6, r8, r2, lsl #18
    591c:	0002ec00 	andeq	lr, r2, r0, lsl #24
    5920:	0419040e 	ldreq	r0, [r9], #-1038	; 0xfffffbf2
    5924:	21140000 	tstcs	r4, r0
    5928:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
    592c:	15000005 	strne	r0, [r0, #-5]
    5930:	00000437 	andeq	r0, r0, r7, lsr r4
    5934:	00004815 	andeq	r4, r0, r5, lsl r8
    5938:	05981500 	ldreq	r1, [r8, #1280]	; 0x500
    593c:	21150000 	tstcs	r5, r0
    5940:	00000000 	andeq	r0, r0, r0
    5944:	0127040e 			; <UNDEFINED> instruction: 0x0127040e
    5948:	040e0000 	streq	r0, [lr], #-0
    594c:	0000057a 	andeq	r0, r0, sl, ror r5
    5950:	00009614 	andeq	r9, r0, r4, lsl r6
    5954:	0005c200 	andeq	ip, r5, r0, lsl #4
    5958:	04371500 	ldrteq	r1, [r7], #-1280	; 0xfffffb00
    595c:	48150000 	ldmdami	r5, {}	; <UNPREDICTABLE>
    5960:	15000000 	strne	r0, [r0, #-0]
    5964:	00000096 	muleq	r0, r6, r0
    5968:	00002115 	andeq	r2, r0, r5, lsl r1
    596c:	040e0000 	streq	r0, [lr], #-0
    5970:	000005a4 	andeq	r0, r0, r4, lsr #11
    5974:	00002114 	andeq	r2, r0, r4, lsl r1
    5978:	0005dc00 	andeq	sp, r5, r0, lsl #24
    597c:	04371500 	ldrteq	r1, [r7], #-1280	; 0xfffffb00
    5980:	48150000 	ldmdami	r5, {}	; <UNPREDICTABLE>
    5984:	00000000 	andeq	r0, r0, r0
    5988:	05c8040e 	strbeq	r0, [r8, #1038]	; 0x40e
    598c:	5f0a0000 	svcpl	0x000a0000
    5990:	f2000000 	vhadd.s8	d0, d0, d0
    5994:	0b000005 	bleq	59b0 <_start-0x2650>
    5998:	000000dc 	ldrdeq	r0, [r0], -ip
    599c:	5f0a0002 	svcpl	0x000a0002
    59a0:	02000000 	andeq	r0, r0, #0
    59a4:	0b000006 	bleq	59c4 <_start-0x263c>
    59a8:	000000dc 	ldrdeq	r0, [r0], -ip
    59ac:	aa070000 	bge	1c59b4 <mailbuffer+0x1ae8f4>
    59b0:	05000008 	streq	r0, [r0, #-8]
    59b4:	02ef011d 	rsceq	r0, pc, #1073741831	; 0x40000007
    59b8:	ea190000 	b	6459c0 <mailbuffer+0x62e900>
    59bc:	0c000009 	stceq	0, cr0, [r0], {9}
    59c0:	43012105 	movwmi	r2, #4357	; 0x1105
    59c4:	17000006 	strne	r0, [r0, -r6]
    59c8:	000008d2 	ldrdeq	r0, [r0], -r2
    59cc:	43012305 	movwmi	r2, #4869	; 0x1305
    59d0:	00000006 	andeq	r0, r0, r6
    59d4:	00077e17 	andeq	r7, r7, r7, lsl lr
    59d8:	01240500 			; <UNDEFINED> instruction: 0x01240500
    59dc:	00000021 	andeq	r0, r0, r1, lsr #32
    59e0:	08a41704 	stmiaeq	r4!, {r2, r8, r9, sl, ip}
    59e4:	25050000 	strcs	r0, [r5, #-0]
    59e8:	00064901 	andeq	r4, r6, r1, lsl #18
    59ec:	0e000800 	cdpeq	8, 0, cr0, cr0, cr0, {0}
    59f0:	00060e04 	andeq	r0, r6, r4, lsl #28
    59f4:	02040e00 	andeq	r0, r4, #0, 28
    59f8:	19000006 	stmdbne	r0, {r1, r2}
    59fc:	000005d9 	ldrdeq	r0, [r0], -r9
    5a00:	013d050e 	teqeq	sp, lr, lsl #10
    5a04:	00000684 	andeq	r0, r0, r4, lsl #13
    5a08:	00091817 	andeq	r1, r9, r7, lsl r8
    5a0c:	013e0500 	teqeq	lr, r0, lsl #10
    5a10:	00000684 	andeq	r0, r0, r4, lsl #13
    5a14:	09581700 	ldmdbeq	r8, {r8, r9, sl, ip}^
    5a18:	3f050000 	svccc	0x00050000
    5a1c:	00068401 	andeq	r8, r6, r1, lsl #8
    5a20:	74170600 	ldrvc	r0, [r7], #-1536	; 0xfffffa00
    5a24:	05000009 	streq	r0, [r0, #-9]
    5a28:	00720140 	rsbseq	r0, r2, r0, asr #2
    5a2c:	000c0000 	andeq	r0, ip, r0
    5a30:	0000720a 	andeq	r7, r0, sl, lsl #4
    5a34:	00069400 	andeq	r9, r6, r0, lsl #8
    5a38:	00dc0b00 	sbcseq	r0, ip, r0, lsl #22
    5a3c:	00020000 	andeq	r0, r2, r0
    5a40:	5705d01a 	smladpl	r5, sl, r0, sp
    5a44:	00079502 	andeq	r9, r7, r2, lsl #10
    5a48:	09be1700 	ldmibeq	lr!, {r8, r9, sl, ip}
    5a4c:	59050000 	stmdbpl	r5, {}	; <UNPREDICTABLE>
    5a50:	00003302 	andeq	r3, r0, r2, lsl #6
    5a54:	5e170000 	cdppl	0, 1, cr0, cr7, cr0, {0}
    5a58:	05000009 	streq	r0, [r0, #-9]
    5a5c:	011a025a 	tsteq	sl, sl, asr r2
    5a60:	17040000 	strne	r0, [r4, -r0]
    5a64:	0000079a 	muleq	r0, sl, r7
    5a68:	95025b05 	strls	r5, [r2, #-2821]	; 0xfffff4fb
    5a6c:	08000007 	stmdaeq	r0, {r0, r1, r2}
    5a70:	000a3817 	andeq	r3, sl, r7, lsl r8
    5a74:	025c0500 	subseq	r0, ip, #0, 10
    5a78:	000001a0 	andeq	r0, r0, r0, lsr #3
    5a7c:	07431724 	strbeq	r1, [r3, -r4, lsr #14]
    5a80:	5d050000 	stcpl	0, cr0, [r5, #-0]
    5a84:	00002102 	andeq	r2, r0, r2, lsl #2
    5a88:	cd174800 	ldcgt	8, cr4, [r7, #-0]
    5a8c:	05000008 	streq	r0, [r0, #-8]
    5a90:	0079025e 	rsbseq	r0, r9, lr, asr r2
    5a94:	17500000 	ldrbne	r0, [r0, -r0]
    5a98:	00000a4e 	andeq	r0, r0, lr, asr #20
    5a9c:	4f025f05 	svcmi	0x00025f05
    5aa0:	58000006 	stmdapl	r0, {r1, r2}
    5aa4:	0008d817 	andeq	sp, r8, r7, lsl r8
    5aa8:	02600500 	rsbeq	r0, r0, #0, 10
    5aac:	00000104 	andeq	r0, r0, r4, lsl #2
    5ab0:	0a531768 	beq	14cb858 <mailbuffer+0x14b4798>
    5ab4:	61050000 	mrsvs	r0, (UNDEF: 5)
    5ab8:	00010402 	andeq	r0, r1, r2, lsl #8
    5abc:	4f177000 	svcmi	0x00177000
    5ac0:	05000006 	streq	r0, [r0, #-6]
    5ac4:	01040262 	tsteq	r4, r2, ror #4
    5ac8:	17780000 	ldrbne	r0, [r8, -r0]!
    5acc:	000009f9 	strdeq	r0, [r0], -r9
    5ad0:	a5026305 	strge	r6, [r2, #-773]	; 0xfffffcfb
    5ad4:	80000007 	andhi	r0, r0, r7
    5ad8:	00078e17 	andeq	r8, r7, r7, lsl lr
    5adc:	02640500 	rsbeq	r0, r4, #0, 10
    5ae0:	000007b5 			; <UNDEFINED> instruction: 0x000007b5
    5ae4:	098c1788 	stmibeq	ip, {r3, r7, r8, r9, sl, ip}
    5ae8:	65050000 	strvs	r0, [r5, #-0]
    5aec:	00002102 	andeq	r2, r0, r2, lsl #2
    5af0:	f517a000 			; <UNDEFINED> instruction: 0xf517a000
    5af4:	05000006 	streq	r0, [r0, #-6]
    5af8:	01040266 	tsteq	r4, r6, ror #4
    5afc:	17a40000 	strne	r0, [r4, r0]!
    5b00:	00000640 	andeq	r0, r0, r0, asr #12
    5b04:	04026705 	streq	r6, [r2], #-1797	; 0xfffff8fb
    5b08:	ac000001 	stcge	0, cr0, [r0], {1}
    5b0c:	0006e417 	andeq	lr, r6, r7, lsl r4
    5b10:	02680500 	rsbeq	r0, r8, #0, 10
    5b14:	00000104 	andeq	r0, r0, r4, lsl #2
    5b18:	05f217b4 	ldrbeq	r1, [r2, #1972]!	; 0x7b4
    5b1c:	69050000 	stmdbvs	r5, {}	; <UNPREDICTABLE>
    5b20:	00010402 	andeq	r0, r1, r2, lsl #8
    5b24:	0117bc00 	tsteq	r7, r0, lsl #24
    5b28:	05000006 	streq	r0, [r0, #-6]
    5b2c:	0104026a 	tsteq	r4, sl, ror #4
    5b30:	17c40000 	strbne	r0, [r4, r0]
    5b34:	00000880 	andeq	r0, r0, r0, lsl #17
    5b38:	21026b05 	tstcs	r2, r5, lsl #22
    5b3c:	cc000000 	stcgt	0, cr0, [r0], {-0}
    5b40:	01200a00 			; <UNDEFINED> instruction: 0x01200a00
    5b44:	07a50000 	streq	r0, [r5, r0]!
    5b48:	dc0b0000 	stcle	0, cr0, [fp], {-0}
    5b4c:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    5b50:	01200a00 			; <UNDEFINED> instruction: 0x01200a00
    5b54:	07b50000 	ldreq	r0, [r5, r0]!
    5b58:	dc0b0000 	stcle	0, cr0, [fp], {-0}
    5b5c:	07000000 	streq	r0, [r0, -r0]
    5b60:	01200a00 			; <UNDEFINED> instruction: 0x01200a00
    5b64:	07c50000 	strbeq	r0, [r5, r0]
    5b68:	dc0b0000 	stcle	0, cr0, [fp], {-0}
    5b6c:	17000000 	strne	r0, [r0, -r0]
    5b70:	05f01a00 	ldrbeq	r1, [r0, #2560]!	; 0xa00
    5b74:	07e90270 			; <UNDEFINED> instruction: 0x07e90270
    5b78:	1d170000 	ldcne	0, cr0, [r7, #-0]
    5b7c:	05000008 	streq	r0, [r0, #-8]
    5b80:	07e90273 			; <UNDEFINED> instruction: 0x07e90273
    5b84:	17000000 	strne	r0, [r0, -r0]
    5b88:	000009f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    5b8c:	f9027405 			; <UNDEFINED> instruction: 0xf9027405
    5b90:	78000007 	stmdavc	r0, {r0, r1, r2}
    5b94:	02e90a00 	rsceq	r0, r9, #0, 20
    5b98:	07f90000 	ldrbeq	r0, [r9, r0]!
    5b9c:	dc0b0000 	stcle	0, cr0, [fp], {-0}
    5ba0:	1d000000 	stcne	0, cr0, [r0, #-0]
    5ba4:	00330a00 	eorseq	r0, r3, r0, lsl #20
    5ba8:	08090000 	stmdaeq	r9, {}	; <UNPREDICTABLE>
    5bac:	dc0b0000 	stcle	0, cr0, [fp], {-0}
    5bb0:	1d000000 	stcne	0, cr0, [r0, #-0]
    5bb4:	05f01b00 	ldrbeq	r1, [r0, #2816]!	; 0xb00
    5bb8:	082b0255 	stmdaeq	fp!, {r0, r2, r4, r6, r9}
    5bbc:	111c0000 	tstne	ip, r0
    5bc0:	05000009 	streq	r0, [r0, #-9]
    5bc4:	0694026c 	ldreq	r0, [r4], ip, ror #4
    5bc8:	251c0000 	ldrcs	r0, [ip, #-0]
    5bcc:	0500000a 	streq	r0, [r0, #-10]
    5bd0:	07c50275 			; <UNDEFINED> instruction: 0x07c50275
    5bd4:	0a000000 	beq	5bdc <_start-0x2424>
    5bd8:	00000120 	andeq	r0, r0, r0, lsr #2
    5bdc:	0000083b 	andeq	r0, r0, fp, lsr r8
    5be0:	0000dc0b 	andeq	sp, r0, fp, lsl #24
    5be4:	1d001800 	stcne	8, cr1, [r0, #-0]
    5be8:	00000846 	andeq	r0, r0, r6, asr #16
    5bec:	00043715 	andeq	r3, r4, r5, lsl r7
    5bf0:	040e0000 	streq	r0, [lr], #-0
    5bf4:	0000083b 	andeq	r0, r0, fp, lsr r8
    5bf8:	018a040e 	orreq	r0, sl, lr, lsl #8
    5bfc:	5d1d0000 	ldcpl	0, cr0, [sp, #-0]
    5c00:	15000008 	strne	r0, [r0, #-8]
    5c04:	00000021 	andeq	r0, r0, r1, lsr #32
    5c08:	63040e00 	movwvs	r0, #19968	; 0x4e00
    5c0c:	0e000008 	cdpeq	0, 0, cr0, cr0, cr8, {0}
    5c10:	00085204 	andeq	r5, r8, r4, lsl #4
    5c14:	06020a00 	streq	r0, [r2], -r0, lsl #20
    5c18:	08790000 	ldmdaeq	r9!, {}^	; <UNPREDICTABLE>
    5c1c:	dc0b0000 	stcle	0, cr0, [fp], {-0}
    5c20:	02000000 	andeq	r0, r0, #0
    5c24:	09a01e00 	stmibeq	r0!, {r9, sl, fp, ip}
    5c28:	fd050000 	stc2	0, cr0, [r5, #-0]
    5c2c:	00043702 	andeq	r3, r4, r2, lsl #14
    5c30:	09991e00 	ldmibeq	r9, {r9, sl, fp, ip}
    5c34:	fe050000 	cdp2	0, 0, cr0, cr5, cr0, {0}
    5c38:	00043d02 	andeq	r3, r4, r2, lsl #26
    5c3c:	97040e00 	strls	r0, [r4, -r0, lsl #28]
    5c40:	1f000008 	svcne	0x00000008
    5c44:	00083520 	andeq	r3, r8, r0, lsr #10
    5c48:	1a5f0600 	bne	17c7450 <mailbuffer+0x17b0390>
    5c4c:	21000001 	tstcs	r0, r1
    5c50:	000008d3 	ldrdeq	r0, [r0], -r3
    5c54:	00214401 	eoreq	r4, r1, r1, lsl #8
    5c58:	03050000 	movweq	r0, #20480	; 0x5000
    5c5c:	00015cb4 			; <UNDEFINED> instruction: 0x00015cb4
    5c60:	0009c622 	andeq	ip, r9, r2, lsr #12
    5c64:	21880600 	orrcs	r0, r8, r0, lsl #12
    5c68:	d4000000 	strle	r0, [r0], #-0
    5c6c:	5000014d 	andpl	r0, r0, sp, asr #2
    5c70:	01000000 	mrseq	r0, (UNDEF: 0)
    5c74:	1943239c 	stmdbne	r3, {r2, r3, r4, r7, r8, r9, sp}^
    5c78:	3d010000 	stccc	0, cr0, [r1, #-0]
    5c7c:	00000028 	andeq	r0, r0, r8, lsr #32
    5c80:	00014d80 	andeq	r4, r1, r0, lsl #27
    5c84:	00000054 	andeq	r0, r0, r4, asr r0
    5c88:	08fb9c01 	ldmeq	fp!, {r0, sl, fp, ip, pc}^
    5c8c:	73240000 			; <UNDEFINED> instruction: 0x73240000
    5c90:	983d0100 	ldmdals	sp!, {r8}
    5c94:	02000005 	andeq	r0, r0, #5
    5c98:	69256c91 	stmdbvs	r5!, {r0, r4, r7, sl, fp, sp, lr}
    5c9c:	283e0100 	ldmdacs	lr!, {r8}
    5ca0:	02000000 	andeq	r0, r0, #0
    5ca4:	23007491 	movwcs	r7, #1169	; 0x491
    5ca8:	00001901 	andeq	r1, r0, r1, lsl #18
    5cac:	011a3201 	tsteq	sl, r1, lsl #4
    5cb0:	4cd80000 	ldclmi	0, cr0, [r8], {0}
    5cb4:	00a80001 	adceq	r0, r8, r1
    5cb8:	9c010000 	stcls	0, cr0, [r1], {-0}
    5cbc:	0000094b 	andeq	r0, r0, fp, asr #18
    5cc0:	00195126 	andseq	r5, r9, r6, lsr #2
    5cc4:	1a320100 	bne	c860cc <mailbuffer+0xc6f00c>
    5cc8:	02000001 	andeq	r0, r0, #1
    5ccc:	73246c91 			; <UNDEFINED> instruction: 0x73246c91
    5cd0:	01006372 	tsteq	r0, r2, ror r3
    5cd4:	00059832 	andeq	r9, r5, r2, lsr r8
    5cd8:	68910200 	ldmvs	r1, {r9}
    5cdc:	01006e24 	tsteq	r0, r4, lsr #28
    5ce0:	00002832 	andeq	r2, r0, r2, lsr r8
    5ce4:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    5ce8:	74657225 	strbtvc	r7, [r5], #-549	; 0xfffffddb
    5cec:	1a330100 	bne	cc60f4 <mailbuffer+0xcaf034>
    5cf0:	02000001 	andeq	r0, r0, #1
    5cf4:	23007491 	movwcs	r7, #1169	; 0x491
    5cf8:	0000194a 	andeq	r1, r0, sl, asr #18
    5cfc:	011a2b01 	tsteq	sl, r1, lsl #22
    5d00:	4c780000 	ldclmi	0, cr0, [r8], #-0
    5d04:	00600001 	rsbeq	r0, r0, r1
    5d08:	9c010000 	stcls	0, cr0, [r1], {-0}
    5d0c:	0000098f 	andeq	r0, r0, pc, lsl #19
    5d10:	00195126 	andseq	r5, r9, r6, lsr #2
    5d14:	1a2b0100 	bne	ac611c <mailbuffer+0xaaf05c>
    5d18:	02000001 	andeq	r0, r0, #1
    5d1c:	73246c91 			; <UNDEFINED> instruction: 0x73246c91
    5d20:	01006372 	tsteq	r0, r2, ror r3
    5d24:	0005982b 	andeq	r9, r5, fp, lsr #16
    5d28:	68910200 	ldmvs	r1, {r9}
    5d2c:	74657225 	strbtvc	r7, [r5], #-549	; 0xfffffddb
    5d30:	1a2c0100 	bne	b06138 <mailbuffer+0xaef078>
    5d34:	02000001 	andeq	r0, r0, #1
    5d38:	23007491 	movwcs	r7, #1169	; 0x491
    5d3c:	00001956 	andeq	r1, r0, r6, asr r9
    5d40:	00212101 	eoreq	r2, r1, r1, lsl #2
    5d44:	4bd80000 	blmi	ff605d4c <_estack+0xf75f5d4c>
    5d48:	00a00001 	adceq	r0, r0, r1
    5d4c:	9c010000 	stcls	0, cr0, [r1], {-0}
    5d50:	000009e9 	andeq	r0, r0, r9, ror #19
    5d54:	00317324 	eorseq	r7, r1, r4, lsr #6
    5d58:	08912101 	ldmeq	r1, {r0, r8, sp}
    5d5c:	91020000 	mrsls	r0, (UNDEF: 2)
    5d60:	3273246c 	rsbscc	r2, r3, #108, 8	; 0x6c000000
    5d64:	91210100 			; <UNDEFINED> instruction: 0x91210100
    5d68:	02000008 	andeq	r0, r0, #8
    5d6c:	6e246891 	mcrvs	8, 1, r6, cr4, cr1, {4}
    5d70:	28210100 	stmdacs	r1!, {r8}
    5d74:	02000000 	andeq	r0, r0, #0
    5d78:	70256491 	mlavc	r5, r1, r4, r6
    5d7c:	22010031 	andcs	r0, r1, #49	; 0x31
    5d80:	000009e9 	andeq	r0, r0, r9, ror #19
    5d84:	25749102 	ldrbcs	r9, [r4, #-258]!	; 0xfffffefe
    5d88:	01003270 	tsteq	r0, r0, ror r2
    5d8c:	0009e922 	andeq	lr, r9, r2, lsr #18
    5d90:	70910200 	addsvc	r0, r1, r0, lsl #4
    5d94:	66040e00 	strvs	r0, [r4], -r0, lsl #28
    5d98:	23000000 	movwcs	r0, #0
    5d9c:	00001911 	andeq	r1, r0, r1, lsl r9
    5da0:	00481501 	subeq	r1, r8, r1, lsl #10
    5da4:	4b640000 	blmi	1905dac <mailbuffer+0x18eecec>
    5da8:	00740001 	rsbseq	r0, r4, r1
    5dac:	9c010000 	stcls	0, cr0, [r1], {-0}
    5db0:	00000a4b 	andeq	r0, r0, fp, asr #20
    5db4:	00195126 	andseq	r5, r9, r6, lsr #2
    5db8:	48150100 	ldmdami	r5, {r8}
    5dbc:	02000000 	andeq	r0, r0, #0
    5dc0:	73246c91 			; <UNDEFINED> instruction: 0x73246c91
    5dc4:	01006372 	tsteq	r0, r2, ror r3
    5dc8:	00089115 	andeq	r9, r8, r5, lsl r1
    5dcc:	68910200 	ldmvs	r1, {r9}
    5dd0:	01006e24 	tsteq	r0, r4, lsr #28
    5dd4:	00002815 	andeq	r2, r0, r5, lsl r8
    5dd8:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    5ddc:	00706425 	rsbseq	r6, r0, r5, lsr #8
    5de0:	011a1a01 	tsteq	sl, r1, lsl #20
    5de4:	91020000 	mrsls	r0, (UNDEF: 2)
    5de8:	70732574 	rsbsvc	r2, r3, r4, ror r5
    5dec:	981b0100 	ldmdals	fp, {r8}
    5df0:	02000005 	andeq	r0, r0, #5
    5df4:	27007091 			; <UNDEFINED> instruction: 0x27007091
    5df8:	00001909 	andeq	r1, r0, r9, lsl #18
    5dfc:	00480e01 	subeq	r0, r8, r1, lsl #28
    5e00:	4ab40000 	bmi	fed05e08 <_estack+0xf6cf5e08>
    5e04:	00b00001 	adcseq	r0, r0, r1
    5e08:	9c010000 	stcls	0, cr0, [r1], {-0}
    5e0c:	00000a9c 	muleq	r0, ip, sl
    5e10:	00195126 	andseq	r5, r9, r6, lsr #2
    5e14:	480e0100 	stmdami	lr, {r8}
    5e18:	02000000 	andeq	r0, r0, #0
    5e1c:	73245491 			; <UNDEFINED> instruction: 0x73245491
    5e20:	01006372 	tsteq	r0, r2, ror r3
    5e24:	0008910e 	andeq	r9, r8, lr, lsl #2
    5e28:	50910200 	addspl	r0, r1, r0, lsl #4
    5e2c:	01006e24 	tsteq	r0, r4, lsr #28
    5e30:	0000280e 	andeq	r2, r0, lr, lsl #16
    5e34:	4c910200 	lfmmi	f0, 4, [r1], {0}
    5e38:	706d7425 	rsbvc	r7, sp, r5, lsr #8
    5e3c:	9c0f0100 	stflss	f0, [pc], {-0}
    5e40:	0300000a 	movweq	r0, #10
    5e44:	00065891 	muleq	r6, r1, r8
    5e48:	00005f0a 	andeq	r5, r0, sl, lsl #30
    5e4c:	000aaf00 	andeq	sl, sl, r0, lsl #30
    5e50:	00dc2800 	sbcseq	r2, ip, r0, lsl #16
    5e54:	91030000 	mrsls	r0, (UNDEF: 3)
    5e58:	2900065c 	stmdbcs	r0, {r2, r3, r4, r6, r9, sl}
    5e5c:	0000195d 	andeq	r1, r0, sp, asr r9
    5e60:	00480701 	subeq	r0, r8, r1, lsl #14
    5e64:	4a500000 	bmi	1405e6c <mailbuffer+0x13eedac>
    5e68:	00640001 	rsbeq	r0, r4, r1
    5e6c:	9c010000 	stcls	0, cr0, [r1], {-0}
    5e70:	01007324 	tsteq	r0, r4, lsr #6
    5e74:	00004807 	andeq	r4, r0, r7, lsl #16
    5e78:	6c910200 	lfmvs	f0, 4, [r1], {0}
    5e7c:	01006324 	tsteq	r0, r4, lsr #6
    5e80:	00002107 	andeq	r2, r0, r7, lsl #2
    5e84:	68910200 	ldmvs	r1, {r9}
    5e88:	01006e24 	tsteq	r0, r4, lsr #28
    5e8c:	00002807 	andeq	r2, r0, r7, lsl #16
    5e90:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    5e94:	01007025 	tsteq	r0, r5, lsr #32
    5e98:	0002e908 	andeq	lr, r2, r8, lsl #18
    5e9c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    5ea0:	0ace0000 	beq	ff385ea8 <_estack+0xf7375ea8>
    5ea4:	00040000 	andeq	r0, r4, r0
    5ea8:	00001374 	andeq	r1, r0, r4, ror r3
    5eac:	00e30104 	rsceq	r0, r3, r4, lsl #2
    5eb0:	210c0000 	mrscs	r0, (UNDEF: 12)
    5eb4:	2400001a 	strcs	r0, [r0], #-26	; 0xffffffe6
    5eb8:	ac00014e 	stfges	f0, [r0], {78}	; 0x4e
    5ebc:	79000004 	stmdbvc	r0, {r2}
    5ec0:	02000012 	andeq	r0, r0, #18
    5ec4:	00000acd 	andeq	r0, r0, sp, asr #21
    5ec8:	0031d802 	eorseq	sp, r1, r2, lsl #16
    5ecc:	21030000 	mrscs	r0, (UNDEF: 3)
    5ed0:	04000000 	streq	r0, [r0], #-0
    5ed4:	061c0704 	ldreq	r0, [ip], -r4, lsl #14
    5ed8:	04050000 	streq	r0, [r5], #-0
    5edc:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    5ee0:	05080400 	streq	r0, [r8, #-1024]	; 0xfffffc00
    5ee4:	0000012d 	andeq	r0, r0, sp, lsr #2
    5ee8:	5b040804 	blpl	107f00 <mailbuffer+0xf0e40>
    5eec:	04000001 	streq	r0, [r0], #-1
    5ef0:	086f0601 	stmdaeq	pc!, {r0, r9, sl}^	; <UNPREDICTABLE>
    5ef4:	01040000 	mrseq	r0, (UNDEF: 4)
    5ef8:	00086d08 	andeq	r6, r8, r8, lsl #26
    5efc:	05020400 	streq	r0, [r2, #-1024]	; 0xfffffc00
    5f00:	00000889 	andeq	r0, r0, r9, lsl #17
    5f04:	a0070204 	andge	r0, r7, r4, lsl #4
    5f08:	03000000 	movweq	r0, #0
    5f0c:	00000062 	andeq	r0, r0, r2, rrx
    5f10:	32050404 	andcc	r0, r5, #4, 8	; 0x4000000
    5f14:	04000001 	streq	r0, [r0], #-1
    5f18:	06170704 	ldreq	r0, [r7], -r4, lsl #14
    5f1c:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
    5f20:	00061207 	andeq	r1, r6, r7, lsl #4
    5f24:	085b0200 	ldmdaeq	fp, {r9}^
    5f28:	07030000 	streq	r0, [r3, -r0]
    5f2c:	00000038 	andeq	r0, r0, r8, lsr r0
    5f30:	00084a02 	andeq	r4, r8, r2, lsl #20
    5f34:	6e2c0400 	cdpvs	4, 2, cr0, cr12, cr0, {0}
    5f38:	02000000 	andeq	r0, r0, #0
    5f3c:	00000940 	andeq	r0, r0, r0, asr #18
    5f40:	006e7204 	rsbeq	r7, lr, r4, lsl #4
    5f44:	b5060000 	strlt	r0, [r6, #-0]
    5f48:	02000007 	andeq	r0, r0, #7
    5f4c:	00310165 	eorseq	r0, r1, r5, ror #2
    5f50:	04070000 	streq	r0, [r7], #-0
    5f54:	00cfa604 	sbceq	sl, pc, r4, lsl #12
    5f58:	af080000 	svcge	0x00080000
    5f5c:	04000007 	streq	r0, [r0], #-7
    5f60:	0000a4a8 	andeq	sl, r0, r8, lsr #9
    5f64:	07610800 	strbeq	r0, [r1, -r0, lsl #16]!
    5f68:	a9040000 	stmdbge	r4, {}	; <UNPREDICTABLE>
    5f6c:	000000cf 	andeq	r0, r0, pc, asr #1
    5f70:	00540900 	subseq	r0, r4, r0, lsl #18
    5f74:	00df0000 	sbcseq	r0, pc, r0
    5f78:	df0a0000 	svcle	0x000a0000
    5f7c:	03000000 	movweq	r0, #0
    5f80:	07040400 	streq	r0, [r4, -r0, lsl #8]
    5f84:	000000da 	ldrdeq	r0, [r0], -sl
    5f88:	a304080b 	movwge	r0, #18443	; 0x480b
    5f8c:	00000107 	andeq	r0, r0, r7, lsl #2
    5f90:	00091e0c 	andeq	r1, r9, ip, lsl #28
    5f94:	38a50400 	stmiacc	r5!, {sl}
    5f98:	00000000 	andeq	r0, r0, r0
    5f9c:	0009260c 	andeq	r2, r9, ip, lsl #12
    5fa0:	b0aa0400 	adclt	r0, sl, r0, lsl #8
    5fa4:	04000000 	streq	r0, [r0], #-0
    5fa8:	08b10200 	ldmeq	r1!, {r9}
    5fac:	ab040000 	blge	105fb4 <mailbuffer+0xeeef4>
    5fb0:	000000e6 	andeq	r0, r0, r6, ror #1
    5fb4:	00072a02 	andeq	r2, r7, r2, lsl #20
    5fb8:	83af0400 			; <UNDEFINED> instruction: 0x83af0400
    5fbc:	0d000000 	stceq	0, cr0, [r0, #-0]
    5fc0:	25040e04 	strcs	r0, [r4, #-3588]	; 0xfffff1fc
    5fc4:	04000001 	streq	r0, [r0], #-1
    5fc8:	08760801 	ldmdaeq	r6!, {r0, fp}^
    5fcc:	25030000 	strcs	r0, [r3, #-0]
    5fd0:	02000001 	andeq	r0, r0, #1
    5fd4:	00000984 	andeq	r0, r0, r4, lsl #19
    5fd8:	00751605 	rsbseq	r1, r5, r5, lsl #12
    5fdc:	3b0f0000 	blcc	3c5fe4 <mailbuffer+0x3aef24>
    5fe0:	18000007 	stmdane	r0, {r0, r1, r2}
    5fe4:	018f2d05 	orreq	r2, pc, r5, lsl #26
    5fe8:	d20c0000 	andle	r0, ip, #0
    5fec:	05000008 	streq	r0, [r0, #-8]
    5ff0:	00018f2f 	andeq	r8, r1, pc, lsr #30
    5ff4:	5f100000 	svcpl	0x00100000
    5ff8:	3005006b 	andcc	r0, r5, fp, rrx
    5ffc:	00000038 	andeq	r0, r0, r8, lsr r0
    6000:	09090c04 	stmdbeq	r9, {r2, sl, fp}
    6004:	30050000 	andcc	r0, r5, r0
    6008:	00000038 	andeq	r0, r0, r8, lsr r0
    600c:	07240c08 	streq	r0, [r4, -r8, lsl #24]!
    6010:	30050000 	andcc	r0, r5, r0
    6014:	00000038 	andeq	r0, r0, r8, lsr r0
    6018:	09db0c0c 	ldmibeq	fp, {r2, r3, sl, fp}^
    601c:	30050000 	andcc	r0, r5, r0
    6020:	00000038 	andeq	r0, r0, r8, lsr r0
    6024:	785f1010 	ldmdavc	pc, {r4, ip}^	; <UNPREDICTABLE>
    6028:	95310500 	ldrls	r0, [r1, #-1280]!	; 0xfffffb00
    602c:	14000001 	strne	r0, [r0], #-1
    6030:	3c040e00 	stccc	14, cr0, [r4], {-0}
    6034:	09000001 	stmdbeq	r0, {r0}
    6038:	00000131 	andeq	r0, r0, r1, lsr r1
    603c:	000001a5 	andeq	r0, r0, r5, lsr #3
    6040:	0000df0a 	andeq	sp, r0, sl, lsl #30
    6044:	0f000000 	svceq	0x00000000
    6048:	0000075c 	andeq	r0, r0, ip, asr r7
    604c:	1e350524 	cdpne	5, 3, cr0, cr5, cr4, {1}
    6050:	0c000002 	stceq	0, cr0, [r0], {2}
    6054:	0000065d 	andeq	r0, r0, sp, asr r6
    6058:	00383705 	eorseq	r3, r8, r5, lsl #14
    605c:	0c000000 	stceq	0, cr0, [r0], {-0}
    6060:	0000094f 	andeq	r0, r0, pc, asr #18
    6064:	00383805 	eorseq	r3, r8, r5, lsl #16
    6068:	0c040000 	stceq	0, cr0, [r4], {-0}
    606c:	00000672 	andeq	r0, r0, r2, ror r6
    6070:	00383905 	eorseq	r3, r8, r5, lsl #18
    6074:	0c080000 	stceq	0, cr0, [r8], {-0}
    6078:	00000a66 	andeq	r0, r0, r6, ror #20
    607c:	00383a05 	eorseq	r3, r8, r5, lsl #20
    6080:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    6084:	00000824 	andeq	r0, r0, r4, lsr #16
    6088:	00383b05 	eorseq	r3, r8, r5, lsl #22
    608c:	0c100000 	ldceq	0, cr0, [r0], {-0}
    6090:	000007d6 	ldrdeq	r0, [r0], -r6
    6094:	00383c05 	eorseq	r3, r8, r5, lsl #24
    6098:	0c140000 	ldceq	0, cr0, [r4], {-0}
    609c:	000009e0 	andeq	r0, r0, r0, ror #19
    60a0:	00383d05 	eorseq	r3, r8, r5, lsl #26
    60a4:	0c180000 	ldceq	0, cr0, [r8], {-0}
    60a8:	00000893 	muleq	r0, r3, r8
    60ac:	00383e05 	eorseq	r3, r8, r5, lsl #28
    60b0:	0c1c0000 	ldceq	0, cr0, [ip], {-0}
    60b4:	00000a2d 	andeq	r0, r0, sp, lsr #20
    60b8:	00383f05 	eorseq	r3, r8, r5, lsl #30
    60bc:	00200000 	eoreq	r0, r0, r0
    60c0:	00068111 	andeq	r8, r6, r1, lsl r1
    60c4:	05010800 	streq	r0, [r1, #-2048]	; 0xfffff800
    60c8:	00025e48 	andeq	r5, r2, r8, asr #28
    60cc:	07030c00 	streq	r0, [r3, -r0, lsl #24]
    60d0:	49050000 	stmdbmi	r5, {}	; <UNPREDICTABLE>
    60d4:	0000025e 	andeq	r0, r0, lr, asr r2
    60d8:	05c70c00 	strbeq	r0, [r7, #3072]	; 0xc00
    60dc:	4a050000 	bmi	1460e4 <mailbuffer+0x12f024>
    60e0:	0000025e 	andeq	r0, r0, lr, asr r2
    60e4:	096b1280 	stmdbeq	fp!, {r7, r9, ip}^
    60e8:	4c050000 	stcmi	0, cr0, [r5], {-0}
    60ec:	00000131 	andeq	r0, r0, r1, lsr r1
    60f0:	a6120100 	ldrge	r0, [r2], -r0, lsl #2
    60f4:	05000006 	streq	r0, [r0, #-6]
    60f8:	0001314f 	andeq	r3, r1, pc, asr #2
    60fc:	00010400 	andeq	r0, r1, r0, lsl #8
    6100:	00011d09 	andeq	r1, r1, r9, lsl #26
    6104:	00026e00 	andeq	r6, r2, r0, lsl #28
    6108:	00df0a00 	sbcseq	r0, pc, r0, lsl #20
    610c:	001f0000 	andseq	r0, pc, r0
    6110:	00082d11 	andeq	r2, r8, r1, lsl sp
    6114:	05019000 	streq	r9, [r1, #-0]
    6118:	0002ac5b 	andeq	sl, r2, fp, asr ip
    611c:	08d20c00 	ldmeq	r2, {sl, fp}^
    6120:	5c050000 	stcpl	0, cr0, [r5], {-0}
    6124:	000002ac 	andeq	r0, r0, ip, lsr #5
    6128:	08ea0c00 	stmiaeq	sl!, {sl, fp}^
    612c:	5d050000 	stcpl	0, cr0, [r5, #-0]
    6130:	00000038 	andeq	r0, r0, r8, lsr r0
    6134:	070b0c04 	streq	r0, [fp, -r4, lsl #24]
    6138:	5f050000 	svcpl	0x00050000
    613c:	000002b2 			; <UNDEFINED> instruction: 0x000002b2
    6140:	06810c08 	streq	r0, [r1], r8, lsl #24
    6144:	60050000 	andvs	r0, r5, r0
    6148:	0000021e 	andeq	r0, r0, lr, lsl r2
    614c:	040e0088 	streq	r0, [lr], #-136	; 0xffffff78
    6150:	0000026e 	andeq	r0, r0, lr, ror #4
    6154:	0002c209 	andeq	ip, r2, r9, lsl #4
    6158:	0002c200 	andeq	ip, r2, r0, lsl #4
    615c:	00df0a00 	sbcseq	r0, pc, r0, lsl #20
    6160:	001f0000 	andseq	r0, pc, r0
    6164:	02c8040e 	sbceq	r0, r8, #234881024	; 0xe000000
    6168:	0f130000 	svceq	0x00130000
    616c:	0000089d 	muleq	r0, sp, r8
    6170:	ee730508 	cdp	5, 7, cr0, cr3, cr8, {0}
    6174:	0c000002 	stceq	0, cr0, [r0], {2}
    6178:	0000066c 	andeq	r0, r0, ip, ror #12
    617c:	02ee7405 	rsceq	r7, lr, #83886080	; 0x5000000
    6180:	0c000000 	stceq	0, cr0, [r0], {-0}
    6184:	000005d3 	ldrdeq	r0, [r0], -r3
    6188:	00387505 	eorseq	r7, r8, r5, lsl #10
    618c:	00040000 	andeq	r0, r4, r0
    6190:	0054040e 	subseq	r0, r4, lr, lsl #8
    6194:	bc0f0000 	stclt	0, cr0, [pc], {-0}
    6198:	68000008 	stmdavs	r0, {r3}
    619c:	041eb305 	ldreq	fp, [lr], #-773	; 0xfffffcfb
    61a0:	5f100000 	svcpl	0x00100000
    61a4:	b4050070 	strlt	r0, [r5], #-112	; 0xffffff90
    61a8:	000002ee 	andeq	r0, r0, lr, ror #5
    61ac:	725f1000 	subsvc	r1, pc, #0
    61b0:	38b50500 	ldmcc	r5!, {r8, sl}
    61b4:	04000000 	streq	r0, [r0], #-0
    61b8:	00775f10 	rsbseq	r5, r7, r0, lsl pc
    61bc:	0038b605 	eorseq	fp, r8, r5, lsl #12
    61c0:	0c080000 	stceq	0, cr0, [r8], {-0}
    61c4:	0000069f 	muleq	r0, pc, r6	; <UNPREDICTABLE>
    61c8:	005bb705 	subseq	fp, fp, r5, lsl #14
    61cc:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    61d0:	00000778 	andeq	r0, r0, r8, ror r7
    61d4:	005bb805 	subseq	fp, fp, r5, lsl #16
    61d8:	100e0000 	andne	r0, lr, r0
    61dc:	0066625f 	rsbeq	r6, r6, pc, asr r2
    61e0:	02c9b905 	sbceq	fp, r9, #81920	; 0x14000
    61e4:	0c100000 	ldceq	0, cr0, [r0], {-0}
    61e8:	00000629 	andeq	r0, r0, r9, lsr #12
    61ec:	0038ba05 	eorseq	fp, r8, r5, lsl #20
    61f0:	0c180000 	ldceq	0, cr0, [r8], {-0}
    61f4:	0000068f 	andeq	r0, r0, pc, lsl #13
    61f8:	011dc105 	tsteq	sp, r5, lsl #2
    61fc:	0c1c0000 	ldceq	0, cr0, [ip], {-0}
    6200:	0000157d 	andeq	r1, r0, sp, ror r5
    6204:	0579c305 	ldrbeq	ip, [r9, #-773]!	; 0xfffffcfb
    6208:	0c200000 	stceq	0, cr0, [r0], #-0
    620c:	00001762 	andeq	r1, r0, r2, ror #14
    6210:	05a3c505 	streq	ip, [r3, #1285]!	; 0x505
    6214:	0c240000 	stceq	0, cr0, [r4], #-0
    6218:	0000092e 	andeq	r0, r0, lr, lsr #18
    621c:	05c7c805 	strbeq	ip, [r7, #2053]	; 0x805
    6220:	0c280000 	stceq	0, cr0, [r8], #-0
    6224:	00000a47 	andeq	r0, r0, r7, asr #20
    6228:	05e1c905 	strbeq	ip, [r1, #2309]!	; 0x905
    622c:	102c0000 	eorne	r0, ip, r0
    6230:	0062755f 	rsbeq	r7, r2, pc, asr r5
    6234:	02c9cc05 	sbceq	ip, r9, #1280	; 0x500
    6238:	10300000 	eorsne	r0, r0, r0
    623c:	0070755f 	rsbseq	r7, r0, pc, asr r5
    6240:	02eecd05 	rsceq	ip, lr, #320	; 0x140
    6244:	10380000 	eorsne	r0, r8, r0
    6248:	0072755f 	rsbseq	r7, r2, pc, asr r5
    624c:	0038ce05 	eorseq	ip, r8, r5, lsl #28
    6250:	0c3c0000 	ldceq	0, cr0, [ip], #-0
    6254:	00000666 	andeq	r0, r0, r6, ror #12
    6258:	05e7d105 	strbeq	sp, [r7, #261]!	; 0x105
    625c:	0c400000 	mareq	acc0, r0, r0
    6260:	00000a1f 	andeq	r0, r0, pc, lsl sl
    6264:	05f7d205 	ldrbeq	sp, [r7, #517]!	; 0x205
    6268:	10430000 	subne	r0, r3, r0
    626c:	00626c5f 	rsbeq	r6, r2, pc, asr ip
    6270:	02c9d505 	sbceq	sp, r9, #20971520	; 0x1400000
    6274:	0c440000 	mareq	acc0, r0, r4
    6278:	000006b5 			; <UNDEFINED> instruction: 0x000006b5
    627c:	0038d805 	eorseq	sp, r8, r5, lsl #16
    6280:	0c4c0000 	mareq	acc0, r0, ip
    6284:	000006c6 	andeq	r0, r0, r6, asr #13
    6288:	008ed905 	addeq	sp, lr, r5, lsl #18
    628c:	0c500000 	mraeq	r0, r0, acc0
    6290:	000005ec 	andeq	r0, r0, ip, ror #11
    6294:	043cdc05 	ldrteq	sp, [ip], #-3077	; 0xfffff3fb
    6298:	0c540000 	mraeq	r0, r4, acc0
    629c:	000007bc 			; <UNDEFINED> instruction: 0x000007bc
    62a0:	0112e005 	tsteq	r2, r5
    62a4:	0c580000 	mraeq	r0, r8, acc0
    62a8:	000008c4 	andeq	r0, r0, r4, asr #17
    62ac:	0107e205 	tsteq	r7, r5, lsl #4
    62b0:	0c5c0000 	mraeq	r0, ip, acc0
    62b4:	000007ce 	andeq	r0, r0, lr, asr #15
    62b8:	0038e305 	eorseq	lr, r8, r5, lsl #6
    62bc:	00640000 	rsbeq	r0, r4, r0
    62c0:	00003814 	andeq	r3, r0, r4, lsl r8
    62c4:	00043c00 	andeq	r3, r4, r0, lsl #24
    62c8:	043c1500 	ldrteq	r1, [ip], #-1280	; 0xfffffb00
    62cc:	1d150000 	ldcne	0, cr0, [r5, #-0]
    62d0:	15000001 	strne	r0, [r0, #-1]
    62d4:	0000011f 	andeq	r0, r0, pc, lsl r1
    62d8:	00003815 	andeq	r3, r0, r5, lsl r8
    62dc:	040e0000 	streq	r0, [lr], #-0
    62e0:	00000447 	andeq	r0, r0, r7, asr #8
    62e4:	00043c03 	andeq	r3, r4, r3, lsl #24
    62e8:	09111600 	ldmdbeq	r1, {r9, sl, ip}
    62ec:	04280000 	strteq	r0, [r8], #-0
    62f0:	79023805 	stmdbvc	r2, {r0, r2, fp, ip, sp}
    62f4:	17000005 	strne	r0, [r0, -r5]
    62f8:	00000882 	andeq	r0, r0, r2, lsl #17
    62fc:	38023a05 	stmdacc	r2, {r0, r2, r9, fp, ip, sp}
    6300:	00000000 	andeq	r0, r0, r0
    6304:	0006ae17 	andeq	sl, r6, r7, lsl lr
    6308:	023f0500 	eorseq	r0, pc, #0, 10
    630c:	0000064e 	andeq	r0, r0, lr, asr #12
    6310:	07681704 	strbeq	r1, [r8, -r4, lsl #14]!
    6314:	3f050000 	svccc	0x00050000
    6318:	00064e02 	andeq	r4, r6, r2, lsl #28
    631c:	33170800 	tstcc	r7, #0, 16
    6320:	05000007 	streq	r0, [r0, #-7]
    6324:	064e023f 			; <UNDEFINED> instruction: 0x064e023f
    6328:	170c0000 	strne	r0, [ip, -r0]
    632c:	000008e5 	andeq	r0, r0, r5, ror #17
    6330:	38024105 	stmdacc	r2, {r0, r2, r8, lr}
    6334:	10000000 	andne	r0, r0, r0
    6338:	0005e117 	andeq	lr, r5, r7, lsl r1
    633c:	02420500 	subeq	r0, r2, #0, 10
    6340:	00000830 	andeq	r0, r0, r0, lsr r8
    6344:	09ac1714 	stmibeq	ip!, {r2, r4, r8, r9, sl, ip}
    6348:	44050000 	strmi	r0, [r5], #-0
    634c:	00003802 	andeq	r3, r0, r2, lsl #16
    6350:	ef173000 	svc	0x00173000
    6354:	05000008 	streq	r0, [r0, #-8]
    6358:	059d0245 	ldreq	r0, [sp, #581]	; 0x245
    635c:	17340000 	ldrne	r0, [r4, -r0]!
    6360:	0000083f 	andeq	r0, r0, pc, lsr r8
    6364:	38024705 	stmdacc	r2, {r0, r2, r8, r9, sl, lr}
    6368:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    636c:	0008ff17 	andeq	pc, r8, r7, lsl pc	; <UNPREDICTABLE>
    6370:	02490500 	subeq	r0, r9, #0, 10
    6374:	0000084b 	andeq	r0, r0, fp, asr #16
    6378:	07a7173c 			; <UNDEFINED> instruction: 0x07a7173c
    637c:	4c050000 	stcmi	0, cr0, [r5], {-0}
    6380:	00018f02 	andeq	r8, r1, r2, lsl #30
    6384:	52174000 	andspl	r4, r7, #0
    6388:	05000007 	streq	r0, [r0, #-7]
    638c:	0038024d 	eorseq	r0, r8, sp, asr #4
    6390:	17440000 	strbne	r0, [r4, -r0]
    6394:	00000a61 	andeq	r0, r0, r1, ror #20
    6398:	8f024e05 	svchi	0x00024e05
    639c:	48000001 	stmdami	r0, {r0}
    63a0:	00085117 	andeq	r5, r8, r7, lsl r1
    63a4:	024f0500 	subeq	r0, pc, #0, 10
    63a8:	00000851 	andeq	r0, r0, r1, asr r8
    63ac:	0770174c 	ldrbeq	r1, [r0, -ip, asr #14]!
    63b0:	52050000 	andpl	r0, r5, #0
    63b4:	00003802 	andeq	r3, r0, r2, lsl #16
    63b8:	be175000 	cdplt	0, 1, cr5, cr7, cr0, {0}
    63bc:	05000006 	streq	r0, [r0, #-6]
    63c0:	011f0253 	tsteq	pc, r3, asr r2	; <UNPREDICTABLE>
    63c4:	17540000 	ldrbne	r0, [r4, -r0]
    63c8:	0000087b 	andeq	r0, r0, fp, ror r8
    63cc:	0e027605 	cfmadd32eq	mvax0, mvfx7, mvfx2, mvfx5
    63d0:	58000008 	stmdapl	r0, {r3}
    63d4:	00082d18 	andeq	r2, r8, r8, lsl sp
    63d8:	027a0500 	rsbseq	r0, sl, #0, 10
    63dc:	000002ac 	andeq	r0, r0, ip, lsr #5
    63e0:	85180148 	ldrhi	r0, [r8, #-328]	; 0xfffffeb8
    63e4:	05000007 	streq	r0, [r0, #-7]
    63e8:	026e027b 	rsbeq	r0, lr, #-1342177273	; 0xb0000007
    63ec:	014c0000 	mrseq	r0, (UNDEF: 76)
    63f0:	000a0318 	andeq	r0, sl, r8, lsl r3
    63f4:	027f0500 	rsbseq	r0, pc, #0, 10
    63f8:	00000862 	andeq	r0, r0, r2, ror #16
    63fc:	971802dc 			; <UNDEFINED> instruction: 0x971802dc
    6400:	05000006 	streq	r0, [r0, #-6]
    6404:	06130284 	ldreq	r0, [r3], -r4, lsl #5
    6408:	02e00000 	rsceq	r0, r0, #0
    640c:	00067c18 	andeq	r7, r6, r8, lsl ip
    6410:	02850500 	addeq	r0, r5, #0, 10
    6414:	0000086e 	andeq	r0, r0, lr, ror #16
    6418:	0e0002ec 	cdpeq	2, 0, cr0, cr0, cr12, {7}
    641c:	00041e04 	andeq	r1, r4, r4, lsl #28
    6420:	00381400 	eorseq	r1, r8, r0, lsl #8
    6424:	059d0000 	ldreq	r0, [sp]
    6428:	3c150000 	ldccc	0, cr0, [r5], {-0}
    642c:	15000004 	strne	r0, [r0, #-4]
    6430:	0000011d 	andeq	r0, r0, sp, lsl r1
    6434:	00059d15 	andeq	r9, r5, r5, lsl sp
    6438:	00381500 	eorseq	r1, r8, r0, lsl #10
    643c:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    6440:	00012c04 	andeq	r2, r1, r4, lsl #24
    6444:	7f040e00 	svcvc	0x00040e00
    6448:	14000005 	strne	r0, [r0], #-5
    644c:	00000099 	muleq	r0, r9, r0
    6450:	000005c7 	andeq	r0, r0, r7, asr #11
    6454:	00043c15 	andeq	r3, r4, r5, lsl ip
    6458:	011d1500 	tsteq	sp, r0, lsl #10
    645c:	99150000 	ldmdbls	r5, {}	; <UNPREDICTABLE>
    6460:	15000000 	strne	r0, [r0, #-0]
    6464:	00000038 	andeq	r0, r0, r8, lsr r0
    6468:	a9040e00 	stmdbge	r4, {r9, sl, fp}
    646c:	14000005 	strne	r0, [r0], #-5
    6470:	00000038 	andeq	r0, r0, r8, lsr r0
    6474:	000005e1 	andeq	r0, r0, r1, ror #11
    6478:	00043c15 	andeq	r3, r4, r5, lsl ip
    647c:	011d1500 	tsteq	sp, r0, lsl #10
    6480:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    6484:	0005cd04 	andeq	ip, r5, r4, lsl #26
    6488:	00540900 	subseq	r0, r4, r0, lsl #18
    648c:	05f70000 	ldrbeq	r0, [r7, #0]!
    6490:	df0a0000 	svcle	0x000a0000
    6494:	02000000 	andeq	r0, r0, #0
    6498:	00540900 	subseq	r0, r4, r0, lsl #18
    649c:	06070000 	streq	r0, [r7], -r0
    64a0:	df0a0000 	svcle	0x000a0000
    64a4:	00000000 	andeq	r0, r0, r0
    64a8:	08aa0600 	stmiaeq	sl!, {r9, sl}
    64ac:	1d050000 	stcne	0, cr0, [r5, #-0]
    64b0:	0002f401 	andeq	pc, r2, r1, lsl #8
    64b4:	09ea1900 	stmibeq	sl!, {r8, fp, ip}^
    64b8:	050c0000 	streq	r0, [ip, #-0]
    64bc:	06480121 	strbeq	r0, [r8], -r1, lsr #2
    64c0:	d2170000 	andsle	r0, r7, #0
    64c4:	05000008 	streq	r0, [r0, #-8]
    64c8:	06480123 	strbeq	r0, [r8], -r3, lsr #2
    64cc:	17000000 	strne	r0, [r0, -r0]
    64d0:	0000077e 	andeq	r0, r0, lr, ror r7
    64d4:	38012405 	stmdacc	r1, {r0, r2, sl, sp}
    64d8:	04000000 	streq	r0, [r0], #-0
    64dc:	0008a417 	andeq	sl, r8, r7, lsl r4
    64e0:	01250500 			; <UNDEFINED> instruction: 0x01250500
    64e4:	0000064e 	andeq	r0, r0, lr, asr #12
    64e8:	040e0008 	streq	r0, [lr], #-8
    64ec:	00000613 	andeq	r0, r0, r3, lsl r6
    64f0:	0607040e 	streq	r0, [r7], -lr, lsl #8
    64f4:	d9190000 	ldmdble	r9, {}	; <UNPREDICTABLE>
    64f8:	0e000005 	cdpeq	0, 0, cr0, cr0, cr5, {0}
    64fc:	89013d05 	stmdbhi	r1, {r0, r2, r8, sl, fp, ip, sp}
    6500:	17000006 	strne	r0, [r0, -r6]
    6504:	00000918 	andeq	r0, r0, r8, lsl r9
    6508:	89013e05 	stmdbhi	r1, {r0, r2, r9, sl, fp, ip, sp}
    650c:	00000006 	andeq	r0, r0, r6
    6510:	00095817 	andeq	r5, r9, r7, lsl r8
    6514:	013f0500 	teqeq	pc, r0, lsl #10
    6518:	00000689 	andeq	r0, r0, r9, lsl #13
    651c:	09741706 	ldmdbeq	r4!, {r1, r2, r8, r9, sl, ip}^
    6520:	40050000 	andmi	r0, r5, r0
    6524:	00006201 	andeq	r6, r0, r1, lsl #4
    6528:	09000c00 	stmdbeq	r0, {sl, fp}
    652c:	00000062 	andeq	r0, r0, r2, rrx
    6530:	00000699 	muleq	r0, r9, r6
    6534:	0000df0a 	andeq	sp, r0, sl, lsl #30
    6538:	1a000200 	bne	6d40 <_start-0x12c0>
    653c:	025705d0 	subseq	r0, r7, #208, 10	; 0x34000000
    6540:	0000079a 	muleq	r0, sl, r7
    6544:	0009be17 	andeq	fp, r9, r7, lsl lr
    6548:	02590500 	subseq	r0, r9, #0, 10
    654c:	00000031 	andeq	r0, r0, r1, lsr r0
    6550:	095e1700 	ldmdbeq	lr, {r8, r9, sl, ip}^
    6554:	5a050000 	bpl	14655c <mailbuffer+0x12f49c>
    6558:	00011f02 	andeq	r1, r1, r2, lsl #30
    655c:	9a170400 	bls	5c7564 <mailbuffer+0x5b04a4>
    6560:	05000007 	streq	r0, [r0, #-7]
    6564:	079a025b 			; <UNDEFINED> instruction: 0x079a025b
    6568:	17080000 	strne	r0, [r8, -r0]
    656c:	00000a38 	andeq	r0, r0, r8, lsr sl
    6570:	a5025c05 	strge	r5, [r2, #-3077]	; 0xfffff3fb
    6574:	24000001 	strcs	r0, [r0], #-1
    6578:	00074317 	andeq	r4, r7, r7, lsl r3
    657c:	025d0500 	subseq	r0, sp, #0, 10
    6580:	00000038 	andeq	r0, r0, r8, lsr r0
    6584:	08cd1748 	stmiaeq	sp, {r3, r6, r8, r9, sl, ip}^
    6588:	5e050000 	cdppl	0, 0, cr0, cr5, cr0, {0}
    658c:	00007c02 	andeq	r7, r0, r2, lsl #24
    6590:	4e175000 	cdpmi	0, 1, cr5, cr7, cr0, {0}
    6594:	0500000a 	streq	r0, [r0, #-10]
    6598:	0654025f 			; <UNDEFINED> instruction: 0x0654025f
    659c:	17580000 	ldrbne	r0, [r8, -r0]
    65a0:	000008d8 	ldrdeq	r0, [r0], -r8
    65a4:	07026005 	streq	r6, [r2, -r5]
    65a8:	68000001 	stmdavs	r0, {r0}
    65ac:	000a5317 	andeq	r5, sl, r7, lsl r3
    65b0:	02610500 	rsbeq	r0, r1, #0, 10
    65b4:	00000107 	andeq	r0, r0, r7, lsl #2
    65b8:	064f1770 			; <UNDEFINED> instruction: 0x064f1770
    65bc:	62050000 	andvs	r0, r5, #0
    65c0:	00010702 	andeq	r0, r1, r2, lsl #14
    65c4:	f9177800 			; <UNDEFINED> instruction: 0xf9177800
    65c8:	05000009 	streq	r0, [r0, #-9]
    65cc:	07aa0263 	streq	r0, [sl, r3, ror #4]!
    65d0:	17800000 	strne	r0, [r0, r0]
    65d4:	0000078e 	andeq	r0, r0, lr, lsl #15
    65d8:	ba026405 	blt	9f5f4 <mailbuffer+0x88534>
    65dc:	88000007 	stmdahi	r0, {r0, r1, r2}
    65e0:	00098c17 	andeq	r8, r9, r7, lsl ip
    65e4:	02650500 	rsbeq	r0, r5, #0, 10
    65e8:	00000038 	andeq	r0, r0, r8, lsr r0
    65ec:	06f517a0 	ldrbteq	r1, [r5], r0, lsr #15
    65f0:	66050000 	strvs	r0, [r5], -r0
    65f4:	00010702 	andeq	r0, r1, r2, lsl #14
    65f8:	4017a400 	andsmi	sl, r7, r0, lsl #8
    65fc:	05000006 	streq	r0, [r0, #-6]
    6600:	01070267 	tsteq	r7, r7, ror #4
    6604:	17ac0000 	strne	r0, [ip, r0]!
    6608:	000006e4 	andeq	r0, r0, r4, ror #13
    660c:	07026805 	streq	r6, [r2, -r5, lsl #16]
    6610:	b4000001 	strlt	r0, [r0], #-1
    6614:	0005f217 	andeq	pc, r5, r7, lsl r2	; <UNPREDICTABLE>
    6618:	02690500 	rsbeq	r0, r9, #0, 10
    661c:	00000107 	andeq	r0, r0, r7, lsl #2
    6620:	060117bc 			; <UNDEFINED> instruction: 0x060117bc
    6624:	6a050000 	bvs	14662c <mailbuffer+0x12f56c>
    6628:	00010702 	andeq	r0, r1, r2, lsl #14
    662c:	8017c400 	andshi	ip, r7, r0, lsl #8
    6630:	05000008 	streq	r0, [r0, #-8]
    6634:	0038026b 	eorseq	r0, r8, fp, ror #4
    6638:	00cc0000 	sbceq	r0, ip, r0
    663c:	00012509 	andeq	r2, r1, r9, lsl #10
    6640:	0007aa00 	andeq	sl, r7, r0, lsl #20
    6644:	00df0a00 	sbcseq	r0, pc, r0, lsl #20
    6648:	00190000 	andseq	r0, r9, r0
    664c:	00012509 	andeq	r2, r1, r9, lsl #10
    6650:	0007ba00 	andeq	fp, r7, r0, lsl #20
    6654:	00df0a00 	sbcseq	r0, pc, r0, lsl #20
    6658:	00070000 	andeq	r0, r7, r0
    665c:	00012509 	andeq	r2, r1, r9, lsl #10
    6660:	0007ca00 	andeq	ip, r7, r0, lsl #20
    6664:	00df0a00 	sbcseq	r0, pc, r0, lsl #20
    6668:	00170000 	andseq	r0, r7, r0
    666c:	7005f01a 	andvc	pc, r5, sl, lsl r0	; <UNPREDICTABLE>
    6670:	0007ee02 	andeq	lr, r7, r2, lsl #28
    6674:	081d1700 	ldmdaeq	sp, {r8, r9, sl, ip}
    6678:	73050000 	movwvc	r0, #20480	; 0x5000
    667c:	0007ee02 	andeq	lr, r7, r2, lsl #28
    6680:	f0170000 			; <UNDEFINED> instruction: 0xf0170000
    6684:	05000009 	streq	r0, [r0, #-9]
    6688:	07fe0274 			; <UNDEFINED> instruction: 0x07fe0274
    668c:	00780000 	rsbseq	r0, r8, r0
    6690:	0002ee09 	andeq	lr, r2, r9, lsl #28
    6694:	0007fe00 	andeq	pc, r7, r0, lsl #28
    6698:	00df0a00 	sbcseq	r0, pc, r0, lsl #20
    669c:	001d0000 	andseq	r0, sp, r0
    66a0:	00003109 	andeq	r3, r0, r9, lsl #2
    66a4:	00080e00 	andeq	r0, r8, r0, lsl #28
    66a8:	00df0a00 	sbcseq	r0, pc, r0, lsl #20
    66ac:	001d0000 	andseq	r0, sp, r0
    66b0:	5505f01b 	strpl	pc, [r5, #-27]	; 0xffffffe5
    66b4:	00083002 	andeq	r3, r8, r2
    66b8:	09111c00 	ldmdbeq	r1, {sl, fp, ip}
    66bc:	6c050000 	stcvs	0, cr0, [r5], {-0}
    66c0:	00069902 	andeq	r9, r6, r2, lsl #18
    66c4:	0a251c00 	beq	94d6cc <mailbuffer+0x93660c>
    66c8:	75050000 	strvc	r0, [r5, #-0]
    66cc:	0007ca02 	andeq	ip, r7, r2, lsl #20
    66d0:	25090000 	strcs	r0, [r9, #-0]
    66d4:	40000001 	andmi	r0, r0, r1
    66d8:	0a000008 	beq	6700 <_start-0x1900>
    66dc:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    66e0:	4b1d0018 	blmi	746748 <mailbuffer+0x72f688>
    66e4:	15000008 	strne	r0, [r0, #-8]
    66e8:	0000043c 	andeq	r0, r0, ip, lsr r4
    66ec:	40040e00 	andmi	r0, r4, r0, lsl #28
    66f0:	0e000008 	cdpeq	0, 0, cr0, cr0, cr8, {0}
    66f4:	00018f04 	andeq	r8, r1, r4, lsl #30
    66f8:	08621d00 	stmdaeq	r2!, {r8, sl, fp, ip}^
    66fc:	38150000 	ldmdacc	r5, {}	; <UNPREDICTABLE>
    6700:	00000000 	andeq	r0, r0, r0
    6704:	0868040e 	stmdaeq	r8!, {r1, r2, r3, sl}^
    6708:	040e0000 	streq	r0, [lr], #-0
    670c:	00000857 	andeq	r0, r0, r7, asr r8
    6710:	00060709 	andeq	r0, r6, r9, lsl #14
    6714:	00087e00 	andeq	r7, r8, r0, lsl #28
    6718:	00df0a00 	sbcseq	r0, pc, r0, lsl #20
    671c:	00020000 	andeq	r0, r2, r0
    6720:	0009a01e 	andeq	sl, r9, lr, lsl r0
    6724:	02fd0500 	rscseq	r0, sp, #0, 10
    6728:	0000043c 	andeq	r0, r0, ip, lsr r4
    672c:	0009991e 	andeq	r9, r9, lr, lsl r9
    6730:	02fe0500 	rscseq	r0, lr, #0, 10
    6734:	00000442 	andeq	r0, r0, r2, asr #8
    6738:	0008351f 	andeq	r3, r8, pc, lsl r5
    673c:	1f5f0600 	svcne	0x005f0600
    6740:	20000001 	andcs	r0, r0, r1
    6744:	000019ad 	andeq	r1, r0, sp, lsr #19
    6748:	5c011000 	stcpl	0, cr1, [r1], {-0}
    674c:	000008c5 	andeq	r0, r0, r5, asr #17
    6750:	0019f408 	andseq	pc, r9, r8, lsl #8
    6754:	cc5f0100 	ldfgte	f0, [pc], {-0}
    6758:	08000008 	stmdaeq	r0, {r3}
    675c:	00001a1a 	andeq	r1, r0, sl, lsl sl
    6760:	08d16301 	ldmeq	r1, {r0, r8, r9, sp, lr}^
    6764:	04000000 	streq	r0, [r0], #-0
    6768:	01600408 	cmneq	r0, r8, lsl #8
    676c:	c5210000 	strgt	r0, [r1, #-0]!
    6770:	09000008 	stmdbeq	r0, {r3}
    6774:	00000054 	andeq	r0, r0, r4, asr r0
    6778:	000008e2 	andeq	r0, r0, r2, ror #17
    677c:	0000df22 	andeq	sp, r0, r2, lsr #30
    6780:	000fff00 	andeq	pc, pc, r0, lsl #30
    6784:	001b1423 	andseq	r1, fp, r3, lsr #8
    6788:	a1640100 	cmnge	r4, r0, lsl #2
    678c:	05000008 	streq	r0, [r0, #-8]
    6790:	0160a003 	cmneq	r0, r3
    6794:	1a8c0f00 	bne	fe30a39c <_estack+0xf62fa39c>
    6798:	01080000 	mrseq	r0, (UNDEF: 8)
    679c:	00091868 	andeq	r1, r9, r8, ror #16
    67a0:	19950c00 	ldmibne	r5, {sl, fp}
    67a4:	6a010000 	bvs	467ac <mailbuffer+0x2f6ec>
    67a8:	00000918 	andeq	r0, r0, r8, lsl r9
    67ac:	198a0c00 	stmibne	sl, {sl, fp}
    67b0:	6b010000 	blvs	467b8 <mailbuffer+0x2f6f8>
    67b4:	00000021 	andeq	r0, r0, r1, lsr #32
    67b8:	040e0004 	streq	r0, [lr], #-4
    67bc:	000008f3 	strdeq	r0, [r0], -r3
    67c0:	001af302 	andseq	pc, sl, r2, lsl #6
    67c4:	f36c0100 	vrhadd.u32	d16, d12, d0
    67c8:	23000008 	movwcs	r0, #8
    67cc:	000019bf 			; <UNDEFINED> instruction: 0x000019bf
    67d0:	00698201 	rsbeq	r8, r9, r1, lsl #4
    67d4:	03050000 	movweq	r0, #20480	; 0x5000
    67d8:	00015c84 	andeq	r5, r1, r4, lsl #25
    67dc:	00197423 	andseq	r7, r9, r3, lsr #8
    67e0:	2c850100 	stfcss	f0, [r5], {0}
    67e4:	05000000 	streq	r0, [r0, #-0]
    67e8:	015c8803 	cmpeq	ip, r3, lsl #16
    67ec:	19b82300 	ldmibne	r8!, {r8, r9, sp}
    67f0:	88010000 	stmdahi	r1, {}	; <UNPREDICTABLE>
    67f4:	0000091e 	andeq	r0, r0, lr, lsl r9
    67f8:	70a00305 	adcvc	r0, r0, r5, lsl #6
    67fc:	fe230001 	cdp2	0, 2, cr0, cr3, cr1, {0}
    6800:	0100001a 	tsteq	r0, sl, lsl r0
    6804:	00096d88 	andeq	r6, r9, r8, lsl #27
    6808:	a8030500 	stmdage	r3, {r8, sl}
    680c:	0e000170 	flteqsz	f0, r0
    6810:	00091e04 	andeq	r1, r9, r4, lsl #28
    6814:	1a062300 	bne	18f41c <mailbuffer+0x17835c>
    6818:	8c010000 	stchi	0, cr0, [r1], {-0}
    681c:	00000021 	andeq	r0, r0, r1, lsr #32
    6820:	5cb80305 	ldcpl	3, cr0, [r8], #20
    6824:	e9240001 	stmdb	r4!, {r0}
    6828:	0100001a 	tsteq	r0, sl, lsl r0
    682c:	00002191 	muleq	r0, r1, r1
    6830:	ac030500 	cfstr32ge	mvfx0, [r3], {-0}
    6834:	25000170 	strcs	r0, [r0, #-368]	; 0xfffffe90
    6838:	00001aae 	andeq	r1, r0, lr, lsr #21
    683c:	7c013401 	cfstrsvc	mvf3, [r1], {1}
    6840:	54000151 	strpl	r0, [r0], #-337	; 0xfffffeaf
    6844:	01000001 	tsteq	r0, r1
    6848:	0009d99c 	muleq	r9, ip, r9
    684c:	1b042600 	blne	110054 <mailbuffer+0xf8f94>
    6850:	34010000 	strcc	r0, [r1], #-0
    6854:	00096d01 	andeq	r6, r9, r1, lsl #26
    6858:	6c910200 	lfmvs	f0, 4, [r1], {0}
    685c:	00097927 	andeq	r7, r9, r7, lsr #18
    6860:	01360100 	teqeq	r6, r0, lsl #2
    6864:	0000096d 	andeq	r0, r0, sp, ror #18
    6868:	28749102 	ldmdacs	r4!, {r1, r8, ip, pc}^
    686c:	00637570 	rsbeq	r7, r3, r0, ror r5
    6870:	ee013701 	cdp	7, 0, cr3, cr1, cr1, {0}
    6874:	02000002 	andeq	r0, r0, #2
    6878:	25007091 	strcs	r7, [r0, #-145]	; 0xffffff6f
    687c:	000019dc 	ldrdeq	r1, [r0], -ip
    6880:	a4011301 	strge	r1, [r1], #-769	; 0xfffffcff
    6884:	d8000150 	stmdale	r0, {r4, r6, r8}
    6888:	01000000 	mrseq	r0, (UNDEF: 0)
    688c:	000a0e9c 	muleq	sl, ip, lr
    6890:	1a632700 	bne	18d0498 <mailbuffer+0x18b93d8>
    6894:	15010000 	strne	r0, [r1, #-0]
    6898:	00096d01 	andeq	r6, r9, r1, lsl #26
    689c:	70910200 	addsvc	r0, r1, r0, lsl #4
    68a0:	0019fb27 	andseq	pc, r9, r7, lsr #22
    68a4:	01160100 	tsteq	r6, r0, lsl #2
    68a8:	000002ee 	andeq	r0, r0, lr, ror #5
    68ac:	00749102 	rsbseq	r9, r4, r2, lsl #2
    68b0:	001ac929 	andseq	ip, sl, r9, lsr #18
    68b4:	010d0100 	mrseq	r0, (UNDEF: 29)
    68b8:	0001508c 	andeq	r5, r1, ip, lsl #1
    68bc:	00000018 	andeq	r0, r0, r8, lsl r0
    68c0:	992a9c01 	stmdbls	sl!, {r0, sl, fp, ip, pc}
    68c4:	0100001a 	tsteq	r0, sl, lsl r0
    68c8:	00210107 	eoreq	r0, r1, r7, lsl #2
    68cc:	50680000 	rsbpl	r0, r8, r0
    68d0:	00240001 	eoreq	r0, r4, r1
    68d4:	9c010000 	stcls	0, cr0, [r1], {-0}
    68d8:	001adf2b 	andseq	sp, sl, fp, lsr #30
    68dc:	ecee0100 	stfe	f0, [lr]
    68e0:	7c00014f 	stfvcs	f0, [r0], {79}	; 0x4f
    68e4:	01000000 	mrseq	r0, (UNDEF: 0)
    68e8:	000a759c 	muleq	sl, ip, r5
    68ec:	76702c00 	ldrbtvc	r2, [r0], -r0, lsl #24
    68f0:	1dee0100 	stfnee	f0, [lr]
    68f4:	02000001 	andeq	r0, r0, #1
    68f8:	702d6c91 	mlavc	sp, r1, ip, r6
    68fc:	01006375 	tsteq	r0, r5, ror r3
    6900:	0002eef0 	strdeq	lr, [r2], -r0
    6904:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    6908:	00198323 	andseq	r8, r9, r3, lsr #6
    690c:	6df10100 	ldfvse	f0, [r1]
    6910:	02000009 	andeq	r0, r0, #9
    6914:	2e007091 	mcrcs	0, 0, r7, cr0, cr1, {4}
    6918:	000019cf 	andeq	r1, r0, pc, asr #19
    691c:	011d9201 	tsteq	sp, r1, lsl #4
    6920:	4e240000 	cdpmi	0, 2, cr0, cr4, cr0, {0}
    6924:	01c80001 	biceq	r0, r8, r1
    6928:	9c010000 	stcls	0, cr0, [r1], {-0}
    692c:	0019e82f 	andseq	lr, r9, pc, lsr #16
    6930:	21920100 	orrscs	r0, r2, r0, lsl #2
    6934:	02000000 	andeq	r0, r0, #0
    6938:	a5236491 	strge	r6, [r3, #-1169]!	; 0xfffffb6f
    693c:	01000019 	tsteq	r0, r9, lsl r0
    6940:	00096d94 	muleq	r9, r4, sp
    6944:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    6948:	00196423 	andseq	r6, r9, r3, lsr #8
    694c:	6d940100 	ldfvss	f0, [r4]
    6950:	02000009 	andeq	r0, r0, #9
    6954:	74237091 	strtvc	r7, [r3], #-145	; 0xffffff6f
    6958:	0100001a 	tsteq	r0, sl, lsl r0
    695c:	00096d94 	muleq	r9, r4, sp
    6960:	68910200 	ldmvs	r1, {r9}
    6964:	001a8323 	andseq	r8, sl, r3, lsr #6
    6968:	1d950100 	ldfnes	f0, [r5]
    696c:	02000001 	andeq	r0, r0, #1
    6970:	00006c91 	muleq	r0, r1, ip
    6974:	0000095b 	andeq	r0, r0, fp, asr r9
    6978:	160f0004 	strne	r0, [pc], -r4
    697c:	01040000 	mrseq	r0, (UNDEF: 4)
    6980:	000000e3 	andeq	r0, r0, r3, ror #1
    6984:	001b460c 	andseq	r4, fp, ip, lsl #12
    6988:	0152f800 	cmpeq	r2, r0, lsl #16	; <UNPREDICTABLE>
    698c:	0001b400 	andeq	fp, r1, r0, lsl #8
    6990:	0013df00 	andseq	sp, r3, r0, lsl #30
    6994:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    6998:	00746e69 	rsbseq	r6, r4, r9, ror #28
    699c:	1c070403 	cfstrsne	mvf0, [r7], {3}
    69a0:	03000006 	movweq	r0, #6
    69a4:	012d0508 			; <UNDEFINED> instruction: 0x012d0508
    69a8:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    69ac:	00015b04 	andeq	r5, r1, r4, lsl #22
    69b0:	03040400 	movweq	r0, #17408	; 0x4400
    69b4:	06170704 	ldreq	r0, [r7], -r4, lsl #14
    69b8:	04030000 	streq	r0, [r3], #-0
    69bc:	00013205 	andeq	r3, r1, r5, lsl #4
    69c0:	06010300 	streq	r0, [r1], -r0, lsl #6
    69c4:	0000086f 	andeq	r0, r0, pc, ror #16
    69c8:	a0070203 	andge	r0, r7, r3, lsl #4
    69cc:	03000000 	movweq	r0, #0
    69d0:	00da0704 	sbcseq	r0, sl, r4, lsl #14
    69d4:	01030000 	mrseq	r0, (UNDEF: 3)
    69d8:	00086d08 	andeq	r6, r8, r8, lsl #26
    69dc:	05020300 	streq	r0, [r2, #-768]	; 0xfffffd00
    69e0:	00000889 	andeq	r0, r0, r9, lsl #17
    69e4:	12070803 	andne	r0, r7, #196608	; 0x30000
    69e8:	05000006 	streq	r0, [r0, #-6]
    69ec:	0000085b 	andeq	r0, r0, fp, asr r8
    69f0:	00210702 	eoreq	r0, r1, r2, lsl #14
    69f4:	4a050000 	bmi	1469fc <mailbuffer+0x12f93c>
    69f8:	03000008 	movweq	r0, #8
    69fc:	0000462c 	andeq	r4, r0, ip, lsr #12
    6a00:	09400500 	stmdbeq	r0, {r8, sl}^
    6a04:	72030000 	andvc	r0, r3, #0
    6a08:	00000046 	andeq	r0, r0, r6, asr #32
    6a0c:	0007b506 	andeq	fp, r7, r6, lsl #10
    6a10:	01650400 	cmneq	r5, r0, lsl #8
    6a14:	00000028 	andeq	r0, r0, r8, lsr #32
    6a18:	a6030407 	strge	r0, [r3], -r7, lsl #8
    6a1c:	000000c3 	andeq	r0, r0, r3, asr #1
    6a20:	0007af08 	andeq	sl, r7, r8, lsl #30
    6a24:	98a80300 	stmials	r8!, {r8, r9}
    6a28:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    6a2c:	00000761 	andeq	r0, r0, r1, ror #14
    6a30:	00c3a903 	sbceq	sl, r3, r3, lsl #18
    6a34:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    6a38:	00000062 	andeq	r0, r0, r2, rrx
    6a3c:	000000d3 	ldrdeq	r0, [r0], -r3
    6a40:	00005b0a 	andeq	r5, r0, sl, lsl #22
    6a44:	0b000300 	bleq	764c <_start-0x9b4>
    6a48:	f4a30308 	vld4.8	{d0[0],d1[0],d2[0],d3[0]}, [r3], r8
    6a4c:	0c000000 	stceq	0, cr0, [r0], {-0}
    6a50:	0000091e 	andeq	r0, r0, lr, lsl r9
    6a54:	0021a503 	eoreq	sl, r1, r3, lsl #10
    6a58:	0c000000 	stceq	0, cr0, [r0], {-0}
    6a5c:	00000926 	andeq	r0, r0, r6, lsr #18
    6a60:	00a4aa03 	adceq	sl, r4, r3, lsl #20
    6a64:	00040000 	andeq	r0, r4, r0
    6a68:	0008b105 	andeq	fp, r8, r5, lsl #2
    6a6c:	d3ab0300 			; <UNDEFINED> instruction: 0xd3ab0300
    6a70:	05000000 	streq	r0, [r0, #-0]
    6a74:	0000072a 	andeq	r0, r0, sl, lsr #14
    6a78:	0077af03 	rsbseq	sl, r7, r3, lsl #30
    6a7c:	040d0000 	streq	r0, [sp], #-0
    6a80:	00000110 	andeq	r0, r0, r0, lsl r1
    6a84:	76080103 	strvc	r0, [r8], -r3, lsl #2
    6a88:	0e000008 	cdpeq	0, 0, cr0, cr0, cr8, {0}
    6a8c:	00000110 	andeq	r0, r0, r0, lsl r1
    6a90:	00098405 	andeq	r8, r9, r5, lsl #8
    6a94:	3f160500 	svccc	0x00160500
    6a98:	0f000000 	svceq	0x00000000
    6a9c:	0000073b 	andeq	r0, r0, fp, lsr r7
    6aa0:	7a2d0518 	bvc	b47f08 <mailbuffer+0xb30e48>
    6aa4:	0c000001 	stceq	0, cr0, [r0], {1}
    6aa8:	000008d2 	ldrdeq	r0, [r0], -r2
    6aac:	017a2f05 	cmneq	sl, r5, lsl #30
    6ab0:	10000000 	andne	r0, r0, r0
    6ab4:	05006b5f 	streq	r6, [r0, #-2911]	; 0xfffff4a1
    6ab8:	00002130 	andeq	r2, r0, r0, lsr r1
    6abc:	090c0400 	stmdbeq	ip, {sl}
    6ac0:	05000009 	streq	r0, [r0, #-9]
    6ac4:	00002130 	andeq	r2, r0, r0, lsr r1
    6ac8:	240c0800 	strcs	r0, [ip], #-2048	; 0xfffff800
    6acc:	05000007 	streq	r0, [r0, #-7]
    6ad0:	00002130 	andeq	r2, r0, r0, lsr r1
    6ad4:	db0c0c00 	blle	309adc <mailbuffer+0x2f2a1c>
    6ad8:	05000009 	streq	r0, [r0, #-9]
    6adc:	00002130 	andeq	r2, r0, r0, lsr r1
    6ae0:	5f101000 	svcpl	0x00101000
    6ae4:	31050078 	tstcc	r5, r8, ror r0
    6ae8:	00000180 	andeq	r0, r0, r0, lsl #3
    6aec:	040d0014 	streq	r0, [sp], #-20	; 0xffffffec
    6af0:	00000127 	andeq	r0, r0, r7, lsr #2
    6af4:	00011c09 	andeq	r1, r1, r9, lsl #24
    6af8:	00019000 	andeq	r9, r1, r0
    6afc:	005b0a00 	subseq	r0, fp, r0, lsl #20
    6b00:	00000000 	andeq	r0, r0, r0
    6b04:	00075c0f 	andeq	r5, r7, pc, lsl #24
    6b08:	35052400 	strcc	r2, [r5, #-1024]	; 0xfffffc00
    6b0c:	00000209 	andeq	r0, r0, r9, lsl #4
    6b10:	00065d0c 	andeq	r5, r6, ip, lsl #26
    6b14:	21370500 	teqcs	r7, r0, lsl #10
    6b18:	00000000 	andeq	r0, r0, r0
    6b1c:	00094f0c 	andeq	r4, r9, ip, lsl #30
    6b20:	21380500 	teqcs	r8, r0, lsl #10
    6b24:	04000000 	streq	r0, [r0], #-0
    6b28:	0006720c 	andeq	r7, r6, ip, lsl #4
    6b2c:	21390500 	teqcs	r9, r0, lsl #10
    6b30:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    6b34:	000a660c 	andeq	r6, sl, ip, lsl #12
    6b38:	213a0500 	teqcs	sl, r0, lsl #10
    6b3c:	0c000000 	stceq	0, cr0, [r0], {-0}
    6b40:	0008240c 	andeq	r2, r8, ip, lsl #8
    6b44:	213b0500 	teqcs	fp, r0, lsl #10
    6b48:	10000000 	andne	r0, r0, r0
    6b4c:	0007d60c 	andeq	sp, r7, ip, lsl #12
    6b50:	213c0500 	teqcs	ip, r0, lsl #10
    6b54:	14000000 	strne	r0, [r0], #-0
    6b58:	0009e00c 	andeq	lr, r9, ip
    6b5c:	213d0500 	teqcs	sp, r0, lsl #10
    6b60:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    6b64:	0008930c 	andeq	r9, r8, ip, lsl #6
    6b68:	213e0500 	teqcs	lr, r0, lsl #10
    6b6c:	1c000000 	stcne	0, cr0, [r0], {-0}
    6b70:	000a2d0c 	andeq	r2, sl, ip, lsl #26
    6b74:	213f0500 	teqcs	pc, r0, lsl #10
    6b78:	20000000 	andcs	r0, r0, r0
    6b7c:	06811100 	streq	r1, [r1], r0, lsl #2
    6b80:	01080000 	mrseq	r0, (UNDEF: 8)
    6b84:	02494805 	subeq	r4, r9, #327680	; 0x50000
    6b88:	030c0000 	movweq	r0, #49152	; 0xc000
    6b8c:	05000007 	streq	r0, [r0, #-7]
    6b90:	00024949 	andeq	r4, r2, r9, asr #18
    6b94:	c70c0000 	strgt	r0, [ip, -r0]
    6b98:	05000005 	streq	r0, [r0, #-5]
    6b9c:	0002494a 	andeq	r4, r2, sl, asr #18
    6ba0:	6b128000 	blvs	4a6ba8 <mailbuffer+0x48fae8>
    6ba4:	05000009 	streq	r0, [r0, #-9]
    6ba8:	00011c4c 	andeq	r1, r1, ip, asr #24
    6bac:	12010000 	andne	r0, r1, #0
    6bb0:	000006a6 	andeq	r0, r0, r6, lsr #13
    6bb4:	011c4f05 	tsteq	ip, r5, lsl #30
    6bb8:	01040000 	mrseq	r0, (UNDEF: 4)
    6bbc:	003d0900 	eorseq	r0, sp, r0, lsl #18
    6bc0:	02590000 	subseq	r0, r9, #0
    6bc4:	5b0a0000 	blpl	286bcc <mailbuffer+0x26fb0c>
    6bc8:	1f000000 	svcne	0x00000000
    6bcc:	082d1100 	stmdaeq	sp!, {r8, ip}
    6bd0:	01900000 	orrseq	r0, r0, r0
    6bd4:	02975b05 	addseq	r5, r7, #5120	; 0x1400
    6bd8:	d20c0000 	andle	r0, ip, #0
    6bdc:	05000008 	streq	r0, [r0, #-8]
    6be0:	0002975c 	andeq	r9, r2, ip, asr r7
    6be4:	ea0c0000 	b	306bec <mailbuffer+0x2efb2c>
    6be8:	05000008 	streq	r0, [r0, #-8]
    6bec:	0000215d 	andeq	r2, r0, sp, asr r1
    6bf0:	0b0c0400 	bleq	307bf8 <mailbuffer+0x2f0b38>
    6bf4:	05000007 	streq	r0, [r0, #-7]
    6bf8:	00029d5f 	andeq	r9, r2, pc, asr sp
    6bfc:	810c0800 	tsthi	ip, r0, lsl #16
    6c00:	05000006 	streq	r0, [r0, #-6]
    6c04:	00020960 	andeq	r0, r2, r0, ror #18
    6c08:	0d008800 	stceq	8, cr8, [r0, #-0]
    6c0c:	00025904 	andeq	r5, r2, r4, lsl #18
    6c10:	02ad0900 	adceq	r0, sp, #0, 18
    6c14:	02ad0000 	adceq	r0, sp, #0
    6c18:	5b0a0000 	blpl	286c20 <mailbuffer+0x26fb60>
    6c1c:	1f000000 	svcne	0x00000000
    6c20:	b3040d00 	movwlt	r0, #19712	; 0x4d00
    6c24:	13000002 	movwne	r0, #2
    6c28:	00089d0f 	andeq	r9, r8, pc, lsl #26
    6c2c:	73050800 	movwvc	r0, #22528	; 0x5800
    6c30:	000002d9 	ldrdeq	r0, [r0], -r9
    6c34:	00066c0c 	andeq	r6, r6, ip, lsl #24
    6c38:	d9740500 	ldmdble	r4!, {r8, sl}^
    6c3c:	00000002 	andeq	r0, r0, r2
    6c40:	0005d30c 	andeq	sp, r5, ip, lsl #6
    6c44:	21750500 	cmncs	r5, r0, lsl #10
    6c48:	04000000 	streq	r0, [r0], #-0
    6c4c:	62040d00 	andvs	r0, r4, #0, 26
    6c50:	0f000000 	svceq	0x00000000
    6c54:	000008bc 			; <UNDEFINED> instruction: 0x000008bc
    6c58:	09b30568 	ldmibeq	r3!, {r3, r5, r6, r8, sl}
    6c5c:	10000004 	andne	r0, r0, r4
    6c60:	0500705f 	streq	r7, [r0, #-95]	; 0xffffffa1
    6c64:	0002d9b4 			; <UNDEFINED> instruction: 0x0002d9b4
    6c68:	5f100000 	svcpl	0x00100000
    6c6c:	b5050072 	strlt	r0, [r5, #-114]	; 0xffffff8e
    6c70:	00000021 	andeq	r0, r0, r1, lsr #32
    6c74:	775f1004 	ldrbvc	r1, [pc, -r4]
    6c78:	21b60500 			; <UNDEFINED> instruction: 0x21b60500
    6c7c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    6c80:	00069f0c 	andeq	r9, r6, ip, lsl #30
    6c84:	69b70500 	ldmibvs	r7!, {r8, sl}
    6c88:	0c000000 	stceq	0, cr0, [r0], {-0}
    6c8c:	0007780c 	andeq	r7, r7, ip, lsl #16
    6c90:	69b80500 	ldmibvs	r8!, {r8, sl}
    6c94:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    6c98:	66625f10 	uqadd16vs	r5, r2, r0
    6c9c:	b4b90500 	ldrtlt	r0, [r9], #1280	; 0x500
    6ca0:	10000002 	andne	r0, r0, r2
    6ca4:	0006290c 	andeq	r2, r6, ip, lsl #18
    6ca8:	21ba0500 			; <UNDEFINED> instruction: 0x21ba0500
    6cac:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    6cb0:	00068f0c 	andeq	r8, r6, ip, lsl #30
    6cb4:	3dc10500 	cfstr64cc	mvdx0, [r1]
    6cb8:	1c000000 	stcne	0, cr0, [r0], {-0}
    6cbc:	00157d0c 	andseq	r7, r5, ip, lsl #26
    6cc0:	64c30500 	strbvs	r0, [r3], #1280	; 0x500
    6cc4:	20000005 	andcs	r0, r0, r5
    6cc8:	0017620c 	andseq	r6, r7, ip, lsl #4
    6ccc:	8ec50500 	cdphi	5, 12, cr0, cr5, cr0, {0}
    6cd0:	24000005 	strcs	r0, [r0], #-5
    6cd4:	00092e0c 	andeq	r2, r9, ip, lsl #28
    6cd8:	b2c80500 	sbclt	r0, r8, #0, 10
    6cdc:	28000005 	stmdacs	r0, {r0, r2}
    6ce0:	000a470c 	andeq	r4, sl, ip, lsl #14
    6ce4:	ccc90500 	cfstr64gt	mvdx0, [r9], {0}
    6ce8:	2c000005 	stccs	0, cr0, [r0], {5}
    6cec:	62755f10 	rsbsvs	r5, r5, #16, 30	; 0x40
    6cf0:	b4cc0500 	strblt	r0, [ip], #1280	; 0x500
    6cf4:	30000002 	andcc	r0, r0, r2
    6cf8:	70755f10 	rsbsvc	r5, r5, r0, lsl pc
    6cfc:	d9cd0500 	stmible	sp, {r8, sl}^
    6d00:	38000002 	stmdacc	r0, {r1}
    6d04:	72755f10 	rsbsvc	r5, r5, #16, 30	; 0x40
    6d08:	21ce0500 	biccs	r0, lr, r0, lsl #10
    6d0c:	3c000000 	stccc	0, cr0, [r0], {-0}
    6d10:	0006660c 	andeq	r6, r6, ip, lsl #12
    6d14:	d2d10500 	sbcsle	r0, r1, #0, 10
    6d18:	40000005 	andmi	r0, r0, r5
    6d1c:	000a1f0c 	andeq	r1, sl, ip, lsl #30
    6d20:	e2d20500 	sbcs	r0, r2, #0, 10
    6d24:	43000005 	movwmi	r0, #5
    6d28:	626c5f10 	rsbvs	r5, ip, #16, 30	; 0x40
    6d2c:	b4d50500 	ldrblt	r0, [r5], #1280	; 0x500
    6d30:	44000002 	strmi	r0, [r0], #-2
    6d34:	0006b50c 	andeq	fp, r6, ip, lsl #10
    6d38:	21d80500 	bicscs	r0, r8, r0, lsl #10
    6d3c:	4c000000 	stcmi	0, cr0, [r0], {-0}
    6d40:	0006c60c 	andeq	ip, r6, ip, lsl #12
    6d44:	82d90500 	sbcshi	r0, r9, #0, 10
    6d48:	50000000 	andpl	r0, r0, r0
    6d4c:	0005ec0c 	andeq	lr, r5, ip, lsl #24
    6d50:	27dc0500 	ldrbcs	r0, [ip, r0, lsl #10]
    6d54:	54000004 	strpl	r0, [r0], #-4
    6d58:	0007bc0c 	andeq	fp, r7, ip, lsl #24
    6d5c:	ffe00500 			; <UNDEFINED> instruction: 0xffe00500
    6d60:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
    6d64:	0008c40c 	andeq	ip, r8, ip, lsl #8
    6d68:	f4e20500 	vld2.16	{d16[0],d17[0]}, [r2], r0
    6d6c:	5c000000 	stcpl	0, cr0, [r0], {-0}
    6d70:	0007ce0c 	andeq	ip, r7, ip, lsl #28
    6d74:	21e30500 	mvncs	r0, r0, lsl #10
    6d78:	64000000 	strvs	r0, [r0], #-0
    6d7c:	00211400 	eoreq	r1, r1, r0, lsl #8
    6d80:	04270000 	strteq	r0, [r7], #-0
    6d84:	27150000 	ldrcs	r0, [r5, -r0]
    6d88:	15000004 	strne	r0, [r0, #-4]
    6d8c:	0000003d 	andeq	r0, r0, sp, lsr r0
    6d90:	00010a15 	andeq	r0, r1, r5, lsl sl
    6d94:	00211500 	eoreq	r1, r1, r0, lsl #10
    6d98:	0d000000 	stceq	0, cr0, [r0, #-0]
    6d9c:	00043204 	andeq	r3, r4, r4, lsl #4
    6da0:	04270e00 	strteq	r0, [r7], #-3584	; 0xfffff200
    6da4:	11160000 	tstne	r6, r0
    6da8:	28000009 	stmdacs	r0, {r0, r3}
    6dac:	02380504 	eorseq	r0, r8, #4, 10	; 0x1000000
    6db0:	00000564 	andeq	r0, r0, r4, ror #10
    6db4:	00088217 	andeq	r8, r8, r7, lsl r2
    6db8:	023a0500 	eorseq	r0, sl, #0, 10
    6dbc:	00000021 	andeq	r0, r0, r1, lsr #32
    6dc0:	06ae1700 	strteq	r1, [lr], r0, lsl #14
    6dc4:	3f050000 	svccc	0x00050000
    6dc8:	00063902 	andeq	r3, r6, r2, lsl #18
    6dcc:	68170400 	ldmdavs	r7, {sl}
    6dd0:	05000007 	streq	r0, [r0, #-7]
    6dd4:	0639023f 			; <UNDEFINED> instruction: 0x0639023f
    6dd8:	17080000 	strne	r0, [r8, -r0]
    6ddc:	00000733 	andeq	r0, r0, r3, lsr r7
    6de0:	39023f05 	stmdbcc	r2, {r0, r2, r8, r9, sl, fp, ip, sp}
    6de4:	0c000006 	stceq	0, cr0, [r0], {6}
    6de8:	0008e517 	andeq	lr, r8, r7, lsl r5
    6dec:	02410500 	subeq	r0, r1, #0, 10
    6df0:	00000021 	andeq	r0, r0, r1, lsr #32
    6df4:	05e11710 	strbeq	r1, [r1, #1808]!	; 0x710
    6df8:	42050000 	andmi	r0, r5, #0
    6dfc:	00081b02 	andeq	r1, r8, r2, lsl #22
    6e00:	ac171400 	cfldrsge	mvf1, [r7], {-0}
    6e04:	05000009 	streq	r0, [r0, #-9]
    6e08:	00210244 	eoreq	r0, r1, r4, asr #4
    6e0c:	17300000 	ldrne	r0, [r0, -r0]!
    6e10:	000008ef 	andeq	r0, r0, pc, ror #17
    6e14:	88024505 	stmdahi	r2, {r0, r2, r8, sl, lr}
    6e18:	34000005 	strcc	r0, [r0], #-5
    6e1c:	00083f17 	andeq	r3, r8, r7, lsl pc
    6e20:	02470500 	subeq	r0, r7, #0, 10
    6e24:	00000021 	andeq	r0, r0, r1, lsr #32
    6e28:	08ff1738 	ldmeq	pc!, {r3, r4, r5, r8, r9, sl, ip}^	; <UNPREDICTABLE>
    6e2c:	49050000 	stmdbmi	r5, {}	; <UNPREDICTABLE>
    6e30:	00083602 	andeq	r3, r8, r2, lsl #12
    6e34:	a7173c00 	ldrge	r3, [r7, -r0, lsl #24]
    6e38:	05000007 	streq	r0, [r0, #-7]
    6e3c:	017a024c 	cmneq	sl, ip, asr #4
    6e40:	17400000 	strbne	r0, [r0, -r0]
    6e44:	00000752 	andeq	r0, r0, r2, asr r7
    6e48:	21024d05 	tstcs	r2, r5, lsl #26
    6e4c:	44000000 	strmi	r0, [r0], #-0
    6e50:	000a6117 	andeq	r6, sl, r7, lsl r1
    6e54:	024e0500 	subeq	r0, lr, #0, 10
    6e58:	0000017a 	andeq	r0, r0, sl, ror r1
    6e5c:	08511748 	ldmdaeq	r1, {r3, r6, r8, r9, sl, ip}^
    6e60:	4f050000 	svcmi	0x00050000
    6e64:	00083c02 	andeq	r3, r8, r2, lsl #24
    6e68:	70174c00 	andsvc	r4, r7, r0, lsl #24
    6e6c:	05000007 	streq	r0, [r0, #-7]
    6e70:	00210252 	eoreq	r0, r1, r2, asr r2
    6e74:	17500000 	ldrbne	r0, [r0, -r0]
    6e78:	000006be 			; <UNDEFINED> instruction: 0x000006be
    6e7c:	0a025305 	beq	9ba98 <mailbuffer+0x849d8>
    6e80:	54000001 	strpl	r0, [r0], #-1
    6e84:	00087b17 	andeq	r7, r8, r7, lsl fp
    6e88:	02760500 	rsbseq	r0, r6, #0, 10
    6e8c:	000007f9 	strdeq	r0, [r0], -r9
    6e90:	082d1858 	stmdaeq	sp!, {r3, r4, r6, fp, ip}
    6e94:	7a050000 	bvc	146e9c <mailbuffer+0x12fddc>
    6e98:	00029702 	andeq	r9, r2, r2, lsl #14
    6e9c:	18014800 	stmdane	r1, {fp, lr}
    6ea0:	00000785 	andeq	r0, r0, r5, lsl #15
    6ea4:	59027b05 	stmdbpl	r2, {r0, r2, r8, r9, fp, ip, sp, lr}
    6ea8:	4c000002 	stcmi	0, cr0, [r0], {2}
    6eac:	0a031801 	beq	cceb8 <mailbuffer+0xb5df8>
    6eb0:	7f050000 	svcvc	0x00050000
    6eb4:	00084d02 	andeq	r4, r8, r2, lsl #26
    6eb8:	1802dc00 	stmdane	r2, {sl, fp, ip, lr, pc}
    6ebc:	00000697 	muleq	r0, r7, r6
    6ec0:	fe028405 	cdp2	4, 0, cr8, cr2, cr5, {0}
    6ec4:	e0000005 	and	r0, r0, r5
    6ec8:	067c1802 	ldrbteq	r1, [ip], -r2, lsl #16
    6ecc:	85050000 	strhi	r0, [r5, #-0]
    6ed0:	00085902 	andeq	r5, r8, r2, lsl #18
    6ed4:	0002ec00 	andeq	lr, r2, r0, lsl #24
    6ed8:	0409040d 	streq	r0, [r9], #-1037	; 0xfffffbf3
    6edc:	21140000 	tstcs	r4, r0
    6ee0:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
    6ee4:	15000005 	strne	r0, [r0, #-5]
    6ee8:	00000427 	andeq	r0, r0, r7, lsr #8
    6eec:	00003d15 	andeq	r3, r0, r5, lsl sp
    6ef0:	05881500 	streq	r1, [r8, #1280]	; 0x500
    6ef4:	21150000 	tstcs	r5, r0
    6ef8:	00000000 	andeq	r0, r0, r0
    6efc:	0117040d 	tsteq	r7, sp, lsl #8
    6f00:	040d0000 	streq	r0, [sp], #-0
    6f04:	0000056a 	andeq	r0, r0, sl, ror #10
    6f08:	00008d14 	andeq	r8, r0, r4, lsl sp
    6f0c:	0005b200 	andeq	fp, r5, r0, lsl #4
    6f10:	04271500 	strteq	r1, [r7], #-1280	; 0xfffffb00
    6f14:	3d150000 	ldccc	0, cr0, [r5, #-0]
    6f18:	15000000 	strne	r0, [r0, #-0]
    6f1c:	0000008d 	andeq	r0, r0, sp, lsl #1
    6f20:	00002115 	andeq	r2, r0, r5, lsl r1
    6f24:	040d0000 	streq	r0, [sp], #-0
    6f28:	00000594 	muleq	r0, r4, r5
    6f2c:	00002114 	andeq	r2, r0, r4, lsl r1
    6f30:	0005cc00 	andeq	ip, r5, r0, lsl #24
    6f34:	04271500 	strteq	r1, [r7], #-1280	; 0xfffffb00
    6f38:	3d150000 	ldccc	0, cr0, [r5, #-0]
    6f3c:	00000000 	andeq	r0, r0, r0
    6f40:	05b8040d 	ldreq	r0, [r8, #1037]!	; 0x40d
    6f44:	62090000 	andvs	r0, r9, #0
    6f48:	e2000000 	and	r0, r0, #0
    6f4c:	0a000005 	beq	6f68 <_start-0x1098>
    6f50:	0000005b 	andeq	r0, r0, fp, asr r0
    6f54:	62090002 	andvs	r0, r9, #2
    6f58:	f2000000 	vhadd.s8	d0, d0, d0
    6f5c:	0a000005 	beq	6f78 <_start-0x1088>
    6f60:	0000005b 	andeq	r0, r0, fp, asr r0
    6f64:	aa060000 	bge	186f6c <mailbuffer+0x16feac>
    6f68:	05000008 	streq	r0, [r0, #-8]
    6f6c:	02df011d 	sbcseq	r0, pc, #1073741831	; 0x40000007
    6f70:	ea190000 	b	646f78 <mailbuffer+0x62feb8>
    6f74:	0c000009 	stceq	0, cr0, [r0], {9}
    6f78:	33012105 	movwcc	r2, #4357	; 0x1105
    6f7c:	17000006 	strne	r0, [r0, -r6]
    6f80:	000008d2 	ldrdeq	r0, [r0], -r2
    6f84:	33012305 	movwcc	r2, #4869	; 0x1305
    6f88:	00000006 	andeq	r0, r0, r6
    6f8c:	00077e17 	andeq	r7, r7, r7, lsl lr
    6f90:	01240500 			; <UNDEFINED> instruction: 0x01240500
    6f94:	00000021 	andeq	r0, r0, r1, lsr #32
    6f98:	08a41704 	stmiaeq	r4!, {r2, r8, r9, sl, ip}
    6f9c:	25050000 	strcs	r0, [r5, #-0]
    6fa0:	00063901 	andeq	r3, r6, r1, lsl #18
    6fa4:	0d000800 	stceq	8, cr0, [r0, #-0]
    6fa8:	0005fe04 	andeq	pc, r5, r4, lsl #28
    6fac:	f2040d00 	vadd.f32	d0, d4, d0
    6fb0:	19000005 	stmdbne	r0, {r0, r2}
    6fb4:	000005d9 	ldrdeq	r0, [r0], -r9
    6fb8:	013d050e 	teqeq	sp, lr, lsl #10
    6fbc:	00000674 	andeq	r0, r0, r4, ror r6
    6fc0:	00091817 	andeq	r1, r9, r7, lsl r8
    6fc4:	013e0500 	teqeq	lr, r0, lsl #10
    6fc8:	00000674 	andeq	r0, r0, r4, ror r6
    6fcc:	09581700 	ldmdbeq	r8, {r8, r9, sl, ip}^
    6fd0:	3f050000 	svccc	0x00050000
    6fd4:	00067401 	andeq	r7, r6, r1, lsl #8
    6fd8:	74170600 	ldrvc	r0, [r7], #-1536	; 0xfffffa00
    6fdc:	05000009 	streq	r0, [r0, #-9]
    6fe0:	00540140 	subseq	r0, r4, r0, asr #2
    6fe4:	000c0000 	andeq	r0, ip, r0
    6fe8:	00005409 	andeq	r5, r0, r9, lsl #8
    6fec:	00068400 	andeq	r8, r6, r0, lsl #8
    6ff0:	005b0a00 	subseq	r0, fp, r0, lsl #20
    6ff4:	00020000 	andeq	r0, r2, r0
    6ff8:	5705d01a 	smladpl	r5, sl, r0, sp
    6ffc:	00078502 	andeq	r8, r7, r2, lsl #10
    7000:	09be1700 	ldmibeq	lr!, {r8, r9, sl, ip}
    7004:	59050000 	stmdbpl	r5, {}	; <UNPREDICTABLE>
    7008:	00002802 	andeq	r2, r0, r2, lsl #16
    700c:	5e170000 	cdppl	0, 1, cr0, cr7, cr0, {0}
    7010:	05000009 	streq	r0, [r0, #-9]
    7014:	010a025a 	tsteq	sl, sl, asr r2
    7018:	17040000 	strne	r0, [r4, -r0]
    701c:	0000079a 	muleq	r0, sl, r7
    7020:	85025b05 	strhi	r5, [r2, #-2821]	; 0xfffff4fb
    7024:	08000007 	stmdaeq	r0, {r0, r1, r2}
    7028:	000a3817 	andeq	r3, sl, r7, lsl r8
    702c:	025c0500 	subseq	r0, ip, #0, 10
    7030:	00000190 	muleq	r0, r0, r1
    7034:	07431724 	strbeq	r1, [r3, -r4, lsr #14]
    7038:	5d050000 	stcpl	0, cr0, [r5, #-0]
    703c:	00002102 	andeq	r2, r0, r2, lsl #2
    7040:	cd174800 	ldcgt	8, cr4, [r7, #-0]
    7044:	05000008 	streq	r0, [r0, #-8]
    7048:	0070025e 	rsbseq	r0, r0, lr, asr r2
    704c:	17500000 	ldrbne	r0, [r0, -r0]
    7050:	00000a4e 	andeq	r0, r0, lr, asr #20
    7054:	3f025f05 	svccc	0x00025f05
    7058:	58000006 	stmdapl	r0, {r1, r2}
    705c:	0008d817 	andeq	sp, r8, r7, lsl r8
    7060:	02600500 	rsbeq	r0, r0, #0, 10
    7064:	000000f4 	strdeq	r0, [r0], -r4
    7068:	0a531768 	beq	14cce10 <mailbuffer+0x14b5d50>
    706c:	61050000 	mrsvs	r0, (UNDEF: 5)
    7070:	0000f402 	andeq	pc, r0, r2, lsl #8
    7074:	4f177000 	svcmi	0x00177000
    7078:	05000006 	streq	r0, [r0, #-6]
    707c:	00f40262 	rscseq	r0, r4, r2, ror #4
    7080:	17780000 	ldrbne	r0, [r8, -r0]!
    7084:	000009f9 	strdeq	r0, [r0], -r9
    7088:	95026305 	strls	r6, [r2, #-773]	; 0xfffffcfb
    708c:	80000007 	andhi	r0, r0, r7
    7090:	00078e17 	andeq	r8, r7, r7, lsl lr
    7094:	02640500 	rsbeq	r0, r4, #0, 10
    7098:	000007a5 	andeq	r0, r0, r5, lsr #15
    709c:	098c1788 	stmibeq	ip, {r3, r7, r8, r9, sl, ip}
    70a0:	65050000 	strvs	r0, [r5, #-0]
    70a4:	00002102 	andeq	r2, r0, r2, lsl #2
    70a8:	f517a000 			; <UNDEFINED> instruction: 0xf517a000
    70ac:	05000006 	streq	r0, [r0, #-6]
    70b0:	00f40266 	rscseq	r0, r4, r6, ror #4
    70b4:	17a40000 	strne	r0, [r4, r0]!
    70b8:	00000640 	andeq	r0, r0, r0, asr #12
    70bc:	f4026705 	vst1.8	{d6}, [r2], r5
    70c0:	ac000000 	stcge	0, cr0, [r0], {-0}
    70c4:	0006e417 	andeq	lr, r6, r7, lsl r4
    70c8:	02680500 	rsbeq	r0, r8, #0, 10
    70cc:	000000f4 	strdeq	r0, [r0], -r4
    70d0:	05f217b4 	ldrbeq	r1, [r2, #1972]!	; 0x7b4
    70d4:	69050000 	stmdbvs	r5, {}	; <UNPREDICTABLE>
    70d8:	0000f402 	andeq	pc, r0, r2, lsl #8
    70dc:	0117bc00 	tsteq	r7, r0, lsl #24
    70e0:	05000006 	streq	r0, [r0, #-6]
    70e4:	00f4026a 	rscseq	r0, r4, sl, ror #4
    70e8:	17c40000 	strbne	r0, [r4, r0]
    70ec:	00000880 	andeq	r0, r0, r0, lsl #17
    70f0:	21026b05 	tstcs	r2, r5, lsl #22
    70f4:	cc000000 	stcgt	0, cr0, [r0], {-0}
    70f8:	01100900 	tsteq	r0, r0, lsl #18
    70fc:	07950000 	ldreq	r0, [r5, r0]
    7100:	5b0a0000 	blpl	287108 <mailbuffer+0x270048>
    7104:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    7108:	01100900 	tsteq	r0, r0, lsl #18
    710c:	07a50000 	streq	r0, [r5, r0]!
    7110:	5b0a0000 	blpl	287118 <mailbuffer+0x270058>
    7114:	07000000 	streq	r0, [r0, -r0]
    7118:	01100900 	tsteq	r0, r0, lsl #18
    711c:	07b50000 	ldreq	r0, [r5, r0]!
    7120:	5b0a0000 	blpl	287128 <mailbuffer+0x270068>
    7124:	17000000 	strne	r0, [r0, -r0]
    7128:	05f01a00 	ldrbeq	r1, [r0, #2560]!	; 0xa00
    712c:	07d90270 			; <UNDEFINED> instruction: 0x07d90270
    7130:	1d170000 	ldcne	0, cr0, [r7, #-0]
    7134:	05000008 	streq	r0, [r0, #-8]
    7138:	07d90273 			; <UNDEFINED> instruction: 0x07d90273
    713c:	17000000 	strne	r0, [r0, -r0]
    7140:	000009f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    7144:	e9027405 	stmdb	r2, {r0, r2, sl, ip, sp, lr}
    7148:	78000007 	stmdavc	r0, {r0, r1, r2}
    714c:	02d90900 	sbcseq	r0, r9, #0, 18
    7150:	07e90000 	strbeq	r0, [r9, r0]!
    7154:	5b0a0000 	blpl	28715c <mailbuffer+0x27009c>
    7158:	1d000000 	stcne	0, cr0, [r0, #-0]
    715c:	00280900 	eoreq	r0, r8, r0, lsl #18
    7160:	07f90000 	ldrbeq	r0, [r9, r0]!
    7164:	5b0a0000 	blpl	28716c <mailbuffer+0x2700ac>
    7168:	1d000000 	stcne	0, cr0, [r0, #-0]
    716c:	05f01b00 	ldrbeq	r1, [r0, #2816]!	; 0xb00
    7170:	081b0255 	ldmdaeq	fp, {r0, r2, r4, r6, r9}
    7174:	111c0000 	tstne	ip, r0
    7178:	05000009 	streq	r0, [r0, #-9]
    717c:	0684026c 	streq	r0, [r4], ip, ror #4
    7180:	251c0000 	ldrcs	r0, [ip, #-0]
    7184:	0500000a 	streq	r0, [r0, #-10]
    7188:	07b50275 			; <UNDEFINED> instruction: 0x07b50275
    718c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    7190:	00000110 	andeq	r0, r0, r0, lsl r1
    7194:	0000082b 	andeq	r0, r0, fp, lsr #16
    7198:	00005b0a 	andeq	r5, r0, sl, lsl #22
    719c:	1d001800 	stcne	8, cr1, [r0, #-0]
    71a0:	00000836 	andeq	r0, r0, r6, lsr r8
    71a4:	00042715 	andeq	r2, r4, r5, lsl r7
    71a8:	040d0000 	streq	r0, [sp], #-0
    71ac:	0000082b 	andeq	r0, r0, fp, lsr #16
    71b0:	017a040d 	cmneq	sl, sp, lsl #8
    71b4:	4d1d0000 	ldcmi	0, cr0, [sp, #-0]
    71b8:	15000008 	strne	r0, [r0, #-8]
    71bc:	00000021 	andeq	r0, r0, r1, lsr #32
    71c0:	53040d00 	movwpl	r0, #19712	; 0x4d00
    71c4:	0d000008 	stceq	0, cr0, [r0, #-32]	; 0xffffffe0
    71c8:	00084204 	andeq	r4, r8, r4, lsl #4
    71cc:	05f20900 	ldrbeq	r0, [r2, #2304]!	; 0x900
    71d0:	08690000 	stmdaeq	r9!, {}^	; <UNPREDICTABLE>
    71d4:	5b0a0000 	blpl	2871dc <mailbuffer+0x27011c>
    71d8:	02000000 	andeq	r0, r0, #0
    71dc:	09a01e00 	stmibeq	r0!, {r9, sl, fp, ip}
    71e0:	fd050000 	stc2	0, cr0, [r5, #-0]
    71e4:	00042702 	andeq	r2, r4, r2, lsl #14
    71e8:	09991e00 	ldmibeq	r9, {r9, sl, fp, ip}
    71ec:	fe050000 	cdp2	0, 0, cr0, cr5, cr0, {0}
    71f0:	00042d02 	andeq	r2, r4, r2, lsl #26
    71f4:	08351f00 	ldmdaeq	r5!, {r8, r9, sl, fp, ip}
    71f8:	5f060000 	svcpl	0x00060000
    71fc:	0000010a 	andeq	r0, r0, sl, lsl #2
    7200:	00183d20 	andseq	r3, r8, r0, lsr #26
    7204:	10030700 	andne	r0, r3, r0, lsl #14
    7208:	05000001 	streq	r0, [r0, #-1]
    720c:	01609003 	cmneq	r0, r3
    7210:	1b692100 	blne	1a4f618 <mailbuffer+0x1a38558>
    7214:	92010000 	andls	r0, r1, #0
    7218:	000153d4 	ldrdeq	r5, [r1], -r4
    721c:	000000d8 	ldrdeq	r0, [r0], -r8
    7220:	38229c01 	stmdacc	r2!, {r0, sl, fp, ip, pc}
    7224:	0100001b 	tsteq	r0, fp, lsl r0
    7228:	0153a06a 	cmpeq	r3, sl, rrx
    722c:	00003400 	andeq	r3, r0, r0, lsl #8
    7230:	de9c0100 	fmllee	f0, f4, f0
    7234:	23000008 	movwcs	r0, #8
    7238:	00000077 	andeq	r0, r0, r7, ror r0
    723c:	003d6a01 	eorseq	r6, sp, r1, lsl #20
    7240:	91020000 	mrsls	r0, (UNDEF: 2)
    7244:	0069246c 	rsbeq	r2, r9, ip, ror #8
    7248:	00216b01 	eoreq	r6, r1, r1, lsl #22
    724c:	91020000 	mrsls	r0, (UNDEF: 2)
    7250:	1a250074 	bne	947428 <mailbuffer+0x930368>
    7254:	0100001b 	tsteq	r0, fp, lsl r0
    7258:	01537863 	cmpeq	r3, r3, ror #16
    725c:	00002800 	andeq	r2, r0, r0, lsl #16
    7260:	029c0100 	addseq	r0, ip, #0, 2
    7264:	23000009 	movwcs	r0, #9
    7268:	00001b3e 	andeq	r1, r0, lr, lsr fp
    726c:	05886301 	streq	r6, [r8, #769]	; 0x301
    7270:	91020000 	mrsls	r0, (UNDEF: 2)
    7274:	32220074 	eorcc	r0, r2, #116	; 0x74
    7278:	0100001b 	tsteq	r0, fp, lsl r0
    727c:	01533458 	cmpeq	r3, r8, asr r4
    7280:	00004400 	andeq	r4, r0, r0, lsl #8
    7284:	329c0100 	addscc	r0, ip, #0, 2
    7288:	23000009 	movwcs	r0, #9
    728c:	00000077 	andeq	r0, r0, r7, ror r0
    7290:	003d5801 	eorseq	r5, sp, r1, lsl #16
    7294:	91020000 	mrsls	r0, (UNDEF: 2)
    7298:	0069246c 	rsbeq	r2, r9, ip, ror #8
    729c:	00215a01 	eoreq	r5, r1, r1, lsl #20
    72a0:	91020000 	mrsls	r0, (UNDEF: 2)
    72a4:	2c260074 	stccs	0, cr0, [r6], #-464	; 0xfffffe30
    72a8:	0100001b 	tsteq	r0, fp, lsl r0
    72ac:	0152f84e 	cmpeq	r2, lr, asr #16	; <UNPREDICTABLE>
    72b0:	00003c00 	andeq	r3, r0, r0, lsl #24
    72b4:	239c0100 	orrscs	r0, ip, #0, 2
    72b8:	00000077 	andeq	r0, r0, r7, ror r0
    72bc:	003d4e01 	eorseq	r4, sp, r1, lsl #28
    72c0:	91020000 	mrsls	r0, (UNDEF: 2)
    72c4:	0069246c 	rsbeq	r2, r9, ip, ror #8
    72c8:	00215001 	eoreq	r5, r1, r1
    72cc:	91020000 	mrsls	r0, (UNDEF: 2)
    72d0:	ab000074 	blge	74a8 <_start-0xb58>
    72d4:	02000000 	andeq	r0, r0, #0
    72d8:	00182400 	andseq	r2, r8, r0, lsl #8
    72dc:	4b010400 	blmi	482e4 <mailbuffer+0x31224>
    72e0:	ac000015 	stcge	0, cr0, [r0], {21}
    72e4:	c8000154 	stmdagt	r0, {r2, r4, r6, r8}
    72e8:	2e000158 	mcrcs	1, 0, r0, cr0, cr8, {2}
    72ec:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    72f0:	2f2e2e2f 	svccs	0x002e2e2f
    72f4:	2f637273 	svccs	0x00637273
    72f8:	6762696c 	strbvs	r6, [r2, -ip, ror #18]!
    72fc:	632f6363 			; <UNDEFINED> instruction: 0x632f6363
    7300:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    7304:	72612f67 	rsbvc	r2, r1, #412	; 0x19c
    7308:	65692f6d 	strbvs	r2, [r9, #-3949]!	; 0xfffff093
    730c:	35376565 	ldrcc	r6, [r7, #-1381]!	; 0xfffffa9b
    7310:	66642d34 			; <UNDEFINED> instruction: 0x66642d34
    7314:	2f00532e 	svccs	0x0000532e
    7318:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    731c:	63672f64 	cmnvs	r7, #100, 30	; 0x190
    7320:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    7324:	6f6e2d6d 	svcvs	0x006e2d6d
    7328:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    732c:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    7330:	69706f69 	ldmdbvs	r0!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    7334:	672f774d 	strvs	r7, [pc, -sp, asr #14]!
    7338:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    733c:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    7340:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    7344:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    7348:	332e362d 			; <UNDEFINED> instruction: 0x332e362d
    734c:	732b312e 			; <UNDEFINED> instruction: 0x732b312e
    7350:	35326e76 	ldrcc	r6, [r2, #-3702]!	; 0xfffff18a
    7354:	39333033 	ldmdbcc	r3!, {r0, r1, r4, r5, ip, sp}
    7358:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    735c:	612f646c 			; <UNDEFINED> instruction: 0x612f646c
    7360:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    7364:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    7368:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    736c:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    7370:	00636367 	rsbeq	r6, r3, r7, ror #6
    7374:	20554e47 	subscs	r4, r5, r7, asr #28
    7378:	32205341 	eorcc	r5, r0, #67108865	; 0x4000001
    737c:	0037322e 	eorseq	r3, r7, lr, lsr #4
    7380:	00ab8001 	adceq	r8, fp, r1
    7384:	00020000 	andeq	r0, r2, r0
    7388:	00001838 	andeq	r1, r0, r8, lsr r8
    738c:	16b30104 	ldrtne	r0, [r3], r4, lsl #2
    7390:	58c80000 	stmiapl	r8, {}^	; <UNPREDICTABLE>
    7394:	59240001 	stmdbpl	r4!, {r0}
    7398:	2e2e0001 	cdpcs	0, 2, cr0, cr14, cr1, {0}
    739c:	2f2e2e2f 	svccs	0x002e2e2f
    73a0:	732f2e2e 			; <UNDEFINED> instruction: 0x732f2e2e
    73a4:	6c2f6372 	stcvs	3, cr6, [pc], #-456	; 71e4 <_start-0xe1c>
    73a8:	63676269 	cmnvs	r7, #-1879048186	; 0x90000006
    73ac:	6f632f63 	svcvs	0x00632f63
    73b0:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    73b4:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    73b8:	6565692f 	strbvs	r6, [r5, #-2351]!	; 0xfffff6d1
    73bc:	34353765 	ldrtcc	r3, [r5], #-1893	; 0xfffff89b
    73c0:	2e66642d 	cdpcs	4, 6, cr6, cr6, cr13, {1}
    73c4:	622f0053 	eorvs	r0, pc, #83	; 0x53
    73c8:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
    73cc:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    73d0:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    73d4:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    73d8:	61652d65 	cmnvs	r5, r5, ror #26
    73dc:	692d6962 	pushvs	{r1, r5, r6, r8, fp, sp, lr}
    73e0:	4d69706f 	stclmi	0, cr7, [r9, #-444]!	; 0xfffffe44
    73e4:	63672f77 	cmnvs	r7, #476	; 0x1dc
    73e8:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    73ec:	6f6e2d6d 	svcvs	0x006e2d6d
    73f0:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    73f4:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    73f8:	2e332e36 	mrccs	14, 1, r2, cr3, cr6, {1}
    73fc:	76732b31 			; <UNDEFINED> instruction: 0x76732b31
    7400:	3335326e 	teqcc	r5, #-536870906	; 0xe0000006
    7404:	2f393330 	svccs	0x00393330
    7408:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    740c:	72612f64 	rsbvc	r2, r1, #100, 30	; 0x190
    7410:	6f6e2d6d 	svcvs	0x006e2d6d
    7414:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    7418:	2f696261 	svccs	0x00696261
    741c:	6762696c 	strbvs	r6, [r2, -ip, ror #18]!
    7420:	47006363 	strmi	r6, [r0, -r3, ror #6]
    7424:	4120554e 			; <UNDEFINED> instruction: 0x4120554e
    7428:	2e322053 	mrccs	0, 1, r2, cr2, cr3, {2}
    742c:	01003732 	tsteq	r0, r2, lsr r7
    7430:	00013e80 	andeq	r3, r1, r0, lsl #29
    7434:	4c000400 	cfstrsmi	mvf0, [r0], {-0}
    7438:	04000018 	streq	r0, [r0], #-24	; 0xffffffe8
    743c:	001c2b01 	andseq	r2, ip, r1, lsl #22
    7440:	1b730c00 	blne	1cca448 <mailbuffer+0x1cb3388>
    7444:	1bd40000 	blne	ff50744c <_estack+0xf74f744c>
    7448:	59240000 	stmdbpl	r4!, {}	; <UNPREDICTABLE>
    744c:	00f00001 	rscseq	r0, r0, r1
    7450:	17250000 	strne	r0, [r5, -r0]!
    7454:	04020000 	streq	r0, [r2], #-0
    7458:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    745c:	0acd0300 	beq	ff348064 <_estack+0xf7338064>
    7460:	d8020000 	stmdale	r2, {}	; <UNPREDICTABLE>
    7464:	00000037 	andeq	r0, r0, r7, lsr r0
    7468:	1c070404 	cfstrsne	mvf0, [r7], {4}
    746c:	04000006 	streq	r0, [r0], #-6
    7470:	012d0508 			; <UNDEFINED> instruction: 0x012d0508
    7474:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
    7478:	00015b04 	andeq	r5, r1, r4, lsl #22
    747c:	06010400 	streq	r0, [r1], -r0, lsl #8
    7480:	0000086f 	andeq	r0, r0, pc, ror #16
    7484:	6d080104 	stfvss	f0, [r8, #-16]
    7488:	04000008 	streq	r0, [r0], #-8
    748c:	08890502 	stmeq	r9, {r1, r8, sl}
    7490:	02040000 	andeq	r0, r4, #0
    7494:	0000a007 	andeq	sl, r0, r7
    7498:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    749c:	00000132 	andeq	r0, r0, r2, lsr r1
    74a0:	17070404 	strne	r0, [r7, -r4, lsl #8]
    74a4:	04000006 	streq	r0, [r0], #-6
    74a8:	06120708 	ldreq	r0, [r2], -r8, lsl #14
    74ac:	04040000 	streq	r0, [r4], #-0
    74b0:	0000da07 	andeq	sp, r0, r7, lsl #20
    74b4:	06040500 	streq	r0, [r4], -r0, lsl #10
    74b8:	00008c04 	andeq	r8, r0, r4, lsl #24
    74bc:	08010400 	stmdaeq	r1, {sl}
    74c0:	00000876 	andeq	r0, r0, r6, ror r8
    74c4:	00990406 	addseq	r0, r9, r6, lsl #8
    74c8:	8c070000 	stchi	0, cr0, [r7], {-0}
    74cc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    74d0:	00001bc8 	andeq	r1, r0, r8, asr #23
    74d4:	00841703 	addeq	r1, r4, r3, lsl #14
    74d8:	59240000 	stmdbpl	r4!, {}	; <UNPREDICTABLE>
    74dc:	00f00001 	rscseq	r0, r0, r1
    74e0:	9c010000 	stcls	0, cr0, [r1], {-0}
    74e4:	0000011f 	andeq	r0, r0, pc, lsl r1
    74e8:	001bab09 	andseq	sl, fp, r9, lsl #22
    74ec:	1f360100 	svcne	0x00360100
    74f0:	01000001 	tsteq	r0, r1
    74f4:	1b6e0a50 	blne	1b89e3c <mailbuffer+0x1b72d7c>
    74f8:	36010000 	strcc	r0, [r1], -r0
    74fc:	0000012b 	andeq	r0, r0, fp, lsr #2
    7500:	00000000 	andeq	r0, r0, r0
    7504:	001bcf0a 	andseq	ip, fp, sl, lsl #30
    7508:	2c360100 	ldfcss	f0, [r6], #-0
    750c:	53000000 	movwpl	r0, #0
    7510:	0b000000 	bleq	7518 <_start-0xae8>
    7514:	00747364 	rsbseq	r7, r4, r4, ror #6
    7518:	00864801 	addeq	r4, r6, r1, lsl #16
    751c:	00d80000 	sbcseq	r0, r8, r0
    7520:	730b0000 	movwvc	r0, #45056	; 0xb000
    7524:	01006372 	tsteq	r0, r2, ror r3
    7528:	00009349 	andeq	r9, r0, r9, asr #6
    752c:	00010e00 	andeq	r0, r1, r0, lsl #28
    7530:	1bb00c00 	blne	fec0a538 <_estack+0xf6bfa538>
    7534:	4a010000 	bmi	4753c <mailbuffer+0x3047c>
    7538:	00000130 	andeq	r0, r0, r0, lsr r1
    753c:	00000160 	andeq	r0, r0, r0, ror #2
    7540:	001bbc0c 	andseq	fp, fp, ip, lsl #24
    7544:	364b0100 	strbcc	r0, [fp], -r0, lsl #2
    7548:	8e000001 	cdphi	0, 0, cr0, cr0, cr1, {0}
    754c:	00000001 	andeq	r0, r0, r1
    7550:	0000840d 	andeq	r8, r0, sp, lsl #8
    7554:	2a040600 	bcs	108d5c <mailbuffer+0xf1c9c>
    7558:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    755c:	0001240d 	andeq	r2, r1, sp, lsl #8
    7560:	68040600 	stmdavs	r4, {r9, sl}
    7564:	06000000 	streq	r0, [r0], -r0
    7568:	00013c04 	andeq	r3, r1, r4, lsl #24
    756c:	00680700 	rsbeq	r0, r8, r0, lsl #14
    7570:	Address 0x0000000000007570 is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
       0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
       4:	030b130e 	movweq	r1, #45838	; 0xb30e
       8:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
       c:	00171006 	andseq	r1, r7, r6
      10:	00240200 	eoreq	r0, r4, r0, lsl #4
      14:	0b3e0b0b 	bleq	f82c48 <mailbuffer+0xf6bb88>
      18:	00000803 	andeq	r0, r0, r3, lsl #16
      1c:	0b002403 	bleq	9030 <__module_entries_end+0xf8c>
      20:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
      24:	0400000e 	streq	r0, [r0], #-14
      28:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
      2c:	0b3b0b3a 	bleq	ec2d1c <mailbuffer+0xeabc5c>
      30:	00001349 	andeq	r1, r0, r9, asr #6
      34:	0b000f05 	bleq	3c50 <_start-0x43b0>
      38:	0013490b 	andseq	r4, r3, fp, lsl #18
      3c:	01150600 	tsteq	r5, r0, lsl #12
      40:	13011927 	movwne	r1, #6439	; 0x1927
      44:	05070000 	streq	r0, [r7, #-0]
      48:	00134900 	andseq	r4, r3, r0, lsl #18
      4c:	000f0800 	andeq	r0, pc, r0, lsl #16
      50:	00000b0b 	andeq	r0, r0, fp, lsl #22
      54:	03011309 	movweq	r1, #4873	; 0x1309
      58:	3a0b0b0e 	bcc	2c2c98 <mailbuffer+0x2abbd8>
      5c:	010b3b0b 	tsteq	fp, fp, lsl #22
      60:	0a000013 	beq	b4 <_start-0x7f4c>
      64:	0803000d 	stmdaeq	r3, {r0, r2, r3}
      68:	0b3b0b3a 	bleq	ec2d58 <mailbuffer+0xeabc98>
      6c:	0b381349 	bleq	e04d98 <mailbuffer+0xdedcd8>
      70:	350b0000 	strcc	r0, [fp, #-0]
      74:	00134900 	andseq	r4, r3, r0, lsl #18
      78:	00340c00 	eorseq	r0, r4, r0, lsl #24
      7c:	0b3a0e03 	bleq	e83890 <mailbuffer+0xe6c7d0>
      80:	13490b3b 	movtne	r0, #39739	; 0x9b3b
      84:	00001802 	andeq	r1, r0, r2, lsl #16
      88:	4900260d 	stmdbmi	r0, {r0, r2, r3, r9, sl, sp}
      8c:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
      90:	0e03012e 	adfeqsp	f0, f3, #0.5
      94:	0b3b0b3a 	bleq	ec2d84 <mailbuffer+0xeabcc4>
      98:	01111927 	tsteq	r1, r7, lsr #18
      9c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
      a0:	01194296 			; <UNDEFINED> instruction: 0x01194296
      a4:	0f000013 	svceq	0x00000013
      a8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
      ac:	0b3a0e03 	bleq	e838c0 <mailbuffer+0xe6c800>
      b0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
      b4:	06120111 			; <UNDEFINED> instruction: 0x06120111
      b8:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
      bc:	00130119 	andseq	r0, r3, r9, lsl r1
      c0:	00051000 	andeq	r1, r5, r0
      c4:	0b3a0e03 	bleq	e838d8 <mailbuffer+0xe6c818>
      c8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
      cc:	00001802 	andeq	r1, r0, r2, lsl #16
      d0:	3f002e11 	svccc	0x00002e11
      d4:	3a0e0319 	bcc	380d40 <mailbuffer+0x369c80>
      d8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
      dc:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
      e0:	97184006 	ldrls	r4, [r8, -r6]
      e4:	00001942 	andeq	r1, r0, r2, asr #18
      e8:	3f002e12 	svccc	0x00002e12
      ec:	3a0e0319 	bcc	380d58 <mailbuffer+0x369c98>
      f0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
      f4:	11134919 	tstne	r3, r9, lsl r9
      f8:	40061201 	andmi	r1, r6, r1, lsl #4
      fc:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     100:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
     104:	03193f01 	tsteq	r9, #1, 30
     108:	3b0b3a0e 	blcc	2ce948 <mailbuffer+0x2b7888>
     10c:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     110:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     114:	97184006 	ldrls	r4, [r8, -r6]
     118:	00001942 	andeq	r1, r0, r2, asr #18
     11c:	01110100 	tsteq	r1, r0, lsl #2
     120:	0b130e25 	bleq	4c39bc <mailbuffer+0x4ac8fc>
     124:	01110e03 	tsteq	r1, r3, lsl #28
     128:	17100612 			; <UNDEFINED> instruction: 0x17100612
     12c:	24020000 	strcs	r0, [r2], #-0
     130:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     134:	0008030b 	andeq	r0, r8, fp, lsl #6
     138:	00240300 	eoreq	r0, r4, r0, lsl #6
     13c:	0b3e0b0b 	bleq	f82d70 <mailbuffer+0xf6bcb0>
     140:	00000e03 	andeq	r0, r0, r3, lsl #28
     144:	49003504 	stmdbmi	r0, {r2, r8, sl, ip, sp}
     148:	05000013 	streq	r0, [r0, #-19]	; 0xffffffed
     14c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     150:	0b3b0b3a 	bleq	ec2e40 <mailbuffer+0xeabd80>
     154:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     158:	00001802 	andeq	r1, r0, r2, lsl #16
     15c:	3f002e06 	svccc	0x00002e06
     160:	3a0e0319 	bcc	380dcc <mailbuffer+0x369d0c>
     164:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     168:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     16c:	97184006 	ldrls	r4, [r8, -r6]
     170:	00001942 	andeq	r1, r0, r2, asr #18
     174:	3f012e07 	svccc	0x00012e07
     178:	3a0e0319 	bcc	380de4 <mailbuffer+0x369d24>
     17c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     180:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     184:	96184006 	ldrls	r4, [r8], -r6
     188:	13011942 	movwne	r1, #6466	; 0x1942
     18c:	0b080000 	bleq	200194 <mailbuffer+0x1e90d4>
     190:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
     194:	00130106 	andseq	r0, r3, r6, lsl #2
     198:	00340900 	eorseq	r0, r4, r0, lsl #18
     19c:	0b3a0e03 	bleq	e839b0 <mailbuffer+0xe6c8f0>
     1a0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     1a4:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     1a8:	0b0a0000 	bleq	2801b0 <mailbuffer+0x2690f0>
     1ac:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
     1b0:	0b000006 	bleq	1d0 <_start-0x7e30>
     1b4:	0b0b000f 	bleq	2c01f8 <mailbuffer+0x2a9138>
     1b8:	00001349 	andeq	r1, r0, r9, asr #6
     1bc:	0000350c 	andeq	r3, r0, ip, lsl #10
     1c0:	012e0d00 			; <UNDEFINED> instruction: 0x012e0d00
     1c4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     1c8:	0b3b0b3a 	bleq	ec2eb8 <mailbuffer+0xeabdf8>
     1cc:	01111927 	tsteq	r1, r7, lsr #18
     1d0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     1d4:	01194297 			; <UNDEFINED> instruction: 0x01194297
     1d8:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
     1dc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     1e0:	0b3a0e03 	bleq	e839f4 <mailbuffer+0xe6c934>
     1e4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     1e8:	06120111 			; <UNDEFINED> instruction: 0x06120111
     1ec:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     1f0:	00000019 	andeq	r0, r0, r9, lsl r0
     1f4:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
     1f8:	030b130e 	movweq	r1, #45838	; 0xb30e
     1fc:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
     200:	00171006 	andseq	r1, r7, r6
     204:	00240200 	eoreq	r0, r4, r0, lsl #4
     208:	0b3e0b0b 	bleq	f82e3c <mailbuffer+0xf6bd7c>
     20c:	00000803 	andeq	r0, r0, r3, lsl #16
     210:	0b002403 	bleq	9224 <__module_entries_end+0x1180>
     214:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     218:	0400000e 	streq	r0, [r0], #-14
     21c:	0b0b000f 	bleq	2c0260 <mailbuffer+0x2a91a0>
     220:	16050000 	strne	r0, [r5], -r0
     224:	3a0e0300 	bcc	380e2c <mailbuffer+0x369d6c>
     228:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     22c:	06000013 			; <UNDEFINED> instruction: 0x06000013
     230:	13490035 	movtne	r0, #36917	; 0x9035
     234:	13070000 	movwne	r0, #28672	; 0x7000
     238:	0b0e0301 	bleq	380e44 <mailbuffer+0x369d84>
     23c:	3b0b3a0b 	blcc	2cea70 <mailbuffer+0x2b79b0>
     240:	0013010b 	andseq	r0, r3, fp, lsl #2
     244:	000d0800 	andeq	r0, sp, r0, lsl #16
     248:	0b3a0e03 	bleq	e83a5c <mailbuffer+0xe6c99c>
     24c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     250:	00000b38 	andeq	r0, r0, r8, lsr fp
     254:	0b000f09 	bleq	3e80 <_start-0x4180>
     258:	0013490b 	andseq	r4, r3, fp, lsl #18
     25c:	00260a00 	eoreq	r0, r6, r0, lsl #20
     260:	00001349 	andeq	r1, r0, r9, asr #6
     264:	2701150b 	strcs	r1, [r1, -fp, lsl #10]
     268:	00130119 	andseq	r0, r3, r9, lsl r1
     26c:	00050c00 	andeq	r0, r5, r0, lsl #24
     270:	00001349 	andeq	r1, r0, r9, asr #6
     274:	4901010d 	stmdbmi	r1, {r0, r2, r3, r8}
     278:	00130113 	andseq	r0, r3, r3, lsl r1
     27c:	00210e00 	eoreq	r0, r1, r0, lsl #28
     280:	0b2f1349 	bleq	bc4fac <mailbuffer+0xbadeec>
     284:	340f0000 	strcc	r0, [pc], #-0	; 28c <_start-0x7d74>
     288:	3a0e0300 	bcc	380e90 <mailbuffer+0x369dd0>
     28c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     290:	00180213 	andseq	r0, r8, r3, lsl r2
     294:	00341000 	eorseq	r1, r4, r0
     298:	0b3a0e03 	bleq	e83aac <mailbuffer+0xe6c9ec>
     29c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     2a0:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     2a4:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
     2a8:	03193f01 	tsteq	r9, #1, 30
     2ac:	3b0b3a0e 	blcc	2ceaec <mailbuffer+0x2b7a2c>
     2b0:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
     2b4:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     2b8:	96184006 	ldrls	r4, [r8], -r6
     2bc:	13011942 	movwne	r1, #6466	; 0x1942
     2c0:	05120000 	ldreq	r0, [r2, #-0]
     2c4:	3a0e0300 	bcc	380ecc <mailbuffer+0x369e0c>
     2c8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     2cc:	00180213 	andseq	r0, r8, r3, lsl r2
     2d0:	00341300 	eorseq	r1, r4, r0, lsl #6
     2d4:	0b3a0e03 	bleq	e83ae8 <mailbuffer+0xe6ca28>
     2d8:	1349053b 	movtne	r0, #38203	; 0x953b
     2dc:	00001802 	andeq	r1, r0, r2, lsl #16
     2e0:	03012e14 	movweq	r2, #7700	; 0x1e14
     2e4:	3b0b3a0e 	blcc	2ceb24 <mailbuffer+0x2b7a64>
     2e8:	11192705 	tstne	r9, r5, lsl #14
     2ec:	40061201 	andmi	r1, r6, r1, lsl #4
     2f0:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     2f4:	00001301 	andeq	r1, r0, r1, lsl #6
     2f8:	3f012e15 	svccc	0x00012e15
     2fc:	3a0e0319 	bcc	380f68 <mailbuffer+0x369ea8>
     300:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     304:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     308:	96184006 	ldrls	r4, [r8], -r6
     30c:	13011942 	movwne	r1, #6466	; 0x1942
     310:	0b160000 	bleq	580318 <mailbuffer+0x569258>
     314:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
     318:	17000006 	strne	r0, [r0, -r6]
     31c:	0e03012e 	adfeqsp	f0, f3, #0.5
     320:	0b3b0b3a 	bleq	ec3010 <mailbuffer+0xeabf50>
     324:	01111927 	tsteq	r1, r7, lsr #18
     328:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     32c:	01194296 			; <UNDEFINED> instruction: 0x01194296
     330:	18000013 	stmdane	r0, {r0, r1, r4}
     334:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     338:	0b3a0e03 	bleq	e83b4c <mailbuffer+0xe6ca8c>
     33c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     340:	06120111 			; <UNDEFINED> instruction: 0x06120111
     344:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     348:	00130119 	andseq	r0, r3, r9, lsl r1
     34c:	00051900 	andeq	r1, r5, r0, lsl #18
     350:	0b3a0e03 	bleq	e83b64 <mailbuffer+0xe6caa4>
     354:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     358:	00001802 	andeq	r1, r0, r2, lsl #16
     35c:	3f012e1a 	svccc	0x00012e1a
     360:	3a0e0319 	bcc	380fcc <mailbuffer+0x369f0c>
     364:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     368:	11134919 	tstne	r3, r9, lsl r9
     36c:	40061201 	andmi	r1, r6, r1, lsl #4
     370:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     374:	01000000 	mrseq	r0, (UNDEF: 0)
     378:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     37c:	0e030b13 	vmoveq.32	d3[0], r0
     380:	06120111 			; <UNDEFINED> instruction: 0x06120111
     384:	00001710 	andeq	r1, r0, r0, lsl r7
     388:	0b002402 	bleq	9398 <__module_entries_end+0x12f4>
     38c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     390:	0300000e 	movweq	r0, #14
     394:	0b0b0024 	bleq	2c042c <mailbuffer+0x2a936c>
     398:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     39c:	35040000 	strcc	r0, [r4, #-0]
     3a0:	00134900 	andseq	r4, r3, r0, lsl #18
     3a4:	00160500 	andseq	r0, r6, r0, lsl #10
     3a8:	0b3a0e03 	bleq	e83bbc <mailbuffer+0xe6cafc>
     3ac:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     3b0:	16060000 	strne	r0, [r6], -r0
     3b4:	3a0e0300 	bcc	380fbc <mailbuffer+0x369efc>
     3b8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     3bc:	07000013 	smladeq	r0, r3, r0, r0
     3c0:	0b0b0117 	bleq	2c0824 <mailbuffer+0x2a9764>
     3c4:	0b3b0b3a 	bleq	ec30b4 <mailbuffer+0xeabff4>
     3c8:	00001301 	andeq	r1, r0, r1, lsl #6
     3cc:	03000d08 	movweq	r0, #3336	; 0xd08
     3d0:	3b0b3a0e 	blcc	2cec10 <mailbuffer+0x2b7b50>
     3d4:	0013490b 	andseq	r4, r3, fp, lsl #18
     3d8:	01010900 	tsteq	r1, r0, lsl #18
     3dc:	13011349 	movwne	r1, #4937	; 0x1349
     3e0:	210a0000 	mrscs	r0, (UNDEF: 10)
     3e4:	2f134900 	svccs	0x00134900
     3e8:	0b00000b 	bleq	41c <_start-0x7be4>
     3ec:	0b0b0113 	bleq	2c0840 <mailbuffer+0x2a9780>
     3f0:	0b3b0b3a 	bleq	ec30e0 <mailbuffer+0xeac020>
     3f4:	00001301 	andeq	r1, r0, r1, lsl #6
     3f8:	03000d0c 	movweq	r0, #3340	; 0xd0c
     3fc:	3b0b3a0e 	blcc	2cec3c <mailbuffer+0x2b7b7c>
     400:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     404:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
     408:	0b0b000f 	bleq	2c044c <mailbuffer+0x2a938c>
     40c:	0f0e0000 	svceq	0x000e0000
     410:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     414:	0f000013 	svceq	0x00000013
     418:	13490026 	movtne	r0, #36902	; 0x9026
     41c:	13100000 	tstne	r0, #0
     420:	0b0e0301 	bleq	38102c <mailbuffer+0x369f6c>
     424:	3b0b3a0b 	blcc	2cec58 <mailbuffer+0x2b7b98>
     428:	0013010b 	andseq	r0, r3, fp, lsl #2
     42c:	000d1100 	andeq	r1, sp, r0, lsl #2
     430:	0b3a0803 	bleq	e82444 <mailbuffer+0xe6b384>
     434:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     438:	00000b38 	andeq	r0, r0, r8, lsr fp
     43c:	03011312 	movweq	r1, #4882	; 0x1312
     440:	3a050b0e 	bcc	143080 <mailbuffer+0x12bfc0>
     444:	010b3b0b 	tsteq	fp, fp, lsl #22
     448:	13000013 	movwne	r0, #19
     44c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     450:	0b3b0b3a 	bleq	ec3140 <mailbuffer+0xeac080>
     454:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
     458:	15140000 	ldrne	r0, [r4, #-0]
     45c:	00192700 	andseq	r2, r9, r0, lsl #14
     460:	01151500 	tsteq	r5, r0, lsl #10
     464:	13491927 	movtne	r1, #39207	; 0x9927
     468:	00001301 	andeq	r1, r0, r1, lsl #6
     46c:	49000516 	stmdbmi	r0, {r1, r2, r4, r8, sl}
     470:	17000013 	smladne	r0, r3, r0, r0
     474:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     478:	0b3a050b 	bleq	e818ac <mailbuffer+0xe6a7ec>
     47c:	1301053b 	movwne	r0, #5435	; 0x153b
     480:	0d180000 	ldceq	0, cr0, [r8, #-0]
     484:	3a0e0300 	bcc	38108c <mailbuffer+0x369fcc>
     488:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     48c:	000b3813 	andeq	r3, fp, r3, lsl r8
     490:	000d1900 	andeq	r1, sp, r0, lsl #18
     494:	0b3a0e03 	bleq	e83ca8 <mailbuffer+0xe6cbe8>
     498:	1349053b 	movtne	r0, #38203	; 0x953b
     49c:	00000538 	andeq	r0, r0, r8, lsr r5
     4a0:	0301131a 	movweq	r1, #4890	; 0x131a
     4a4:	3a0b0b0e 	bcc	2c30e4 <mailbuffer+0x2ac024>
     4a8:	01053b0b 	tsteq	r5, fp, lsl #22
     4ac:	1b000013 	blne	500 <_start-0x7b00>
     4b0:	0b0b0113 	bleq	2c0904 <mailbuffer+0x2a9844>
     4b4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     4b8:	00001301 	andeq	r1, r0, r1, lsl #6
     4bc:	0b01171c 	bleq	46134 <mailbuffer+0x2f074>
     4c0:	3b0b3a0b 	blcc	2cecf4 <mailbuffer+0x2b7c34>
     4c4:	00130105 	andseq	r0, r3, r5, lsl #2
     4c8:	000d1d00 	andeq	r1, sp, r0, lsl #26
     4cc:	0b3a0e03 	bleq	e83ce0 <mailbuffer+0xe6cc20>
     4d0:	1349053b 	movtne	r0, #38203	; 0x953b
     4d4:	151e0000 	ldrne	r0, [lr, #-0]
     4d8:	01192701 	tsteq	r9, r1, lsl #14
     4dc:	1f000013 	svcne	0x00000013
     4e0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     4e4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     4e8:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     4ec:	0000193c 	andeq	r1, r0, ip, lsr r9
     4f0:	03003420 	movweq	r3, #1056	; 0x420
     4f4:	3b0b3a0e 	blcc	2ced34 <mailbuffer+0x2b7c74>
     4f8:	3f13490b 	svccc	0x0013490b
     4fc:	00193c19 	andseq	r3, r9, r9, lsl ip
     500:	012e2100 			; <UNDEFINED> instruction: 0x012e2100
     504:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     508:	0b3b0b3a 	bleq	ec31f8 <mailbuffer+0xeac138>
     50c:	01111927 	tsteq	r1, r7, lsr #18
     510:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     514:	01194297 			; <UNDEFINED> instruction: 0x01194297
     518:	22000013 	andcs	r0, r0, #19
     51c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     520:	0b3b0b3a 	bleq	ec3210 <mailbuffer+0xeac150>
     524:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     528:	34230000 	strtcc	r0, [r3], #-0
     52c:	3a0e0300 	bcc	381134 <mailbuffer+0x36a074>
     530:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     534:	00180213 	andseq	r0, r8, r3, lsl r2
     538:	012e2400 			; <UNDEFINED> instruction: 0x012e2400
     53c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     540:	0b3b0b3a 	bleq	ec3230 <mailbuffer+0xeac170>
     544:	01111927 	tsteq	r1, r7, lsr #18
     548:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     54c:	00194297 	mulseq	r9, r7, r2
     550:	11010000 	mrsne	r0, (UNDEF: 1)
     554:	130e2501 	movwne	r2, #58625	; 0xe501
     558:	110e030b 	tstne	lr, fp, lsl #6
     55c:	10061201 	andne	r1, r6, r1, lsl #4
     560:	02000017 	andeq	r0, r0, #23
     564:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     568:	0b3b0b3a 	bleq	ec3258 <mailbuffer+0xeac198>
     56c:	00001349 	andeq	r1, r0, r9, asr #6
     570:	0b002403 	bleq	9584 <__module_entries_end+0x14e0>
     574:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     578:	0400000e 	streq	r0, [r0], #-14
     57c:	0b0b0024 	bleq	2c0614 <mailbuffer+0x2a9554>
     580:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     584:	35050000 	strcc	r0, [r5, #-0]
     588:	00134900 	andseq	r4, r3, r0, lsl #18
     58c:	00160600 	andseq	r0, r6, r0, lsl #12
     590:	0b3a0e03 	bleq	e83da4 <mailbuffer+0xe6cce4>
     594:	1349053b 	movtne	r0, #38203	; 0x953b
     598:	17070000 	strne	r0, [r7, -r0]
     59c:	3a0b0b01 	bcc	2c31a8 <mailbuffer+0x2ac0e8>
     5a0:	010b3b0b 	tsteq	fp, fp, lsl #22
     5a4:	08000013 	stmdaeq	r0, {r0, r1, r4}
     5a8:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     5ac:	0b3b0b3a 	bleq	ec329c <mailbuffer+0xeac1dc>
     5b0:	00001349 	andeq	r1, r0, r9, asr #6
     5b4:	49010109 	stmdbmi	r1, {r0, r3, r8}
     5b8:	00130113 	andseq	r0, r3, r3, lsl r1
     5bc:	00210a00 	eoreq	r0, r1, r0, lsl #20
     5c0:	0b2f1349 	bleq	bc52ec <mailbuffer+0xbae22c>
     5c4:	130b0000 	movwne	r0, #45056	; 0xb000
     5c8:	3a0b0b01 	bcc	2c31d4 <mailbuffer+0x2ac114>
     5cc:	010b3b0b 	tsteq	fp, fp, lsl #22
     5d0:	0c000013 	stceq	0, cr0, [r0], {19}
     5d4:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     5d8:	0b3b0b3a 	bleq	ec32c8 <mailbuffer+0xeac208>
     5dc:	0b381349 	bleq	e05308 <mailbuffer+0xdee248>
     5e0:	0f0d0000 	svceq	0x000d0000
     5e4:	000b0b00 	andeq	r0, fp, r0, lsl #22
     5e8:	00260e00 	eoreq	r0, r6, r0, lsl #28
     5ec:	00001349 	andeq	r1, r0, r9, asr #6
     5f0:	0b000f0f 	bleq	4234 <_start-0x3dcc>
     5f4:	0013490b 	andseq	r4, r3, fp, lsl #18
     5f8:	01131000 	tsteq	r3, r0
     5fc:	0b0b0e03 	bleq	2c3e10 <mailbuffer+0x2acd50>
     600:	0b3b0b3a 	bleq	ec32f0 <mailbuffer+0xeac230>
     604:	00001301 	andeq	r1, r0, r1, lsl #6
     608:	03000d11 	movweq	r0, #3345	; 0xd11
     60c:	3b0b3a08 	blcc	2cee34 <mailbuffer+0x2b7d74>
     610:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     614:	1200000b 	andne	r0, r0, #11
     618:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     61c:	0b3a050b 	bleq	e81a50 <mailbuffer+0xe6a990>
     620:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     624:	0d130000 	ldceq	0, cr0, [r3, #-0]
     628:	3a0e0300 	bcc	381230 <mailbuffer+0x36a170>
     62c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     630:	00053813 	andeq	r3, r5, r3, lsl r8
     634:	00151400 	andseq	r1, r5, r0, lsl #8
     638:	00001927 	andeq	r1, r0, r7, lsr #18
     63c:	27011515 	smladcs	r1, r5, r5, r1
     640:	01134919 	tsteq	r3, r9, lsl r9
     644:	16000013 			; <UNDEFINED> instruction: 0x16000013
     648:	13490005 	movtne	r0, #36869	; 0x9005
     64c:	13170000 	tstne	r7, #0
     650:	0b0e0301 	bleq	38125c <mailbuffer+0x36a19c>
     654:	3b0b3a05 	blcc	2cee70 <mailbuffer+0x2b7db0>
     658:	00130105 	andseq	r0, r3, r5, lsl #2
     65c:	000d1800 	andeq	r1, sp, r0, lsl #16
     660:	0b3a0e03 	bleq	e83e74 <mailbuffer+0xe6cdb4>
     664:	1349053b 	movtne	r0, #38203	; 0x953b
     668:	00000b38 	andeq	r0, r0, r8, lsr fp
     66c:	03000d19 	movweq	r0, #3353	; 0xd19
     670:	3b0b3a0e 	blcc	2ceeb0 <mailbuffer+0x2b7df0>
     674:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
     678:	1a000005 	bne	694 <_start-0x796c>
     67c:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     680:	0b3a0b0b 	bleq	e832b4 <mailbuffer+0xe6c1f4>
     684:	1301053b 	movwne	r0, #5435	; 0x153b
     688:	131b0000 	tstne	fp, #0
     68c:	3a0b0b01 	bcc	2c3298 <mailbuffer+0x2ac1d8>
     690:	01053b0b 	tsteq	r5, fp, lsl #22
     694:	1c000013 	stcne	0, cr0, [r0], {19}
     698:	0b0b0117 	bleq	2c0afc <mailbuffer+0x2a9a3c>
     69c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     6a0:	00001301 	andeq	r1, r0, r1, lsl #6
     6a4:	03000d1d 	movweq	r0, #3357	; 0xd1d
     6a8:	3b0b3a0e 	blcc	2ceee8 <mailbuffer+0x2b7e28>
     6ac:	00134905 	andseq	r4, r3, r5, lsl #18
     6b0:	01151e00 	tsteq	r5, r0, lsl #28
     6b4:	13011927 	movwne	r1, #6439	; 0x1927
     6b8:	341f0000 	ldrcc	r0, [pc], #-0	; 6c0 <_start-0x7940>
     6bc:	3a0e0300 	bcc	3812c4 <mailbuffer+0x36a204>
     6c0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     6c4:	3c193f13 	ldccc	15, cr3, [r9], {19}
     6c8:	20000019 	andcs	r0, r0, r9, lsl r0
     6cc:	00000026 	andeq	r0, r0, r6, lsr #32
     6d0:	03003421 	movweq	r3, #1057	; 0x421
     6d4:	3b0b3a0e 	blcc	2cef14 <mailbuffer+0x2b7e54>
     6d8:	3f13490b 	svccc	0x0013490b
     6dc:	00193c19 	andseq	r3, r9, r9, lsl ip
     6e0:	012e2200 			; <UNDEFINED> instruction: 0x012e2200
     6e4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     6e8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     6ec:	13491927 	movtne	r1, #39207	; 0x9927
     6f0:	06120111 			; <UNDEFINED> instruction: 0x06120111
     6f4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     6f8:	00130119 	andseq	r0, r3, r9, lsl r1
     6fc:	00052300 	andeq	r2, r5, r0, lsl #6
     700:	0b3a0e03 	bleq	e83f14 <mailbuffer+0xe6ce54>
     704:	1349053b 	movtne	r0, #38203	; 0x953b
     708:	00001802 	andeq	r1, r0, r2, lsl #16
     70c:	03003424 	movweq	r3, #1060	; 0x424
     710:	3b0b3a0e 	blcc	2cef50 <mailbuffer+0x2b7e90>
     714:	02134905 	andseq	r4, r3, #81920	; 0x14000
     718:	25000018 	strcs	r0, [r0, #-24]	; 0xffffffe8
     71c:	0e03012e 	adfeqsp	f0, f3, #0.5
     720:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     724:	13491927 	movtne	r1, #39207	; 0x9927
     728:	06120111 			; <UNDEFINED> instruction: 0x06120111
     72c:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     730:	00130119 	andseq	r0, r3, r9, lsl r1
     734:	012e2600 			; <UNDEFINED> instruction: 0x012e2600
     738:	0b3a0e03 	bleq	e83f4c <mailbuffer+0xe6ce8c>
     73c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     740:	06120111 			; <UNDEFINED> instruction: 0x06120111
     744:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     748:	00130119 	andseq	r0, r3, r9, lsl r1
     74c:	012e2700 			; <UNDEFINED> instruction: 0x012e2700
     750:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     754:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     758:	01111927 	tsteq	r1, r7, lsr #18
     75c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     760:	01194296 			; <UNDEFINED> instruction: 0x01194296
     764:	28000013 	stmdacs	r0, {r0, r1, r4}
     768:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     76c:	0b3a0e03 	bleq	e83f80 <mailbuffer+0xe6cec0>
     770:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     774:	01111349 	tsteq	r1, r9, asr #6
     778:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     77c:	01194296 			; <UNDEFINED> instruction: 0x01194296
     780:	29000013 	stmdbcs	r0, {r0, r1, r4}
     784:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     788:	0b3a0e03 	bleq	e83f9c <mailbuffer+0xe6cedc>
     78c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     790:	01111349 	tsteq	r1, r9, asr #6
     794:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     798:	00194296 	mulseq	r9, r6, r2
     79c:	11010000 	mrsne	r0, (UNDEF: 1)
     7a0:	130e2501 	movwne	r2, #58625	; 0xe501
     7a4:	1b0e030b 	blne	3813d8 <mailbuffer+0x36a318>
     7a8:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
     7ac:	00171006 	andseq	r1, r7, r6
     7b0:	00240200 	eoreq	r0, r4, r0, lsl #4
     7b4:	0b3e0b0b 	bleq	f833e8 <mailbuffer+0xf6c328>
     7b8:	00000e03 	andeq	r0, r0, r3, lsl #28
     7bc:	49002603 	stmdbmi	r0, {r0, r1, r9, sl, sp}
     7c0:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
     7c4:	13490035 	movtne	r0, #36917	; 0x9035
     7c8:	24050000 	strcs	r0, [r5], #-0
     7cc:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     7d0:	0008030b 	andeq	r0, r8, fp, lsl #6
     7d4:	00160600 	andseq	r0, r6, r0, lsl #12
     7d8:	0b3a0e03 	bleq	e83fec <mailbuffer+0xe6cf2c>
     7dc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     7e0:	0f070000 	svceq	0x00070000
     7e4:	000b0b00 	andeq	r0, fp, r0, lsl #22
     7e8:	00160800 	andseq	r0, r6, r0, lsl #16
     7ec:	0b3a0e03 	bleq	e84000 <mailbuffer+0xe6cf40>
     7f0:	1349053b 	movtne	r0, #38203	; 0x953b
     7f4:	17090000 	strne	r0, [r9, -r0]
     7f8:	3a0b0b01 	bcc	2c3404 <mailbuffer+0x2ac344>
     7fc:	010b3b0b 	tsteq	fp, fp, lsl #22
     800:	0a000013 	beq	854 <_start-0x77ac>
     804:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     808:	0b3b0b3a 	bleq	ec34f8 <mailbuffer+0xeac438>
     80c:	00001349 	andeq	r1, r0, r9, asr #6
     810:	4901010b 	stmdbmi	r1, {r0, r1, r3, r8}
     814:	00130113 	andseq	r0, r3, r3, lsl r1
     818:	00210c00 	eoreq	r0, r1, r0, lsl #24
     81c:	0b2f1349 	bleq	bc5548 <mailbuffer+0xbae488>
     820:	130d0000 	movwne	r0, #53248	; 0xd000
     824:	3a0b0b01 	bcc	2c3430 <mailbuffer+0x2ac370>
     828:	010b3b0b 	tsteq	fp, fp, lsl #22
     82c:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
     830:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     834:	0b3b0b3a 	bleq	ec3524 <mailbuffer+0xeac464>
     838:	0b381349 	bleq	e05564 <mailbuffer+0xdee4a4>
     83c:	130f0000 	movwne	r0, #61440	; 0xf000
     840:	0b0e0301 	bleq	38144c <mailbuffer+0x36a38c>
     844:	3b0b3a0b 	blcc	2cf078 <mailbuffer+0x2b7fb8>
     848:	0013010b 	andseq	r0, r3, fp, lsl #2
     84c:	000d1000 	andeq	r1, sp, r0
     850:	0b3a0803 	bleq	e82864 <mailbuffer+0xe6b7a4>
     854:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     858:	00000b38 	andeq	r0, r0, r8, lsr fp
     85c:	0b000f11 	bleq	44a8 <_start-0x3b58>
     860:	0013490b 	andseq	r4, r3, fp, lsl #18
     864:	01131200 	tsteq	r3, r0, lsl #4
     868:	050b0e03 	streq	r0, [fp, #-3587]	; 0xfffff1fd
     86c:	0b3b0b3a 	bleq	ec355c <mailbuffer+0xeac49c>
     870:	00001301 	andeq	r1, r0, r1, lsl #6
     874:	03000d13 	movweq	r0, #3347	; 0xd13
     878:	3b0b3a0e 	blcc	2cf0b8 <mailbuffer+0x2b7ff8>
     87c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     880:	14000005 	strne	r0, [r0], #-5
     884:	19270015 	stmdbne	r7!, {r0, r2, r4}
     888:	15150000 	ldrne	r0, [r5, #-0]
     88c:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
     890:	00130113 	andseq	r0, r3, r3, lsl r1
     894:	00051600 	andeq	r1, r5, r0, lsl #12
     898:	00001349 	andeq	r1, r0, r9, asr #6
     89c:	03011317 	movweq	r1, #4887	; 0x1317
     8a0:	3a050b0e 	bcc	1434e0 <mailbuffer+0x12c420>
     8a4:	01053b0b 	tsteq	r5, fp, lsl #22
     8a8:	18000013 	stmdane	r0, {r0, r1, r4}
     8ac:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     8b0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     8b4:	0b381349 	bleq	e055e0 <mailbuffer+0xdee520>
     8b8:	0d190000 	ldceq	0, cr0, [r9, #-0]
     8bc:	3a0e0300 	bcc	3814c4 <mailbuffer+0x36a404>
     8c0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     8c4:	00053813 	andeq	r3, r5, r3, lsl r8
     8c8:	01131a00 	tsteq	r3, r0, lsl #20
     8cc:	0b0b0e03 	bleq	2c40e0 <mailbuffer+0x2ad020>
     8d0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     8d4:	00001301 	andeq	r1, r0, r1, lsl #6
     8d8:	0b01131b 	bleq	4554c <mailbuffer+0x2e48c>
     8dc:	3b0b3a0b 	blcc	2cf110 <mailbuffer+0x2b8050>
     8e0:	00130105 	andseq	r0, r3, r5, lsl #2
     8e4:	01171c00 	tsteq	r7, r0, lsl #24
     8e8:	0b3a0b0b 	bleq	e8351c <mailbuffer+0xe6c45c>
     8ec:	1301053b 	movwne	r0, #5435	; 0x153b
     8f0:	0d1d0000 	ldceq	0, cr0, [sp, #-0]
     8f4:	3a0e0300 	bcc	3814fc <mailbuffer+0x36a43c>
     8f8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     8fc:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
     900:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
     904:	00001301 	andeq	r1, r0, r1, lsl #6
     908:	0300341f 	movweq	r3, #1055	; 0x41f
     90c:	3b0b3a0e 	blcc	2cf14c <mailbuffer+0x2b808c>
     910:	3f134905 	svccc	0x00134905
     914:	00193c19 	andseq	r3, r9, r9, lsl ip
     918:	00342000 	eorseq	r2, r4, r0
     91c:	0b3a0e03 	bleq	e84130 <mailbuffer+0xe6d070>
     920:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     924:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     928:	34210000 	strtcc	r0, [r1], #-0
     92c:	3a0e0300 	bcc	381534 <mailbuffer+0x36a474>
     930:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     934:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
     938:	22000018 	andcs	r0, r0, #24
     93c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     940:	0b3b0b3a 	bleq	ec3630 <mailbuffer+0xeac570>
     944:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     948:	2e230000 	cdpcs	0, 2, cr0, cr3, cr0, {0}
     94c:	3a0e0301 	bcc	381558 <mailbuffer+0x36a498>
     950:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     954:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     958:	96184006 	ldrls	r4, [r8], -r6
     95c:	13011942 	movwne	r1, #6466	; 0x1942
     960:	05240000 	streq	r0, [r4, #-0]!
     964:	3a0e0300 	bcc	38156c <mailbuffer+0x36a4ac>
     968:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     96c:	00180213 	andseq	r0, r8, r3, lsl r2
     970:	012e2500 			; <UNDEFINED> instruction: 0x012e2500
     974:	0b3a0e03 	bleq	e84188 <mailbuffer+0xe6d0c8>
     978:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     97c:	01111349 	tsteq	r1, r9, asr #6
     980:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     984:	01194296 			; <UNDEFINED> instruction: 0x01194296
     988:	26000013 			; <UNDEFINED> instruction: 0x26000013
     98c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     990:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     994:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     998:	0b270000 	bleq	9c09a0 <mailbuffer+0x9a98e0>
     99c:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
     9a0:	28000006 	stmdacs	r0, {r1, r2}
     9a4:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     9a8:	0b3a0e03 	bleq	e841bc <mailbuffer+0xe6d0fc>
     9ac:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     9b0:	06120111 			; <UNDEFINED> instruction: 0x06120111
     9b4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     9b8:	29000019 	stmdbcs	r0, {r0, r3, r4}
     9bc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     9c0:	0b3a0e03 	bleq	e841d4 <mailbuffer+0xe6d114>
     9c4:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     9c8:	01111349 	tsteq	r1, r9, asr #6
     9cc:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     9d0:	01194296 			; <UNDEFINED> instruction: 0x01194296
     9d4:	2a000013 	bcs	a28 <_start-0x75d8>
     9d8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     9dc:	0b3a0e03 	bleq	e841f0 <mailbuffer+0xe6d130>
     9e0:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     9e4:	06120111 			; <UNDEFINED> instruction: 0x06120111
     9e8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     9ec:	00130119 	andseq	r0, r3, r9, lsl r1
     9f0:	012e2b00 			; <UNDEFINED> instruction: 0x012e2b00
     9f4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     9f8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     9fc:	01111927 	tsteq	r1, r7, lsr #18
     a00:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     a04:	01194296 			; <UNDEFINED> instruction: 0x01194296
     a08:	2c000013 	stccs	0, cr0, [r0], {19}
     a0c:	0111010b 	tsteq	r1, fp, lsl #2
     a10:	13010612 	movwne	r0, #5650	; 0x1612
     a14:	2e2d0000 	cdpcs	0, 2, cr0, cr13, cr0, {0}
     a18:	03193f00 	tsteq	r9, #0, 30
     a1c:	3b0b3a0e 	blcc	2cf25c <mailbuffer+0x2b819c>
     a20:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
     a24:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     a28:	97184006 	ldrls	r4, [r8, -r6]
     a2c:	00001942 	andeq	r1, r0, r2, asr #18
     a30:	3f012e2e 	svccc	0x00012e2e
     a34:	3a0e0319 	bcc	3816a0 <mailbuffer+0x36a5e0>
     a38:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     a3c:	11134919 	tstne	r3, r9, lsl r9
     a40:	40061201 	andmi	r1, r6, r1, lsl #4
     a44:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     a48:	00001301 	andeq	r1, r0, r1, lsl #6
     a4c:	3f002e2f 	svccc	0x00002e2f
     a50:	3a0e0319 	bcc	3816bc <mailbuffer+0x36a5fc>
     a54:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     a58:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     a5c:	96184006 	ldrls	r4, [r8], -r6
     a60:	00001942 	andeq	r1, r0, r2, asr #18
     a64:	01110100 	tsteq	r1, r0, lsl #2
     a68:	0b130e25 	bleq	4c4304 <mailbuffer+0x4ad244>
     a6c:	01110e03 	tsteq	r1, r3, lsl #28
     a70:	17100612 			; <UNDEFINED> instruction: 0x17100612
     a74:	16020000 	strne	r0, [r2], -r0
     a78:	3a0e0300 	bcc	381680 <mailbuffer+0x36a5c0>
     a7c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     a80:	03000013 	movweq	r0, #19
     a84:	0b0b000f 	bleq	2c0ac8 <mailbuffer+0x2a9a08>
     a88:	00001349 	andeq	r1, r0, r9, asr #6
     a8c:	27011504 	strcs	r1, [r1, -r4, lsl #10]
     a90:	00130119 	andseq	r0, r3, r9, lsl r1
     a94:	00050500 	andeq	r0, r5, r0, lsl #10
     a98:	00001349 	andeq	r1, r0, r9, asr #6
     a9c:	0b002406 	bleq	9abc <__module_entries_end+0x1a18>
     aa0:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     aa4:	0700000e 	streq	r0, [r0, -lr]
     aa8:	13490026 	movtne	r0, #36902	; 0x9026
     aac:	0f080000 	svceq	0x00080000
     ab0:	000b0b00 	andeq	r0, fp, r0, lsl #22
     ab4:	01130900 	tsteq	r3, r0, lsl #18
     ab8:	0b3a0b0b 	bleq	e836ec <mailbuffer+0xe6c62c>
     abc:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     ac0:	0d0a0000 	stceq	0, cr0, [sl, #-0]
     ac4:	3a0e0300 	bcc	3816cc <mailbuffer+0x36a60c>
     ac8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     acc:	000b3813 	andeq	r3, fp, r3, lsl r8
     ad0:	01010b00 	tsteq	r1, r0, lsl #22
     ad4:	13011349 	movwne	r1, #4937	; 0x1349
     ad8:	210c0000 	mrscs	r0, (UNDEF: 12)
     adc:	2f134900 	svccs	0x00134900
     ae0:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
     ae4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     ae8:	0b3b0b3a 	bleq	ec37d8 <mailbuffer+0xeac718>
     aec:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     af0:	350e0000 	strcc	r0, [lr, #-0]
     af4:	00134900 	andseq	r4, r3, r0, lsl #18
     af8:	012e0f00 			; <UNDEFINED> instruction: 0x012e0f00
     afc:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     b00:	0b3b0b3a 	bleq	ec37f0 <mailbuffer+0xeac730>
     b04:	01111927 	tsteq	r1, r7, lsr #18
     b08:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     b0c:	01194297 			; <UNDEFINED> instruction: 0x01194297
     b10:	10000013 	andne	r0, r0, r3, lsl r0
     b14:	08030005 	stmdaeq	r3, {r0, r2}
     b18:	0b3b0b3a 	bleq	ec3808 <mailbuffer+0xeac748>
     b1c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     b20:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
     b24:	03193f01 	tsteq	r9, #1, 30
     b28:	3b0b3a0e 	blcc	2cf368 <mailbuffer+0x2b82a8>
     b2c:	1119270b 	tstne	r9, fp, lsl #14
     b30:	40061201 	andmi	r1, r6, r1, lsl #4
     b34:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     b38:	00001301 	andeq	r1, r0, r1, lsl #6
     b3c:	03000512 	movweq	r0, #1298	; 0x512
     b40:	3b0b3a0e 	blcc	2cf380 <mailbuffer+0x2b82c0>
     b44:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     b48:	13000018 	movwne	r0, #24
     b4c:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     b50:	0b3a0e03 	bleq	e84364 <mailbuffer+0xe6d2a4>
     b54:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     b58:	06120111 			; <UNDEFINED> instruction: 0x06120111
     b5c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     b60:	14000019 	strne	r0, [r0], #-25	; 0xffffffe7
     b64:	0e03012e 	adfeqsp	f0, f3, #0.5
     b68:	0b3b0b3a 	bleq	ec3858 <mailbuffer+0xeac798>
     b6c:	01111927 	tsteq	r1, r7, lsr #18
     b70:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     b74:	00194296 	mulseq	r9, r6, r2
     b78:	010b1500 	tsteq	fp, r0, lsl #10
     b7c:	06120111 			; <UNDEFINED> instruction: 0x06120111
     b80:	34160000 	ldrcc	r0, [r6], #-0
     b84:	3a080300 	bcc	20178c <mailbuffer+0x1ea6cc>
     b88:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     b8c:	00180213 	andseq	r0, r8, r3, lsl r2
     b90:	11010000 	mrsne	r0, (UNDEF: 1)
     b94:	130e2501 	movwne	r2, #58625	; 0xe501
     b98:	110e030b 	tstne	lr, fp, lsl #6
     b9c:	10061201 	andne	r1, r6, r1, lsl #4
     ba0:	02000017 	andeq	r0, r0, #23
     ba4:	0b0b0024 	bleq	2c0c3c <mailbuffer+0x2a9b7c>
     ba8:	0e030b3e 	vmoveq.16	d3[0], r0
     bac:	24030000 	strcs	r0, [r3], #-0
     bb0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     bb4:	0008030b 	andeq	r0, r8, fp, lsl #6
     bb8:	00160400 	andseq	r0, r6, r0, lsl #8
     bbc:	0b3a0e03 	bleq	e843d0 <mailbuffer+0xe6d310>
     bc0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     bc4:	16050000 	strne	r0, [r5], -r0
     bc8:	3a0e0300 	bcc	3817d0 <mailbuffer+0x36a710>
     bcc:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     bd0:	06000013 			; <UNDEFINED> instruction: 0x06000013
     bd4:	0b0b0117 	bleq	2c1038 <mailbuffer+0x2a9f78>
     bd8:	0b3b0b3a 	bleq	ec38c8 <mailbuffer+0xeac808>
     bdc:	00001301 	andeq	r1, r0, r1, lsl #6
     be0:	03000d07 	movweq	r0, #3335	; 0xd07
     be4:	3b0b3a0e 	blcc	2cf424 <mailbuffer+0x2b8364>
     be8:	0013490b 	andseq	r4, r3, fp, lsl #18
     bec:	01010800 	tsteq	r1, r0, lsl #16
     bf0:	13011349 	movwne	r1, #4937	; 0x1349
     bf4:	21090000 	mrscs	r0, (UNDEF: 9)
     bf8:	2f134900 	svccs	0x00134900
     bfc:	0a00000b 	beq	c30 <_start-0x73d0>
     c00:	0b0b0113 	bleq	2c1054 <mailbuffer+0x2a9f94>
     c04:	0b3b0b3a 	bleq	ec38f4 <mailbuffer+0xeac834>
     c08:	00001301 	andeq	r1, r0, r1, lsl #6
     c0c:	03000d0b 	movweq	r0, #3339	; 0xd0b
     c10:	3b0b3a0e 	blcc	2cf450 <mailbuffer+0x2b8390>
     c14:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     c18:	0c00000b 	stceq	0, cr0, [r0], {11}
     c1c:	0b0b000f 	bleq	2c0c60 <mailbuffer+0x2a9ba0>
     c20:	0f0d0000 	svceq	0x000d0000
     c24:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     c28:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
     c2c:	13490026 	movtne	r0, #36902	; 0x9026
     c30:	130f0000 	movwne	r0, #61440	; 0xf000
     c34:	0b0e0301 	bleq	381840 <mailbuffer+0x36a780>
     c38:	3b0b3a0b 	blcc	2cf46c <mailbuffer+0x2b83ac>
     c3c:	0013010b 	andseq	r0, r3, fp, lsl #2
     c40:	000d1000 	andeq	r1, sp, r0
     c44:	0b3a0803 	bleq	e82c58 <mailbuffer+0xe6bb98>
     c48:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     c4c:	00000b38 	andeq	r0, r0, r8, lsr fp
     c50:	03011311 	movweq	r1, #4881	; 0x1311
     c54:	3a050b0e 	bcc	143894 <mailbuffer+0x12c7d4>
     c58:	010b3b0b 	tsteq	fp, fp, lsl #22
     c5c:	12000013 	andne	r0, r0, #19
     c60:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     c64:	0b3b0b3a 	bleq	ec3954 <mailbuffer+0xeac894>
     c68:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
     c6c:	15130000 	ldrne	r0, [r3, #-0]
     c70:	00192700 	andseq	r2, r9, r0, lsl #14
     c74:	01151400 	tsteq	r5, r0, lsl #8
     c78:	13491927 	movtne	r1, #39207	; 0x9927
     c7c:	00001301 	andeq	r1, r0, r1, lsl #6
     c80:	49000515 	stmdbmi	r0, {r0, r2, r4, r8, sl}
     c84:	16000013 			; <UNDEFINED> instruction: 0x16000013
     c88:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     c8c:	0b3a050b 	bleq	e820c0 <mailbuffer+0xe6b000>
     c90:	1301053b 	movwne	r0, #5435	; 0x153b
     c94:	0d170000 	ldceq	0, cr0, [r7, #-0]
     c98:	3a0e0300 	bcc	3818a0 <mailbuffer+0x36a7e0>
     c9c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     ca0:	000b3813 	andeq	r3, fp, r3, lsl r8
     ca4:	000d1800 	andeq	r1, sp, r0, lsl #16
     ca8:	0b3a0e03 	bleq	e844bc <mailbuffer+0xe6d3fc>
     cac:	1349053b 	movtne	r0, #38203	; 0x953b
     cb0:	00000538 	andeq	r0, r0, r8, lsr r5
     cb4:	03011319 	movweq	r1, #4889	; 0x1319
     cb8:	3a0b0b0e 	bcc	2c38f8 <mailbuffer+0x2ac838>
     cbc:	01053b0b 	tsteq	r5, fp, lsl #22
     cc0:	1a000013 	bne	d14 <_start-0x72ec>
     cc4:	0b0b0113 	bleq	2c1118 <mailbuffer+0x2aa058>
     cc8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     ccc:	00001301 	andeq	r1, r0, r1, lsl #6
     cd0:	0b01171b 	bleq	46944 <mailbuffer+0x2f884>
     cd4:	3b0b3a0b 	blcc	2cf508 <mailbuffer+0x2b8448>
     cd8:	00130105 	andseq	r0, r3, r5, lsl #2
     cdc:	000d1c00 	andeq	r1, sp, r0, lsl #24
     ce0:	0b3a0e03 	bleq	e844f4 <mailbuffer+0xe6d434>
     ce4:	1349053b 	movtne	r0, #38203	; 0x953b
     ce8:	151d0000 	ldrne	r0, [sp, #-0]
     cec:	01192701 	tsteq	r9, r1, lsl #14
     cf0:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
     cf4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     cf8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     cfc:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     d00:	0000193c 	andeq	r1, r0, ip, lsr r9
     d04:	0300341f 	movweq	r3, #1055	; 0x41f
     d08:	3b0b3a0e 	blcc	2cf548 <mailbuffer+0x2b8488>
     d0c:	3f13490b 	svccc	0x0013490b
     d10:	00193c19 	andseq	r3, r9, r9, lsl ip
     d14:	01042000 	mrseq	r2, (UNDEF: 4)
     d18:	0b0b0e03 	bleq	2c452c <mailbuffer+0x2ad46c>
     d1c:	0b3a1349 	bleq	e85a48 <mailbuffer+0xe6e988>
     d20:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     d24:	28210000 	stmdacs	r1!, {}	; <UNPREDICTABLE>
     d28:	1c0e0300 	stcne	3, cr0, [lr], {-0}
     d2c:	2200000b 	andcs	r0, r0, #11
     d30:	13490035 	movtne	r0, #36917	; 0x9035
     d34:	34230000 	strtcc	r0, [r3], #-0
     d38:	3a0e0300 	bcc	381940 <mailbuffer+0x36a880>
     d3c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     d40:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
     d44:	24000018 	strcs	r0, [r0], #-24	; 0xffffffe8
     d48:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     d4c:	0b3a0e03 	bleq	e84560 <mailbuffer+0xe6d4a0>
     d50:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     d54:	06120111 			; <UNDEFINED> instruction: 0x06120111
     d58:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     d5c:	00130119 	andseq	r0, r3, r9, lsl r1
     d60:	00052500 	andeq	r2, r5, r0, lsl #10
     d64:	0b3a0803 	bleq	e82d78 <mailbuffer+0xe6bcb8>
     d68:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     d6c:	00001802 	andeq	r1, r0, r2, lsl #16
     d70:	03012e26 	movweq	r2, #7718	; 0x1e26
     d74:	3b0b3a0e 	blcc	2cf5b4 <mailbuffer+0x2b84f4>
     d78:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     d7c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     d80:	97184006 	ldrls	r4, [r8, -r6]
     d84:	13011942 	movwne	r1, #6466	; 0x1942
     d88:	2e270000 	cdpcs	0, 2, cr0, cr7, cr0, {0}
     d8c:	3a0e0301 	bcc	381998 <mailbuffer+0x36a8d8>
     d90:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     d94:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     d98:	97184006 	ldrls	r4, [r8, -r6]
     d9c:	13011942 	movwne	r1, #6466	; 0x1942
     da0:	05280000 	streq	r0, [r8, #-0]!
     da4:	3a0e0300 	bcc	3819ac <mailbuffer+0x36a8ec>
     da8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     dac:	00180213 	andseq	r0, r8, r3, lsl r2
     db0:	012e2900 			; <UNDEFINED> instruction: 0x012e2900
     db4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     db8:	0b3b0b3a 	bleq	ec3aa8 <mailbuffer+0xeac9e8>
     dbc:	01111927 	tsteq	r1, r7, lsr #18
     dc0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     dc4:	01194297 			; <UNDEFINED> instruction: 0x01194297
     dc8:	2a000013 	bcs	e1c <_start-0x71e4>
     dcc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     dd0:	0b3b0b3a 	bleq	ec3ac0 <mailbuffer+0xeaca00>
     dd4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     dd8:	2e2b0000 	cdpcs	0, 2, cr0, cr11, cr0, {0}
     ddc:	03193f00 	tsteq	r9, #0, 30
     de0:	3b0b3a0e 	blcc	2cf620 <mailbuffer+0x2b8560>
     de4:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
     de8:	96184006 	ldrls	r4, [r8], -r6
     dec:	00001942 	andeq	r1, r0, r2, asr #18
     df0:	3f012e2c 	svccc	0x00012e2c
     df4:	3a0e0319 	bcc	381a60 <mailbuffer+0x36a9a0>
     df8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     dfc:	11134919 	tstne	r3, r9, lsl r9
     e00:	40061201 	andmi	r1, r6, r1, lsl #4
     e04:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     e08:	00001301 	andeq	r1, r0, r1, lsl #6
     e0c:	3f012e2d 	svccc	0x00012e2d
     e10:	3a0e0319 	bcc	381a7c <mailbuffer+0x36a9bc>
     e14:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     e18:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     e1c:	97184006 	ldrls	r4, [r8, -r6]
     e20:	00001942 	andeq	r1, r0, r2, asr #18
     e24:	0300342e 	movweq	r3, #1070	; 0x42e
     e28:	3b0b3a08 	blcc	2cf650 <mailbuffer+0x2b8590>
     e2c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     e30:	00000018 	andeq	r0, r0, r8, lsl r0
     e34:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
     e38:	030b130e 	movweq	r1, #45838	; 0xb30e
     e3c:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
     e40:	00171006 	andseq	r1, r7, r6
     e44:	00240200 	eoreq	r0, r4, r0, lsl #4
     e48:	0b3e0b0b 	bleq	f83a7c <mailbuffer+0xf6c9bc>
     e4c:	00000e03 	andeq	r0, r0, r3, lsl #28
     e50:	0b002403 	bleq	9e64 <__module_entries_end+0x1dc0>
     e54:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     e58:	04000008 	streq	r0, [r0], #-8
     e5c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     e60:	0b3b0b3a 	bleq	ec3b50 <mailbuffer+0xeaca90>
     e64:	00001349 	andeq	r1, r0, r9, asr #6
     e68:	03001605 	movweq	r1, #1541	; 0x605
     e6c:	3b0b3a0e 	blcc	2cf6ac <mailbuffer+0x2b85ec>
     e70:	00134905 	andseq	r4, r3, r5, lsl #18
     e74:	01170600 	tsteq	r7, r0, lsl #12
     e78:	0b3a0b0b 	bleq	e83aac <mailbuffer+0xe6c9ec>
     e7c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     e80:	0d070000 	stceq	0, cr0, [r7, #-0]
     e84:	3a0e0300 	bcc	381a8c <mailbuffer+0x36a9cc>
     e88:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     e8c:	08000013 	stmdaeq	r0, {r0, r1, r4}
     e90:	13490101 	movtne	r0, #37121	; 0x9101
     e94:	00001301 	andeq	r1, r0, r1, lsl #6
     e98:	49002109 	stmdbmi	r0, {r0, r3, r8, sp}
     e9c:	000b2f13 	andeq	r2, fp, r3, lsl pc
     ea0:	01130a00 	tsteq	r3, r0, lsl #20
     ea4:	0b3a0b0b 	bleq	e83ad8 <mailbuffer+0xe6ca18>
     ea8:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     eac:	0d0b0000 	stceq	0, cr0, [fp, #-0]
     eb0:	3a0e0300 	bcc	381ab8 <mailbuffer+0x36a9f8>
     eb4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     eb8:	000b3813 	andeq	r3, fp, r3, lsl r8
     ebc:	000f0c00 	andeq	r0, pc, r0, lsl #24
     ec0:	00000b0b 	andeq	r0, r0, fp, lsl #22
     ec4:	0b000f0d 	bleq	4b00 <_start-0x3500>
     ec8:	0013490b 	andseq	r4, r3, fp, lsl #18
     ecc:	00260e00 	eoreq	r0, r6, r0, lsl #28
     ed0:	00001349 	andeq	r1, r0, r9, asr #6
     ed4:	0301130f 	movweq	r1, #4879	; 0x130f
     ed8:	3a0b0b0e 	bcc	2c3b18 <mailbuffer+0x2aca58>
     edc:	010b3b0b 	tsteq	fp, fp, lsl #22
     ee0:	10000013 	andne	r0, r0, r3, lsl r0
     ee4:	0803000d 	stmdaeq	r3, {r0, r2, r3}
     ee8:	0b3b0b3a 	bleq	ec3bd8 <mailbuffer+0xeacb18>
     eec:	0b381349 	bleq	e05c18 <mailbuffer+0xdeeb58>
     ef0:	13110000 	tstne	r1, #0
     ef4:	0b0e0301 	bleq	381b00 <mailbuffer+0x36aa40>
     ef8:	3b0b3a05 	blcc	2cf714 <mailbuffer+0x2b8654>
     efc:	0013010b 	andseq	r0, r3, fp, lsl #2
     f00:	000d1200 	andeq	r1, sp, r0, lsl #4
     f04:	0b3a0e03 	bleq	e84718 <mailbuffer+0xe6d658>
     f08:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     f0c:	00000538 	andeq	r0, r0, r8, lsr r5
     f10:	27001513 	smladcs	r0, r3, r5, r1
     f14:	14000019 	strne	r0, [r0], #-25	; 0xffffffe7
     f18:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
     f1c:	13011349 	movwne	r1, #4937	; 0x1349
     f20:	05150000 	ldreq	r0, [r5, #-0]
     f24:	00134900 	andseq	r4, r3, r0, lsl #18
     f28:	01131600 	tsteq	r3, r0, lsl #12
     f2c:	050b0e03 	streq	r0, [fp, #-3587]	; 0xfffff1fd
     f30:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     f34:	00001301 	andeq	r1, r0, r1, lsl #6
     f38:	03000d17 	movweq	r0, #3351	; 0xd17
     f3c:	3b0b3a0e 	blcc	2cf77c <mailbuffer+0x2b86bc>
     f40:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
     f44:	1800000b 	stmdane	r0, {r0, r1, r3}
     f48:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     f4c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     f50:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
     f54:	13190000 	tstne	r9, #0
     f58:	0b0e0301 	bleq	381b64 <mailbuffer+0x36aaa4>
     f5c:	3b0b3a0b 	blcc	2cf790 <mailbuffer+0x2b86d0>
     f60:	00130105 	andseq	r0, r3, r5, lsl #2
     f64:	01131a00 	tsteq	r3, r0, lsl #20
     f68:	0b3a0b0b 	bleq	e83b9c <mailbuffer+0xe6cadc>
     f6c:	1301053b 	movwne	r0, #5435	; 0x153b
     f70:	171b0000 	ldrne	r0, [fp, -r0]
     f74:	3a0b0b01 	bcc	2c3b80 <mailbuffer+0x2acac0>
     f78:	01053b0b 	tsteq	r5, fp, lsl #22
     f7c:	1c000013 	stcne	0, cr0, [r0], {19}
     f80:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     f84:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     f88:	00001349 	andeq	r1, r0, r9, asr #6
     f8c:	2701151d 	smladcs	r1, sp, r5, r1
     f90:	00130119 	andseq	r0, r3, r9, lsl r1
     f94:	00341e00 	eorseq	r1, r4, r0, lsl #28
     f98:	0b3a0e03 	bleq	e847ac <mailbuffer+0xe6d6ec>
     f9c:	1349053b 	movtne	r0, #38203	; 0x953b
     fa0:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     fa4:	341f0000 	ldrcc	r0, [pc], #-0	; fac <_start-0x7054>
     fa8:	3a0e0300 	bcc	381bb0 <mailbuffer+0x36aaf0>
     fac:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     fb0:	3c193f13 	ldccc	15, cr3, [r9], {19}
     fb4:	20000019 	andcs	r0, r0, r9, lsl r0
     fb8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     fbc:	0b3a0e03 	bleq	e847d0 <mailbuffer+0xe6d710>
     fc0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     fc4:	01111349 	tsteq	r1, r9, asr #6
     fc8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     fcc:	01194296 			; <UNDEFINED> instruction: 0x01194296
     fd0:	21000013 	tstcs	r0, r3, lsl r0
     fd4:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     fd8:	0b3b0b3a 	bleq	ec3cc8 <mailbuffer+0xeacc08>
     fdc:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     fe0:	34220000 	strtcc	r0, [r2], #-0
     fe4:	3a080300 	bcc	201bec <mailbuffer+0x1eab2c>
     fe8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     fec:	00180213 	andseq	r0, r8, r3, lsl r2
     ff0:	00342300 	eorseq	r2, r4, r0, lsl #6
     ff4:	0b3a0e03 	bleq	e84808 <mailbuffer+0xe6d748>
     ff8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     ffc:	00001802 	andeq	r1, r0, r2, lsl #16
    1000:	3f012e24 	svccc	0x00012e24
    1004:	3a0e0319 	bcc	381c70 <mailbuffer+0x36abb0>
    1008:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    100c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    1010:	96184006 	ldrls	r4, [r8], -r6
    1014:	00001942 	andeq	r1, r0, r2, asr #18
    1018:	01110100 	tsteq	r1, r0, lsl #2
    101c:	0b130e25 	bleq	4c48b8 <mailbuffer+0x4ad7f8>
    1020:	01110e03 	tsteq	r1, r3, lsl #28
    1024:	17100612 			; <UNDEFINED> instruction: 0x17100612
    1028:	34020000 	strcc	r0, [r2], #-0
    102c:	3a0e0300 	bcc	381c34 <mailbuffer+0x36ab74>
    1030:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1034:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
    1038:	03000018 	movweq	r0, #24
    103c:	0b0b0024 	bleq	2c10d4 <mailbuffer+0x2aa014>
    1040:	0e030b3e 	vmoveq.16	d3[0], r0
    1044:	26040000 	strcs	r0, [r4], -r0
    1048:	00134900 	andseq	r4, r3, r0, lsl #18
    104c:	01010500 	tsteq	r1, r0, lsl #10
    1050:	13011349 	movwne	r1, #4937	; 0x1349
    1054:	21060000 	mrscs	r0, (UNDEF: 6)
    1058:	2f134900 	svccs	0x00134900
    105c:	0700000b 	streq	r0, [r0, -fp]
    1060:	0b0b0024 	bleq	2c10f8 <mailbuffer+0x2aa038>
    1064:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    1068:	35080000 	strcc	r0, [r8, #-0]
    106c:	00134900 	andseq	r4, r3, r0, lsl #18
    1070:	000f0900 	andeq	r0, pc, r0, lsl #18
    1074:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    1078:	2e0a0000 	cdpcs	0, 0, cr0, cr10, cr0, {0}
    107c:	03193f01 	tsteq	r9, #1, 30
    1080:	3b0b3a0e 	blcc	2cf8c0 <mailbuffer+0x2b8800>
    1084:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
    1088:	96184006 	ldrls	r4, [r8], -r6
    108c:	13011942 	movwne	r1, #6466	; 0x1942
    1090:	0b0b0000 	bleq	2c1098 <mailbuffer+0x2a9fd8>
    1094:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
    1098:	0c000006 	stceq	0, cr0, [r0], {6}
    109c:	08030034 	stmdaeq	r3, {r2, r4, r5}
    10a0:	0b3b0b3a 	bleq	ec3d90 <mailbuffer+0xeaccd0>
    10a4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    10a8:	2e0d0000 	cdpcs	0, 0, cr0, cr13, cr0, {0}
    10ac:	03193f01 	tsteq	r9, #1, 30
    10b0:	3b0b3a0e 	blcc	2cf8f0 <mailbuffer+0x2b8830>
    10b4:	1119270b 	tstne	r9, fp, lsl #14
    10b8:	40061201 	andmi	r1, r6, r1, lsl #4
    10bc:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
    10c0:	00001301 	andeq	r1, r0, r1, lsl #6
    10c4:	0300050e 	movweq	r0, #1294	; 0x50e
    10c8:	3b0b3a0e 	blcc	2cf908 <mailbuffer+0x2b8848>
    10cc:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    10d0:	0f000018 	svceq	0x00000018
    10d4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    10d8:	0b3b0b3a 	bleq	ec3dc8 <mailbuffer+0xeacd08>
    10dc:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    10e0:	05100000 	ldreq	r0, [r0, #-0]
    10e4:	3a080300 	bcc	201cec <mailbuffer+0x1eac2c>
    10e8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    10ec:	00180213 	andseq	r0, r8, r3, lsl r2
    10f0:	012e1100 			; <UNDEFINED> instruction: 0x012e1100
    10f4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    10f8:	0b3b0b3a 	bleq	ec3de8 <mailbuffer+0xeacd28>
    10fc:	01111927 	tsteq	r1, r7, lsr #18
    1100:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1104:	01194297 			; <UNDEFINED> instruction: 0x01194297
    1108:	12000013 	andne	r0, r0, #19
    110c:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    1110:	0b3a0e03 	bleq	e84924 <mailbuffer+0xe6d864>
    1114:	01110b3b 	tsteq	r1, fp, lsr fp
    1118:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    111c:	00194296 	mulseq	r9, r6, r2
    1120:	002e1300 	eoreq	r1, lr, r0, lsl #6
    1124:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    1128:	0b3b0b3a 	bleq	ec3e18 <mailbuffer+0xeacd58>
    112c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1130:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    1134:	00000019 	andeq	r0, r0, r9, lsl r0
    1138:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    113c:	030b130e 	movweq	r1, #45838	; 0xb30e
    1140:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
    1144:	00171006 	andseq	r1, r7, r6
    1148:	00240200 	eoreq	r0, r4, r0, lsl #4
    114c:	0b3e0b0b 	bleq	f83d80 <mailbuffer+0xf6ccc0>
    1150:	00000803 	andeq	r0, r0, r3, lsl #16
    1154:	03001603 	movweq	r1, #1539	; 0x603
    1158:	3b0b3a0e 	blcc	2cf998 <mailbuffer+0x2b88d8>
    115c:	0013490b 	andseq	r4, r3, fp, lsl #18
    1160:	00240400 	eoreq	r0, r4, r0, lsl #8
    1164:	0b3e0b0b 	bleq	f83d98 <mailbuffer+0xf6ccd8>
    1168:	00000e03 	andeq	r0, r0, r3, lsl #28
    116c:	0b000f05 	bleq	4d88 <_start-0x3278>
    1170:	0600000b 	streq	r0, [r0], -fp
    1174:	13490026 	movtne	r0, #36902	; 0x9026
    1178:	16070000 	strne	r0, [r7], -r0
    117c:	3a0e0300 	bcc	381d84 <mailbuffer+0x36acc4>
    1180:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1184:	08000013 	stmdaeq	r0, {r0, r1, r4}
    1188:	0b0b0117 	bleq	2c15ec <mailbuffer+0x2aa52c>
    118c:	0b3b0b3a 	bleq	ec3e7c <mailbuffer+0xeacdbc>
    1190:	00001301 	andeq	r1, r0, r1, lsl #6
    1194:	03000d09 	movweq	r0, #3337	; 0xd09
    1198:	3b0b3a0e 	blcc	2cf9d8 <mailbuffer+0x2b8918>
    119c:	0013490b 	andseq	r4, r3, fp, lsl #18
    11a0:	01010a00 	tsteq	r1, r0, lsl #20
    11a4:	13011349 	movwne	r1, #4937	; 0x1349
    11a8:	210b0000 	mrscs	r0, (UNDEF: 11)
    11ac:	2f134900 	svccs	0x00134900
    11b0:	0c00000b 	stceq	0, cr0, [r0], {11}
    11b4:	0b0b0113 	bleq	2c1608 <mailbuffer+0x2aa548>
    11b8:	0b3b0b3a 	bleq	ec3ea8 <mailbuffer+0xeacde8>
    11bc:	00001301 	andeq	r1, r0, r1, lsl #6
    11c0:	03000d0d 	movweq	r0, #3341	; 0xd0d
    11c4:	3b0b3a0e 	blcc	2cfa04 <mailbuffer+0x2b8944>
    11c8:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    11cc:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
    11d0:	0b0b000f 	bleq	2c1214 <mailbuffer+0x2aa154>
    11d4:	00001349 	andeq	r1, r0, r9, asr #6
    11d8:	0301130f 	movweq	r1, #4879	; 0x130f
    11dc:	3a0b0b0e 	bcc	2c3e1c <mailbuffer+0x2acd5c>
    11e0:	010b3b0b 	tsteq	fp, fp, lsl #22
    11e4:	10000013 	andne	r0, r0, r3, lsl r0
    11e8:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    11ec:	0b3b0b3a 	bleq	ec3edc <mailbuffer+0xeace1c>
    11f0:	0b381349 	bleq	e05f1c <mailbuffer+0xdeee5c>
    11f4:	13110000 	tstne	r1, #0
    11f8:	0b0e0301 	bleq	381e04 <mailbuffer+0x36ad44>
    11fc:	3b0b3a05 	blcc	2cfa18 <mailbuffer+0x2b8958>
    1200:	0013010b 	andseq	r0, r3, fp, lsl #2
    1204:	000d1200 	andeq	r1, sp, r0, lsl #4
    1208:	0b3a0e03 	bleq	e84a1c <mailbuffer+0xe6d95c>
    120c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1210:	00000538 	andeq	r0, r0, r8, lsr r5
    1214:	27001513 	smladcs	r0, r3, r5, r1
    1218:	14000019 	strne	r0, [r0], #-25	; 0xffffffe7
    121c:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
    1220:	13011349 	movwne	r1, #4937	; 0x1349
    1224:	05150000 	ldreq	r0, [r5, #-0]
    1228:	00134900 	andseq	r4, r3, r0, lsl #18
    122c:	01131600 	tsteq	r3, r0, lsl #12
    1230:	050b0e03 	streq	r0, [fp, #-3587]	; 0xfffff1fd
    1234:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1238:	00001301 	andeq	r1, r0, r1, lsl #6
    123c:	03000d17 	movweq	r0, #3351	; 0xd17
    1240:	3b0b3a0e 	blcc	2cfa80 <mailbuffer+0x2b89c0>
    1244:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    1248:	1800000b 	stmdane	r0, {r0, r1, r3}
    124c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1250:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1254:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
    1258:	13190000 	tstne	r9, #0
    125c:	0b0e0301 	bleq	381e68 <mailbuffer+0x36ada8>
    1260:	3b0b3a0b 	blcc	2cfa94 <mailbuffer+0x2b89d4>
    1264:	00130105 	andseq	r0, r3, r5, lsl #2
    1268:	01131a00 	tsteq	r3, r0, lsl #20
    126c:	0b3a0b0b 	bleq	e83ea0 <mailbuffer+0xe6cde0>
    1270:	1301053b 	movwne	r0, #5435	; 0x153b
    1274:	171b0000 	ldrne	r0, [fp, -r0]
    1278:	3a0b0b01 	bcc	2c3e84 <mailbuffer+0x2acdc4>
    127c:	01053b0b 	tsteq	r5, fp, lsl #22
    1280:	1c000013 	stcne	0, cr0, [r0], {19}
    1284:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1288:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    128c:	00001349 	andeq	r1, r0, r9, asr #6
    1290:	2701151d 	smladcs	r1, sp, r5, r1
    1294:	00130119 	andseq	r0, r3, r9, lsl r1
    1298:	00341e00 	eorseq	r1, r4, r0, lsl #28
    129c:	0b3a0e03 	bleq	e84ab0 <mailbuffer+0xe6d9f0>
    12a0:	1349053b 	movtne	r0, #38203	; 0x953b
    12a4:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    12a8:	261f0000 	ldrcs	r0, [pc], -r0
    12ac:	20000000 	andcs	r0, r0, r0
    12b0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    12b4:	0b3b0b3a 	bleq	ec3fa4 <mailbuffer+0xeacee4>
    12b8:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    12bc:	0000193c 	andeq	r1, r0, ip, lsr r9
    12c0:	03003421 	movweq	r3, #1057	; 0x421
    12c4:	3b0b3a0e 	blcc	2cfb04 <mailbuffer+0x2b8a44>
    12c8:	3f13490b 	svccc	0x0013490b
    12cc:	00180219 	andseq	r0, r8, r9, lsl r2
    12d0:	002e2200 	eoreq	r2, lr, r0, lsl #4
    12d4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    12d8:	0b3b0b3a 	bleq	ec3fc8 <mailbuffer+0xeacf08>
    12dc:	13491927 	movtne	r1, #39207	; 0x9927
    12e0:	06120111 			; <UNDEFINED> instruction: 0x06120111
    12e4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    12e8:	23000019 	movwcs	r0, #25
    12ec:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    12f0:	0b3a0e03 	bleq	e84b04 <mailbuffer+0xe6da44>
    12f4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    12f8:	01111349 	tsteq	r1, r9, asr #6
    12fc:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1300:	01194297 			; <UNDEFINED> instruction: 0x01194297
    1304:	24000013 	strcs	r0, [r0], #-19	; 0xffffffed
    1308:	08030005 	stmdaeq	r3, {r0, r2}
    130c:	0b3b0b3a 	bleq	ec3ffc <mailbuffer+0xeacf3c>
    1310:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    1314:	34250000 	strtcc	r0, [r5], #-0
    1318:	3a080300 	bcc	201f20 <mailbuffer+0x1eae60>
    131c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1320:	00180213 	andseq	r0, r8, r3, lsl r2
    1324:	00052600 	andeq	r2, r5, r0, lsl #12
    1328:	0b3a0e03 	bleq	e84b3c <mailbuffer+0xe6da7c>
    132c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1330:	00001802 	andeq	r1, r0, r2, lsl #16
    1334:	3f012e27 	svccc	0x00012e27
    1338:	3a0e0319 	bcc	381fa4 <mailbuffer+0x36aee4>
    133c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1340:	11134919 	tstne	r3, r9, lsl r9
    1344:	40061201 	andmi	r1, r6, r1, lsl #4
    1348:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
    134c:	00001301 	andeq	r1, r0, r1, lsl #6
    1350:	49002128 	stmdbmi	r0, {r3, r5, r8, sp}
    1354:	00182f13 	andseq	r2, r8, r3, lsl pc
    1358:	012e2900 			; <UNDEFINED> instruction: 0x012e2900
    135c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    1360:	0b3b0b3a 	bleq	ec4050 <mailbuffer+0xeacf90>
    1364:	13491927 	movtne	r1, #39207	; 0x9927
    1368:	06120111 			; <UNDEFINED> instruction: 0x06120111
    136c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    1370:	00000019 	andeq	r0, r0, r9, lsl r0
    1374:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    1378:	030b130e 	movweq	r1, #45838	; 0xb30e
    137c:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
    1380:	00171006 	andseq	r1, r7, r6
    1384:	00160200 	andseq	r0, r6, r0, lsl #4
    1388:	0b3a0e03 	bleq	e84b9c <mailbuffer+0xe6dadc>
    138c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1390:	26030000 	strcs	r0, [r3], -r0
    1394:	00134900 	andseq	r4, r3, r0, lsl #18
    1398:	00240400 	eoreq	r0, r4, r0, lsl #8
    139c:	0b3e0b0b 	bleq	f83fd0 <mailbuffer+0xf6cf10>
    13a0:	00000e03 	andeq	r0, r0, r3, lsl #28
    13a4:	0b002405 	bleq	a3c0 <__module_entries_end+0x231c>
    13a8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    13ac:	06000008 	streq	r0, [r0], -r8
    13b0:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    13b4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    13b8:	00001349 	andeq	r1, r0, r9, asr #6
    13bc:	0b011707 	bleq	46fe0 <mailbuffer+0x2ff20>
    13c0:	3b0b3a0b 	blcc	2cfbf4 <mailbuffer+0x2b8b34>
    13c4:	0013010b 	andseq	r0, r3, fp, lsl #2
    13c8:	000d0800 	andeq	r0, sp, r0, lsl #16
    13cc:	0b3a0e03 	bleq	e84be0 <mailbuffer+0xe6db20>
    13d0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    13d4:	01090000 	mrseq	r0, (UNDEF: 9)
    13d8:	01134901 	tsteq	r3, r1, lsl #18
    13dc:	0a000013 	beq	1430 <_start-0x6bd0>
    13e0:	13490021 	movtne	r0, #36897	; 0x9021
    13e4:	00000b2f 	andeq	r0, r0, pc, lsr #22
    13e8:	0b01130b 	bleq	4601c <mailbuffer+0x2ef5c>
    13ec:	3b0b3a0b 	blcc	2cfc20 <mailbuffer+0x2b8b60>
    13f0:	0013010b 	andseq	r0, r3, fp, lsl #2
    13f4:	000d0c00 	andeq	r0, sp, r0, lsl #24
    13f8:	0b3a0e03 	bleq	e84c0c <mailbuffer+0xe6db4c>
    13fc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1400:	00000b38 	andeq	r0, r0, r8, lsr fp
    1404:	0b000f0d 	bleq	5040 <_start-0x2fc0>
    1408:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
    140c:	0b0b000f 	bleq	2c1450 <mailbuffer+0x2aa390>
    1410:	00001349 	andeq	r1, r0, r9, asr #6
    1414:	0301130f 	movweq	r1, #4879	; 0x130f
    1418:	3a0b0b0e 	bcc	2c4058 <mailbuffer+0x2acf98>
    141c:	010b3b0b 	tsteq	fp, fp, lsl #22
    1420:	10000013 	andne	r0, r0, r3, lsl r0
    1424:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    1428:	0b3b0b3a 	bleq	ec4118 <mailbuffer+0xead058>
    142c:	0b381349 	bleq	e06158 <mailbuffer+0xdef098>
    1430:	13110000 	tstne	r1, #0
    1434:	0b0e0301 	bleq	382040 <mailbuffer+0x36af80>
    1438:	3b0b3a05 	blcc	2cfc54 <mailbuffer+0x2b8b94>
    143c:	0013010b 	andseq	r0, r3, fp, lsl #2
    1440:	000d1200 	andeq	r1, sp, r0, lsl #4
    1444:	0b3a0e03 	bleq	e84c58 <mailbuffer+0xe6db98>
    1448:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    144c:	00000538 	andeq	r0, r0, r8, lsr r5
    1450:	27001513 	smladcs	r0, r3, r5, r1
    1454:	14000019 	strne	r0, [r0], #-25	; 0xffffffe7
    1458:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
    145c:	13011349 	movwne	r1, #4937	; 0x1349
    1460:	05150000 	ldreq	r0, [r5, #-0]
    1464:	00134900 	andseq	r4, r3, r0, lsl #18
    1468:	01131600 	tsteq	r3, r0, lsl #12
    146c:	050b0e03 	streq	r0, [fp, #-3587]	; 0xfffff1fd
    1470:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1474:	00001301 	andeq	r1, r0, r1, lsl #6
    1478:	03000d17 	movweq	r0, #3351	; 0xd17
    147c:	3b0b3a0e 	blcc	2cfcbc <mailbuffer+0x2b8bfc>
    1480:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    1484:	1800000b 	stmdane	r0, {r0, r1, r3}
    1488:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    148c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1490:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
    1494:	13190000 	tstne	r9, #0
    1498:	0b0e0301 	bleq	3820a4 <mailbuffer+0x36afe4>
    149c:	3b0b3a0b 	blcc	2cfcd0 <mailbuffer+0x2b8c10>
    14a0:	00130105 	andseq	r0, r3, r5, lsl #2
    14a4:	01131a00 	tsteq	r3, r0, lsl #20
    14a8:	0b3a0b0b 	bleq	e840dc <mailbuffer+0xe6d01c>
    14ac:	1301053b 	movwne	r0, #5435	; 0x153b
    14b0:	171b0000 	ldrne	r0, [fp, -r0]
    14b4:	3a0b0b01 	bcc	2c40c0 <mailbuffer+0x2ad000>
    14b8:	01053b0b 	tsteq	r5, fp, lsl #22
    14bc:	1c000013 	stcne	0, cr0, [r0], {19}
    14c0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    14c4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    14c8:	00001349 	andeq	r1, r0, r9, asr #6
    14cc:	2701151d 	smladcs	r1, sp, r5, r1
    14d0:	00130119 	andseq	r0, r3, r9, lsl r1
    14d4:	00341e00 	eorseq	r1, r4, r0, lsl #28
    14d8:	0b3a0e03 	bleq	e84cec <mailbuffer+0xe6dc2c>
    14dc:	1349053b 	movtne	r0, #38203	; 0x953b
    14e0:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    14e4:	341f0000 	ldrcc	r0, [pc], #-0	; 14ec <_start-0x6b14>
    14e8:	3a0e0300 	bcc	3820f0 <mailbuffer+0x36b030>
    14ec:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    14f0:	3c193f13 	ldccc	15, cr3, [r9], {19}
    14f4:	20000019 	andcs	r0, r0, r9, lsl r0
    14f8:	0e030117 	mcreq	1, 0, r0, cr3, cr7, {0}
    14fc:	0b3a050b 	bleq	e82930 <mailbuffer+0xe6b870>
    1500:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    1504:	35210000 	strcc	r0, [r1, #-0]!
    1508:	00134900 	andseq	r4, r3, r0, lsl #18
    150c:	00212200 	eoreq	r2, r1, r0, lsl #4
    1510:	052f1349 	streq	r1, [pc, #-841]!	; 11cf <_start-0x6e31>
    1514:	34230000 	strtcc	r0, [r3], #-0
    1518:	3a0e0300 	bcc	382120 <mailbuffer+0x36b060>
    151c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1520:	00180213 	andseq	r0, r8, r3, lsl r2
    1524:	00342400 	eorseq	r2, r4, r0, lsl #8
    1528:	0b3a0e03 	bleq	e84d3c <mailbuffer+0xe6dc7c>
    152c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1530:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    1534:	2e250000 	cdpcs	0, 2, cr0, cr5, cr0, {0}
    1538:	3a0e0301 	bcc	382144 <mailbuffer+0x36b084>
    153c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    1540:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    1544:	97184006 	ldrls	r4, [r8, -r6]
    1548:	13011942 	movwne	r1, #6466	; 0x1942
    154c:	05260000 	streq	r0, [r6, #-0]!
    1550:	3a0e0300 	bcc	382158 <mailbuffer+0x36b098>
    1554:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1558:	00180213 	andseq	r0, r8, r3, lsl r2
    155c:	00342700 	eorseq	r2, r4, r0, lsl #14
    1560:	0b3a0e03 	bleq	e84d74 <mailbuffer+0xe6dcb4>
    1564:	1349053b 	movtne	r0, #38203	; 0x953b
    1568:	00001802 	andeq	r1, r0, r2, lsl #16
    156c:	03003428 	movweq	r3, #1064	; 0x428
    1570:	3b0b3a08 	blcc	2cfd98 <mailbuffer+0x2b8cd8>
    1574:	02134905 	andseq	r4, r3, #81920	; 0x14000
    1578:	29000018 	stmdbcs	r0, {r3, r4}
    157c:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    1580:	0b3a0e03 	bleq	e84d94 <mailbuffer+0xe6dcd4>
    1584:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    1588:	06120111 			; <UNDEFINED> instruction: 0x06120111
    158c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    1590:	2a000019 	bcs	15fc <_start-0x6a04>
    1594:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    1598:	0b3a0e03 	bleq	e84dac <mailbuffer+0xe6dcec>
    159c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    15a0:	01111349 	tsteq	r1, r9, asr #6
    15a4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    15a8:	00194297 	mulseq	r9, r7, r2
    15ac:	012e2b00 			; <UNDEFINED> instruction: 0x012e2b00
    15b0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    15b4:	0b3b0b3a 	bleq	ec42a4 <mailbuffer+0xead1e4>
    15b8:	01111927 	tsteq	r1, r7, lsr #18
    15bc:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    15c0:	01194296 			; <UNDEFINED> instruction: 0x01194296
    15c4:	2c000013 	stccs	0, cr0, [r0], {19}
    15c8:	08030005 	stmdaeq	r3, {r0, r2}
    15cc:	0b3b0b3a 	bleq	ec42bc <mailbuffer+0xead1fc>
    15d0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    15d4:	342d0000 	strtcc	r0, [sp], #-0
    15d8:	3a080300 	bcc	2021e0 <mailbuffer+0x1eb120>
    15dc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    15e0:	00180213 	andseq	r0, r8, r3, lsl r2
    15e4:	012e2e00 			; <UNDEFINED> instruction: 0x012e2e00
    15e8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    15ec:	0b3b0b3a 	bleq	ec42dc <mailbuffer+0xead21c>
    15f0:	13491927 	movtne	r1, #39207	; 0x9927
    15f4:	06120111 			; <UNDEFINED> instruction: 0x06120111
    15f8:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
    15fc:	2f000019 	svccs	0x00000019
    1600:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    1604:	0b3b0b3a 	bleq	ec42f4 <mailbuffer+0xead234>
    1608:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    160c:	01000000 	mrseq	r0, (UNDEF: 0)
    1610:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    1614:	0e030b13 	vmoveq.32	d3[0], r0
    1618:	06120111 			; <UNDEFINED> instruction: 0x06120111
    161c:	00001710 	andeq	r1, r0, r0, lsl r7
    1620:	0b002402 	bleq	a630 <__module_entries_end+0x258c>
    1624:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1628:	03000008 	movweq	r0, #8
    162c:	0b0b0024 	bleq	2c16c4 <mailbuffer+0x2aa604>
    1630:	0e030b3e 	vmoveq.16	d3[0], r0
    1634:	0f040000 	svceq	0x00040000
    1638:	000b0b00 	andeq	r0, fp, r0, lsl #22
    163c:	00160500 	andseq	r0, r6, r0, lsl #10
    1640:	0b3a0e03 	bleq	e84e54 <mailbuffer+0xe6dd94>
    1644:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1648:	16060000 	strne	r0, [r6], -r0
    164c:	3a0e0300 	bcc	382254 <mailbuffer+0x36b194>
    1650:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1654:	07000013 	smladeq	r0, r3, r0, r0
    1658:	0b0b0117 	bleq	2c1abc <mailbuffer+0x2aa9fc>
    165c:	0b3b0b3a 	bleq	ec434c <mailbuffer+0xead28c>
    1660:	00001301 	andeq	r1, r0, r1, lsl #6
    1664:	03000d08 	movweq	r0, #3336	; 0xd08
    1668:	3b0b3a0e 	blcc	2cfea8 <mailbuffer+0x2b8de8>
    166c:	0013490b 	andseq	r4, r3, fp, lsl #18
    1670:	01010900 	tsteq	r1, r0, lsl #18
    1674:	13011349 	movwne	r1, #4937	; 0x1349
    1678:	210a0000 	mrscs	r0, (UNDEF: 10)
    167c:	2f134900 	svccs	0x00134900
    1680:	0b00000b 	bleq	16b4 <_start-0x694c>
    1684:	0b0b0113 	bleq	2c1ad8 <mailbuffer+0x2aaa18>
    1688:	0b3b0b3a 	bleq	ec4378 <mailbuffer+0xead2b8>
    168c:	00001301 	andeq	r1, r0, r1, lsl #6
    1690:	03000d0c 	movweq	r0, #3340	; 0xd0c
    1694:	3b0b3a0e 	blcc	2cfed4 <mailbuffer+0x2b8e14>
    1698:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    169c:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
    16a0:	0b0b000f 	bleq	2c16e4 <mailbuffer+0x2aa624>
    16a4:	00001349 	andeq	r1, r0, r9, asr #6
    16a8:	4900260e 	stmdbmi	r0, {r1, r2, r3, r9, sl, sp}
    16ac:	0f000013 	svceq	0x00000013
    16b0:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    16b4:	0b3a0b0b 	bleq	e842e8 <mailbuffer+0xe6d228>
    16b8:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    16bc:	0d100000 	ldceq	0, cr0, [r0, #-0]
    16c0:	3a080300 	bcc	2022c8 <mailbuffer+0x1eb208>
    16c4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    16c8:	000b3813 	andeq	r3, fp, r3, lsl r8
    16cc:	01131100 	tsteq	r3, r0, lsl #2
    16d0:	050b0e03 	streq	r0, [fp, #-3587]	; 0xfffff1fd
    16d4:	0b3b0b3a 	bleq	ec43c4 <mailbuffer+0xead304>
    16d8:	00001301 	andeq	r1, r0, r1, lsl #6
    16dc:	03000d12 	movweq	r0, #3346	; 0xd12
    16e0:	3b0b3a0e 	blcc	2cff20 <mailbuffer+0x2b8e60>
    16e4:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    16e8:	13000005 	movwne	r0, #5
    16ec:	19270015 	stmdbne	r7!, {r0, r2, r4}
    16f0:	15140000 	ldrne	r0, [r4, #-0]
    16f4:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
    16f8:	00130113 	andseq	r0, r3, r3, lsl r1
    16fc:	00051500 	andeq	r1, r5, r0, lsl #10
    1700:	00001349 	andeq	r1, r0, r9, asr #6
    1704:	03011316 	movweq	r1, #4886	; 0x1316
    1708:	3a050b0e 	bcc	144348 <mailbuffer+0x12d288>
    170c:	01053b0b 	tsteq	r5, fp, lsl #22
    1710:	17000013 	smladne	r0, r3, r0, r0
    1714:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1718:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    171c:	0b381349 	bleq	e06448 <mailbuffer+0xdef388>
    1720:	0d180000 	ldceq	0, cr0, [r8, #-0]
    1724:	3a0e0300 	bcc	38232c <mailbuffer+0x36b26c>
    1728:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    172c:	00053813 	andeq	r3, r5, r3, lsl r8
    1730:	01131900 	tsteq	r3, r0, lsl #18
    1734:	0b0b0e03 	bleq	2c4f48 <mailbuffer+0x2ade88>
    1738:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    173c:	00001301 	andeq	r1, r0, r1, lsl #6
    1740:	0b01131a 	bleq	463b0 <mailbuffer+0x2f2f0>
    1744:	3b0b3a0b 	blcc	2cff78 <mailbuffer+0x2b8eb8>
    1748:	00130105 	andseq	r0, r3, r5, lsl #2
    174c:	01171b00 	tsteq	r7, r0, lsl #22
    1750:	0b3a0b0b 	bleq	e84384 <mailbuffer+0xe6d2c4>
    1754:	1301053b 	movwne	r0, #5435	; 0x153b
    1758:	0d1c0000 	ldceq	0, cr0, [ip, #-0]
    175c:	3a0e0300 	bcc	382364 <mailbuffer+0x36b2a4>
    1760:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1764:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
    1768:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
    176c:	00001301 	andeq	r1, r0, r1, lsl #6
    1770:	0300341e 	movweq	r3, #1054	; 0x41e
    1774:	3b0b3a0e 	blcc	2cffb4 <mailbuffer+0x2b8ef4>
    1778:	3f134905 	svccc	0x00134905
    177c:	00193c19 	andseq	r3, r9, r9, lsl ip
    1780:	00341f00 	eorseq	r1, r4, r0, lsl #30
    1784:	0b3a0e03 	bleq	e84f98 <mailbuffer+0xe6ded8>
    1788:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    178c:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    1790:	34200000 	strtcc	r0, [r0], #-0
    1794:	3a0e0300 	bcc	38239c <mailbuffer+0x36b2dc>
    1798:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    179c:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
    17a0:	21000018 	tstcs	r0, r8, lsl r0
    17a4:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    17a8:	0b3a0e03 	bleq	e84fbc <mailbuffer+0xe6defc>
    17ac:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    17b0:	06120111 			; <UNDEFINED> instruction: 0x06120111
    17b4:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
    17b8:	22000019 	andcs	r0, r0, #25
    17bc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    17c0:	0b3a0e03 	bleq	e84fd4 <mailbuffer+0xe6df14>
    17c4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    17c8:	06120111 			; <UNDEFINED> instruction: 0x06120111
    17cc:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
    17d0:	00130119 	andseq	r0, r3, r9, lsl r1
    17d4:	00052300 	andeq	r2, r5, r0, lsl #6
    17d8:	0b3a0e03 	bleq	e84fec <mailbuffer+0xe6df2c>
    17dc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    17e0:	00001802 	andeq	r1, r0, r2, lsl #16
    17e4:	03003424 	movweq	r3, #1060	; 0x424
    17e8:	3b0b3a08 	blcc	2d0010 <mailbuffer+0x2b8f50>
    17ec:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    17f0:	25000018 	strcs	r0, [r0, #-24]	; 0xffffffe8
    17f4:	0e03012e 	adfeqsp	f0, f3, #0.5
    17f8:	0b3b0b3a 	bleq	ec44e8 <mailbuffer+0xead428>
    17fc:	01111927 	tsteq	r1, r7, lsr #18
    1800:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1804:	01194296 			; <UNDEFINED> instruction: 0x01194296
    1808:	26000013 			; <UNDEFINED> instruction: 0x26000013
    180c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1810:	0b3a0e03 	bleq	e85024 <mailbuffer+0xe6df64>
    1814:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    1818:	06120111 			; <UNDEFINED> instruction: 0x06120111
    181c:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
    1820:	00000019 	andeq	r0, r0, r9, lsl r0
    1824:	10001101 	andne	r1, r0, r1, lsl #2
    1828:	12011106 	andne	r1, r1, #-2147483647	; 0x80000001
    182c:	1b080301 	blne	202438 <mailbuffer+0x1eb378>
    1830:	13082508 	movwne	r2, #34056	; 0x8508
    1834:	00000005 	andeq	r0, r0, r5
    1838:	10001101 	andne	r1, r0, r1, lsl #2
    183c:	12011106 	andne	r1, r1, #-2147483647	; 0x80000001
    1840:	1b080301 	blne	20244c <mailbuffer+0x1eb38c>
    1844:	13082508 	movwne	r2, #34056	; 0x8508
    1848:	00000005 	andeq	r0, r0, r5
    184c:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    1850:	030b130e 	movweq	r1, #45838	; 0xb30e
    1854:	110e1b0e 	tstne	lr, lr, lsl #22
    1858:	10061201 	andne	r1, r6, r1, lsl #4
    185c:	02000017 	andeq	r0, r0, #23
    1860:	0b0b0024 	bleq	2c18f8 <mailbuffer+0x2aa838>
    1864:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    1868:	16030000 	strne	r0, [r3], -r0
    186c:	3a0e0300 	bcc	382474 <mailbuffer+0x36b3b4>
    1870:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1874:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    1878:	0b0b0024 	bleq	2c1910 <mailbuffer+0x2aa850>
    187c:	0e030b3e 	vmoveq.16	d3[0], r0
    1880:	0f050000 	svceq	0x00050000
    1884:	000b0b00 	andeq	r0, fp, r0, lsl #22
    1888:	000f0600 	andeq	r0, pc, r0, lsl #12
    188c:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    1890:	26070000 	strcs	r0, [r7], -r0
    1894:	00134900 	andseq	r4, r3, r0, lsl #18
    1898:	012e0800 			; <UNDEFINED> instruction: 0x012e0800
    189c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    18a0:	0b3b0b3a 	bleq	ec4590 <mailbuffer+0xead4d0>
    18a4:	13491927 	movtne	r1, #39207	; 0x9927
    18a8:	06120111 			; <UNDEFINED> instruction: 0x06120111
    18ac:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    18b0:	00130119 	andseq	r0, r3, r9, lsl r1
    18b4:	00050900 	andeq	r0, r5, r0, lsl #18
    18b8:	0b3a0e03 	bleq	e850cc <mailbuffer+0xe6e00c>
    18bc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    18c0:	00001802 	andeq	r1, r0, r2, lsl #16
    18c4:	0300050a 	movweq	r0, #1290	; 0x50a
    18c8:	3b0b3a0e 	blcc	2d0108 <mailbuffer+0x2b9048>
    18cc:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    18d0:	0b000017 	bleq	1934 <_start-0x66cc>
    18d4:	08030034 	stmdaeq	r3, {r2, r4, r5}
    18d8:	0b3b0b3a 	bleq	ec45c8 <mailbuffer+0xead508>
    18dc:	17021349 	strne	r1, [r2, -r9, asr #6]
    18e0:	340c0000 	strcc	r0, [ip], #-0
    18e4:	3a0e0300 	bcc	3824ec <mailbuffer+0x36b42c>
    18e8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    18ec:	00170213 	andseq	r0, r7, r3, lsl r2
    18f0:	00370d00 	eorseq	r0, r7, r0, lsl #26
    18f4:	00001349 	andeq	r1, r0, r9, asr #6
    18f8:	0000260e 	andeq	r2, r0, lr, lsl #12
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000001c 	andeq	r0, r0, ip, lsl r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	00010000 	andeq	r0, r1, r0
  14:	00000344 	andeq	r0, r0, r4, asr #6
	...
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	01ff0002 	mvnseq	r0, r2
  28:	00040000 	andeq	r0, r4, r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	00010344 	andeq	r0, r1, r4, asr #6
  34:	000002a4 	andeq	r0, r0, r4, lsr #5
	...
  40:	0000001c 	andeq	r0, r0, ip, lsl r0
  44:	03860002 	orreq	r0, r6, #2
  48:	00040000 	andeq	r0, r4, r0
  4c:	00000000 	andeq	r0, r0, r0
  50:	000105f0 	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
  54:	00000764 	andeq	r0, r0, r4, ror #14
	...
  60:	0000001c 	andeq	r0, r0, ip, lsl r0
  64:	07fa0002 	ldrbeq	r0, [sl, r2]!
  68:	00040000 	andeq	r0, r4, r0
  6c:	00000000 	andeq	r0, r0, r0
  70:	00010d54 	andeq	r0, r1, r4, asr sp
  74:	0000029c 	muleq	r0, ip, r2
	...
  80:	0000001c 	andeq	r0, r0, ip, lsl r0
  84:	128e0002 	addne	r0, lr, #2
  88:	00040000 	andeq	r0, r4, r0
  8c:	00000000 	andeq	r0, r0, r0
  90:	00010ff0 	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
  94:	00000bb0 			; <UNDEFINED> instruction: 0x00000bb0
	...
  a0:	0000001c 	andeq	r0, r0, ip, lsl r0
  a4:	21bf0002 			; <UNDEFINED> instruction: 0x21bf0002
  a8:	00040000 	andeq	r0, r4, r0
  ac:	00000000 	andeq	r0, r0, r0
  b0:	00011ba0 	andeq	r1, r1, r0, lsr #23
  b4:	00001920 	andeq	r1, r0, r0, lsr #18
	...
  c0:	0000001c 	andeq	r0, r0, ip, lsl r0
  c4:	36f50002 	ldrbtcc	r0, [r5], r2
  c8:	00040000 	andeq	r0, r4, r0
  cc:	00000000 	andeq	r0, r0, r0
  d0:	000134c0 	andeq	r3, r1, r0, asr #9
  d4:	000003a0 	andeq	r0, r0, r0, lsr #7
	...
  e0:	0000001c 	andeq	r0, r0, ip, lsl r0
  e4:	39ac0002 	stmibcc	ip!, {r1}
  e8:	00040000 	andeq	r0, r4, r0
  ec:	00000000 	andeq	r0, r0, r0
  f0:	00013860 	andeq	r3, r1, r0, ror #16
  f4:	00000778 	andeq	r0, r0, r8, ror r7
	...
 100:	0000001c 	andeq	r0, r0, ip, lsl r0
 104:	46cf0002 	strbmi	r0, [pc], r2
 108:	00040000 	andeq	r0, r4, r0
 10c:	00000000 	andeq	r0, r0, r0
 110:	00013fd8 	ldrdeq	r3, [r1], -r8
 114:	000000ec 	andeq	r0, r0, ip, ror #1
	...
 120:	0000001c 	andeq	r0, r0, ip, lsl r0
 124:	4fdb0002 	svcmi	0x00db0002
 128:	00040000 	andeq	r0, r4, r0
 12c:	00000000 	andeq	r0, r0, r0
 130:	000140c4 	andeq	r4, r1, r4, asr #1
 134:	0000098c 	andeq	r0, r0, ip, lsl #19
	...
 140:	0000001c 	andeq	r0, r0, ip, lsl r0
 144:	53ac0002 			; <UNDEFINED> instruction: 0x53ac0002
 148:	00040000 	andeq	r0, r4, r0
 14c:	00000000 	andeq	r0, r0, r0
 150:	00014a50 	andeq	r4, r1, r0, asr sl
 154:	000003d4 	ldrdeq	r0, [r0], -r4
	...
 160:	0000001c 	andeq	r0, r0, ip, lsl r0
 164:	5ea20002 	cdppl	0, 10, cr0, cr2, cr2, {0}
 168:	00040000 	andeq	r0, r4, r0
 16c:	00000000 	andeq	r0, r0, r0
 170:	00014e24 	andeq	r4, r1, r4, lsr #28
 174:	000004ac 	andeq	r0, r0, ip, lsr #9
	...
 180:	0000001c 	andeq	r0, r0, ip, lsl r0
 184:	69740002 	ldmdbvs	r4!, {r1}^
 188:	00040000 	andeq	r0, r4, r0
 18c:	00000000 	andeq	r0, r0, r0
 190:	000152f8 	strdeq	r5, [r1], -r8
 194:	000001b4 			; <UNDEFINED> instruction: 0x000001b4
	...
 1a0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1a4:	72d30002 	sbcsvc	r0, r3, #2
 1a8:	00040000 	andeq	r0, r4, r0
 1ac:	00000000 	andeq	r0, r0, r0
 1b0:	000154ac 	andeq	r5, r1, ip, lsr #9
 1b4:	0000041c 	andeq	r0, r0, ip, lsl r4
	...
 1c0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1c4:	73820002 	orrvc	r0, r2, #2
 1c8:	00040000 	andeq	r0, r4, r0
 1cc:	00000000 	andeq	r0, r0, r0
 1d0:	000158c8 	andeq	r5, r1, r8, asr #17
 1d4:	0000005c 	andeq	r0, r0, ip, asr r0
	...
 1e0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1e4:	74310002 	ldrtvc	r0, [r1], #-2
 1e8:	00040000 	andeq	r0, r4, r0
 1ec:	00000000 	andeq	r0, r0, r0
 1f0:	00015924 	andeq	r5, r1, r4, lsr #18
 1f4:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	00000107 	andeq	r0, r0, r7, lsl #2
       4:	00a90002 	adceq	r0, r9, r2
       8:	01020000 	mrseq	r0, (UNDEF: 2)
       c:	000d0efb 	strdeq	r0, [sp], -fp
      10:	01010101 	tsteq	r1, r1, lsl #2
      14:	01000000 	mrseq	r0, (UNDEF: 0)
      18:	2f010000 	svccs	0x00010000
      1c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
      20:	656c612f 	strbvs	r6, [ip, #-303]!	; 0xfffffed1
      24:	69702f78 	ldmdbvs	r0!, {r3, r4, r5, r6, r8, r9, sl, fp, sp}^
      28:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
      2c:	4f54522d 	svcmi	0x0054522d
      30:	72462f53 	subvc	r2, r6, #332	; 0x14c
      34:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
      38:	532f534f 			; <UNDEFINED> instruction: 0x532f534f
      3c:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
      40:	6f702f65 	svcvs	0x00702f65
      44:	62617472 	rsbvs	r7, r1, #1912602624	; 0x72000000
      48:	472f656c 	strmi	r6, [pc, -ip, ror #10]!
      4c:	522f4343 	eorpl	r4, pc, #201326593	; 0xc000001
      50:	62707361 	rsbsvs	r7, r0, #-2080374783	; 0x84000001
      54:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
      58:	2f006950 	svccs	0x00006950
      5c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
      60:	656c612f 	strbvs	r6, [ip, #-303]!	; 0xfffffed1
      64:	69702f78 	ldmdbvs	r0!, {r3, r4, r5, r6, r8, r9, sl, fp, sp}^
      68:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
      6c:	4f54522d 	svcmi	0x0054522d
      70:	72462f53 	subvc	r2, r6, #332	; 0x14c
      74:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
      78:	532f534f 			; <UNDEFINED> instruction: 0x532f534f
      7c:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
      80:	6e692f65 	cdpvs	15, 6, cr2, cr9, cr5, {3}
      84:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
      88:	70000065 	andvc	r0, r0, r5, rrx
      8c:	2e74726f 	cdpcs	2, 7, cr7, cr4, cr15, {3}
      90:	00010063 	andeq	r0, r1, r3, rrx
      94:	6f727000 	svcvs	0x00727000
      98:	6665646a 	strbtvs	r6, [r5], -sl, ror #8
      9c:	00682e73 	rsbeq	r2, r8, r3, ror lr
      a0:	70000002 	andvc	r0, r0, r2
      a4:	6d74726f 	lfmvs	f7, 2, [r4, #-444]!	; 0xfffffe44
      a8:	6f726361 	svcvs	0x00726361
      ac:	0100682e 	tsteq	r0, lr, lsr #16
      b0:	00000000 	andeq	r0, r0, r0
      b4:	00000205 	andeq	r0, r0, r5, lsl #4
      b8:	f7030001 			; <UNDEFINED> instruction: 0xf7030001
      bc:	4ebd0100 	frdmie	f0, f5, f0
      c0:	6768836e 	strbvs	r8, [r8, -lr, ror #6]!
      c4:	67676767 	strbvs	r6, [r7, -r7, ror #14]!
      c8:	67676767 	strbvs	r6, [r7, -r7, ror #14]!
      cc:	67676767 	strbvs	r6, [r7, -r7, ror #14]!
      d0:	67676767 	strbvs	r6, [r7, -r7, ror #14]!
      d4:	67676767 	strbvs	r6, [r7, -r7, ror #14]!
      d8:	67676767 	strbvs	r6, [r7, -r7, ror #14]!
      dc:	676a6767 	strbvs	r6, [sl, -r7, ror #14]!
      e0:	a185686a 	orrge	r6, r5, sl, ror #16
      e4:	022f686c 	eoreq	r6, pc, #108, 16	; 0x6c0000
      e8:	314d1622 	cmpcc	sp, r2, lsr #12
      ec:	4d4e2f31 	stclmi	15, cr2, [lr, #-196]	; 0xffffff3c
      f0:	9f820a03 	svcls	0x00820a03
      f4:	88673131 	stmdahi	r7!, {r0, r4, r5, r8, ip, sp}^
      f8:	4a0a036b 	bmi	280eac <mailbuffer+0x269dec>
      fc:	67676730 			; <UNDEFINED> instruction: 0x67676730
     100:	84686767 	strbthi	r6, [r8], #-1895	; 0xfffff899
     104:	0e022f4c 	cdpeq	15, 0, cr2, cr2, cr12, {2}
     108:	a4010100 	strge	r0, [r1], #-256	; 0xffffff00
     10c:	02000000 	andeq	r0, r0, #0
     110:	00006000 	andeq	r6, r0, r0
     114:	fb010200 	blx	4091e <mailbuffer+0x2985e>
     118:	01000d0e 	tsteq	r0, lr, lsl #26
     11c:	00010101 	andeq	r0, r1, r1, lsl #2
     120:	00010000 	andeq	r0, r1, r0
     124:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
     128:	2f656d6f 	svccs	0x00656d6f
     12c:	78656c61 	stmdavc	r5!, {r0, r5, r6, sl, fp, sp, lr}^
     130:	2f69702f 	svccs	0x0069702f
     134:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
     138:	534f5452 	movtpl	r5, #62546	; 0xf452
     13c:	6572462f 	ldrbvs	r4, [r2, #-1583]!	; 0xfffff9d1
     140:	4f545265 	svcmi	0x00545265
     144:	6f532f53 	svcvs	0x00532f53
     148:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
     14c:	726f702f 	rsbvc	r7, pc, #47	; 0x2f
     150:	6c626174 	stfvse	f6, [r2], #-464	; 0xfffffe30
     154:	43472f65 	movtmi	r2, #32613	; 0x7f65
     158:	61522f43 	cmpvs	r2, r3, asr #30
     15c:	65627073 	strbvs	r7, [r2, #-115]!	; 0xffffff8d
     160:	50797272 	rsbspl	r7, r9, r2, ror r2
     164:	70000069 	andvc	r0, r0, r9, rrx
     168:	6974726f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
     16c:	632e7273 			; <UNDEFINED> instruction: 0x632e7273
     170:	00000100 	andeq	r0, r0, r0, lsl #2
     174:	02050000 	andeq	r0, r5, #0
     178:	00010344 	andeq	r0, r1, r4, asr #6
     17c:	0100f503 	tsteq	r0, r3, lsl #10	; <UNPREDICTABLE>
     180:	2f2fa052 	svccs	0x002fa052
     184:	13240234 			; <UNDEFINED> instruction: 0x13240234
     188:	d60e036c 	strle	r0, [lr], -ip, ror #6
     18c:	2c023116 	stfcss	f3, [r2], {22}
     190:	24023115 	strcs	r3, [r2], #-277	; 0xfffffeeb
     194:	66160313 			; <UNDEFINED> instruction: 0x66160313
     198:	132c0213 			; <UNDEFINED> instruction: 0x132c0213
     19c:	1324022f 			; <UNDEFINED> instruction: 0x1324022f
     1a0:	4c662a03 			; <UNDEFINED> instruction: 0x4c662a03
     1a4:	9f9e0a03 	svcls	0x009e0a03
     1a8:	a2854ba1 	addge	r4, r5, #164864	; 0x28400
     1ac:	0e02a685 	cfmadd32eq	mvax4, mvfx10, mvfx2, mvfx5
     1b0:	bb010100 	bllt	405b8 <mailbuffer+0x294f8>
     1b4:	02000001 	andeq	r0, r0, #1
     1b8:	0000de00 	andeq	sp, r0, r0, lsl #28
     1bc:	fb010200 	blx	409c6 <mailbuffer+0x29906>
     1c0:	01000d0e 	tsteq	r0, lr, lsl #26
     1c4:	00010101 	andeq	r0, r1, r1, lsl #2
     1c8:	00010000 	andeq	r0, r1, r0
     1cc:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
     1d0:	2f656d6f 	svccs	0x00656d6f
     1d4:	78656c61 	stmdavc	r5!, {r0, r5, r6, sl, fp, sp, lr}^
     1d8:	2f69702f 	svccs	0x0069702f
     1dc:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
     1e0:	534f5452 	movtpl	r5, #62546	; 0xf452
     1e4:	6572462f 	ldrbvs	r4, [r2, #-1583]!	; 0xfffff9d1
     1e8:	4f545265 	svcmi	0x00545265
     1ec:	6f532f53 	svcvs	0x00532f53
     1f0:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
     1f4:	6f682f00 	svcvs	0x00682f00
     1f8:	612f656d 			; <UNDEFINED> instruction: 0x612f656d
     1fc:	2f78656c 	svccs	0x0078656c
     200:	612f6970 			; <UNDEFINED> instruction: 0x612f6970
     204:	522d6d72 	eorpl	r6, sp, #7296	; 0x1c80
     208:	2f534f54 	svccs	0x00534f54
     20c:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
     210:	534f5452 	movtpl	r5, #62546	; 0xf452
     214:	756f532f 	strbvc	r5, [pc, #-815]!	; fffffeed <_estack+0xf7fefeed>
     218:	2f656372 	svccs	0x00656372
     21c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     220:	00656475 	rsbeq	r6, r5, r5, ror r4
     224:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 170 <_start-0x7e90>
     228:	6c612f65 	stclvs	15, cr2, [r1], #-404	; 0xfffffe6c
     22c:	702f7865 	eorvc	r7, pc, r5, ror #16
     230:	72612f69 	rsbvc	r2, r1, #420	; 0x1a4
     234:	54522d6d 	ldrbpl	r2, [r2], #-3437	; 0xfffff293
     238:	462f534f 	strtmi	r5, [pc], -pc, asr #6
     23c:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
     240:	2f534f54 	svccs	0x00534f54
     244:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     248:	702f6563 	eorvc	r6, pc, r3, ror #10
     24c:	6174726f 	cmnvs	r4, pc, ror #4
     250:	2f656c62 	svccs	0x00656c62
     254:	2f434347 	svccs	0x00434347
     258:	70736152 	rsbsvc	r6, r3, r2, asr r1
     25c:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
     260:	00695079 	rsbeq	r5, r9, r9, ror r0
     264:	6f726300 	svcvs	0x00726300
     268:	6e697475 	mcrvs	4, 3, r7, cr9, cr5, {3}
     26c:	00632e65 	rsbeq	r2, r3, r5, ror #28
     270:	6c000001 	stcvs	0, cr0, [r0], {1}
     274:	2e747369 	cdpcs	3, 7, cr7, cr4, cr9, {3}
     278:	00020068 	andeq	r0, r2, r8, rrx
     27c:	726f7000 	rsbvc	r7, pc, #0
     280:	63616d74 	cmnvs	r1, #116, 26	; 0x1d00
     284:	682e6f72 	stmdavs	lr!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}
     288:	00000300 	andeq	r0, r0, r0, lsl #6
     28c:	756f7263 	strbvc	r7, [pc, #-611]!	; 31 <_start-0x7fcf>
     290:	656e6974 	strbvs	r6, [lr, #-2420]!	; 0xfffff68c
     294:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     298:	00000000 	andeq	r0, r0, r0
     29c:	05f00205 	ldrbeq	r0, [r0, #517]!	; 0x205
     2a0:	8a030001 	bhi	c02ac <mailbuffer+0xa91ec>
     2a4:	67bf0101 	ldrvs	r0, [pc, r1, lsl #2]!
     2a8:	3267846a 	rsbcc	r8, r7, #1778384896	; 0x6a000000
     2ac:	67674e68 	strbvs	r4, [r7, -r8, ror #28]!
     2b0:	87836967 	strhi	r6, [r3, r7, ror #18]
     2b4:	00866967 	addeq	r6, r6, r7, ror #18
     2b8:	06010402 	streq	r0, [r1], -r2, lsl #8
     2bc:	040200ba 	streq	r0, [r2], #-186	; 0xffffff46
     2c0:	02008203 	andeq	r8, r0, #805306368	; 0x30000000
     2c4:	08060304 	stmdaeq	r6, {r2, r8, r9}
     2c8:	2f4d6a92 	svccs	0x004d6a92
     2cc:	a1a3a3be 			; <UNDEFINED> instruction: 0xa1a3a3be
     2d0:	2608a284 	strcs	sl, [r8], -r4, lsl #5
     2d4:	dabc6af5 	ble	fef1aeb0 <_estack+0xf6f0aeb0>
     2d8:	83a0336a 	movhi	r3, #-1476395007	; 0xa8000001
     2dc:	0083a084 	addeq	sl, r3, r4, lsl #1
     2e0:	06010402 	streq	r0, [r1], -r2, lsl #8
     2e4:	040200ba 	streq	r0, [r2], #-186	; 0xffffff46
     2e8:	03068203 	movweq	r8, #25091	; 0x6203
     2ec:	03900873 	orrseq	r0, r0, #7536640	; 0x730000
     2f0:	69be820f 	ldmibvs	lr!, {r0, r1, r2, r3, r9, pc}
     2f4:	a19f30d7 	ldrsbge	r3, [pc, r7]
     2f8:	6a836788 	bvs	fe0da120 <_estack+0xf60ca120>
     2fc:	31bda030 			; <UNDEFINED> instruction: 0x31bda030
     300:	858485a5 	strhi	r8, [r4, #1445]	; 0x5a5
     304:	040200a0 	streq	r0, [r2], #-160	; 0xffffff60
     308:	00ba0601 	adcseq	r0, sl, r1, lsl #12
     30c:	82030402 	andhi	r0, r3, #33554432	; 0x2000000
     310:	08650306 	stmdaeq	r5!, {r1, r2, r8, r9}^
     314:	9e6e0390 	mcrls	3, 3, r0, cr14, cr0, {4}
     318:	83823103 	orrhi	r3, r2, #-1073741824	; 0xc0000000
     31c:	31684008 	cmncc	r8, r8
     320:	03873031 	orreq	r3, r7, #49	; 0x31
     324:	0c039e79 	stceq	14, cr9, [r3], {121}	; 0x79
     328:	02005808 	andeq	r5, r0, #8, 16	; 0x80000
     32c:	02060104 	andeq	r0, r6, #4, 2
     330:	02001228 	andeq	r1, r0, #40, 4	; 0x80000002
     334:	009e0304 	addseq	r0, lr, r4, lsl #6
     338:	06030402 	streq	r0, [r3], -r2, lsl #8
     33c:	040200a1 	streq	r0, [r2], #-161	; 0xffffff5f
     340:	033e0803 	teqeq	lr, #196608	; 0x30000
     344:	0d034a74 	vstreq	s8, [r3, #-464]	; 0xfffffe30
     348:	0069a22e 	rsbeq	sl, r9, lr, lsr #4
     34c:	68030402 	stmdavs	r3, {r1, sl}
     350:	03040200 	movweq	r0, #16896	; 0x4200
     354:	02001e08 	andeq	r1, r0, #8, 28	; 0x80
     358:	66060104 	strvs	r0, [r6], -r4, lsl #2
     35c:	4b4b6b06 	blmi	12daf7c <mailbuffer+0x12c3ebc>
     360:	0867674e 	stmdaeq	r7!, {r1, r2, r3, r6, r8, r9, sl, sp, lr}^
     364:	83838924 	orrhi	r8, r3, #36, 18	; 0x90000
     368:	4d6ad8a0 	stclmi	8, cr13, [sl, #-640]!	; 0xfffffd80
     36c:	000a022f 	andeq	r0, sl, pc, lsr #4
     370:	01a80101 			; <UNDEFINED> instruction: 0x01a80101
     374:	00020000 	andeq	r0, r2, r0
     378:	0000015a 	andeq	r0, r0, sl, asr r1
     37c:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     380:	0101000d 	tsteq	r1, sp
     384:	00000101 	andeq	r0, r0, r1, lsl #2
     388:	00000100 	andeq	r0, r0, r0, lsl #2
     38c:	6f682f01 	svcvs	0x00682f01
     390:	612f656d 			; <UNDEFINED> instruction: 0x612f656d
     394:	2f78656c 	svccs	0x0078656c
     398:	612f6970 			; <UNDEFINED> instruction: 0x612f6970
     39c:	522d6d72 	eorpl	r6, sp, #7296	; 0x1c80
     3a0:	2f534f54 	svccs	0x00534f54
     3a4:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
     3a8:	534f5452 	movtpl	r5, #62546	; 0xf452
     3ac:	756f532f 	strbvc	r5, [pc, #-815]!	; 85 <_start-0x7f7b>
     3b0:	00656372 	rsbeq	r6, r5, r2, ror r3
     3b4:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
     3b8:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     3bc:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
     3c0:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
     3c4:	2f62696c 	svccs	0x0062696c
     3c8:	00737973 	rsbseq	r7, r3, r3, ror r9
     3cc:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
     3d0:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
     3d4:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
     3d8:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
     3dc:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
     3e0:	61652d65 	cmnvs	r5, r5, ror #26
     3e4:	362f6962 	strtcc	r6, [pc], -r2, ror #18
     3e8:	312e332e 			; <UNDEFINED> instruction: 0x312e332e
     3ec:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     3f0:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
     3f4:	73752f00 	cmnvc	r5, #0, 30
     3f8:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
     3fc:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     400:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xfffff09b
     404:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
     408:	6f682f00 	svcvs	0x00682f00
     40c:	612f656d 			; <UNDEFINED> instruction: 0x612f656d
     410:	2f78656c 	svccs	0x0078656c
     414:	612f6970 			; <UNDEFINED> instruction: 0x612f6970
     418:	522d6d72 	eorpl	r6, sp, #7296	; 0x1c80
     41c:	2f534f54 	svccs	0x00534f54
     420:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
     424:	534f5452 	movtpl	r5, #62546	; 0xf452
     428:	756f532f 	strbvc	r5, [pc, #-815]!	; 101 <_start-0x7eff>
     42c:	2f656372 	svccs	0x00656372
     430:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
     434:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
     438:	4343472f 	movtmi	r4, #14127	; 0x372f
     43c:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
     440:	72656270 	rsbvc	r6, r5, #112, 4
     444:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
     448:	6f682f00 	svcvs	0x00682f00
     44c:	612f656d 			; <UNDEFINED> instruction: 0x612f656d
     450:	2f78656c 	svccs	0x0078656c
     454:	612f6970 			; <UNDEFINED> instruction: 0x612f6970
     458:	522d6d72 	eorpl	r6, sp, #7296	; 0x1c80
     45c:	2f534f54 	svccs	0x00534f54
     460:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
     464:	534f5452 	movtpl	r5, #62546	; 0xf452
     468:	756f532f 	strbvc	r5, [pc, #-815]!	; 141 <_start-0x7ebf>
     46c:	2f656372 	svccs	0x00656372
     470:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     474:	00656475 	rsbeq	r6, r5, r5, ror r4
     478:	73696c00 	cmnvc	r9, #0, 24
     47c:	00632e74 	rsbeq	r2, r3, r4, ror lr
     480:	6c000001 	stcvs	0, cr0, [r0], {1}
     484:	2e6b636f 	cdpcs	3, 6, cr6, cr11, cr15, {3}
     488:	00020068 	andeq	r0, r2, r8, rrx
     48c:	79745f00 	ldmdbvc	r4!, {r8, r9, sl, fp, ip, lr}^
     490:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
     494:	00020068 	andeq	r0, r2, r8, rrx
     498:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
     49c:	2e666564 	cdpcs	5, 6, cr6, cr6, cr4, {3}
     4a0:	00030068 	andeq	r0, r3, r8, rrx
     4a4:	65657200 	strbvs	r7, [r5, #-512]!	; 0xfffffe00
     4a8:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
     4ac:	00000200 	andeq	r0, r0, r0, lsl #4
     4b0:	6c647473 	cfstrdvs	mvd7, [r4], #-460	; 0xfffffe34
     4b4:	682e6269 	stmdavs	lr!, {r0, r3, r5, r6, r9, sp, lr}
     4b8:	00000400 	andeq	r0, r0, r0, lsl #8
     4bc:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
     4c0:	7263616d 	rsbvc	r6, r3, #1073741851	; 0x4000001b
     4c4:	00682e6f 	rsbeq	r2, r8, pc, ror #28
     4c8:	6c000005 	stcvs	0, cr0, [r0], {5}
     4cc:	2e747369 	cdpcs	3, 7, cr7, cr4, cr9, {3}
     4d0:	00060068 	andeq	r0, r6, r8, rrx
     4d4:	05000000 	streq	r0, [r0, #-0]
     4d8:	010d5402 	tsteq	sp, r2, lsl #8
     4dc:	00cc0300 	sbceq	r0, ip, r0, lsl #6
     4e0:	6a868601 	bvs	fe1a1cec <_estack+0xf6191cec>
     4e4:	86678483 	strbthi	r8, [r7], -r3, lsl #9
     4e8:	a5866784 	strge	r6, [r6, #1924]	; 0x784
     4ec:	83838368 	orrhi	r8, r3, #104, 6	; 0xa0000001
     4f0:	9f686967 	svcls	0x00686967
     4f4:	0903a386 	stmdbeq	r3, {r1, r2, r7, r8, r9, sp, pc}
     4f8:	14036866 	strne	r6, [r3], #-2150	; 0xfffff79a
     4fc:	04020082 	streq	r0, [r2], #-130	; 0xffffff7e
     500:	00820603 	addeq	r0, r2, r3, lsl #12
     504:	66010402 	strvs	r0, [r1], -r2, lsl #8
     508:	8383c106 	orrhi	ip, r3, #-2147483647	; 0x80000001
     50c:	9f686a67 	svcls	0x00686a67
     510:	a29f8586 	addsge	r8, pc, #562036736	; 0x21800000
     514:	6785a069 	strvs	sl, [r5, r9, rrx]
     518:	0008029f 	muleq	r8, pc, r2	; <UNPREDICTABLE>
     51c:	02aa0101 	adceq	r0, sl, #1073741824	; 0x40000000
     520:	00020000 	andeq	r0, r2, r0
     524:	00000165 	andeq	r0, r0, r5, ror #2
     528:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     52c:	0101000d 	tsteq	r1, sp
     530:	00000101 	andeq	r0, r0, r1, lsl #2
     534:	00000100 	andeq	r0, r0, r0, lsl #2
     538:	6f682f01 	svcvs	0x00682f01
     53c:	612f656d 			; <UNDEFINED> instruction: 0x612f656d
     540:	2f78656c 	svccs	0x0078656c
     544:	612f6970 			; <UNDEFINED> instruction: 0x612f6970
     548:	522d6d72 	eorpl	r6, sp, #7296	; 0x1c80
     54c:	2f534f54 	svccs	0x00534f54
     550:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
     554:	534f5452 	movtpl	r5, #62546	; 0xf452
     558:	756f532f 	strbvc	r5, [pc, #-815]!	; 231 <_start-0x7dcf>
     55c:	00656372 	rsbeq	r6, r5, r2, ror r3
     560:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
     564:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
     568:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
     56c:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
     570:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
     574:	61652d65 	cmnvs	r5, r5, ror #26
     578:	362f6962 	strtcc	r6, [pc], -r2, ror #18
     57c:	312e332e 			; <UNDEFINED> instruction: 0x312e332e
     580:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     584:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
     588:	73752f00 	cmnvc	r5, #0, 30
     58c:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
     590:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     594:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xfffff09b
     598:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
     59c:	7379732f 	cmnvc	r9, #-1140850688	; 0xbc000000
     5a0:	73752f00 	cmnvc	r5, #0, 30
     5a4:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
     5a8:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     5ac:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xfffff09b
     5b0:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
     5b4:	6f682f00 	svcvs	0x00682f00
     5b8:	612f656d 			; <UNDEFINED> instruction: 0x612f656d
     5bc:	2f78656c 	svccs	0x0078656c
     5c0:	612f6970 			; <UNDEFINED> instruction: 0x612f6970
     5c4:	522d6d72 	eorpl	r6, sp, #7296	; 0x1c80
     5c8:	2f534f54 	svccs	0x00534f54
     5cc:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
     5d0:	534f5452 	movtpl	r5, #62546	; 0xf452
     5d4:	756f532f 	strbvc	r5, [pc, #-815]!	; 2ad <_start-0x7d53>
     5d8:	2f656372 	svccs	0x00656372
     5dc:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
     5e0:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
     5e4:	4343472f 	movtmi	r4, #14127	; 0x372f
     5e8:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
     5ec:	72656270 	rsbvc	r6, r5, #112, 4
     5f0:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
     5f4:	6f682f00 	svcvs	0x00682f00
     5f8:	612f656d 			; <UNDEFINED> instruction: 0x612f656d
     5fc:	2f78656c 	svccs	0x0078656c
     600:	612f6970 			; <UNDEFINED> instruction: 0x612f6970
     604:	522d6d72 	eorpl	r6, sp, #7296	; 0x1c80
     608:	2f534f54 	svccs	0x00534f54
     60c:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
     610:	534f5452 	movtpl	r5, #62546	; 0xf452
     614:	756f532f 	strbvc	r5, [pc, #-815]!	; 2ed <_start-0x7d13>
     618:	2f656372 	svccs	0x00656372
     61c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     620:	00656475 	rsbeq	r6, r5, r5, ror r4
     624:	65757100 	ldrbvs	r7, [r5, #-256]!	; 0xffffff00
     628:	632e6575 			; <UNDEFINED> instruction: 0x632e6575
     62c:	00000100 	andeq	r0, r0, r0, lsl #2
     630:	64647473 	strbtvs	r7, [r4], #-1139	; 0xfffffb8d
     634:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
     638:	00000200 	andeq	r0, r0, r0, lsl #4
     63c:	6b636f6c 	blvs	18dc3f4 <mailbuffer+0x18c5334>
     640:	0300682e 	movweq	r6, #2094	; 0x82e
     644:	745f0000 	ldrbvc	r0, [pc], #-0	; 64c <_start-0x79b4>
     648:	73657079 	cmnvc	r5, #121	; 0x79
     64c:	0300682e 	movweq	r6, #2094	; 0x82e
     650:	65720000 	ldrbvs	r0, [r2, #-0]!
     654:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
     658:	00030068 	andeq	r0, r3, r8, rrx
     65c:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
     660:	2e62696c 	vnmulcs.f16	s13, s4, s25	; <UNPREDICTABLE>
     664:	00040068 	andeq	r0, r4, r8, rrx
     668:	726f7000 	rsbvc	r7, pc, #0
     66c:	63616d74 	cmnvs	r1, #116, 26	; 0x1d00
     670:	682e6f72 	stmdavs	lr!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}
     674:	00000500 	andeq	r0, r0, r0, lsl #10
     678:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
     67c:	0600682e 	streq	r6, [r0], -lr, lsr #16
     680:	61740000 	cmnvs	r4, r0
     684:	682e6b73 	stmdavs	lr!, {r0, r1, r4, r5, r6, r8, r9, fp, sp, lr}
     688:	00000600 	andeq	r0, r0, r0, lsl #12
     68c:	02050000 	andeq	r0, r5, #0
     690:	00010ff0 	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
     694:	01029703 	tsteq	r2, r3, lsl #14
     698:	3d0830a1 	stccc	0, cr3, [r8, #-644]	; 0xfffffd7c
     69c:	59088367 	stmdbpl	r8, {r0, r1, r2, r5, r6, r8, r9, pc}
     6a0:	846d6867 	strbthi	r6, [sp], #-2151	; 0xfffff799
     6a4:	858351d8 	strhi	r5, [r3, #472]	; 0x1d8
     6a8:	d96a2f32 	stmdble	sl!, {r1, r4, r5, r8, r9, sl, fp, sp}^
     6ac:	6a676851 	bvs	19da7f8 <mailbuffer+0x19c3738>
     6b0:	67869fa0 	strvs	r9, [r6, r0, lsr #31]
     6b4:	516b6e67 	cmnpl	fp, r7, ror #28
     6b8:	01d0032f 	bicseq	r0, r0, pc, lsr #6
     6bc:	0b03d766 	bleq	f645c <mailbuffer+0xdf39c>
     6c0:	86bd324a 	ldrthi	r3, [sp], sl, asr #4
     6c4:	3232dc84 	eorscc	sp, r2, #132, 24	; 0x8400
     6c8:	4c336a4e 			; <UNDEFINED> instruction: 0x4c336a4e
     6cc:	334e676a 	movtcc	r6, #59242	; 0xe76a
     6d0:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
     6d4:	009e0601 	addseq	r0, lr, r1, lsl #12
     6d8:	66030402 	strvs	r0, [r3], -r2, lsl #8
     6dc:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
     6e0:	04020082 	streq	r0, [r2], #-130	; 0xffffff7e
     6e4:	02006606 	andeq	r6, r0, #6291456	; 0x600000
     6e8:	31060604 	tstcc	r6, r4, lsl #12
     6ec:	51c1a1f4 	strdpl	sl, [r1, #20]
     6f0:	504b5084 	subpl	r5, fp, r4, lsl #1
     6f4:	0200334b 	andeq	r3, r0, #738197505	; 0x2c000001
     6f8:	03310304 	teqeq	r1, #4, 6	; 0x10000000
     6fc:	036601d2 	cmneq	r6, #-2147483596	; 0x80000034
     700:	be4cd60c 	cdplt	6, 4, cr13, cr12, cr12, {0}
     704:	da848486 	ble	fe121924 <_estack+0xf6111924>
     708:	82090368 	andhi	r0, r9, #104, 6	; 0xa0000001
     70c:	2f4f6ba1 	svccs	0x004f6ba1
     710:	0d03d76a 	stceq	7, cr13, [r3, #-424]	; 0xfffffe58
     714:	6885324a 	stmvs	r5, {r1, r3, r6, r9, ip, sp}
     718:	0d036b68 	vstreq	d6, [r3, #-416]	; 0xfffffe60
     71c:	03d8849e 	bicseq	r8, r8, #-1644167168	; 0x9e000000
     720:	866a4a0a 	strbthi	r4, [sl], -sl, lsl #20
     724:	4e2f33d9 	mcrmi	3, 1, r3, cr15, cr9, {6}
     728:	6a4c306a 	bvs	130c8d8 <mailbuffer+0x12f5818>
     72c:	2f334e67 	svccs	0x00334e67
     730:	01040200 	mrseq	r0, R12_usr
     734:	02009e06 	andeq	r9, r0, #6, 28	; 0x60
     738:	00660304 	rsbeq	r0, r6, r4, lsl #6
     73c:	82040402 	andhi	r0, r4, #33554432	; 0x2000000
     740:	06040200 	streq	r0, [r4], -r0, lsl #4
     744:	04020066 	streq	r0, [r2], #-102	; 0xffffff9a
     748:	f4310606 			; <UNDEFINED> instruction: 0xf4310606
     74c:	bb9e1103 	bllt	fe784b60 <_estack+0xf6774b60>
     750:	4b50844b 	blmi	1421884 <mailbuffer+0x140a7c4>
     754:	00304b4f 	eorseq	r4, r0, pc, asr #22
     758:	31030402 	tstcc	r3, r2, lsl #8
     75c:	864dc16a 	strbhi	ip, [sp], -sl, ror #2
     760:	8484a367 	strhi	sl, [r4], #871	; 0x367
     764:	090368da 	stmdbeq	r3, {r1, r3, r4, r6, r7, fp, sp, lr}
     768:	506aa182 	rsbpl	sl, sl, r2, lsl #3
     76c:	2f876a2f 	svccs	0x00876a2f
     770:	6a2f3067 	bvs	bcc914 <mailbuffer+0xbb5854>
     774:	862f6887 	strthi	r6, [pc], -r7, lsl #17
     778:	034b8387 	movteq	r8, #45959	; 0xb387
     77c:	03bb6622 			; <UNDEFINED> instruction: 0x03bb6622
     780:	d768820d 	strble	r8, [r8, -sp, lsl #4]!
     784:	d7a3bcd7 	sbfxle	fp, r7, #25, #4
     788:	9ff6bcf3 	svcls	0x00f6bcf3
     78c:	d7849f6a 	strle	r9, [r4, sl, ror #30]
     790:	6ad884bc 	bvs	ff621a88 <_estack+0xf7611a88>
     794:	86323189 	ldrthi	r3, [r2], -r9, lsl #3
     798:	710331da 	ldrdvc	r3, [r3, -sl]
     79c:	9e13039e 	mrcls	3, 0, r0, cr3, cr14, {4}
     7a0:	30316832 	eorscc	r6, r1, r2, lsr r8
     7a4:	31d88430 	bicscc	r8, r8, r0, lsr r4
     7a8:	039e7703 	orrseq	r7, lr, #786432	; 0xc0000
     7ac:	68329e0d 	ldmdavs	r2!, {r0, r2, r3, r9, sl, fp, ip, pc}
     7b0:	2f856a2f 	svccs	0x00856a2f
     7b4:	6a2f30d7 	bvs	bccb18 <mailbuffer+0xbb5a58>
     7b8:	862fd886 	strthi	sp, [pc], -r6, lsl #17
     7bc:	21082f85 	smlabbcs	r8, r5, pc, r2	; <UNPREDICTABLE>
     7c0:	866a2f30 	uqasxhi	r2, sl, r0
     7c4:	022f2208 	eoreq	r2, pc, #8, 4	; 0x80000000
     7c8:	01010008 	tsteq	r1, r8
     7cc:	000004c5 	andeq	r0, r0, r5, asr #9
     7d0:	01810002 	orreq	r0, r1, r2
     7d4:	01020000 	mrseq	r0, (UNDEF: 2)
     7d8:	000d0efb 	strdeq	r0, [sp], -fp
     7dc:	01010101 	tsteq	r1, r1, lsl #2
     7e0:	01000000 	mrseq	r0, (UNDEF: 0)
     7e4:	2f010000 	svccs	0x00010000
     7e8:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
     7ec:	656c612f 	strbvs	r6, [ip, #-303]!	; 0xfffffed1
     7f0:	69702f78 	ldmdbvs	r0!, {r3, r4, r5, r6, r8, r9, sl, fp, sp}^
     7f4:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
     7f8:	4f54522d 	svcmi	0x0054522d
     7fc:	72462f53 	subvc	r2, r6, #332	; 0x14c
     800:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
     804:	532f534f 			; <UNDEFINED> instruction: 0x532f534f
     808:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     80c:	752f0065 	strvc	r0, [pc, #-101]!	; 7af <_start-0x7851>
     810:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 64c <_start-0x79b4>
     814:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
     818:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
     81c:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
     820:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
     824:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
     828:	332e362f 			; <UNDEFINED> instruction: 0x332e362f
     82c:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
     830:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
     834:	2f006564 	svccs	0x00006564
     838:	2f727375 	svccs	0x00727375
     83c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     840:	2f656475 	svccs	0x00656475
     844:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
     848:	732f6269 			; <UNDEFINED> instruction: 0x732f6269
     84c:	2f007379 	svccs	0x00007379
     850:	2f727375 	svccs	0x00727375
     854:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     858:	2f656475 	svccs	0x00656475
     85c:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
     860:	2f006269 	svccs	0x00006269
     864:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
     868:	656c612f 	strbvs	r6, [ip, #-303]!	; 0xfffffed1
     86c:	69702f78 	ldmdbvs	r0!, {r3, r4, r5, r6, r8, r9, sl, fp, sp}^
     870:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
     874:	4f54522d 	svcmi	0x0054522d
     878:	72462f53 	subvc	r2, r6, #332	; 0x14c
     87c:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
     880:	532f534f 			; <UNDEFINED> instruction: 0x532f534f
     884:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     888:	6e692f65 	cdpvs	15, 6, cr2, cr9, cr5, {3}
     88c:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     890:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
     894:	2f656d6f 	svccs	0x00656d6f
     898:	78656c61 	stmdavc	r5!, {r0, r5, r6, sl, fp, sp, lr}^
     89c:	2f69702f 	svccs	0x0069702f
     8a0:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
     8a4:	534f5452 	movtpl	r5, #62546	; 0xf452
     8a8:	6572462f 	ldrbvs	r4, [r2, #-1583]!	; 0xfffff9d1
     8ac:	4f545265 	svcmi	0x00545265
     8b0:	6f532f53 	svcvs	0x00532f53
     8b4:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
     8b8:	726f702f 	rsbvc	r7, pc, #47	; 0x2f
     8bc:	6c626174 	stfvse	f6, [r2], #-464	; 0xfffffe30
     8c0:	43472f65 	movtmi	r2, #32613	; 0x7f65
     8c4:	61522f43 	cmpvs	r2, r3, asr #30
     8c8:	65627073 	strbvs	r7, [r2, #-115]!	; 0xffffff8d
     8cc:	50797272 	rsbspl	r7, r9, r2, ror r2
     8d0:	74000069 	strvc	r0, [r0], #-105	; 0xffffff97
     8d4:	736b7361 	cmnvc	fp, #-2080374783	; 0x84000001
     8d8:	0100632e 	tsteq	r0, lr, lsr #6
     8dc:	74730000 	ldrbtvc	r0, [r3], #-0
     8e0:	66656464 	strbtvs	r6, [r5], -r4, ror #8
     8e4:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     8e8:	6f6c0000 	svcvs	0x006c0000
     8ec:	682e6b63 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
     8f0:	00000300 	andeq	r0, r0, r0, lsl #6
     8f4:	7079745f 	rsbsvc	r7, r9, pc, asr r4
     8f8:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
     8fc:	00000300 	andeq	r0, r0, r0, lsl #6
     900:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
     904:	00682e74 	rsbeq	r2, r8, r4, ror lr
     908:	73000003 	movwvc	r0, #3
     90c:	696c6474 	stmdbvs	ip!, {r2, r4, r5, r6, sl, sp, lr}^
     910:	00682e62 	rsbeq	r2, r8, r2, ror #28
     914:	70000004 	andvc	r0, r0, r4
     918:	646a6f72 	strbtvs	r6, [sl], #-3954	; 0xfffff08e
     91c:	2e736665 	cdpcs	6, 7, cr6, cr3, cr5, {3}
     920:	00050068 	andeq	r0, r5, r8, rrx
     924:	726f7000 	rsbvc	r7, pc, #0
     928:	63616d74 	cmnvs	r1, #116, 26	; 0x1d00
     92c:	682e6f72 	stmdavs	lr!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}
     930:	00000600 	andeq	r0, r0, r0, lsl #12
     934:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
     938:	534f5452 	movtpl	r5, #62546	; 0xf452
     93c:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
     940:	696c0000 	stmdbvs	ip!, {}^	; <UNPREDICTABLE>
     944:	682e7473 	stmdavs	lr!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}
     948:	00000500 	andeq	r0, r0, r0, lsl #10
     94c:	6b736174 	blvs	1cd8f24 <mailbuffer+0x1cc1e64>
     950:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
     954:	00000000 	andeq	r0, r0, r0
     958:	1ba00205 	blne	fe801174 <_estack+0xf67f1174>
     95c:	9b030001 	blls	c0968 <mailbuffer+0xa98a8>
     960:	09030103 	stmdbeq	r3, {r0, r1, r8}
     964:	1803a0d6 	stmdane	r3, {r1, r2, r4, r6, r7, sp, pc}
     968:	1403d766 	strne	sp, [r3], #-1894	; 0xfffff89a
     96c:	d60c0366 	strle	r0, [ip], -r6, ror #6
     970:	306b6bdd 	ldrdcc	r6, [fp], #-189	; 0xffffff43	; <UNPREDICTABLE>
     974:	8768869f 			; <UNDEFINED> instruction: 0x8768869f
     978:	6dbc8452 	cfldrsvs	mvf8, [ip, #328]!	; 0x148
     97c:	820903bc 	andhi	r0, r9, #188, 6	; 0xf0000002
     980:	040200a0 	streq	r0, [r2], #-160	; 0xffffff60
     984:	00ba0601 	adcseq	r0, sl, r1, lsl #12
     988:	82030402 	andhi	r0, r3, #33554432	; 0x2000000
     98c:	03040200 	movweq	r0, #16896	; 0x4200
     990:	00920806 	addseq	r0, r2, r6, lsl #16
     994:	4e030402 	cdpmi	4, 0, cr0, cr3, cr2, {0}
     998:	86684e4e 	strbthi	r4, [r8], -lr, asr #28
     99c:	082f33bc 	stmdaeq	pc!, {r2, r3, r4, r5, r7, r8, r9, ip, sp}	; <UNPREDICTABLE>
     9a0:	a0328542 	eorsge	r8, r2, r2, asr #10
     9a4:	0402004e 	streq	r0, [r2], #-78	; 0xffffffb2
     9a8:	00660601 	rsbeq	r0, r6, r1, lsl #12
     9ac:	66020402 	strvs	r0, [r2], -r2, lsl #8
     9b0:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
     9b4:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
     9b8:	00340604 	eorseq	r0, r4, r4, lsl #12
     9bc:	85040402 	strhi	r0, [r4, #-1026]	; 0xfffffbfe
     9c0:	a2a38584 	adcge	r8, r3, #132, 10	; 0x21000000
     9c4:	688431a2 	stmvs	r4, {r1, r5, r7, r8, ip, sp}
     9c8:	f2100331 	vcge.s16	d0, d0, d17
     9cc:	a0314fa0 	eorsge	r4, r1, r0, lsr #31
     9d0:	040200c1 	streq	r0, [r2], #-193	; 0xffffff3f
     9d4:	069e0601 	ldreq	r0, [lr], r1, lsl #12
     9d8:	02006ea0 	andeq	r6, r0, #160, 28	; 0xa00
     9dc:	9e060104 	adflss	f0, f6, f4
     9e0:	684fa006 	stmdavs	pc, {r1, r2, sp, pc}^	; <UNPREDICTABLE>
     9e4:	4e4d9f6d 	cdpmi	15, 4, cr9, cr13, cr13, {3}
     9e8:	84a63068 	strthi	r3, [r6], #104	; 0x68
     9ec:	0e03684d 	cdpeq	8, 0, cr6, cr3, cr13, {2}
     9f0:	4c9fa32e 	ldcmi	3, cr10, [pc], {46}	; 0x2e
     9f4:	a630684f 	ldrtge	r6, [r0], -pc, asr #16
     9f8:	02003286 	andeq	r3, r0, #1610612744	; 0x60000008
     9fc:	66060104 	strvs	r0, [r6], -r4, lsl #2
     a00:	02040200 	andeq	r0, r4, #0, 4
     a04:	04020066 	streq	r0, [r2], #-102	; 0xffffff9a
     a08:	02002e04 	andeq	r2, r0, #4, 28	; 0x40
     a0c:	2f060404 	svccs	0x00060404
     a10:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
     a14:	04020068 	streq	r0, [r2], #-104	; 0xffffff98
     a18:	02003004 	andeq	r3, r0, #4
     a1c:	8a2f0404 	bhi	bc1a34 <mailbuffer+0xbaa974>
     a20:	4d684fa1 	stclmi	15, cr4, [r8, #-644]!	; 0xfffffd7c
     a24:	004fa030 	subeq	sl, pc, r0, lsr r0	; <UNPREDICTABLE>
     a28:	06010402 	streq	r0, [r1], -r2, lsl #8
     a2c:	04020066 	streq	r0, [r2], #-102	; 0xffffff9a
     a30:	02006602 	andeq	r6, r0, #2097152	; 0x200000
     a34:	002e0404 	eoreq	r0, lr, r4, lsl #8
     a38:	06040402 	streq	r0, [r4], -r2, lsl #8
     a3c:	002e0a03 	eoreq	r0, lr, r3, lsl #20
     a40:	6a040402 	bvs	101a50 <mailbuffer+0xea990>
     a44:	696c8486 	stmdbvs	ip!, {r1, r2, r7, sl, pc}^
     a48:	4a13036a 	bmi	4c17f8 <mailbuffer+0x4aa738>
     a4c:	5d08886a 	stcpl	8, cr8, [r8, #-424]	; 0xfffffe58
     a50:	04020083 	streq	r0, [r2], #-131	; 0xffffff7d
     a54:	00ba0601 	adcseq	r0, sl, r1, lsl #12
     a58:	82030402 	andhi	r0, r3, #33554432	; 0x2000000
     a5c:	68930806 	ldmvs	r3, {r1, r2, fp}
     a60:	85c22f32 	strbhi	r2, [r2, #3890]	; 0xf32
     a64:	004ea032 	subeq	sl, lr, r2, lsr r0
     a68:	06010402 	streq	r0, [r1], -r2, lsl #8
     a6c:	04020066 	streq	r0, [r2], #-102	; 0xffffff9a
     a70:	02006602 	andeq	r6, r0, #2097152	; 0x200000
     a74:	002e0404 	eoreq	r0, lr, r4, lsl #8
     a78:	06040402 	streq	r0, [r4], -r2, lsl #8
     a7c:	04020033 	streq	r0, [r2], #-51	; 0xffffffcd
     a80:	85848504 	strhi	r8, [r4, #1284]	; 0x504
     a84:	856830a0 	strbhi	r3, [r8, #-160]!	; 0xffffff60
     a88:	032e1503 			; <UNDEFINED> instruction: 0x032e1503
     a8c:	6ec02e72 	mcrvs	14, 6, r2, cr0, cr2, {3}
     a90:	83de322a 	bicshi	r3, lr, #-1610612734	; 0xa0000002
     a94:	a4a1514b 	strtge	r5, [r1], #331	; 0x14b
     a98:	c22f4f84 	eorgt	r4, pc, #132, 30	; 0x210
     a9c:	02004e8a 	andeq	r4, r0, #2208	; 0x8a0
     aa0:	66060104 	strvs	r0, [r6], -r4, lsl #2
     aa4:	a430a006 	ldrtge	sl, [r0], #-6
     aa8:	04020083 	streq	r0, [r2], #-131	; 0xffffff7d
     aac:	00ba0601 	adcseq	r0, sl, r1, lsl #12
     ab0:	82030402 	andhi	r0, r3, #33554432	; 0x2000000
     ab4:	03040200 	movweq	r0, #16896	; 0x4200
     ab8:	da930806 	ble	fe4c2ad8 <_estack+0xf64b2ad8>
     abc:	09033032 	stmdbeq	r3, {r1, r4, r5, ip, sp}
     ac0:	4c5083ba 	mrrcmi	3, 11, r8, r0, cr10
     ac4:	0884a24c 	stmeq	r4, {r2, r3, r6, r9, sp, pc}
     ac8:	0200833d 	andeq	r8, r0, #-201326592	; 0xf4000000
     acc:	ba060104 	blt	180ee4 <mailbuffer+0x169e24>
     ad0:	03040200 	movweq	r0, #16896	; 0x4200
     ad4:	b3080682 	movwlt	r0, #34434	; 0x8682
     ad8:	0d032fa4 	stceq	15, cr2, [r3, #-656]	; 0xfffffd70
     adc:	660d03f2 			; <UNDEFINED> instruction: 0x660d03f2
     ae0:	ac080d03 	stcge	13, cr0, [r8], {3}
     ae4:	a0660a03 	rsbge	r0, r6, r3, lsl #20
     ae8:	66090367 	strvs	r0, [r9], -r7, ror #6
     aec:	da2e0d03 	ble	b83f00 <mailbuffer+0xb6ce40>
     af0:	2f679f4e 	svccs	0x00679f4e
     af4:	a29f4d6a 	addsge	r4, pc, #6784	; 0x1a80
     af8:	4a0b0368 	bmi	2c18a0 <mailbuffer+0x2aa7e0>
     afc:	8484a030 	strhi	sl, [r4], #48	; 0x30
     b00:	6767304e 	strbvs	r3, [r7, -lr, asr #32]!
     b04:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
     b08:	009e0601 	addseq	r0, lr, r1, lsl #12
     b0c:	66030402 	strvs	r0, [r3], -r2, lsl #8
     b10:	03040200 	movweq	r0, #16896	; 0x4200
     b14:	bc5c0806 	mrrclt	8, 0, r0, ip, cr6
     b18:	034a7503 	movteq	r7, #42243	; 0xa503
     b1c:	30848212 	addcc	r8, r4, r2, lsl r2
     b20:	0b039b2f 	bleq	e77e4 <mailbuffer+0xd0724>
     b24:	02004f82 	andeq	r4, r0, #520	; 0x208
     b28:	66060104 	strvs	r0, [r6], -r4, lsl #2
     b2c:	674b8406 	strbvs	r8, [fp, -r6, lsl #8]
     b30:	032f3033 			; <UNDEFINED> instruction: 0x032f3033
     b34:	6a58080e 	bvs	1602b74 <mailbuffer+0x15ebab4>
     b38:	2f306830 	svccs	0x00306830
     b3c:	694b6a86 	stmdbvs	fp, {r1, r2, r7, r9, fp, sp, lr}^
     b40:	4b4da22f 	blmi	1369404 <mailbuffer+0x1352344>
     b44:	9e01ae03 	cdpls	14, 0, cr10, cr1, cr3, {0}
     b48:	039f846c 	orrseq	r8, pc, #108, 8	; 0x6c000000
     b4c:	83678209 	cmnhi	r7, #-1879048192	; 0x90000000
     b50:	8aa5a067 	bhi	fe968cf4 <_estack+0xf6958cf4>
     b54:	0200879f 	andeq	r8, r0, #41680896	; 0x27c0000
     b58:	ba060c04 	blt	183b70 <mailbuffer+0x16cab0>
     b5c:	02040200 	andeq	r0, r4, #0, 4
     b60:	0402009e 	streq	r0, [r2], #-158	; 0xffffff62
     b64:	02008203 	andeq	r8, r0, #805306368	; 0x30000000
     b68:	90080404 	andls	r0, r8, r4, lsl #8
     b6c:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
     b70:	04020082 	streq	r0, [r2], #-130	; 0xffffff7e
     b74:	0200f206 	andeq	pc, r0, #1610612736	; 0x60000000
     b78:	00820804 	addeq	r0, r2, r4, lsl #16
     b7c:	ba090402 	blt	241b8c <mailbuffer+0x22aacc>
     b80:	0b040200 	bleq	101388 <mailbuffer+0xea2c8>
     b84:	b0080682 	andlt	r0, r8, r2, lsl #13
     b88:	089e1703 	ldmeq	lr, {r0, r1, r8, r9, sl, ip}
     b8c:	8668a296 			; <UNDEFINED> instruction: 0x8668a296
     b90:	2f672f4f 	svccs	0x00672f4f
     b94:	8668878a 	strbthi	r8, [r8], -sl, lsl #15
     b98:	30672f4f 	rsbcc	r2, r7, pc, asr #30
     b9c:	68a38a2f 	stmiavs	r3!, {r0, r1, r2, r3, r5, r9, fp, pc}
     ba0:	be844d86 	cdplt	13, 8, cr4, cr4, cr6, {4}
     ba4:	67882f4d 	strvs	r2, [r8, sp, asr #30]
     ba8:	66330386 	ldrtvs	r0, [r3], -r6, lsl #7
     bac:	9b2e6e03 	blls	b9c3c0 <mailbuffer+0xb85300>
     bb0:	58080d03 	stmdapl	r8, {r0, r1, r8, sl, fp}
     bb4:	01040200 	mrseq	r0, R12_usr
     bb8:	12280206 	eorne	r0, r8, #1610612736	; 0x60000000
     bbc:	03040200 	movweq	r0, #16896	; 0x4200
     bc0:	08a6069e 	stmiaeq	r6!, {r1, r2, r3, r4, r7, r9, sl}
     bc4:	9e0b0324 	cdpls	3, 0, cr0, cr11, cr4, {1}
     bc8:	036ba3bf 	cmneq	fp, #-67108862	; 0xfc000002
     bcc:	7403ba12 	strvc	fp, [r3], #-2578	; 0xfffff5ee
     bd0:	0b039f2e 	bleq	e8890 <mailbuffer+0xd17d0>
     bd4:	ba26034a 	blt	981904 <mailbuffer+0x96a844>
     bd8:	84821103 	strhi	r1, [r2], #259	; 0x103
     bdc:	00838484 	addeq	r8, r3, r4, lsl #9
     be0:	06010402 	streq	r0, [r1], -r2, lsl #8
     be4:	040200ba 	streq	r0, [r2], #-186	; 0xffffff46
     be8:	08068203 	stmdaeq	r6, {r0, r1, r9, pc}
     bec:	6adca1b2 	bvs	ff7292bc <_estack+0xf77192bc>
     bf0:	84f62f4d 	ldrbthi	r2, [r6], #3917	; 0xf4d
     bf4:	a4be8383 	ldrtge	r8, [lr], #899	; 0x383
     bf8:	006b8434 	rsbeq	r8, fp, r4, lsr r4
     bfc:	06010402 	streq	r0, [r1], -r2, lsl #8
     c00:	68c006ba 	stmiavs	r0, {r1, r3, r4, r5, r7, r9, sl}^
     c04:	3d082308 	stccc	3, cr2, [r8, #-32]	; 0xffffffe0
     c08:	304d6a4b 	subcc	r6, sp, fp, asr #20
     c0c:	674ba22f 	strbvs	sl, [fp, -pc, lsr #4]
     c10:	899e3203 	ldmibhi	lr, {r0, r1, r9, ip, sp}
     c14:	842e1703 	strthi	r1, [lr], #-1795	; 0xfffff8fd
     c18:	032e6703 			; <UNDEFINED> instruction: 0x032e6703
     c1c:	bddb4a3a 	vldrlt	s9, [fp, #232]	; 0xe8
     c20:	6d4d686a 	stclvs	8, cr6, [sp, #-424]	; 0xfffffe58
     c24:	83698683 	cmnhi	r9, #137363456	; 0x8300000
     c28:	03660a03 	cmneq	r6, #12288	; 0x3000
     c2c:	17036614 	smladne	r3, r4, r6, r6
     c30:	02006966 	andeq	r6, r0, #1671168	; 0x198000
     c34:	00680304 	rsbeq	r0, r8, r4, lsl #6
     c38:	08030402 	stmdaeq	r3, {r1, sl}
     c3c:	0402001e 	streq	r0, [r2], #-30	; 0xffffffe2
     c40:	06660601 	strbteq	r0, [r6], -r1, lsl #12
     c44:	4e4b4b6b 	vmlsmi.f64	d20, d11, d27
     c48:	67675050 			; <UNDEFINED> instruction: 0x67675050
     c4c:	846d5c08 	strbthi	r5, [sp], #-3080	; 0xfffff3f8
     c50:	6a30d72f 	bvs	c36914 <mailbuffer+0xc1f854>
     c54:	9f838330 	svcls	0x00838330
     c58:	be4f30a0 	cdplt	0, 4, cr3, cr15, cr0, {5}
     c5c:	03a18484 			; <UNDEFINED> instruction: 0x03a18484
     c60:	7603f20f 	strvc	pc, [r3], -pc, lsl #4
     c64:	69a0f72e 	stmibvs	r0!, {r1, r2, r3, r5, r8, r9, sl, ip, sp, lr, pc}
     c68:	6b68bff6 	blvs	1a30c48 <mailbuffer+0x1a19b88>
     c6c:	01040200 	mrseq	r0, R12_usr
     c70:	02006606 	andeq	r6, r0, #6291456	; 0x600000
     c74:	00ba0204 	adcseq	r0, sl, r4, lsl #4
     c78:	2e040402 	cdpcs	4, 0, cr0, cr4, cr2, {0}
     c7c:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
     c80:	4b854c06 	blmi	fe153ca0 <_estack+0xf6143ca0>
     c84:	d60a036b 	strle	r0, [sl], -fp, ror #6
     c88:	019d032f 	orrseq	r0, sp, pc, lsr #6
     c8c:	4b838a66 	blmi	fe0e362c <_estack+0xf60d362c>
     c90:	01000602 	tsteq	r0, r2, lsl #12
     c94:	0000a501 	andeq	sl, r0, r1, lsl #10
     c98:	49000200 	stmdbmi	r0, {r9}
     c9c:	02000000 	andeq	r0, r0, #0
     ca0:	0d0efb01 	vstreq	d15, [lr, #-4]
     ca4:	01010100 	mrseq	r0, (UNDEF: 17)
     ca8:	00000001 	andeq	r0, r0, r1
     cac:	01000001 	tsteq	r0, r1
     cb0:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; bfc <_start-0x7404>
     cb4:	6c612f65 	stclvs	15, cr2, [r1], #-404	; 0xfffffe6c
     cb8:	702f7865 	eorvc	r7, pc, r5, ror #16
     cbc:	72612f69 	rsbvc	r2, r1, #420	; 0x1a4
     cc0:	54522d6d 	ldrbpl	r2, [r2], #-3437	; 0xfffff293
     cc4:	442f534f 	strtmi	r5, [pc], #-847	; ccc <_start-0x7334>
     cc8:	2f6f6d65 	svccs	0x006f6d65
     ccc:	76697244 	strbtvc	r7, [r9], -r4, asr #4
     cd0:	00737265 	rsbseq	r7, r3, r5, ror #4
     cd4:	71726900 	cmnvc	r2, r0, lsl #18
     cd8:	0100632e 	tsteq	r0, lr, lsr #6
     cdc:	72690000 	rsbvc	r0, r9, #0
     ce0:	00682e71 	rsbeq	r2, r8, r1, ror lr
     ce4:	00000001 	andeq	r0, r0, r1
     ce8:	c0020500 	andgt	r0, r2, r0, lsl #10
     cec:	03000134 	movweq	r0, #308	; 0x134
     cf0:	319f011e 	orrscc	r0, pc, lr, lsl r1	; <UNPREDICTABLE>
     cf4:	089f8585 	ldmeq	pc, {r0, r2, r7, r8, sl, pc}	; <UNPREDICTABLE>
     cf8:	d673035b 			; <UNDEFINED> instruction: 0xd673035b
     cfc:	8a660f03 	bhi	1984910 <mailbuffer+0x196d850>
     d00:	f5674d4b 			; <UNDEFINED> instruction: 0xf5674d4b
     d04:	d767f567 	strble	pc, [r7, -r7, ror #10]!	; <UNPREDICTABLE>
     d08:	852f4b85 	strhi	r4, [pc, #-2949]!	; 18b <_start-0x7e75>
     d0c:	bb852f4b 	bllt	fe14ca40 <_estack+0xf613ca40>
     d10:	bb832f67 	bllt	fe0ccab4 <_estack+0xf60bcab4>
     d14:	a0838530 	addge	r8, r3, r0, lsr r5
     d18:	0a036767 	beq	daabc <mailbuffer+0xc39fc>
     d1c:	2e7803ba 	mrccs	3, 3, r0, cr8, cr10, {5}
     d20:	2ac06767 	bcs	ff01aac4 <_estack+0xf700aac4>
     d24:	bdbc6767 	ldclt	7, cr6, [ip, #412]!	; 0x19c
     d28:	6767a083 	strbvs	sl, [r7, -r3, lsl #1]!
     d2c:	03d60a03 	bicseq	r0, r6, #12288	; 0x3000
     d30:	67672e78 			; <UNDEFINED> instruction: 0x67672e78
     d34:	67672adc 			; <UNDEFINED> instruction: 0x67672adc
     d38:	000c02d8 	ldrdeq	r0, [ip], -r8
     d3c:	01a10101 			; <UNDEFINED> instruction: 0x01a10101
     d40:	00020000 	andeq	r0, r2, r0
     d44:	00000116 	andeq	r0, r0, r6, lsl r1
     d48:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     d4c:	0101000d 	tsteq	r1, sp
     d50:	00000101 	andeq	r0, r0, r1, lsl #2
     d54:	00000100 	andeq	r0, r0, r0, lsl #2
     d58:	6f682f01 	svcvs	0x00682f01
     d5c:	612f656d 			; <UNDEFINED> instruction: 0x612f656d
     d60:	2f78656c 	svccs	0x0078656c
     d64:	612f6970 			; <UNDEFINED> instruction: 0x612f6970
     d68:	522d6d72 	eorpl	r6, sp, #7296	; 0x1c80
     d6c:	2f534f54 	svccs	0x00534f54
     d70:	6f6d6544 	svcvs	0x006d6544
     d74:	6972442f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, lr}^
     d78:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
     d7c:	73752f00 	cmnvc	r5, #0, 30
     d80:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
     d84:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     d88:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xfffff09b
     d8c:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
     d90:	63616d2f 	cmnvs	r1, #3008	; 0xbc0
     d94:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
     d98:	73752f00 	cmnvc	r5, #0, 30
     d9c:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
     da0:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     da4:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xfffff09b
     da8:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
     dac:	7379732f 	cmnvc	r9, #-1140850688	; 0xbc000000
     db0:	73752f00 	cmnvc	r5, #0, 30
     db4:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
     db8:	63672f62 	cmnvs	r7, #392	; 0x188
     dbc:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
     dc0:	6f6e2d6d 	svcvs	0x006e2d6d
     dc4:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
     dc8:	2f696261 	svccs	0x00696261
     dcc:	2e332e36 	mrccs	14, 1, r2, cr3, cr6, {1}
     dd0:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
     dd4:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     dd8:	752f0065 	strvc	r0, [pc, #-101]!	; d7b <_start-0x7285>
     ddc:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
     de0:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
     de4:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
     de8:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
     dec:	67000062 	strvs	r0, [r0, -r2, rrx]
     df0:	2e6f6970 			; <UNDEFINED> instruction: 0x2e6f6970
     df4:	00010063 	andeq	r0, r1, r3, rrx
     df8:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
     dfc:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
     e00:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     e04:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
     e08:	00020068 	andeq	r0, r2, r8, rrx
     e0c:	636f6c00 	cmnvs	pc, #0, 24
     e10:	00682e6b 	rsbeq	r2, r8, fp, ror #28
     e14:	5f000003 	svcpl	0x00000003
     e18:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
     e1c:	00682e73 	rsbeq	r2, r8, r3, ror lr
     e20:	73000003 	movwvc	r0, #3
     e24:	65646474 	strbvs	r6, [r4, #-1140]!	; 0xfffffb8c
     e28:	00682e66 	rsbeq	r2, r8, r6, ror #28
     e2c:	72000004 	andvc	r0, r0, #4
     e30:	746e6565 	strbtvc	r6, [lr], #-1381	; 0xfffffa9b
     e34:	0300682e 	movweq	r6, #2094	; 0x82e
     e38:	74730000 	ldrbtvc	r0, [r3], #-0
     e3c:	62696c64 	rsbvs	r6, r9, #100, 24	; 0x6400
     e40:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
     e44:	735f0000 	cmpvc	pc, #0
     e48:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
     e4c:	00682e74 	rsbeq	r2, r8, r4, ror lr
     e50:	67000003 	strvs	r0, [r0, -r3]
     e54:	2e6f6970 			; <UNDEFINED> instruction: 0x2e6f6970
     e58:	00010068 	andeq	r0, r1, r8, rrx
     e5c:	05000000 	streq	r0, [r0, #-0]
     e60:	01386002 	teqeq	r8, r2
     e64:	00e90300 	rsceq	r0, r9, r0, lsl #6
     e68:	84a0a001 	strthi	sl, [r0], #1
     e6c:	59083d08 	stmdbpl	r8, {r3, r8, sl, fp, ip, sp}
     e70:	bc833d08 	stclt	13, cr3, [r3], {8}
     e74:	9f6883bb 	svcls	0x006883bb
     e78:	0867a067 	stmdaeq	r7!, {r0, r1, r2, r5, r6, sp, pc}^
     e7c:	3e082cb0 	mcrcc	12, 0, r2, cr8, cr0, {5}
     e80:	590883a0 	stmdbpl	r8, {r5, r7, r8, r9, pc}
     e84:	6883bba1 	stmvs	r3, {r0, r5, r7, r8, r9, fp, ip, sp, pc}
     e88:	ad085a08 	vstrge	s10, [r8, #-32]	; 0xffffffe0
     e8c:	303d0830 	eorscc	r0, sp, r0, lsr r8
     e90:	0830ad08 	ldmdaeq	r0!, {r3, r8, sl, fp, sp, pc}
     e94:	ad08303d 	stcge	0, cr3, [r8, #-244]	; 0xffffff0c
     e98:	303d0830 	eorscc	r0, sp, r0, lsr r8
     e9c:	bbbba130 	bllt	feee9364 <_estack+0xf6ed9364>
     ea0:	085a0868 	ldmdaeq	sl, {r3, r5, r6, fp}^
     ea4:	3d0830ad 	stccc	0, cr3, [r8, #-692]	; 0xfffffd4c
     ea8:	30ad0830 	adccc	r0, sp, r0, lsr r8
     eac:	08303d08 	ldmdaeq	r0!, {r3, r8, sl, fp, ip, sp}
     eb0:	3d0830ad 	stccc	0, cr3, [r8, #-692]	; 0xfffffd4c
     eb4:	83a03030 	movhi	r3, #48	; 0x30
     eb8:	674b8484 	strbvs	r8, [fp, -r4, lsl #9]
     ebc:	4b674b67 	blmi	19d3c60 <mailbuffer+0x19bcba0>
     ec0:	67676767 	strbvs	r6, [r7, -r7, ror #14]!
     ec4:	08676867 	stmdaeq	r7!, {r0, r1, r2, r5, r6, fp, sp, lr}^
     ec8:	689f8392 	ldmvs	pc, {r1, r4, r7, r8, r9, pc}	; <UNPREDICTABLE>
     ecc:	679fa09f 			; <UNDEFINED> instruction: 0x679fa09f
     ed0:	844b8385 	strbhi	r8, [fp], #-901	; 0xfffffc7b
     ed4:	040200a0 	streq	r0, [r2], #-160	; 0xffffff60
     ed8:	062e0601 	strteq	r0, [lr], -r1, lsl #12
     edc:	0a0283bb 	beq	a1dd0 <mailbuffer+0x8ad10>
     ee0:	fb010100 	blx	412ea <mailbuffer+0x2a22a>
     ee4:	02000000 	andeq	r0, r0, #0
     ee8:	0000d200 	andeq	sp, r0, r0, lsl #4
     eec:	fb010200 	blx	416f6 <mailbuffer+0x2a636>
     ef0:	01000d0e 	tsteq	r0, lr, lsl #26
     ef4:	00010101 	andeq	r0, r1, r1, lsl #2
     ef8:	00010000 	andeq	r0, r1, r0
     efc:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
     f00:	2f656d6f 	svccs	0x00656d6f
     f04:	78656c61 	stmdavc	r5!, {r0, r5, r6, sl, fp, sp, lr}^
     f08:	2f69702f 	svccs	0x0069702f
     f0c:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
     f10:	534f5452 	movtpl	r5, #62546	; 0xf452
     f14:	6d65442f 	cfstrdvs	mvd4, [r5, #-188]!	; 0xffffff44
     f18:	72442f6f 	subvc	r2, r4, #444	; 0x1bc
     f1c:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
     f20:	752f0073 	strvc	r0, [pc, #-115]!	; eb5 <_start-0x714b>
     f24:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
     f28:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
     f2c:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
     f30:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
     f34:	79732f62 	ldmdbvc	r3!, {r1, r5, r6, r8, r9, sl, fp, sp}^
     f38:	752f0073 	strvc	r0, [pc, #-115]!	; ecd <_start-0x7133>
     f3c:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; d78 <_start-0x7288>
     f40:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
     f44:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
     f48:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
     f4c:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
     f50:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
     f54:	332e362f 			; <UNDEFINED> instruction: 0x332e362f
     f58:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
     f5c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
     f60:	2f006564 	svccs	0x00006564
     f64:	2f727375 	svccs	0x00727375
     f68:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     f6c:	2f656475 	svccs	0x00656475
     f70:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
     f74:	00006269 	andeq	r6, r0, r9, ror #4
     f78:	6c69616d 	stfvse	f6, [r9], #-436	; 0xfffffe4c
     f7c:	2e786f62 	cdpcs	15, 7, cr6, cr8, cr2, {3}
     f80:	00010063 	andeq	r0, r1, r3, rrx
     f84:	636f6c00 	cmnvs	pc, #0, 24
     f88:	00682e6b 	rsbeq	r2, r8, fp, ror #28
     f8c:	5f000002 	svcpl	0x00000002
     f90:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
     f94:	00682e73 	rsbeq	r2, r8, r3, ror lr
     f98:	73000002 	movwvc	r0, #2
     f9c:	65646474 	strbvs	r6, [r4, #-1140]!	; 0xfffffb8c
     fa0:	00682e66 	rsbeq	r2, r8, r6, ror #28
     fa4:	72000003 	andvc	r0, r0, #3
     fa8:	746e6565 	strbtvc	r6, [lr], #-1381	; 0xfffffa9b
     fac:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     fb0:	74730000 	ldrbtvc	r0, [r3], #-0
     fb4:	62696c64 	rsbvs	r6, r9, #100, 24	; 0x6400
     fb8:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
     fbc:	00000000 	andeq	r0, r0, r0
     fc0:	3fd80205 	svccc	0x00d80205
     fc4:	10030001 	andne	r0, r3, r1
     fc8:	084c9f01 	stmdaeq	ip, {r0, r8, r9, sl, fp, ip, pc}^
     fcc:	682fd722 	stmdavs	pc!, {r1, r5, r8, r9, sl, ip, lr, pc}	; <UNPREDICTABLE>
     fd0:	819f4d84 	orrshi	r4, pc, r4, lsl #27
     fd4:	0367302f 	cmneq	r7, #47	; 0x2f
     fd8:	30349e7a 	eorscc	r9, r4, sl, ror lr
     fdc:	0008022f 	andeq	r0, r8, pc, lsr #4
     fe0:	01640101 	cmneq	r4, r1, lsl #2
     fe4:	00020000 	andeq	r0, r2, r0
     fe8:	0000005b 	andeq	r0, r0, fp, asr r0
     fec:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     ff0:	0101000d 	tsteq	r1, sp
     ff4:	00000101 	andeq	r0, r0, r1, lsl #2
     ff8:	00000100 	andeq	r0, r0, r0, lsl #2
     ffc:	6f682f01 	svcvs	0x00682f01
    1000:	612f656d 			; <UNDEFINED> instruction: 0x612f656d
    1004:	2f78656c 	svccs	0x0078656c
    1008:	612f6970 			; <UNDEFINED> instruction: 0x612f6970
    100c:	522d6d72 	eorpl	r6, sp, #7296	; 0x1c80
    1010:	2f534f54 	svccs	0x00534f54
    1014:	6f6d6544 	svcvs	0x006d6544
    1018:	6972442f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, lr}^
    101c:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
    1020:	69760000 	ldmdbvs	r6!, {}^	; <UNPREDICTABLE>
    1024:	2e6f6564 	cdpcs	5, 6, cr6, cr15, cr4, {3}
    1028:	00010063 	andeq	r0, r1, r3, rrx
    102c:	64697600 	strbtvs	r7, [r9], #-1536	; 0xfffffa00
    1030:	682e6f65 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, sl, fp, sp, lr}
    1034:	00000100 	andeq	r0, r0, r0, lsl #2
    1038:	5f357835 	svcpl	0x00357835
    103c:	746e6f66 	strbtvc	r6, [lr], #-3942	; 0xfffff09a
    1040:	0100682e 	tsteq	r0, lr, lsr #16
    1044:	00000000 	andeq	r0, r0, r0
    1048:	40c40205 	sbcmi	r0, r4, r5, lsl #4
    104c:	0e030001 	cdpeq	0, 0, cr0, cr3, cr1, {0}
    1050:	03f84a01 	mvnseq	r4, #4096	; 0x1000
    1054:	68674a1c 	stmdavs	r7!, {r2, r3, r4, r9, fp, lr}^
    1058:	67676867 	strbvs	r6, [r7, -r7, ror #16]!
    105c:	67a09f67 	strvs	r9, [r0, r7, ror #30]!
    1060:	a09f6767 	addsge	r6, pc, r7, ror #14
    1064:	69676767 	stmdbvs	r7!, {r0, r1, r2, r5, r6, r8, r9, sl, sp, lr}^
    1068:	67676767 	strbvs	r6, [r7, -r7, ror #14]!
    106c:	832f6968 			; <UNDEFINED> instruction: 0x832f6968
    1070:	67bb8948 	ldrvs	r8, [fp, r8, asr #18]!
    1074:	08bb7708 	ldmeq	fp!, {r3, r8, r9, sl, ip, sp, lr}
    1078:	4bd7bd91 	blmi	ff5f06c4 <_estack+0xf75e06c4>
    107c:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
    1080:	02006703 	andeq	r6, r0, #786432	; 0xc0000
    1084:	00810304 	addeq	r0, r1, r4, lsl #6
    1088:	06010402 	streq	r0, [r1], -r2, lsl #8
    108c:	04020066 	streq	r0, [r2], #-102	; 0xffffff9a
    1090:	00810602 	addeq	r0, r1, r2, lsl #12
    1094:	06010402 	streq	r0, [r1], -r2, lsl #8
    1098:	03870666 	orreq	r0, r7, #106954752	; 0x6600000
    109c:	67f6660e 	ldrbvs	r6, [r6, lr, lsl #12]!
    10a0:	676a6867 	strbvs	r6, [sl, -r7, ror #16]!
    10a4:	00e50868 	rsceq	r0, r5, r8, ror #16
    10a8:	08020402 	stmdaeq	r2, {r1, sl}
    10ac:	040200e1 	streq	r0, [r2], #-225	; 0xffffff1f
    10b0:	00660601 	rsbeq	r0, r6, r1, lsl #12
    10b4:	06020402 	streq	r0, [r2], -r2, lsl #8
    10b8:	04020065 	streq	r0, [r2], #-101	; 0xffffff9b
    10bc:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    10c0:	2fd7d96e 	svccs	0x00d7d96e
    10c4:	6b8664f3 	blvs	fe19a498 <_estack+0xf618a498>
    10c8:	d74b859f 			; <UNDEFINED> instruction: 0xd74b859f
    10cc:	01040200 	mrseq	r0, R12_usr
    10d0:	30066606 	andcc	r6, r6, r6, lsl #12
    10d4:	08bb9fd7 	ldmeq	fp!, {r0, r1, r2, r4, r6, r7, r8, r9, sl, fp, ip, pc}
    10d8:	009f4bca 	addseq	r4, pc, sl, asr #23
    10dc:	06020402 	streq	r0, [r2], -r2, lsl #8
    10e0:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
    10e4:	a0062e01 	andge	r2, r6, r1, lsl #28
    10e8:	03040200 	movweq	r0, #16896	; 0x4200
    10ec:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
    10f0:	0200d503 	andeq	sp, r0, #12582912	; 0xc00000
    10f4:	66060104 	strvs	r0, [r6], -r4, lsl #2
    10f8:	8467f506 	strbthi	pc, [r7], #-1286	; 0xfffffafa	; <UNPREDICTABLE>
    10fc:	00940867 	addseq	r0, r4, r7, ror #16
    1100:	06010402 	streq	r0, [r1], -r2, lsl #8
    1104:	65030666 	strvs	r0, [r3, #-1638]	; 0xfffff99a
    1108:	2e1c034a 	cdpcs	3, 1, cr0, cr12, cr10, {2}
    110c:	83bb3f08 			; <UNDEFINED> instruction: 0x83bb3f08
    1110:	082f4b85 	stmdaeq	pc!, {r0, r2, r7, r8, r9, fp, lr}	; <UNPREDICTABLE>
    1114:	08876421 	stmeq	r7, {r0, r5, sl, sp, lr}
    1118:	0859083d 	ldmdaeq	r9, {r0, r2, r3, r4, r5, fp}^
    111c:	08590859 	ldmdaeq	r9, {r0, r3, r4, r6, fp}^
    1120:	08590859 	ldmdaeq	r9, {r0, r3, r4, r6, fp}^
    1124:	bb3d0859 	bllt	f43290 <mailbuffer+0xf2c1d0>
    1128:	039e6d03 	orrseq	r6, lr, #3, 26	; 0xc0
    112c:	6a842e14 	bvs	fe10c984 <_estack+0xf60fc984>
    1130:	03040200 	movweq	r0, #16896	; 0x4200
    1134:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
    1138:	0200d503 	andeq	sp, r0, #12582912	; 0xc00000
    113c:	66060104 	strvs	r0, [r6], -r4, lsl #2
    1140:	3202f706 	andcc	pc, r2, #1572864	; 0x180000
    1144:	00140213 	andseq	r0, r4, r3, lsl r2
    1148:	012b0101 			; <UNDEFINED> instruction: 0x012b0101
    114c:	00020000 	andeq	r0, r2, r0
    1150:	000000ce 	andeq	r0, r0, lr, asr #1
    1154:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    1158:	0101000d 	tsteq	r1, sp
    115c:	00000101 	andeq	r0, r0, r1, lsl #2
    1160:	00000100 	andeq	r0, r0, r0, lsl #2
    1164:	6f682f01 	svcvs	0x00682f01
    1168:	612f656d 			; <UNDEFINED> instruction: 0x612f656d
    116c:	2f78656c 	svccs	0x0078656c
    1170:	612f6970 			; <UNDEFINED> instruction: 0x612f6970
    1174:	522d6d72 	eorpl	r6, sp, #7296	; 0x1c80
    1178:	2f534f54 	svccs	0x00534f54
    117c:	6f6d6544 	svcvs	0x006d6544
    1180:	6972442f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, lr}^
    1184:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
    1188:	73752f00 	cmnvc	r5, #0, 30
    118c:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    1190:	63672f62 	cmnvs	r7, #392	; 0x188
    1194:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    1198:	6f6e2d6d 	svcvs	0x006e2d6d
    119c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    11a0:	2f696261 	svccs	0x00696261
    11a4:	2e332e36 	mrccs	14, 1, r2, cr3, cr6, {1}
    11a8:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    11ac:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    11b0:	752f0065 	strvc	r0, [pc, #-101]!	; 1153 <_start-0x6ead>
    11b4:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    11b8:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    11bc:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    11c0:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    11c4:	79732f62 	ldmdbvc	r3!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    11c8:	752f0073 	strvc	r0, [pc, #-115]!	; 115d <_start-0x6ea3>
    11cc:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    11d0:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    11d4:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    11d8:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    11dc:	6d000062 	stcvs	0, cr0, [r0, #-392]	; 0xfffffe78
    11e0:	632e6d65 			; <UNDEFINED> instruction: 0x632e6d65
    11e4:	00000100 	andeq	r0, r0, r0, lsl #2
    11e8:	64647473 	strbtvs	r7, [r4], #-1139	; 0xfffffb8d
    11ec:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
    11f0:	00000200 	andeq	r0, r0, r0, lsl #4
    11f4:	6b636f6c 	blvs	18dcfac <mailbuffer+0x18c5eec>
    11f8:	0300682e 	movweq	r6, #2094	; 0x82e
    11fc:	745f0000 	ldrbvc	r0, [pc], #-0	; 1204 <_start-0x6dfc>
    1200:	73657079 	cmnvc	r5, #121	; 0x79
    1204:	0300682e 	movweq	r6, #2094	; 0x82e
    1208:	65720000 	ldrbvs	r0, [r2, #-0]!
    120c:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
    1210:	00030068 	andeq	r0, r3, r8, rrx
    1214:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    1218:	2e62696c 	vnmulcs.f16	s13, s4, s25	; <UNPREDICTABLE>
    121c:	00040068 	andeq	r0, r4, r8, rrx
    1220:	05000000 	streq	r0, [r0, #-0]
    1224:	014a5002 	cmpeq	sl, r2
    1228:	4bbb1800 	blmi	feec7230 <_estack+0xf6eb7230>
    122c:	2fa0b92f 	svccs	0x00a0b92f
    1230:	024bba84 	subeq	fp, fp, #132, 20	; 0x84000
    1234:	9f9f132a 	svcls	0x009f132a
    1238:	4bbf684b 	blmi	fefdb36c <_estack+0xf6fcb36c>
    123c:	a0f12f4b 	rscsge	r2, r1, fp, asr #30
    1240:	83bb842f 			; <UNDEFINED> instruction: 0x83bb842f
    1244:	b6d8bb2f 	ldrblt	fp, [r8], pc, lsr #22
    1248:	9f842fa3 	svcls	0x00842fa3
    124c:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
    1250:	062e0601 	strteq	r0, [lr], -r1, lsl #12
    1254:	842f5a08 	strthi	r5, [pc], #-2568	; 125c <_start-0x6da4>
    1258:	4b9f4cbb 	blmi	fe7d454c <_estack+0xf67c454c>
    125c:	9d2f5908 			; <UNDEFINED> instruction: 0x9d2f5908
    1260:	84842fa0 	strhi	r2, [r4], #4000	; 0xfa0
    1264:	03040200 	movweq	r0, #16896	; 0x4200
    1268:	02006606 	andeq	r6, r0, #6291456	; 0x600000
    126c:	06660104 	strbteq	r0, [r6], -r4, lsl #2
    1270:	4a862fbb 	bmi	fe18d164 <_estack+0xf617d164>
    1274:	01002402 	tsteq	r0, r2, lsl #8
    1278:	00016201 	andeq	r6, r1, r1, lsl #4
    127c:	e6000200 	str	r0, [r0], -r0, lsl #4
    1280:	02000000 	andeq	r0, r0, #0
    1284:	0d0efb01 	vstreq	d15, [lr, #-4]
    1288:	01010100 	mrseq	r0, (UNDEF: 17)
    128c:	00000001 	andeq	r0, r0, r1
    1290:	01000001 	tsteq	r0, r1
    1294:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 11e0 <_start-0x6e20>
    1298:	6c612f65 	stclvs	15, cr2, [r1], #-404	; 0xfffffe6c
    129c:	702f7865 	eorvc	r7, pc, r5, ror #16
    12a0:	72612f69 	rsbvc	r2, r1, #420	; 0x1a4
    12a4:	54522d6d 	ldrbpl	r2, [r2], #-3437	; 0xfffff293
    12a8:	2f2f534f 	svccs	0x002f534f
    12ac:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
    12b0:	534f5452 	movtpl	r5, #62546	; 0xf452
    12b4:	756f532f 	strbvc	r5, [pc, #-815]!	; f8d <_start-0x7073>
    12b8:	2f656372 	svccs	0x00656372
    12bc:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
    12c0:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    12c4:	6d654d2f 	stclvs	13, cr4, [r5, #-188]!	; 0xffffff44
    12c8:	676e614d 	strbvs	r6, [lr, -sp, asr #2]!
    12cc:	73752f00 	cmnvc	r5, #0, 30
    12d0:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    12d4:	63672f62 	cmnvs	r7, #392	; 0x188
    12d8:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    12dc:	6f6e2d6d 	svcvs	0x006e2d6d
    12e0:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    12e4:	2f696261 	svccs	0x00696261
    12e8:	2e332e36 	mrccs	14, 1, r2, cr3, cr6, {1}
    12ec:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    12f0:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    12f4:	752f0065 	strvc	r0, [pc, #-101]!	; 1297 <_start-0x6d69>
    12f8:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    12fc:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    1300:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    1304:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    1308:	79732f62 	ldmdbvc	r3!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    130c:	752f0073 	strvc	r0, [pc, #-115]!	; 12a1 <_start-0x6d5f>
    1310:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    1314:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    1318:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    131c:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    1320:	68000062 	stmdavs	r0, {r1, r5, r6}
    1324:	5f706165 	svcpl	0x00706165
    1328:	00632e34 	rsbeq	r2, r3, r4, lsr lr
    132c:	73000001 	movwvc	r0, #1
    1330:	65646474 	strbvs	r6, [r4, #-1140]!	; 0xfffffb8c
    1334:	00682e66 	rsbeq	r2, r8, r6, ror #28
    1338:	6c000002 	stcvs	0, cr0, [r0], {2}
    133c:	2e6b636f 	cdpcs	3, 6, cr6, cr11, cr15, {3}
    1340:	00030068 	andeq	r0, r3, r8, rrx
    1344:	79745f00 	ldmdbvc	r4!, {r8, r9, sl, fp, ip, lr}^
    1348:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    134c:	00030068 	andeq	r0, r3, r8, rrx
    1350:	65657200 	strbvs	r7, [r5, #-512]!	; 0xfffffe00
    1354:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    1358:	00000300 	andeq	r0, r0, r0, lsl #6
    135c:	6c647473 	cfstrdvs	mvd7, [r4], #-460	; 0xfffffe34
    1360:	682e6269 	stmdavs	lr!, {r0, r3, r5, r6, r9, sp, lr}
    1364:	00000400 	andeq	r0, r0, r0, lsl #8
    1368:	02050000 	andeq	r0, r5, #0
    136c:	00014e24 	andeq	r4, r1, r4, lsr #28
    1370:	01019203 	tsteq	r1, r3, lsl #4
    1374:	84324c84 	ldrthi	r4, [r2], #-3204	; 0xfffff37c
    1378:	85a26833 	strhi	r6, [r2, #2099]!	; 0x833
    137c:	04020086 	streq	r0, [r2], #-134	; 0xffffff7a
    1380:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    1384:	30674b86 	rsbcc	r4, r7, r6, lsl #23
    1388:	0200634b 	andeq	r6, r0, #738197505	; 0x2c000001
    138c:	9e060104 	adflss	f0, f6, f4
    1390:	a2a28a06 	adcge	r8, r2, #24576	; 0x6000
    1394:	bb86f785 	bllt	fe1bf1b0 <_estack+0xf61af1b0>
    1398:	03da4d69 	bicseq	r4, sl, #6720	; 0x1a40
    139c:	2fbc2e0c 	svccs	0x00bc2e0c
    13a0:	6a4d83da 	bvs	1362310 <mailbuffer+0x134b250>
    13a4:	d7314ca1 	ldrle	r4, [r1, -r1, lsr #25]!
    13a8:	4b86304c 	blmi	fe18d4e0 <_estack+0xf617d4e0>
    13ac:	864ca24b 	strbhi	sl, [ip], -fp, asr #4
    13b0:	67660903 	strbvs	r0, [r6, -r3, lsl #18]!
    13b4:	689f836a 	ldmvs	pc, {r1, r3, r5, r6, r8, r9, pc}	; <UNPREDICTABLE>
    13b8:	9f4b8683 	svcls	0x004b8683
    13bc:	88f6bb85 	ldmhi	r6!, {r0, r2, r7, r8, r9, fp, ip, sp, pc}^
    13c0:	03040200 	movweq	r0, #16896	; 0x4200
    13c4:	02006606 	andeq	r6, r0, #6291456	; 0x600000
    13c8:	06660104 	strbteq	r0, [r6], -r4, lsl #2
    13cc:	d7d84ba5 	ldrble	r4, [r8, r5, lsr #23]
    13d0:	bdf44b4f 			; <UNDEFINED> instruction: 0xbdf44b4f
    13d4:	89a3bef3 	stmibhi	r3!, {r0, r1, r4, r5, r6, r7, r9, sl, fp, ip, sp, pc}
    13d8:	0c026884 	stceq	8, cr6, [r2], {132}	; 0x84
    13dc:	68010100 	stmdavs	r1, {r8}
    13e0:	02000001 	andeq	r0, r0, #1
    13e4:	0000f600 	andeq	pc, r0, r0, lsl #12
    13e8:	fb010200 	blx	41bf2 <mailbuffer+0x2ab32>
    13ec:	01000d0e 	tsteq	r0, lr, lsl #26
    13f0:	00010101 	andeq	r0, r1, r1, lsl #2
    13f4:	00010000 	andeq	r0, r1, r0
    13f8:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    13fc:	2f656d6f 	svccs	0x00656d6f
    1400:	78656c61 	stmdavc	r5!, {r0, r5, r6, sl, fp, sp, lr}^
    1404:	2f69702f 	svccs	0x0069702f
    1408:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    140c:	534f5452 	movtpl	r5, #62546	; 0xf452
    1410:	6d65442f 	cfstrdvs	mvd4, [r5, #-188]!	; 0xffffff44
    1414:	752f006f 	strvc	r0, [pc, #-111]!	; 13ad <_start-0x6c53>
    1418:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    141c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    1420:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    1424:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    1428:	79732f62 	ldmdbvc	r3!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    142c:	752f0073 	strvc	r0, [pc, #-115]!	; 13c1 <_start-0x6c3f>
    1430:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 126c <_start-0x6d94>
    1434:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    1438:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    143c:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    1440:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    1444:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    1448:	332e362f 			; <UNDEFINED> instruction: 0x332e362f
    144c:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    1450:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    1454:	2f006564 	svccs	0x00006564
    1458:	2f727375 	svccs	0x00727375
    145c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    1460:	2f656475 	svccs	0x00656475
    1464:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    1468:	2f006269 	svccs	0x00006269
    146c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    1470:	656c612f 	strbvs	r6, [ip, #-303]!	; 0xfffffed1
    1474:	69702f78 	ldmdbvs	r0!, {r3, r4, r5, r6, r8, r9, sl, fp, sp}^
    1478:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    147c:	4f54522d 	svcmi	0x0054522d
    1480:	65442f53 	strbvs	r2, [r4, #-3923]	; 0xfffff0ad
    1484:	442f6f6d 	strtmi	r6, [pc], #-3949	; 148c <_start-0x6b74>
    1488:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    148c:	00007372 	andeq	r7, r0, r2, ror r3
    1490:	6e69616d 	powvsez	f6, f1, #5.0
    1494:	0100632e 	tsteq	r0, lr, lsr #6
    1498:	6f6c0000 	svcvs	0x006c0000
    149c:	682e6b63 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
    14a0:	00000200 	andeq	r0, r0, r0, lsl #4
    14a4:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    14a8:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    14ac:	00000200 	andeq	r0, r0, r0, lsl #4
    14b0:	64647473 	strbtvs	r7, [r4], #-1139	; 0xfffffb8d
    14b4:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
    14b8:	00000300 	andeq	r0, r0, r0, lsl #6
    14bc:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
    14c0:	00682e74 	rsbeq	r2, r8, r4, ror lr
    14c4:	73000002 	movwvc	r0, #2
    14c8:	696c6474 	stmdbvs	ip!, {r2, r4, r5, r6, sl, sp, lr}^
    14cc:	00682e62 	rsbeq	r2, r8, r2, ror #28
    14d0:	76000004 	strvc	r0, [r0], -r4
    14d4:	6f656469 	svcvs	0x00656469
    14d8:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
    14dc:	00000000 	andeq	r0, r0, r0
    14e0:	52f80205 	rscspl	r0, r8, #1342177280	; 0x50000000
    14e4:	cd030001 	stcgt	0, cr0, [r3, #-4]
    14e8:	00840100 	addeq	r0, r4, r0, lsl #2
    14ec:	4c010402 	cfstrsmi	mvf0, [r1], {2}
    14f0:	01040200 	mrseq	r0, R12_usr
    14f4:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
    14f8:	02006701 	andeq	r6, r0, #262144	; 0x40000
    14fc:	34480104 	strbcc	r0, [r8], #-260	; 0xfffffefc
    1500:	04020084 	streq	r0, [r2], #-132	; 0xffffff7c
    1504:	02004c01 	andeq	r4, r0, #256	; 0x100
    1508:	00670104 	rsbeq	r0, r7, r4, lsl #2
    150c:	4b010402 	blmi	4251c <mailbuffer+0x2b45c>
    1510:	01040200 	mrseq	r0, R12_usr
    1514:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
    1518:	83354701 	teqhi	r5, #262144	; 0x40000
    151c:	01040200 	mrseq	r0, R12_usr
    1520:	03836a68 	orreq	r6, r3, #104, 20	; 0x68000
    1524:	02004a18 	andeq	r4, r0, #24, 20	; 0x18000
    1528:	00300104 	eorseq	r0, r0, r4, lsl #2
    152c:	67010402 	strvs	r0, [r1, -r2, lsl #8]
    1530:	01040200 	mrseq	r0, R12_usr
    1534:	2e0e0349 	cdpcs	3, 0, cr0, cr14, cr9, {2}
    1538:	08316867 	ldmdaeq	r1!, {r0, r1, r2, r5, r6, fp, sp, lr}
    153c:	08920891 	ldmeq	r2, {r0, r4, r7, fp}
    1540:	04020092 	streq	r0, [r2], #-146	; 0xffffff6e
    1544:	0e023401 	cdpeq	4, 0, cr3, cr2, cr1, {0}
    1548:	64010100 	strvs	r0, [r1], #-256	; 0xffffff00
    154c:	02000001 	andeq	r0, r0, #1
    1550:	00004200 	andeq	r4, r0, r0, lsl #4
    1554:	fb010200 	blx	41d5e <mailbuffer+0x2ac9e>
    1558:	01000d0e 	tsteq	r0, lr, lsl #26
    155c:	00010101 	andeq	r0, r1, r1, lsl #2
    1560:	00010000 	andeq	r0, r1, r0
    1564:	2e2e0100 	sufcse	f0, f6, f0
    1568:	2f2e2e2f 	svccs	0x002e2e2f
    156c:	732f2e2e 			; <UNDEFINED> instruction: 0x732f2e2e
    1570:	6c2f6372 	stcvs	3, cr6, [pc], #-456	; 13b0 <_start-0x6c50>
    1574:	63676269 	cmnvs	r7, #-1879048186	; 0x90000006
    1578:	6f632f63 	svcvs	0x00632f63
    157c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1580:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    1584:	65690000 	strbvs	r0, [r9, #-0]!
    1588:	35376565 	ldrcc	r6, [r7, #-1381]!	; 0xfffffa9b
    158c:	66642d34 			; <UNDEFINED> instruction: 0x66642d34
    1590:	0100532e 	tsteq	r0, lr, lsr #6
    1594:	00000000 	andeq	r0, r0, r0
    1598:	54ac0205 	strtpl	r0, [ip], #517	; 0x205
    159c:	cc030001 	stcgt	0, cr0, [r3], {1}
    15a0:	332f0100 			; <UNDEFINED> instruction: 0x332f0100
    15a4:	2f2f3536 	svccs	0x002f3536
    15a8:	2f2f3030 	svccs	0x002f3030
    15ac:	2f322f2f 	svccs	0x00322f2f
    15b0:	2f2f2f30 	svccs	0x002f2f30
    15b4:	2f2f2f2f 	svccs	0x002f2f2f
    15b8:	4d30332f 	ldcmi	3, cr3, [r0, #-188]!	; 0xffffff44
    15bc:	2f2f2f2f 	svccs	0x002f2f2f
    15c0:	2f312f33 	svccs	0x00312f33
    15c4:	2f332f2f 	svccs	0x00332f2f
    15c8:	09032f33 	stmdbeq	r3, {r0, r1, r4, r5, r8, r9, sl, fp, sp}
    15cc:	2f2f312e 	svccs	0x002f312e
    15d0:	2f2f2f2f 	svccs	0x002f2f2f
    15d4:	2f2f2f2f 	svccs	0x002f2f2f
    15d8:	2f2f302f 	svccs	0x002f302f
    15dc:	2f352f32 	svccs	0x00352f32
    15e0:	2f2f332f 	svccs	0x002f332f
    15e4:	2f2f312f 	svccs	0x002f312f
    15e8:	2f2f312f 	svccs	0x002f312f
    15ec:	2f2f3035 	svccs	0x002f3035
    15f0:	2f4e2f2f 	svccs	0x004e2f2f
    15f4:	2f2f2f2f 	svccs	0x002f2f2f
    15f8:	2f2f2f35 	svccs	0x002f2f35
    15fc:	2f2f2f2f 	svccs	0x002f2f2f
    1600:	2f2f2f2f 	svccs	0x002f2f2f
    1604:	2f2f2f2f 	svccs	0x002f2f2f
    1608:	032f2f2f 			; <UNDEFINED> instruction: 0x032f2f2f
    160c:	2f2f2e10 	svccs	0x002f2e10
    1610:	2f2f322f 	svccs	0x002f322f
    1614:	30322f2f 	eorscc	r2, r2, pc, lsr #30
    1618:	322f352f 	eorcc	r3, pc, #197132288	; 0xbc00000
    161c:	4e2f2f30 	mcrmi	15, 1, r2, cr15, cr0, {1}
    1620:	2f2f2f2f 	svccs	0x002f2f2f
    1624:	2f2f2f31 	svccs	0x002f2f31
    1628:	2f4e2f2f 	svccs	0x004e2f2f
    162c:	2f2f2f2f 	svccs	0x002f2f2f
    1630:	4f2f2f4e 	svcmi	0x002f2f4e
    1634:	2f2f302f 	svccs	0x002f302f
    1638:	2f30322f 	svccs	0x0030322f
    163c:	312f3030 			; <UNDEFINED> instruction: 0x312f3030
    1640:	4c2f2f30 	stcmi	15, cr2, [pc], #-192	; 1588 <_start-0x6a78>
    1644:	4d2f2f32 	stcmi	15, cr2, [pc, #-200]!	; 1584 <_start-0x6a7c>
    1648:	302f2f2f 	eorcc	r2, pc, pc, lsr #30
    164c:	2f304b2f 	svccs	0x00304b2f
    1650:	2f2f324b 	svccs	0x002f324b
    1654:	4a09032f 	bmi	242318 <mailbuffer+0x22b258>
    1658:	302f2f30 	eorcc	r2, pc, r0, lsr pc	; <UNPREDICTABLE>
    165c:	2f302f2f 	svccs	0x00302f2f
    1660:	0c032f2f 	stceq	15, cr2, [r3], {47}	; 0x2f
    1664:	302f304a 	eorcc	r3, pc, sl, asr #32
    1668:	322f2f34 	eorcc	r2, pc, #52, 30	; 0xd0
    166c:	2e0a032f 	cdpcs	3, 0, cr0, cr10, cr15, {1}
    1670:	34302f30 	ldrtcc	r2, [r0], #-3888	; 0xfffff0d0
    1674:	32302f2f 	eorscc	r2, r0, #47, 30	; 0xbc
    1678:	2e0a032f 	cdpcs	3, 0, cr0, cr10, cr15, {1}
    167c:	302f2f2f 	eorcc	r2, pc, pc, lsr #30
    1680:	302f2f2f 	eorcc	r2, pc, pc, lsr #30
    1684:	34312f30 	ldrtcc	r2, [r1], #-3888	; 0xfffff0d0
    1688:	032f2f2f 			; <UNDEFINED> instruction: 0x032f2f2f
    168c:	30302e0b 	eorscc	r2, r0, fp, lsl #28
    1690:	09032f34 	stmdbeq	r3, {r2, r4, r5, r8, r9, sl, fp, sp}
    1694:	3430302e 	ldrtcc	r3, [r0], #-46	; 0xffffffd2
    1698:	312f332f 			; <UNDEFINED> instruction: 0x312f332f
    169c:	2e09032f 	cdpcs	3, 0, cr0, cr9, cr15, {1}
    16a0:	302f312f 	eorcc	r3, pc, pc, lsr #2
    16a4:	302f302f 	eorcc	r3, pc, pc, lsr #32
    16a8:	2f2f2f2f 	svccs	0x002f2f2f
    16ac:	02022f2f 	andeq	r2, r2, #47, 30	; 0xbc
    16b0:	6e010100 	adfvss	f0, f1, f0
    16b4:	02000000 	andeq	r0, r0, #0
    16b8:	00004200 	andeq	r4, r0, r0, lsl #4
    16bc:	fb010200 	blx	41ec6 <mailbuffer+0x2ae06>
    16c0:	01000d0e 	tsteq	r0, lr, lsl #26
    16c4:	00010101 	andeq	r0, r1, r1, lsl #2
    16c8:	00010000 	andeq	r0, r1, r0
    16cc:	2e2e0100 	sufcse	f0, f6, f0
    16d0:	2f2e2e2f 	svccs	0x002e2e2f
    16d4:	732f2e2e 			; <UNDEFINED> instruction: 0x732f2e2e
    16d8:	6c2f6372 	stcvs	3, cr6, [pc], #-456	; 1518 <_start-0x6ae8>
    16dc:	63676269 	cmnvs	r7, #-1879048186	; 0x90000006
    16e0:	6f632f63 	svcvs	0x00632f63
    16e4:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    16e8:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    16ec:	65690000 	strbvs	r0, [r9, #-0]!
    16f0:	35376565 	ldrcc	r6, [r7, #-1381]!	; 0xfffffa9b
    16f4:	66642d34 			; <UNDEFINED> instruction: 0x66642d34
    16f8:	0100532e 	tsteq	r0, lr, lsr #6
    16fc:	00000000 	andeq	r0, r0, r0
    1700:	58c80205 	stmiapl	r8, {r0, r2, r9}^
    1704:	f4030001 	vst4.8	{d0-d3}, [r3], r1
    1708:	2f2f010a 	svccs	0x002f010a
    170c:	2f2f2f2f 	svccs	0x002f2f2f
    1710:	2f2f2f31 	svccs	0x002f2f31
    1714:	302f302f 	eorcc	r3, pc, pc, lsr #32
    1718:	2f2f302f 	svccs	0x002f302f
    171c:	2f302f30 	svccs	0x00302f30
    1720:	01000202 	tsteq	r0, r2, lsl #4
    1724:	00012401 	andeq	r2, r1, r1, lsl #8
    1728:	d6000200 	strle	r0, [r0], -r0, lsl #4
    172c:	02000000 	andeq	r0, r0, #0
    1730:	0d0efb01 	vstreq	d15, [lr, #-4]
    1734:	01010100 	mrseq	r0, (UNDEF: 17)
    1738:	00000001 	andeq	r0, r0, r1
    173c:	01000001 	tsteq	r0, r1
    1740:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    1744:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    1748:	2f2e2e2f 	svccs	0x002e2e2f
    174c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    1750:	656e2f2e 	strbvs	r2, [lr, #-3886]!	; 0xfffff0d2
    1754:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    1758:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    175c:	616d2f63 	cmnvs	sp, r3, ror #30
    1760:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    1764:	72612f65 	rsbvc	r2, r1, #404	; 0x194
    1768:	2e2e2f6d 	cdpcs	15, 2, cr2, cr14, cr13, {3}
    176c:	2f2e2e2f 	svccs	0x002e2e2f
    1770:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    1774:	2f00676e 	svccs	0x0000676e
    1778:	2f727375 	svccs	0x00727375
    177c:	2f62696c 	svccs	0x0062696c
    1780:	2f636367 	svccs	0x00636367
    1784:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    1788:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    178c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    1790:	2e352f69 	cdpcs	15, 3, cr2, cr5, cr9, {3}
    1794:	2f312e34 	svccs	0x00312e34
    1798:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    179c:	00656475 	rsbeq	r6, r5, r5, ror r4
    17a0:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    17a4:	6e2f646c 	cdpvs	4, 2, cr6, cr15, cr12, {3}
    17a8:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    17ac:	67382d62 	ldrvs	r2, [r8, -r2, ror #26]!
    17b0:	52596c4a 	subspl	r6, r9, #18944	; 0x4a00
    17b4:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    17b8:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    17bc:	2e342e32 	mrccs	14, 1, r2, cr4, cr2, {1}
    17c0:	30322e30 	eorscc	r2, r2, r0, lsr lr
    17c4:	35303631 	ldrcc	r3, [r0, #-1585]!	; 0xfffff9cf
    17c8:	6e2f3732 	mcrvs	7, 1, r3, cr15, cr2, {1}
    17cc:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    17d0:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    17d4:	692f6362 	stmdbvs	pc!, {r1, r5, r6, r8, r9, sp, lr}	; <UNPREDICTABLE>
    17d8:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    17dc:	00006564 	andeq	r6, r0, r4, ror #10
    17e0:	636d656d 	cmnvs	sp, #457179136	; 0x1b400000
    17e4:	632e7970 			; <UNDEFINED> instruction: 0x632e7970
    17e8:	00000100 	andeq	r0, r0, r0, lsl #2
    17ec:	64647473 	strbtvs	r7, [r4], #-1139	; 0xfffffb8d
    17f0:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
    17f4:	00000200 	andeq	r0, r0, r0, lsl #4
    17f8:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    17fc:	682e676e 	stmdavs	lr!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
    1800:	00000300 	andeq	r0, r0, r0, lsl #6
    1804:	02050000 	andeq	r0, r5, #0
    1808:	00015924 	andeq	r5, r1, r4, lsr #18
    180c:	03013903 	movweq	r3, #6403	; 0x1903
    1810:	6b030115 	blvs	c1c6c <mailbuffer+0xaabac>
    1814:	2e15032e 	cdpcs	3, 1, cr0, cr5, cr14, {1}
    1818:	01040200 	mrseq	r0, R12_usr
    181c:	06662e06 	strbteq	r2, [r6], -r6, lsl #28
    1820:	2f2f2f6e 	svccs	0x002f2f6e
    1824:	2e7a032f 	cdpcs	3, 7, cr0, cr10, cr15, {1}
    1828:	2f2f2f30 	svccs	0x002f2f30
    182c:	9e0a0361 	cdpls	3, 0, cr0, cr10, cr1, {3}
    1830:	2d4d337d 	stclcs	3, cr3, [sp, #-500]	; 0xfffffe0c
    1834:	032c302c 			; <UNDEFINED> instruction: 0x032c302c
    1838:	2203f269 	andcs	pc, r3, #-1879048186	; 0x90000006
    183c:	2f2d832e 	svccs	0x002d832e
    1840:	5903332d 	stmdbpl	r3, {r0, r2, r3, r5, r8, r9, ip, sp}
    1844:	4a17034a 	bmi	5c2574 <mailbuffer+0x5ab4b4>
    1848:	01000402 	tsteq	r0, r2, lsl #8
    184c:	Address 0x000000000000184c is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	5152496e 	cmppl	r2, lr, ror #18
       4:	43787000 	cmnmi	r8, #0
       8:	0065646f 	rsbeq	r6, r5, pc, ror #8
       c:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
      10:	6b636954 	blvs	18da568 <mailbuffer+0x18c34a8>
      14:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
      18:	6f682f00 	svcvs	0x00682f00
      1c:	612f656d 			; <UNDEFINED> instruction: 0x612f656d
      20:	2f78656c 	svccs	0x0078656c
      24:	612f6970 			; <UNDEFINED> instruction: 0x612f6970
      28:	522d6d72 	eorpl	r6, sp, #7296	; 0x1c80
      2c:	2f534f54 	svccs	0x00534f54
      30:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
      34:	534f5452 	movtpl	r5, #62546	; 0xf452
      38:	756f532f 	strbvc	r5, [pc, #-815]!	; fffffd11 <_estack+0xf7fefd11>
      3c:	2f656372 	svccs	0x00656372
      40:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
      44:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
      48:	4343472f 	movtmi	r4, #14127	; 0x372f
      4c:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
      50:	72656270 	rsbvc	r6, r5, #112, 4
      54:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
      58:	726f702f 	rsbvc	r7, pc, #47	; 0x2f
      5c:	00632e74 	rsbeq	r2, r3, r4, ror lr
      60:	53767270 	cmnpl	r6, #112, 4
      64:	70757465 	rsbsvc	r7, r5, r5, ror #8
      68:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
      6c:	746e4972 	strbtvc	r4, [lr], #-2418	; 0xfffff68e
      70:	75727265 	ldrbvc	r7, [r2, #-613]!	; 0xfffffd9b
      74:	70007470 	andvc	r7, r0, r0, ror r4
      78:	61726150 	cmnvs	r2, r0, asr r1
      7c:	7870006d 	ldmdavc	r0!, {r0, r2, r3, r5, r6}^
      80:	6769724f 	strbvs	r7, [r9, -pc, asr #4]!
      84:	6c616e69 	stclvs	14, cr6, [r1], #-420	; 0xfffffe5c
      88:	00534f54 	subseq	r4, r3, r4, asr pc
      8c:	4d43425f 	sfmmi	f4, 2, [r3, #-380]	; 0xfffffe84
      90:	35333832 	ldrcc	r3, [r3, #-2098]!	; 0xfffff7ce
      94:	4d49545f 	cfstrdmi	mvd5, [r9, #-380]	; 0xfffffe84
      98:	525f5245 	subspl	r5, pc, #1342177284	; 0x50000004
      9c:	00534745 	subseq	r4, r3, r5, asr #14
      a0:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
      a4:	6e752074 	mrcvs	0, 3, r2, cr5, cr4, {3}
      a8:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
      ac:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
      b0:	7000746e 	andvc	r7, r0, lr, ror #8
      b4:	53415464 	movtpl	r5, #5220	; 0x1464
      b8:	4f435f4b 	svcmi	0x00435f4b
      bc:	76004544 	strvc	r4, [r0], -r4, asr #10
      c0:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xfffff0b0
      c4:	53646e45 	cmnpl	r4, #1104	; 0x450
      c8:	64656863 	strbtvs	r6, [r5], #-2147	; 0xfffff79d
      cc:	72656c75 	rsbvc	r6, r5, #29952	; 0x7500
      d0:	69547600 	ldmdbvs	r4, {r9, sl, ip, sp, lr}^
      d4:	53496b63 	movtpl	r6, #39779	; 0x9b63
      d8:	69730052 	ldmdbvs	r3!, {r1, r4, r6}^
      dc:	7974657a 	ldmdbvc	r4!, {r1, r3, r4, r5, r6, r8, sl, sp, lr}^
      e0:	47006570 	smlsdxmi	r0, r0, r5, r6
      e4:	4320554e 			; <UNDEFINED> instruction: 0x4320554e
      e8:	36203131 			; <UNDEFINED> instruction: 0x36203131
      ec:	312e332e 			; <UNDEFINED> instruction: 0x312e332e
      f0:	31303220 	teqcc	r0, r0, lsr #4
      f4:	32363037 	eorscc	r3, r6, #55	; 0x37
      f8:	6d2d2030 	stcvs	0, cr2, [sp, #-192]!	; 0xffffff40
      fc:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
     100:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
     104:	207a3676 	rsbscs	r3, sl, r6, ror r6
     108:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
     10c:	613d6863 	teqvs	sp, r3, ror #16
     110:	36766d72 			; <UNDEFINED> instruction: 0x36766d72
     114:	6d2d207a 	stcvs	0, cr2, [sp, #-488]!	; 0xfffffe18
     118:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
     11c:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
     120:	207a3676 	rsbscs	r3, sl, r6, ror r6
     124:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
     128:	672d2067 	strvs	r2, [sp, -r7, rrx]!
     12c:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
     130:	6f6c2067 	svcvs	0x006c2067
     134:	6920676e 	stmdbvs	r0!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
     138:	7000746e 	andvc	r7, r0, lr, ror #8
     13c:	72615076 	rsbvc	r5, r1, #118	; 0x76
     140:	74656d61 	strbtvc	r6, [r5], #-3425	; 0xfffff29f
     144:	00737265 	rsbseq	r7, r3, r5, ror #4
     148:	67655270 			; <UNDEFINED> instruction: 0x67655270
     14c:	78700073 	ldmdavc	r0!, {r0, r1, r4, r5, r6}^
     150:	4f706f54 	svcmi	0x00706f54
     154:	61745366 	cmnvs	r4, r6, ror #6
     158:	6c006b63 			; <UNDEFINED> instruction: 0x6c006b63
     15c:	20676e6f 	rsbcs	r6, r7, pc, ror #28
     160:	62756f64 	rsbsvs	r6, r5, #100, 30	; 0x190
     164:	7800656c 	stmdavc	r0, {r2, r3, r5, r6, r8, sl, sp, lr}
     168:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xfffff0b0
     16c:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
     170:	68635374 	stmdavs	r3!, {r2, r4, r5, r6, r8, r9, ip, lr}^
     174:	6c756465 	cfldrdvs	mvd6, [r5], #-404	; 0xfffffe6c
     178:	70007265 	andvc	r7, r0, r5, ror #4
     17c:	726f5078 	rsbvc	r5, pc, #120	; 0x78
     180:	696e4974 	stmdbvs	lr!, {r2, r4, r5, r6, r8, fp, lr}^
     184:	6c616974 			; <UNDEFINED> instruction: 0x6c616974
     188:	53657369 	cmnpl	r5, #-1543503871	; 0xa4000001
     18c:	6b636174 	blvs	18d8764 <mailbuffer+0x18c16a4>
     190:	436c7500 	cmnmi	ip, #0, 10
     194:	61706d6f 	cmnvs	r0, pc, ror #26
     198:	614d6572 	hvcvs	54866	; 0xd652
     19c:	00686374 	rsbeq	r6, r8, r4, ror r3
     1a0:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; ec <_start-0x7f14>
     1a4:	6c612f65 	stclvs	15, cr2, [r1], #-404	; 0xfffffe6c
     1a8:	702f7865 	eorvc	r7, pc, r5, ror #16
     1ac:	72612f69 	rsbvc	r2, r1, #420	; 0x1a4
     1b0:	54522d6d 	ldrbpl	r2, [r2], #-3437	; 0xfffff293
     1b4:	462f534f 	strtmi	r5, [pc], -pc, asr #6
     1b8:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
     1bc:	2f534f54 	svccs	0x00534f54
     1c0:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     1c4:	702f6563 	eorvc	r6, pc, r3, ror #10
     1c8:	6174726f 	cmnvs	r4, pc, ror #4
     1cc:	2f656c62 	svccs	0x00656c62
     1d0:	2f434347 	svccs	0x00434347
     1d4:	70736152 	rsbsvc	r6, r3, r2, asr r1
     1d8:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
     1dc:	2f695079 	svccs	0x00695079
     1e0:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
     1e4:	2e727369 	cdpcs	3, 7, cr7, cr2, cr9, {3}
     1e8:	50760063 	rsbspl	r0, r6, r3, rrx
     1ec:	4574726f 	ldrbmi	r7, [r4, #-623]!	; 0xfffffd91
     1f0:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     1f4:	74697243 	strbtvc	r7, [r9], #-579	; 0xfffffdbd
     1f8:	6c616369 	stclvs	3, cr6, [r1], #-420	; 0xfffffe5c
     1fc:	436c7500 	cmnmi	ip, #0, 10
     200:	69746972 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     204:	4e6c6163 	powmiez	f6, f4, f3
     208:	69747365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}^
     20c:	7600676e 	strvc	r6, [r0], -lr, ror #14
     210:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xfffff0b0
     214:	74697845 	strbtvc	r7, [r9], #-2117	; 0xfffff7bb
     218:	74697243 	strbtvc	r7, [r9], #-579	; 0xfffffdbd
     21c:	6c616369 	stclvs	3, cr6, [r1], #-420	; 0xfffffe5c
     220:	6f507600 	svcvs	0x00507600
     224:	53497472 	movtpl	r7, #38002	; 0x9472
     228:	61745352 	cmnvs	r4, r2, asr r3
     22c:	69467472 	stmdbvs	r6, {r1, r4, r5, r6, sl, ip, sp, lr}^
     230:	54747372 	ldrbtpl	r7, [r4], #-882	; 0xfffffc8e
     234:	006b7361 	rsbeq	r7, fp, r1, ror #6
     238:	726f5076 	rsbvc	r5, pc, #118	; 0x76
     23c:	65695974 	strbvs	r5, [r9, #-2420]!	; 0xfffff68c
     240:	7250646c 	subsvc	r6, r0, #108, 8	; 0x6c000000
     244:	7365636f 	cmnvc	r5, #-1140850687	; 0xbc000001
     248:	00726f73 	rsbseq	r6, r2, r3, ror pc
     24c:	65724676 	ldrbvs	r4, [r2, #-1654]!	; 0xfffff98a
     250:	4f545265 	svcmi	0x00545265
     254:	53495f53 	movtpl	r5, #40787	; 0x9f53
     258:	5f670052 	svcpl	0x00670052
     25c:	61745362 	cmnvs	r4, r2, ror #6
     260:	64657472 	strbtvs	r7, [r5], #-1138	; 0xfffffb8e
     264:	43787000 	cmnmi	r8, #0
     268:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0xfffffd8b
     26c:	4354746e 	cmpmi	r4, #1845493760	; 0x6e000000
     270:	682f0042 	stmdavs	pc!, {r1, r6}	; <UNPREDICTABLE>
     274:	2f656d6f 	svccs	0x00656d6f
     278:	78656c61 	stmdavc	r5!, {r0, r5, r6, sl, fp, sp, lr}^
     27c:	2f69702f 	svccs	0x0069702f
     280:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
     284:	534f5452 	movtpl	r5, #62546	; 0xf452
     288:	6572462f 	ldrbvs	r4, [r2, #-1583]!	; 0xfffff9d1
     28c:	4f545265 	svcmi	0x00545265
     290:	6f532f53 	svcvs	0x00532f53
     294:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
     298:	6f72632f 	svcvs	0x0072632f
     29c:	6e697475 	mcrvs	4, 3, r7, cr9, cr5, {3}
     2a0:	00632e65 	rsbeq	r2, r3, r5, ror #28
     2a4:	6e557870 	mrcvs	8, 2, r7, cr5, cr0, {3}
     2a8:	636f6c62 	cmnvs	pc, #25088	; 0x6200
     2ac:	4364656b 	cmnmi	r4, #448790528	; 0x1ac00000
     2b0:	00424352 	subeq	r4, r2, r2, asr r3
     2b4:	65547870 	ldrbvs	r7, [r4, #-2160]	; 0xfffff790
     2b8:	7600706d 	strvc	r7, [r0], -sp, rrx
     2bc:	6f526f43 	svcvs	0x00526f43
     2c0:	6e697475 	mcrvs	4, 3, r7, cr9, cr5, {3}
     2c4:	64644165 	strbtvs	r4, [r4], #-357	; 0xfffffe9b
     2c8:	65446f54 	strbvs	r6, [r4, #-3924]	; 0xfffff0ac
     2cc:	6579616c 	ldrbvs	r6, [r9, #-364]!	; 0xfffffe94
     2d0:	73694c64 	cmnvc	r9, #100, 24	; 0x6400
     2d4:	76700074 			; <UNDEFINED> instruction: 0x76700074
     2d8:	746e6f43 	strbtvc	r6, [lr], #-3907	; 0xfffff0bd
     2dc:	656e6961 	strbvs	r6, [lr, #-2401]!	; 0xfffff69f
     2e0:	78700072 	ldmdavc	r0!, {r1, r4, r5, r6}^
     2e4:	6f526f43 	svcvs	0x00526f43
     2e8:	6e697475 	mcrvs	4, 3, r7, cr9, cr5, {3}
     2ec:	6e754665 	cdpvs	6, 7, cr4, cr5, cr5, {3}
     2f0:	6f697463 	svcvs	0x00697463
     2f4:	5078006e 	rsbspl	r0, r8, lr, rrx
     2f8:	65737361 	ldrbvs	r7, [r3, #-865]!	; 0xfffffc9f
     2fc:	63695464 	cmnvs	r9, #100, 8	; 0x64000000
     300:	7000736b 	andvc	r7, r0, fp, ror #6
     304:	646e4978 	strbtvs	r4, [lr], #-2424	; 0xfffff688
     308:	78007865 	stmdavc	r0, {r0, r2, r5, r6, fp, ip, sp, lr}
     30c:	6d657449 	cfstrdvs	mvd7, [r5, #-292]!	; 0xfffffedc
     310:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
     314:	54780065 	ldrbtpl	r0, [r8], #-101	; 0xffffff9b
     318:	736b6369 	cmnvc	fp, #-1543503871	; 0xa4000001
     31c:	65446f54 	strbvs	r6, [r4, #-3924]	; 0xfffff0ac
     320:	0079616c 	rsbseq	r6, r9, ip, ror #2
     324:	73694c78 	cmnvc	r9, #120, 24	; 0x7800
     328:	646e4574 	strbtvs	r4, [lr], #-1396	; 0xfffffa8c
     32c:	4f767000 	svcmi	0x00767000
     330:	72656e77 	rsbvc	r6, r5, #1904	; 0x770
     334:	614c7800 	cmpvs	ip, r0, lsl #16
     338:	69547473 	ldmdbvs	r4, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
     33c:	6f436b63 	svcvs	0x00436b63
     340:	00746e75 	rsbseq	r6, r4, r5, ror lr
     344:	526f4378 	rsbpl	r4, pc, #120, 6	; 0xe0000001
     348:	6974756f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r8, sl, ip, sp, lr}^
     34c:	6954656e 	ldmdbvs	r4, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
     350:	6f436b63 	svcvs	0x00436b63
     354:	00746e75 	rsbseq	r6, r4, r5, ror lr
     358:	53494c78 	movtpl	r4, #40056	; 0x9c78
     35c:	54495f54 	strbpl	r5, [r9], #-3924	; 0xfffff0ac
     360:	70004d45 	andvc	r4, r0, r5, asr #26
     364:	6e6f4378 	mcrvs	3, 3, r4, cr15, cr8, {3}
     368:	694c7473 	stmdbvs	ip, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
     36c:	75007473 	strvc	r7, [r0, #-1139]	; 0xfffffb8d
     370:	706f5478 	rsbvc	r5, pc, r8, ror r4	; <UNPREDICTABLE>
     374:	6f526f43 	svcvs	0x00526f43
     378:	6e697475 	mcrvs	4, 3, r7, cr9, cr5, {3}
     37c:	61655265 	cmnvs	r5, r5, ror #4
     380:	72507964 	subsvc	r7, r0, #100, 18	; 0x190000
     384:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
     388:	78007974 	stmdavc	r0, {r2, r4, r5, r6, r8, fp, ip, sp, lr}
     38c:	616c6544 	cmnvs	ip, r4, asr #10
     390:	43646579 	cmnmi	r4, #507510784	; 0x1e400000
     394:	756f526f 	strbvc	r5, [pc, #-623]!	; 12d <_start-0x7ed3>
     398:	656e6974 	strbvs	r6, [lr, #-2420]!	; 0xfffff68c
     39c:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0xfffff6b4
     3a0:	44780031 	ldrbtmi	r0, [r8], #-49	; 0xffffffcf
     3a4:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
     3a8:	6f436465 	svcvs	0x00436465
     3ac:	74756f52 	ldrbtvc	r6, [r5], #-3922	; 0xfffff0ae
     3b0:	4c656e69 	stclmi	14, cr6, [r5], #-420	; 0xfffffe5c
     3b4:	32747369 	rsbscc	r7, r4, #-1543503871	; 0xa4000001
     3b8:	726f6300 	rsbvc	r6, pc, #0, 6
     3bc:	42435243 	submi	r5, r3, #805306372	; 0x30000004
     3c0:	43787000 	cmnmi	r8, #0
     3c4:	00424352 	subeq	r4, r2, r2, asr r3
     3c8:	72507870 	subsvc	r7, r0, #112, 16	; 0x700000
     3cc:	6f697665 	svcvs	0x00697665
     3d0:	70007375 	andvc	r7, r0, r5, ror r3
     3d4:	526f4378 	rsbpl	r4, pc, #120, 6	; 0xe0000001
     3d8:	6974756f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r8, sl, ip, sp, lr}^
     3dc:	6f43656e 	svcvs	0x0043656e
     3e0:	63006564 	movwvs	r6, #1380	; 0x564
     3e4:	6f43726f 	svcvs	0x0043726f
     3e8:	74756f52 	ldrbtvc	r6, [r5], #-3922	; 0xfffff0ae
     3ec:	43656e69 	cmnmi	r5, #1680	; 0x690
     3f0:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
     3f4:	6c426c6f 	mcrrvs	12, 6, r6, r2, cr15
     3f8:	006b636f 	rsbeq	r6, fp, pc, ror #6
     3fc:	526f4378 	rsbpl	r4, pc, #120, 6	; 0xe0000001
     400:	6974756f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r8, sl, ip, sp, lr}^
     404:	6552656e 	ldrbvs	r6, [r2, #-1390]	; 0xfffffa92
     408:	65766f6d 	ldrbvs	r6, [r6, #-3949]!	; 0xfffff093
     40c:	6d6f7246 	sfmvs	f7, 2, [pc, #-280]!	; 2fc <_start-0x7d04>
     410:	6e657645 	cdpvs	6, 6, cr7, cr5, cr5, {2}
     414:	73694c74 	cmnvc	r9, #116, 24	; 0x7400
     418:	78700074 	ldmdavc	r0!, {r2, r4, r5, r6}^
     41c:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
     420:	526f4379 	rsbpl	r4, pc, #-469762047	; 0xe4000001
     424:	6974756f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r8, sl, ip, sp, lr}^
     428:	694c656e 	stmdbvs	ip, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
     42c:	00737473 	rsbseq	r7, r3, r3, ror r4
     430:	6e497875 	mcrvs	8, 2, r7, cr9, cr5, {3}
     434:	00786564 	rsbseq	r6, r8, r4, ror #10
     438:	6e694d78 	mcrvs	13, 3, r4, cr9, cr8, {3}
     43c:	73694c69 	cmnvc	r9, #26880	; 0x6900
     440:	65744974 	ldrbvs	r4, [r4, #-2420]!	; 0xfffff68c
     444:	4378006d 	cmnmi	r8, #109	; 0x6d
     448:	756f526f 	strbvc	r5, [pc, #-623]!	; 1e1 <_start-0x7e1f>
     44c:	656e6974 	strbvs	r6, [lr, #-2420]!	; 0xfffff68c
     450:	61657243 	cmnvs	r5, r3, asr #4
     454:	75006574 	strvc	r6, [r0, #-1396]	; 0xfffffa8c
     458:	6d754e78 	ldclvs	14, cr4, [r5, #-480]!	; 0xfffffe20
     45c:	4f726562 	svcmi	0x00726562
     460:	65744966 	ldrbvs	r4, [r4, #-2406]!	; 0xfffff69a
     464:	7000736d 	andvc	r7, r0, sp, ror #6
     468:	72754378 	rsbsvc	r4, r5, #120, 6	; 0xe0000001
     46c:	746e6572 	strbtvc	r6, [lr], #-1394	; 0xfffffa8e
     470:	6f526f43 	svcvs	0x00526f43
     474:	6e697475 	mcrvs	4, 3, r7, cr9, cr5, {3}
     478:	78750065 	ldmdavc	r5!, {r0, r2, r5, r6}^
     47c:	6f697250 	svcvs	0x00697250
     480:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     484:	6f437800 	svcvs	0x00437800
     488:	74756f52 	ldrbtvc	r6, [r5], #-3922	; 0xfffff0ae
     48c:	48656e69 	stmdami	r5!, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^
     490:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
     494:	50780065 	rsbspl	r0, r8, r5, rrx
     498:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
     49c:	6552676e 	ldrbvs	r6, [r2, #-1902]	; 0xfffff892
     4a0:	43796461 	cmnmi	r9, #1627389952	; 0x61000000
     4a4:	756f526f 	strbvc	r5, [pc, #-623]!	; 23d <_start-0x7dc3>
     4a8:	656e6974 	strbvs	r6, [lr, #-2420]!	; 0xfffff68c
     4ac:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0xfffff6b4
     4b0:	4e787000 	cdpmi	0, 7, cr7, cr8, cr0, {0}
     4b4:	00747865 	rsbseq	r7, r4, r5, ror #16
     4b8:	76457870 			; <UNDEFINED> instruction: 0x76457870
     4bc:	4c746e65 	ldclmi	14, cr6, [r4], #-404	; 0xfffffe6c
     4c0:	00747369 	rsbseq	r7, r4, r9, ror #6
     4c4:	73694c78 	cmnvc	r9, #120, 24	; 0x7800
     4c8:	65744974 	ldrbvs	r4, [r4, #-2420]!	; 0xfffff68c
     4cc:	4376006d 	cmnmi	r6, #109	; 0x6d
     4d0:	756f526f 	strbvc	r5, [pc, #-623]!	; 269 <_start-0x7d97>
     4d4:	656e6974 	strbvs	r6, [lr, #-2420]!	; 0xfffff68c
     4d8:	65686353 	strbvs	r6, [r8, #-851]!	; 0xfffffcad
     4dc:	656c7564 	strbvs	r7, [ip, #-1380]!	; 0xfffffa9c
     4e0:	69547800 	ldmdbvs	r4, {fp, ip, sp, lr}^
     4e4:	6f54656d 	svcvs	0x0054656d
     4e8:	656b6157 	strbvs	r6, [fp, #-343]!	; 0xfffffea9
     4ec:	43787000 	cmnmi	r8, #0
     4f0:	756f526f 	strbvc	r5, [pc, #-623]!	; 289 <_start-0x7d77>
     4f4:	656e6974 	strbvs	r6, [lr, #-2420]!	; 0xfffff68c
     4f8:	53787500 	cmnpl	r8, #0, 10
     4fc:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
     500:	4f787000 	svcmi	0x00787000
     504:	66726576 			; <UNDEFINED> instruction: 0x66726576
     508:	44776f6c 	ldrbtmi	r6, [r7], #-3948	; 0xfffff094
     50c:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
     510:	6f436465 	svcvs	0x00436465
     514:	74756f52 	ldrbtvc	r6, [r5], #-3922	; 0xfffff0ae
     518:	4c656e69 	stclmi	14, cr6, [r5], #-420	; 0xfffffe5c
     51c:	00747369 	rsbseq	r7, r4, r9, ror #6
     520:	4e494d78 	mcrmi	13, 2, r4, cr9, cr8, {3}
     524:	494c5f49 	stmdbmi	ip, {r0, r3, r6, r8, r9, sl, fp, ip, lr}^
     528:	495f5453 	ldmdbmi	pc, {r0, r1, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
     52c:	004d4554 	subeq	r4, sp, r4, asr r5
     530:	53494c78 	movtpl	r4, #40056	; 0x9c78
     534:	78700054 	ldmdavc	r0!, {r2, r4, r6}^
     538:	616c6544 	cmnvs	ip, r4, asr #10
     53c:	43646579 	cmnmi	r4, #507510784	; 0x1e400000
     540:	756f526f 	strbvc	r5, [pc, #-623]!	; 2d9 <_start-0x7d27>
     544:	656e6974 	strbvs	r6, [lr, #-2420]!	; 0xfffff68c
     548:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0xfffff6b4
     54c:	76727000 	ldrbtvc	r7, [r2], -r0
     550:	63656843 	cmnvs	r5, #4390912	; 0x430000
     554:	6e65506b 	cdpvs	0, 6, cr5, cr5, cr11, {3}
     558:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
     55c:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
     560:	73694c79 	cmnvc	r9, #30976	; 0x7900
     564:	47780074 			; <UNDEFINED> instruction: 0x47780074
     568:	72656e65 	rsbvc	r6, r5, #1616	; 0x650
     56c:	694c6369 	stmdbvs	ip, {r0, r3, r5, r6, r8, r9, sp, lr}^
     570:	74497473 	strbvc	r7, [r9], #-1139	; 0xfffffb8d
     574:	70006d65 	andvc	r6, r0, r5, ror #26
     578:	6e497672 	mcrvs	6, 2, r7, cr9, cr2, {3}
     57c:	61697469 	cmnvs	r9, r9, ror #8
     580:	6573696c 	ldrbvs	r6, [r3, #-2412]!	; 0xfffff694
     584:	6f526f43 	svcvs	0x00526f43
     588:	6e697475 	mcrvs	4, 3, r7, cr9, cr5, {3}
     58c:	73694c65 	cmnvc	r9, #25856	; 0x6500
     590:	78007374 	stmdavc	r0, {r2, r4, r5, r6, r8, r9, ip, sp, lr}
     594:	6e657645 	cdpvs	6, 6, cr7, cr5, cr5, {2}
     598:	73694c74 	cmnvc	r9, #116, 24	; 0x7400
     59c:	65744974 	ldrbvs	r4, [r4, #-2420]!	; 0xfffff68c
     5a0:	7270006d 	rsbsvc	r0, r0, #109	; 0x6d
     5a4:	65684376 	strbvs	r4, [r8, #-886]!	; 0xfffffc8a
     5a8:	65446b63 	strbvs	r6, [r4, #-2915]	; 0xfffff49d
     5ac:	6579616c 	ldrbvs	r6, [r9, #-364]!	; 0xfffffe94
     5b0:	73694c64 	cmnvc	r9, #100, 24	; 0x6400
     5b4:	72630074 	rsbvc	r0, r3, #116	; 0x74
     5b8:	4f524f43 	svcmi	0x00524f43
     5bc:	4e495455 	mcrmi	4, 2, r5, cr9, cr5, {2}
     5c0:	4f435f45 	svcmi	0x00435f45
     5c4:	5f004544 	svcpl	0x00004544
     5c8:	5f6f7364 	svcpl	0x006f7364
     5cc:	646e6168 	strbtvs	r6, [lr], #-360	; 0xfffffe98
     5d0:	5f00656c 	svcpl	0x0000656c
     5d4:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
     5d8:	61725f00 	cmnvs	r2, r0, lsl #30
     5dc:	3834646e 	ldmdacc	r4!, {r1, r2, r3, r5, r6, sl, sp, lr}
     5e0:	6d655f00 	stclvs	15, cr5, [r5, #-0]
     5e4:	65677265 	strbvs	r7, [r7, #-613]!	; 0xfffffd9b
     5e8:	0079636e 	rsbseq	r6, r9, lr, ror #6
     5ec:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
     5f0:	775f0061 	ldrbvc	r0, [pc, -r1, rrx]
     5f4:	6f747263 	svcvs	0x00747263
     5f8:	735f626d 	cmpvc	pc, #-805306362	; 0xd0000006
     5fc:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
     600:	63775f00 	cmnvs	r7, #0, 30
     604:	6f747273 	svcvs	0x00747273
     608:	5f73626d 	svcpl	0x0073626d
     60c:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
     610:	6f6c0065 	svcvs	0x006c0065
     614:	6c20676e 	stcvs	7, cr6, [r0], #-440	; 0xfffffe48
     618:	20676e6f 	rsbcs	r6, r7, pc, ror #28
     61c:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
     620:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
     624:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
     628:	626c5f00 	rsbvs	r5, ip, #0, 30
     62c:	7a697366 	bvc	1a5d3cc <mailbuffer+0x1a4630c>
     630:	78700065 	ldmdavc	r0!, {r0, r2, r5, r6}^
     634:	4c77654e 	cfldr64mi	mvdx6, [r7], #-312	; 0xfffffec8
     638:	49747369 	ldmdbmi	r4!, {r0, r3, r5, r6, r8, r9, ip, sp, lr}^
     63c:	006d6574 	rsbeq	r6, sp, r4, ror r5
     640:	72626d5f 	rsbvc	r6, r2, #6080	; 0x17c0
     644:	63776f74 	cmnvs	r7, #116, 30	; 0x1d0
     648:	6174735f 	cmnvs	r4, pc, asr r3
     64c:	5f006574 	svcpl	0x00006574
     650:	6f746377 	svcvs	0x00746377
     654:	735f626d 	cmpvc	pc, #-805306362	; 0xd0000006
     658:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
     65c:	745f5f00 	ldrbvc	r5, [pc], #-3840	; 664 <_start-0x799c>
     660:	65735f6d 	ldrbvs	r5, [r3, #-3949]!	; 0xfffff093
     664:	755f0063 	ldrbvc	r0, [pc, #-99]	; 609 <_start-0x79f7>
     668:	00667562 	rsbeq	r7, r6, r2, ror #10
     66c:	7361625f 	cmnvc	r1, #-268435451	; 0xf0000005
     670:	5f5f0065 	svcpl	0x005f0065
     674:	685f6d74 	ldmdavs	pc, {r2, r4, r5, r6, r8, sl, fp, sp, lr}^	; <UNPREDICTABLE>
     678:	0072756f 	rsbseq	r7, r2, pc, ror #10
     67c:	66735f5f 	uhsaxvs	r5, r3, pc	; <UNPREDICTABLE>
     680:	6e6f5f00 	cdpvs	15, 6, cr5, cr15, cr0, {0}
     684:	6978655f 	ldmdbvs	r8!, {r0, r1, r2, r3, r4, r6, r8, sl, sp, lr}^
     688:	72615f74 	rsbvc	r5, r1, #116, 30	; 0x1d0
     68c:	5f007367 	svcpl	0x00007367
     690:	6b6f6f63 	blvs	1bdc424 <mailbuffer+0x1bc5364>
     694:	5f006569 	svcpl	0x00006569
     698:	6c67735f 	stclvs	3, cr7, [r7], #-380	; 0xfffffe84
     69c:	5f006575 	svcpl	0x00006575
     6a0:	67616c66 	strbvs	r6, [r1, -r6, ror #24]!
     6a4:	695f0073 	ldmdbvs	pc, {r0, r1, r4, r5, r6}^	; <UNPREDICTABLE>
     6a8:	78635f73 	stmdavc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     6ac:	735f0061 	cmpvc	pc, #97	; 0x61
     6b0:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
     6b4:	6c625f00 	stclvs	15, cr5, [r2], #-0
     6b8:	7a69736b 	bvc	1a5d46c <mailbuffer+0x1a463ac>
     6bc:	635f0065 	cmpvs	pc, #101	; 0x65
     6c0:	75627476 	strbvc	r7, [r2, #-1142]!	; 0xfffffb8a
     6c4:	6f5f0066 	svcvs	0x005f0066
     6c8:	65736666 	ldrbvs	r6, [r3, #-1638]!	; 0xfffff99a
     6cc:	78700074 	ldmdavc	r0!, {r2, r4, r5, r6}^
     6d0:	6d657449 	cfstrdvs	mvd7, [r5, #-292]!	; 0xfffffedc
     6d4:	694c7600 	stmdbvs	ip, {r9, sl, ip, sp, lr}^
     6d8:	6e497473 	mcrvs	4, 2, r7, cr9, cr3, {3}
     6dc:	74726573 	ldrbtvc	r6, [r2], #-1395	; 0xfffffa8d
     6e0:	00646e45 	rsbeq	r6, r4, r5, asr #28
     6e4:	73626d5f 	cmnvc	r2, #6080	; 0x17c0
     6e8:	776f7472 			; <UNDEFINED> instruction: 0x776f7472
     6ec:	735f7363 	cmpvc	pc, #-1946157055	; 0x8c000001
     6f0:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
     6f4:	626d5f00 	rsbvs	r5, sp, #0, 30
     6f8:	6e656c72 	mcrvs	12, 3, r6, cr5, cr2, {3}
     6fc:	6174735f 	cmnvs	r4, pc, asr r3
     700:	5f006574 	svcpl	0x00006574
     704:	72616e66 	rsbvc	r6, r1, #1632	; 0x660
     708:	5f007367 	svcpl	0x00007367
     70c:	00736e66 	rsbseq	r6, r3, r6, ror #28
     710:	73694c76 	cmnvc	r9, #30208	; 0x7600
     714:	696e4974 	stmdbvs	lr!, {r2, r4, r5, r6, r8, fp, lr}^
     718:	6c616974 			; <UNDEFINED> instruction: 0x6c616974
     71c:	49657369 	stmdbmi	r5!, {r0, r3, r5, r6, r8, r9, ip, sp, lr}^
     720:	006d6574 	rsbeq	r6, sp, r4, ror r5
     724:	6769735f 			; <UNDEFINED> instruction: 0x6769735f
     728:	665f006e 	ldrbvs	r0, [pc], -lr, rrx
     72c:	6b636f6c 	blvs	18dc4e4 <mailbuffer+0x18c5424>
     730:	5f00745f 	svcpl	0x0000745f
     734:	65647473 	strbvs	r7, [r4, #-1139]!	; 0xfffffb8d
     738:	5f007272 	svcpl	0x00007272
     73c:	69676942 	stmdbvs	r7!, {r1, r6, r8, fp, sp, lr}^
     740:	5f00746e 	svcpl	0x0000746e
     744:	6d6d6167 	stfvse	f6, [sp, #-412]!	; 0xfffffe64
     748:	69735f61 	ldmdbvs	r3!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
     74c:	61676e67 	cmnvs	r7, r7, ror #28
     750:	725f006d 	subsvc	r0, pc, #109	; 0x6d
     754:	6c757365 	ldclvs	3, cr7, [r5], #-404	; 0xfffffe6c
     758:	006b5f74 	rsbeq	r5, fp, r4, ror pc
     75c:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
     760:	775f5f00 	ldrbvc	r5, [pc, -r0, lsl #30]
     764:	00626863 	rsbeq	r6, r2, r3, ror #16
     768:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
     76c:	0074756f 	rsbseq	r7, r4, pc, ror #10
     770:	7476635f 	ldrbtvc	r6, [r6], #-863	; 0xfffffca1
     774:	006e656c 	rsbeq	r6, lr, ip, ror #10
     778:	6c69665f 	stclvs	6, cr6, [r9], #-380	; 0xfffffe84
     77c:	6e5f0065 	cdpvs	0, 5, cr0, cr15, cr5, {3}
     780:	73626f69 	cmnvc	r2, #420	; 0x1a4
     784:	74615f00 	strbtvc	r5, [r1], #-3840	; 0xfffff100
     788:	74697865 	strbtvc	r7, [r9], #-2149	; 0xfffff79b
     78c:	735f0030 	cmpvc	pc, #48	; 0x30
     790:	616e6769 	cmnvs	lr, r9, ror #14
     794:	75625f6c 	strbvc	r5, [r2, #-3948]!	; 0xfffff094
     798:	615f0066 	cmpvs	pc, r6, rrx
     79c:	69746373 	ldmdbvs	r4!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
     7a0:	625f656d 	subsvs	r6, pc, #457179136	; 0x1b400000
     7a4:	5f006675 	svcpl	0x00006675
     7a8:	75736572 	ldrbvc	r6, [r3, #-1394]!	; 0xfffffa8e
     7ac:	5f00746c 	svcpl	0x0000746c
     7b0:	6863775f 	stmdavs	r3!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
     7b4:	6e697700 	cdpvs	7, 6, cr7, cr9, cr0, {0}
     7b8:	00745f74 	rsbseq	r5, r4, r4, ror pc
     7bc:	636f6c5f 	cmnvs	pc, #24320	; 0x5f00
     7c0:	4c76006b 	ldclmi	0, cr0, [r6], #-428	; 0xfffffe54
     7c4:	52747369 	rsbspl	r7, r4, #-1543503871	; 0xa4000001
     7c8:	766f6d65 	strbtvc	r6, [pc], -r5, ror #26
     7cc:	665f0065 	ldrbvs	r0, [pc], -r5, rrx
     7d0:	7367616c 	cmnvc	r7, #108, 2
     7d4:	5f5f0032 	svcpl	0x005f0032
     7d8:	795f6d74 	ldmdbvc	pc, {r2, r4, r5, r6, r8, sl, fp, sp, lr}^	; <UNPREDICTABLE>
     7dc:	00726165 	rsbseq	r6, r2, r5, ror #2
     7e0:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 72c <_start-0x78d4>
     7e4:	6c612f65 	stclvs	15, cr2, [r1], #-404	; 0xfffffe6c
     7e8:	702f7865 	eorvc	r7, pc, r5, ror #16
     7ec:	72612f69 	rsbvc	r2, r1, #420	; 0x1a4
     7f0:	54522d6d 	ldrbpl	r2, [r2], #-3437	; 0xfffff293
     7f4:	462f534f 	strtmi	r5, [pc], -pc, asr #6
     7f8:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
     7fc:	2f534f54 	svccs	0x00534f54
     800:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     804:	6c2f6563 	cfstr32vs	mvfx6, [pc], #-396	; 680 <_start-0x7980>
     808:	2e747369 	cdpcs	3, 7, cr7, cr4, cr9, {3}
     80c:	78700063 	ldmdavc	r0!, {r0, r1, r5, r6}^
     810:	6d657449 	cfstrdvs	mvd7, [r5, #-292]!	; 0xfffffedc
     814:	65526f54 	ldrbvs	r6, [r2, #-3924]	; 0xfffff0ac
     818:	65766f6d 	ldrbvs	r6, [r6, #-3949]!	; 0xfffff093
     81c:	656e5f00 	strbvs	r5, [lr, #-3840]!	; 0xfffff100
     820:	00667478 	rsbeq	r7, r6, r8, ror r4
     824:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
     828:	6e6f6d5f 	mcrvs	13, 3, r6, cr15, cr15, {2}
     82c:	74615f00 	strbtvc	r5, [r1], #-3840	; 0xfffff100
     830:	74697865 	strbtvc	r7, [r9], #-2149	; 0xfffff79b
     834:	62757300 	rsbsvs	r7, r5, #0, 6
     838:	6174706f 	cmnvs	r4, pc, rrx
     83c:	5f006772 	svcpl	0x00006772
     840:	6964735f 	stmdbvs	r4!, {r0, r1, r2, r3, r4, r6, r8, r9, ip, sp, lr}^
     844:	696e6964 	stmdbvs	lr!, {r2, r5, r6, r8, fp, sp, lr}^
     848:	6f5f0074 	svcvs	0x005f0074
     84c:	745f6666 	ldrbvc	r6, [pc], #-1638	; 854 <_start-0x77ac>
     850:	72665f00 	rsbvc	r5, r6, #0, 30
     854:	696c6565 	stmdbvs	ip!, {r0, r2, r5, r6, r8, sl, sp, lr}^
     858:	5f007473 	svcpl	0x00007473
     85c:	4b434f4c 	blmi	10d4594 <mailbuffer+0x10bd4d4>
     860:	4345525f 	movtmi	r5, #21087	; 0x525f
     864:	49535255 	ldmdbmi	r3, {r0, r2, r4, r6, r9, ip, lr}^
     868:	545f4556 	ldrbpl	r4, [pc], #-1366	; 870 <_start-0x7790>
     86c:	736e7500 	cmnvc	lr, #0, 10
     870:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
     874:	68632064 	stmdavs	r3!, {r2, r5, r6, sp}^
     878:	5f007261 	svcpl	0x00007261
     87c:	0077656e 	rsbseq	r6, r7, lr, ror #10
     880:	655f685f 	ldrbvs	r6, [pc, #-2143]	; 29 <_start-0x7fd7>
     884:	6f6e7272 	svcvs	0x006e7272
     888:	6f687300 	svcvs	0x00687300
     88c:	69207472 	stmdbvs	r0!, {r1, r4, r5, r6, sl, ip, sp, lr}
     890:	5f00746e 	svcpl	0x0000746e
     894:	5f6d745f 	svcpl	0x006d745f
     898:	79616479 	stmdbvc	r1!, {r0, r3, r4, r5, r6, sl, sp, lr}^
     89c:	735f5f00 	cmpvc	pc, #0, 30
     8a0:	00667562 	rsbeq	r7, r6, r2, ror #10
     8a4:	626f695f 	rsbvs	r6, pc, #1556480	; 0x17c000
     8a8:	5f5f0073 	svcpl	0x005f0073
     8ac:	454c4946 	strbmi	r4, [ip, #-2374]	; 0xfffff6ba
     8b0:	626d5f00 	rsbvs	r5, sp, #0, 30
     8b4:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
     8b8:	00745f65 	rsbseq	r5, r4, r5, ror #30
     8bc:	46735f5f 	uhsaxmi	r5, r3, pc	; <UNPREDICTABLE>
     8c0:	00454c49 	subeq	r4, r5, r9, asr #24
     8c4:	73626d5f 	cmnvc	r2, #6080	; 0x17c0
     8c8:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
     8cc:	61725f00 	cmnvs	r2, r0, lsl #30
     8d0:	6e5f646e 	cdpvs	4, 5, cr6, cr15, cr14, {3}
     8d4:	00747865 	rsbseq	r7, r4, r5, ror #16
     8d8:	6c626d5f 	stclvs	13, cr6, [r2], #-380	; 0xfffffe84
     8dc:	735f6e65 	cmpvc	pc, #1616	; 0x650
     8e0:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
     8e4:	6e695f00 	cdpvs	15, 6, cr5, cr9, cr0, {0}
     8e8:	695f0063 	ldmdbvs	pc, {r0, r1, r5, r6}^	; <UNPREDICTABLE>
     8ec:	5f00646e 	svcpl	0x0000646e
     8f0:	72727563 	rsbsvc	r7, r2, #415236096	; 0x18c00000
     8f4:	5f746e65 	svcpl	0x00746e65
     8f8:	61636f6c 	cmnvs	r3, ip, ror #30
     8fc:	5f00656c 	svcpl	0x0000656c
     900:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
     904:	70756e61 	rsbsvc	r6, r5, r1, ror #28
     908:	616d5f00 	cmnvs	sp, r0, lsl #30
     90c:	73647778 	cmnvc	r4, #120, 14	; 0x1e00000
     910:	65725f00 	ldrbvs	r5, [r2, #-3840]!	; 0xfffff100
     914:	00746e65 	rsbseq	r6, r4, r5, ror #28
     918:	6565735f 	strbvs	r7, [r5, #-863]!	; 0xfffffca1
     91c:	5f5f0064 	svcpl	0x005f0064
     920:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
     924:	5f5f0074 	svcpl	0x005f0074
     928:	756c6176 	strbvc	r6, [ip, #-374]!	; 0xfffffe8a
     92c:	735f0065 	cmpvc	pc, #101	; 0x65
     930:	006b6565 	rsbeq	r6, fp, r5, ror #10
     934:	73694c76 	cmnvc	r9, #30208	; 0x7600
     938:	736e4974 	cmnvc	lr, #116, 18	; 0x1d0000
     93c:	00747265 	rsbseq	r7, r4, r5, ror #4
     940:	6f70665f 	svcvs	0x0070665f
     944:	00745f73 	rsbseq	r5, r4, r3, ror pc
     948:	694c7870 	stmdbvs	ip, {r4, r5, r6, fp, ip, sp, lr}^
     94c:	5f007473 	svcpl	0x00007473
     950:	5f6d745f 	svcpl	0x006d745f
     954:	006e696d 	rsbeq	r6, lr, sp, ror #18
     958:	6c756d5f 	ldclvs	13, cr6, [r5], #-380	; 0xfffffe84
     95c:	735f0074 	cmpvc	pc, #116	; 0x74
     960:	6f747274 	svcvs	0x00747274
     964:	616c5f6b 	cmnvs	ip, fp, ror #30
     968:	5f007473 	svcpl	0x00007473
     96c:	79746e66 	ldmdbvc	r4!, {r1, r2, r5, r6, r9, sl, fp, sp, lr}^
     970:	00736570 	rsbseq	r6, r3, r0, ror r5
     974:	6464615f 	strbtvs	r6, [r4], #-351	; 0xfffffea1
     978:	49787000 	ldmdbmi	r8!, {ip, sp, lr}^
     97c:	61726574 	cmnvs	r2, r4, ror r5
     980:	00726f74 	rsbseq	r6, r2, r4, ror pc
     984:	4c555f5f 	mrrcmi	15, 5, r5, r5, cr15	; <UNPREDICTABLE>
     988:	00676e6f 	rsbeq	r6, r7, pc, ror #28
     98c:	7465675f 	strbtvc	r6, [r5], #-1887	; 0xfffff8a1
     990:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
     994:	7272655f 	rsbsvc	r6, r2, #398458880	; 0x17c00000
     998:	6c675f00 	stclvs	15, cr5, [r7], #-0
     99c:	6c61626f 	sfmvs	f6, 2, [r1], #-444	; 0xfffffe44
     9a0:	706d695f 	rsbvc	r6, sp, pc, asr r9
     9a4:	5f657275 	svcpl	0x00657275
     9a8:	00727470 	rsbseq	r7, r2, r0, ror r4
     9ac:	7275635f 	rsbsvc	r6, r5, #2080374785	; 0x7c000001
     9b0:	746e6572 	strbtvc	r6, [lr], #-1394	; 0xfffffa8e
     9b4:	7461635f 	strbtvc	r6, [r1], #-863	; 0xfffffca1
     9b8:	726f6765 	rsbvc	r6, pc, #26476544	; 0x1940000
     9bc:	755f0079 	ldrbvc	r0, [pc, #-121]	; 94b <_start-0x76b5>
     9c0:	6573756e 	ldrbvs	r7, [r3, #-1390]!	; 0xfffffa92
     9c4:	61725f64 	cmnvs	r2, r4, ror #30
     9c8:	7600646e 	strvc	r6, [r0], -lr, ror #8
     9cc:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0xfffff6b4
     9d0:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
     9d4:	696c6169 	stmdbvs	ip!, {r0, r3, r5, r6, r8, sp, lr}^
     9d8:	5f006573 	svcpl	0x00006573
     9dc:	00736477 	rsbseq	r6, r3, r7, ror r4
     9e0:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
     9e4:	6164775f 	cmnvs	r4, pc, asr r7
     9e8:	675f0079 			; <UNDEFINED> instruction: 0x675f0079
     9ec:	0065756c 	rsbeq	r7, r5, ip, ror #10
     9f0:	616d6e5f 	cmnvs	sp, pc, asr lr
     9f4:	636f6c6c 	cmnvs	pc, #108, 24	; 0x6c00
     9f8:	366c5f00 	strbtcc	r5, [ip], -r0, lsl #30
     9fc:	625f6134 	subsvs	r6, pc, #52, 2
     a00:	5f006675 	svcpl	0x00006675
     a04:	5f676973 	svcpl	0x00676973
     a08:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
     a0c:	61567800 	cmpvs	r6, r0, lsl #16
     a10:	4f65756c 	svcmi	0x0065756c
     a14:	736e4966 	cmnvc	lr, #1671168	; 0x198000
     a18:	69747265 	ldmdbvs	r4!, {r0, r2, r5, r6, r9, ip, sp, lr}^
     a1c:	5f006e6f 	svcpl	0x00006e6f
     a20:	6675626e 	ldrbtvs	r6, [r5], -lr, ror #4
     a24:	6e755f00 	cdpvs	15, 7, cr5, cr5, cr0, {0}
     a28:	64657375 	strbtvs	r7, [r5], #-885	; 0xfffffc8b
     a2c:	745f5f00 	ldrbvc	r5, [pc], #-3840	; a34 <_start-0x75cc>
     a30:	73695f6d 	cmnvc	r9, #436	; 0x1b4
     a34:	00747364 	rsbseq	r7, r4, r4, ror #6
     a38:	636f6c5f 	cmnvs	pc, #24320	; 0x5f00
     a3c:	69746c61 	ldmdbvs	r4!, {r0, r5, r6, sl, fp, sp, lr}^
     a40:	625f656d 	subsvs	r6, pc, #457179136	; 0x1b400000
     a44:	5f006675 	svcpl	0x00006675
     a48:	736f6c63 	cmnvc	pc, #25344	; 0x6300
     a4c:	725f0065 	subsvc	r0, pc, #101	; 0x65
     a50:	5f003834 	svcpl	0x00003834
     a54:	6f74626d 	svcvs	0x0074626d
     a58:	735f6377 	cmpvc	pc, #-603979775	; 0xdc000001
     a5c:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
     a60:	35705f00 	ldrbcc	r5, [r0, #-3840]!	; 0xfffff100
     a64:	5f5f0073 	svcpl	0x005f0073
     a68:	6d5f6d74 	ldclvs	13, cr6, [pc, #-464]	; 8a0 <_start-0x7760>
     a6c:	00796164 	rsbseq	r6, r9, r4, ror #2
     a70:	65755178 	ldrbvs	r5, [r5, #-376]!	; 0xfffffe88
     a74:	65476575 	strbvs	r6, [r7, #-1397]	; 0xfffffa8b
     a78:	6972656e 	ldmdbvs	r2!, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
     a7c:	6e655363 	cdpvs	3, 6, cr5, cr5, cr3, {3}
     a80:	6f724664 	svcvs	0x00724664
     a84:	5253496d 	subspl	r4, r3, #1785856	; 0x1b4000
     a88:	51637500 	cmnpl	r3, r0, lsl #10
     a8c:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0xfffffa8b
     a90:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     a94:	75517800 	ldrbvc	r7, [r1, #-2048]	; 0xfffff800
     a98:	49657565 	stmdbmi	r5!, {r0, r2, r5, r6, r8, sl, ip, sp, lr}^
     a9c:	65755173 	ldrbvs	r5, [r5, #-371]!	; 0xfffffe8d
     aa0:	75466575 	strbvc	r6, [r6, #-1397]	; 0xfffffa8b
     aa4:	72466c6c 	subvc	r6, r6, #108, 24	; 0x6c00
     aa8:	53496d6f 	movtpl	r6, #40303	; 0x9d6f
     aac:	78750052 	ldmdavc	r5!, {r1, r4, r6}^
     ab0:	75657551 	strbvc	r7, [r5, #-1361]!	; 0xfffffaaf
     ab4:	73654d65 	cmnvc	r5, #6464	; 0x1940
     ab8:	65676173 	strbvs	r6, [r7, #-371]!	; 0xfffffe8d
     abc:	69615773 	stmdbvs	r1!, {r0, r1, r4, r5, r6, r8, r9, sl, ip, lr}^
     ac0:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
     ac4:	51787000 	cmnpl	r8, r0
     ac8:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0xfffffa8b
     acc:	7a697300 	bvc	1a5d6d4 <mailbuffer+0x1a46614>
     ad0:	00745f65 	rsbseq	r5, r4, r5, ror #30
     ad4:	65755178 	ldrbvs	r5, [r5, #-376]!	; 0xfffffe88
     ad8:	73496575 	movtvc	r6, #38261	; 0x9575
     adc:	75657551 	strbvc	r7, [r5, #-1361]!	; 0xfffffaaf
     ae0:	706d4565 	rsbvc	r4, sp, r5, ror #10
     ae4:	72467974 	subvc	r7, r6, #116, 18	; 0x1d0000
     ae8:	53496d6f 	movtpl	r6, #40303	; 0x9d6f
     aec:	54780052 	ldrbtpl	r0, [r8], #-82	; 0xffffffae
     af0:	636f4c78 	cmnvs	pc, #120, 24	; 0x7800
     af4:	5176006b 	cmnpl	r6, fp, rrx
     af8:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0xfffffa8b
     afc:	656c6544 	strbvs	r6, [ip, #-1348]!	; 0xfffffabc
     b00:	78006574 	stmdavc	r0, {r2, r4, r5, r6, r8, sl, sp, lr}
     b04:	6b736154 	blvs	1cd905c <mailbuffer+0x1cc1f9c>
     b08:	69615773 	stmdbvs	r1!, {r0, r1, r4, r5, r6, r8, r9, sl, ip, lr}^
     b0c:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
     b10:	65526f54 	ldrbvs	r6, [r2, #-3924]	; 0xfffff0ac
     b14:	76696563 	strbtvc	r6, [r9], -r3, ror #10
     b18:	72700065 	rsbsvc	r0, r0, #101	; 0x65
     b1c:	706f4376 	rsbvc	r4, pc, r6, ror r3	; <UNPREDICTABLE>
     b20:	74614479 	strbtvc	r4, [r1], #-1145	; 0xfffffb87
     b24:	516f5461 	cmnpl	pc, r1, ror #8
     b28:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0xfffffa8b
     b2c:	49547800 	ldmdbmi	r4, {fp, ip, sp, lr}^
     b30:	4f5f454d 	svcmi	0x005f454d
     b34:	2f005455 	svccs	0x00005455
     b38:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
     b3c:	656c612f 	strbvs	r6, [ip, #-303]!	; 0xfffffed1
     b40:	69702f78 	ldmdbvs	r0!, {r3, r4, r5, r6, r8, r9, sl, fp, sp}^
     b44:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
     b48:	4f54522d 	svcmi	0x0054522d
     b4c:	72462f53 	subvc	r2, r6, #332	; 0x14c
     b50:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
     b54:	532f534f 			; <UNDEFINED> instruction: 0x532f534f
     b58:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     b5c:	75712f65 	ldrbvc	r2, [r1, #-3941]!	; 0xfffff09b
     b60:	2e657565 	cdpcs	5, 6, cr7, cr5, cr5, {3}
     b64:	63700063 	cmnvs	r0, #99	; 0x63
     b68:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
     b6c:	6d6f7246 	sfmvs	f7, 2, [pc, #-280]!	; a5c <_start-0x75a4>
     b70:	76727000 	ldrbtvc	r7, [r2], -r0
     b74:	75517349 	ldrbvc	r7, [r1, #-841]	; 0xfffffcb7
     b78:	46657565 	strbtmi	r7, [r5], -r5, ror #10
     b7c:	006c6c75 	rsbeq	r6, ip, r5, ror ip
     b80:	65764f78 	ldrbvs	r4, [r6, #-3960]!	; 0xfffff088
     b84:	6f6c6672 	svcvs	0x006c6672
     b88:	756f4377 	strbvc	r4, [pc, #-887]!	; 819 <_start-0x77e7>
     b8c:	7800746e 	stmdavc	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
     b90:	75657551 	strbvc	r7, [r5, #-1361]!	; 0xfffffaaf
     b94:	6e654765 	cdpvs	7, 6, cr4, cr5, cr5, {3}
     b98:	63697265 	cmnvs	r9, #1342177286	; 0x50000006
     b9c:	65636552 	strbvs	r6, [r3, #-1362]!	; 0xfffffaae
     ba0:	00657669 	rsbeq	r7, r5, r9, ror #12
     ba4:	61537875 	cmpvs	r3, r5, ror r8
     ba8:	49646576 	stmdbmi	r4!, {r1, r2, r4, r5, r6, r8, sl, sp, lr}^
     bac:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     bb0:	74707572 	ldrbtvc	r7, [r0], #-1394	; 0xfffffa8e
     bb4:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
     bb8:	70007375 	andvc	r7, r0, r5, ror r3
     bbc:	61654863 	cmnvs	r5, r3, ror #16
     bc0:	4a780064 	bmi	1e00d58 <mailbuffer+0x1de9c98>
     bc4:	50747375 	rsbspl	r7, r4, r5, ror r3
     bc8:	696b6565 	stmdbvs	fp!, {r0, r2, r5, r6, r8, sl, sp, lr}^
     bcc:	7000676e 	andvc	r6, r0, lr, ror #14
     bd0:	73497672 	movtvc	r7, #38514	; 0x9672
     bd4:	75657551 	strbvc	r7, [r5, #-1361]!	; 0xfffffaaf
     bd8:	706d4565 	rsbvc	r4, sp, r5, ror #10
     bdc:	78007974 	stmdavc	r0, {r2, r4, r5, r6, r8, fp, ip, sp, lr}
     be0:	75657551 	strbvc	r7, [r5, #-1361]!	; 0xfffffaaf
     be4:	6e654765 	cdpvs	7, 6, cr4, cr5, cr5, {3}
     be8:	63697265 	cmnvs	r9, #1342177286	; 0x50000006
     bec:	646e6553 	strbtvs	r6, [lr], #-1363	; 0xfffffaad
     bf0:	69547800 	ldmdbvs	r4, {fp, ip, sp, lr}^
     bf4:	754f656d 	strbvc	r6, [pc, #-1389]	; 68f <_start-0x7971>
     bf8:	70795474 	rsbsvc	r5, r9, r4, ror r4
     bfc:	78750065 	ldmdavc	r5!, {r0, r2, r5, r6}^
     c00:	75746552 	ldrbvc	r6, [r4, #-1362]!	; 0xfffffaae
     c04:	78006e72 	stmdavc	r0, {r1, r4, r5, r6, r9, sl, fp, sp, lr}
     c08:	75657551 	strbvc	r7, [r5, #-1361]!	; 0xfffffaaf
     c0c:	6e614865 	cdpvs	8, 6, cr4, cr1, cr5, {3}
     c10:	00656c64 	rsbeq	r6, r5, r4, ror #24
     c14:	65755178 	ldrbvs	r5, [r5, #-376]!	; 0xfffffe88
     c18:	65526575 	ldrbvs	r6, [r2, #-1397]	; 0xfffffa8b
     c1c:	76696563 	strbtvc	r6, [r9], -r3, ror #10
     c20:	6f724665 	svcvs	0x00724665
     c24:	5253496d 	subspl	r4, r3, #1785856	; 0x1b4000
     c28:	4c787500 	cfldr64mi	mvdx7, [r8], #-0
     c2c:	74676e65 	strbtvc	r6, [r7], #-3685	; 0xfffff19b
     c30:	63700068 	cmnvs	r0, #104	; 0x68
     c34:	6769724f 	strbvs	r7, [r9, -pc, asr #4]!
     c38:	6c616e69 	stclvs	14, cr6, [r1], #-420	; 0xfffffe5c
     c3c:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
     c40:	69736f50 	ldmdbvs	r3!, {r4, r6, r8, r9, sl, fp, sp, lr}^
     c44:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
     c48:	48787000 	ldmdami	r8!, {ip, sp, lr}^
     c4c:	65686769 	strbvs	r6, [r8, #-1897]!	; 0xfffff897
     c50:	69725072 	ldmdbvs	r2!, {r1, r4, r5, r6, ip, lr}^
     c54:	7469726f 	strbtvc	r7, [r9], #-623	; 0xfffffd91
     c58:	73615479 	cmnvc	r1, #2030043136	; 0x79000000
     c5c:	6b6f576b 	blvs	1bd6a10 <mailbuffer+0x1bbf950>
     c60:	75006e65 	strvc	r6, [r0, #-3685]	; 0xfffff19b
     c64:	65755178 	ldrbvs	r5, [r5, #-376]!	; 0xfffffe88
     c68:	654c6575 	strbvs	r6, [ip, #-1397]	; 0xfffffa8b
     c6c:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
     c70:	51787500 	cmnpl	r8, r0, lsl #10
     c74:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0xfffffa8b
     c78:	7373654d 	cmnvc	r3, #322961408	; 0x13400000
     c7c:	73656761 	cmnvc	r5, #25427968	; 0x1840000
     c80:	74696157 	strbtvc	r6, [r9], #-343	; 0xfffffea9
     c84:	46676e69 	strbtmi	r6, [r7], -r9, ror #28
     c88:	496d6f72 	stmdbmi	sp!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
     c8c:	70005253 	andvc	r5, r0, r3, asr r2
     c90:	65744976 	ldrbvs	r4, [r4, #-2422]!	; 0xfffff68a
     c94:	516f546d 	cmnpl	pc, sp, ror #8
     c98:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0xfffffa8b
     c9c:	55517800 	ldrbpl	r7, [r1, #-2048]	; 0xfffff800
     ca0:	00455545 	subeq	r5, r5, r5, asr #10
     ca4:	746e4578 	strbtvc	r4, [lr], #-1400	; 0xfffffa88
     ca8:	69547972 	ldmdbvs	r4, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
     cac:	6553656d 	ldrbvs	r6, [r3, #-1389]	; 0xfffffa93
     cb0:	75510074 	ldrbvc	r0, [r1, #-116]	; 0xffffff8c
     cb4:	44657565 	strbtmi	r7, [r5], #-1381	; 0xfffffa9b
     cb8:	6e696665 	cdpvs	6, 6, cr6, cr9, cr5, {3}
     cbc:	6f697469 	svcvs	0x00697469
     cc0:	7870006e 	ldmdavc	r0!, {r1, r2, r3, r5, r6}^
     cc4:	5177654e 	cmnpl	r7, lr, asr #10
     cc8:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0xfffffa8b
     ccc:	75517800 	ldrbvc	r7, [r1, #-2048]	; 0xfffff800
     cd0:	47657565 	strbmi	r7, [r5, -r5, ror #10]!
     cd4:	72656e65 	rsbvc	r6, r5, #1616	; 0x650
     cd8:	72436369 	subvc	r6, r3, #-1543503871	; 0xa4000001
     cdc:	65746165 	ldrbvs	r6, [r4, #-357]!	; 0xfffffe9b
     ce0:	76727000 	ldrbtvc	r7, [r2], -r0
     ce4:	79706f43 	ldmdbvc	r0!, {r0, r1, r6, r8, r9, sl, fp, sp, lr}^
     ce8:	61746144 	cmnvs	r4, r4, asr #2
     cec:	6d6f7246 	sfmvs	f7, 2, [pc, #-280]!	; bdc <_start-0x7424>
     cf0:	75657551 	strbvc	r7, [r5, #-1361]!	; 0xfffffaaf
     cf4:	78750065 	ldmdavc	r5!, {r0, r2, r5, r6}^
     cf8:	7373654d 	cmnvc	r3, #322961408	; 0x13400000
     cfc:	73656761 	cmnvc	r5, #25427968	; 0x1840000
     d00:	74696157 	strbtvc	r6, [r9], #-343	; 0xfffffea9
     d04:	00676e69 	rsbeq	r6, r7, r9, ror #28
     d08:	65755178 	ldrbvs	r5, [r5, #-376]!	; 0xfffffe88
     d0c:	65476575 	strbvs	r6, [r7, #-1397]	; 0xfffffa8b
     d10:	6972656e 	ldmdbvs	r2!, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
     d14:	73655263 	cmnvc	r5, #805306374	; 0x30000006
     d18:	78007465 	stmdavc	r0, {r0, r2, r5, r6, sl, ip, sp, lr}
     d1c:	79706f43 	ldmdbvc	r0!, {r0, r1, r6, r8, r9, sl, fp, sp, lr}^
     d20:	69736f50 	ldmdbvs	r3!, {r4, r6, r8, r9, sl, fp, sp, lr}^
     d24:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
     d28:	76727000 	ldrbtvc	r7, [r2], -r0
     d2c:	6f6c6e55 	svcvs	0x006c6e55
     d30:	75516b63 	ldrbvc	r6, [r1, #-2915]	; 0xfffff49d
     d34:	00657565 	rsbeq	r7, r5, r5, ror #10
     d38:	4c785278 	lfmmi	f5, 2, [r8], #-480	; 0xfffffe20
     d3c:	006b636f 	rsbeq	r6, fp, pc, ror #6
     d40:	61546370 	cmpvs	r4, r0, ror r3
     d44:	78006c69 	stmdavc	r0, {r0, r3, r5, r6, sl, fp, sp, lr}
     d48:	69736f50 	ldmdbvs	r3!, {r4, r6, r8, r9, sl, fp, sp, lr}^
     d4c:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
     d50:	61547800 	cmpvs	r4, r0, lsl #16
     d54:	57736b73 			; <UNDEFINED> instruction: 0x57736b73
     d58:	69746961 	ldmdbvs	r4!, {r0, r5, r6, r8, fp, sp, lr}^
     d5c:	6f54676e 	svcvs	0x0054676e
     d60:	646e6553 	strbtvs	r6, [lr], #-1363	; 0xfffffaad
     d64:	75517800 	ldrbvc	r7, [r1, #-2048]	; 0xfffff800
     d68:	53657565 	cmnpl	r5, #423624704	; 0x19400000
     d6c:	49657a69 	stmdbmi	r5!, {r0, r3, r5, r6, r9, fp, ip, sp, lr}^
     d70:	7479426e 	ldrbtvc	r4, [r9], #-622	; 0xfffffd92
     d74:	70007365 	andvc	r7, r0, r5, ror #6
     d78:	69725763 	ldmdbvs	r2!, {r0, r1, r5, r6, r8, r9, sl, ip, lr}^
     d7c:	6f546574 	svcvs	0x00546574
     d80:	49787500 	ldmdbmi	r8!, {r8, sl, ip, sp, lr}^
     d84:	536d6574 	cmnpl	sp, #116, 10	; 0x1d000000
     d88:	00657a69 	rsbeq	r7, r5, r9, ror #20
     d8c:	6d695478 	cfstrdvs	mvd5, [r9, #-480]!	; 0xfffffe20
     d90:	456e4f65 	strbmi	r4, [lr, #-3941]!	; 0xfffff09b
     d94:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     d98:	00676e69 	rsbeq	r6, r7, r9, ror #28
     d9c:	75427670 	strbvc	r7, [r2, #-1648]	; 0xfffff990
     da0:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
     da4:	54637000 	strbtpl	r7, [r3], #-0
     da8:	4e6b7361 	cdpmi	3, 6, cr7, cr11, cr1, {3}
     dac:	00656d61 	rsbeq	r6, r5, r1, ror #26
     db0:	73615476 	cmnvc	r1, #1979711488	; 0x76000000
     db4:	646e456b 	strbtvs	r4, [lr], #-1387	; 0xfffffa95
     db8:	65686353 	strbvs	r6, [r8, #-851]!	; 0xfffffcad
     dbc:	656c7564 	strbvs	r7, [ip, #-1380]!	; 0xfffffa9c
     dc0:	73740072 	cmnvc	r4, #114	; 0x72
     dc4:	7361546b 	cmnvc	r1, #1795162112	; 0x6b000000
     dc8:	6e6f436b 	cdpvs	3, 6, cr4, cr15, cr11, {3}
     dcc:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; c04 <_start-0x73fc>
     dd0:	636f6c42 	cmnvs	pc, #16896	; 0x4200
     dd4:	7875006b 	ldmdavc	r5!, {r0, r1, r3, r5, r6}^
     dd8:	6b736154 	blvs	1cd9330 <mailbuffer+0x1cc2270>
     ddc:	4e746547 	cdpmi	5, 7, cr6, cr4, cr7, {2}
     de0:	65626d75 	strbvs	r6, [r2, #-3445]!	; 0xfffff28b
     de4:	54664f72 	strbtpl	r4, [r6], #-3954	; 0xfffff08e
     de8:	736b7361 	cmnvc	fp, #-2080374783	; 0x84000001
     dec:	54787500 	ldrbtpl	r7, [r8], #-1280	; 0xfffffb00
     df0:	6552706f 	ldrbvs	r7, [r2, #-111]	; 0xffffff91
     df4:	50796461 	rsbspl	r6, r9, r1, ror #8
     df8:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
     dfc:	00797469 	rsbseq	r7, r9, r9, ror #8
     e00:	61547875 	cmpvs	r4, r5, ror r8
     e04:	72506b73 	subsvc	r6, r0, #117760	; 0x1cc00
     e08:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
     e0c:	65477974 	strbvs	r7, [r7, #-2420]	; 0xfffff68c
     e10:	53780074 	cmnpl	r8, #116	; 0x74
     e14:	64656863 	strbtvs	r6, [r5], #-2147	; 0xfffff79d
     e18:	72656c75 	rsbvc	r6, r5, #29952	; 0x7500
     e1c:	6e6e7552 	mcrvs	5, 3, r7, cr14, cr2, {2}
     e20:	00676e69 	rsbeq	r6, r7, r9, ror #28
     e24:	65527870 	ldrbvs	r7, [r2, #-2160]	; 0xfffff790
     e28:	54796461 	ldrbtpl	r6, [r9], #-1121	; 0xfffffb9f
     e2c:	736b7361 	cmnvc	fp, #-2080374783	; 0x84000001
     e30:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0xfffff6b4
     e34:	682f0073 	stmdavs	pc!, {r0, r1, r4, r5, r6}	; <UNPREDICTABLE>
     e38:	2f656d6f 	svccs	0x00656d6f
     e3c:	78656c61 	stmdavc	r5!, {r0, r5, r6, sl, fp, sp, lr}^
     e40:	2f69702f 	svccs	0x0069702f
     e44:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
     e48:	534f5452 	movtpl	r5, #62546	; 0xf452
     e4c:	506c7500 	rsbpl	r7, ip, r0, lsl #10
     e50:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	; 0xfffffe7c
     e54:	72657465 	rsbvc	r7, r5, #1694498816	; 0x65000000
     e58:	54760073 	ldrbtpl	r0, [r6], #-115	; 0xffffff8d
     e5c:	536b7361 	cmnpl	fp, #-2080374783	; 0x84000001
     e60:	69547465 	ldmdbvs	r4, {r0, r2, r5, r6, sl, ip, sp, lr}^
     e64:	754f656d 	strbvc	r6, [pc, #-1389]	; 8ff <_start-0x7701>
     e68:	61745374 	cmnvs	r4, r4, ror r3
     e6c:	75006574 	strvc	r6, [r0, #-1396]	; 0xfffffa8c
     e70:	72754378 	rsbsvc	r4, r5, #120, 6	; 0xe0000001
     e74:	746e6572 	strbtvc	r6, [lr], #-1394	; 0xfffffa8e
     e78:	6f697250 	svcvs	0x00697250
     e7c:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     e80:	65447800 	strbvs	r7, [r4, #-2048]	; 0xfffff800
     e84:	6579616c 	ldrbvs	r6, [r9, #-364]!	; 0xfffffe94
     e88:	73615464 	cmnvc	r1, #100, 8	; 0x64000000
     e8c:	73694c6b 	cmnvc	r9, #27392	; 0x6b00
     e90:	78003174 	stmdavc	r0, {r2, r4, r5, r6, r8, ip, sp}
     e94:	616c6544 	cmnvs	ip, r4, asr #10
     e98:	54646579 	strbtpl	r6, [r4], #-1401	; 0xfffffa87
     e9c:	4c6b7361 	stclmi	3, cr7, [fp], #-388	; 0xfffffe7c
     ea0:	32747369 	rsbscc	r7, r4, #-1543503871	; 0xa4000001
     ea4:	61547600 	cmpvs	r4, r0, lsl #12
     ea8:	65536b73 	ldrbvs	r6, [r3, #-2931]	; 0xfffff48d
     eac:	70704174 	rsbsvc	r4, r0, r4, ror r1
     eb0:	6163696c 	cmnvs	r3, ip, ror #18
     eb4:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
     eb8:	6b736154 	blvs	1cd9410 <mailbuffer+0x1cc2350>
     ebc:	00676154 	rsbeq	r6, r7, r4, asr r1
     ec0:	694d7875 	stmdbvs	sp, {r0, r2, r4, r5, r6, fp, ip, sp, lr}^
     ec4:	64657373 	strbtvs	r7, [r5], #-883	; 0xfffffc8d
     ec8:	6b636954 	blvs	18db420 <mailbuffer+0x18c4360>
     ecc:	78700073 	ldmdavc	r0!, {r0, r1, r4, r5, r6}^
     ed0:	6b736154 	blvs	1cd9428 <mailbuffer+0x1cc2368>
     ed4:	65526f54 	ldrbvs	r6, [r2, #-3924]	; 0xfffff0ac
     ed8:	656d7573 	strbvs	r7, [sp, #-1395]!	; 0xfffffa8d
     edc:	69597800 	ldmdbvs	r9, {fp, ip, sp, lr}^
     ee0:	52646c65 	rsbpl	r6, r4, #25856	; 0x6500
     ee4:	69757165 	ldmdbvs	r5!, {r0, r2, r5, r6, r8, ip, sp, lr}^
     ee8:	00646572 	rsbeq	r6, r4, r2, ror r5
     eec:	63537875 	cmpvs	r3, #7667712	; 0x750000
     ef0:	75646568 	strbvc	r6, [r4, #-1384]!	; 0xfffffa98
     ef4:	5372656c 	cmnpl	r2, #108, 10	; 0x1b000000
     ef8:	65707375 	ldrbvs	r7, [r0, #-885]!	; 0xfffffc8b
     efc:	6465646e 	strbtvs	r6, [r5], #-1134	; 0xfffffb92
     f00:	55787000 	ldrbpl	r7, [r8, #-0]!
     f04:	6f6c626e 	svcvs	0x006c626e
     f08:	64656b63 	strbtvs	r6, [r5], #-2915	; 0xfffff49d
     f0c:	00424354 	subeq	r4, r2, r4, asr r3
     f10:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; e5c <_start-0x71a4>
     f14:	6c612f65 	stclvs	15, cr2, [r1], #-404	; 0xfffffe6c
     f18:	702f7865 	eorvc	r7, pc, r5, ror #16
     f1c:	72612f69 	rsbvc	r2, r1, #420	; 0x1a4
     f20:	54522d6d 	ldrbpl	r2, [r2], #-3437	; 0xfffff293
     f24:	462f534f 	strtmi	r5, [pc], -pc, asr #6
     f28:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
     f2c:	2f534f54 	svccs	0x00534f54
     f30:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     f34:	742f6563 	strtvc	r6, [pc], #-1379	; f3c <_start-0x70c4>
     f38:	736b7361 	cmnvc	fp, #-2080374783	; 0x84000001
     f3c:	7000632e 	andvc	r6, r0, lr, lsr #6
     f40:	6c417672 	mcrrvs	6, 7, r7, r1, cr2
     f44:	61636f6c 	cmnvs	r3, ip, ror #30
     f48:	43546574 	cmpmi	r4, #116, 10	; 0x1d000000
     f4c:	646e4142 	strbtvs	r4, [lr], #-322	; 0xfffffebe
     f50:	63617453 	cmnvs	r1, #1392508928	; 0x53000000
     f54:	5378006b 	cmnpl	r8, #107	; 0x6b
     f58:	65707375 	ldrbvs	r7, [r0, #-885]!	; 0xfffffc8b
     f5c:	6465646e 	strbtvs	r6, [r5], #-1134	; 0xfffffb92
     f60:	6b736154 	blvs	1cd94b8 <mailbuffer+0x1cc23f8>
     f64:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0xfffff6b4
     f68:	61547800 	cmpvs	r4, r0, lsl #16
     f6c:	65476b73 	strbvs	r6, [r7, #-2931]	; 0xfffff48d
     f70:	63695474 	cmnvs	r9, #116, 8	; 0x74000000
     f74:	756f436b 	strbvc	r4, [pc, #-875]!	; c11 <_start-0x73ef>
     f78:	7246746e 	subvc	r7, r6, #1845493760	; 0x6e000000
     f7c:	53496d6f 	movtpl	r6, #40303	; 0x9d6f
     f80:	50780052 	rsbspl	r0, r8, r2, asr r0
     f84:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
     f88:	6552676e 	ldrbvs	r6, [r2, #-1902]	; 0xfffff892
     f8c:	4c796461 	cfldrdmi	mvd6, [r9], #-388	; 0xfffffe7c
     f90:	00747369 	rsbseq	r7, r4, r9, ror #6
     f94:	73615478 	cmnvc	r1, #120, 8	; 0x78000000
     f98:	5473496b 	ldrbtpl	r4, [r3], #-2411	; 0xfffff695
     f9c:	536b7361 	cmnpl	fp, #-2080374783	; 0x84000001
     fa0:	65707375 	ldrbvs	r7, [r0, #-885]!	; 0xfffffc8b
     fa4:	6465646e 	strbtvs	r6, [r5], #-1134	; 0xfffffb92
     fa8:	76727000 	ldrbtvc	r7, [r2], -r0
     fac:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
     fb0:	696c6169 	stmdbvs	ip!, {r0, r3, r5, r6, r8, sp, lr}^
     fb4:	61546573 	cmpvs	r4, r3, ror r5
     fb8:	694c6b73 	stmdbvs	ip, {r0, r1, r4, r5, r6, r8, r9, fp, sp, lr}^
     fbc:	00737473 	rsbseq	r7, r3, r3, ror r4
     fc0:	73615478 	cmnvc	r1, #120, 8	; 0x78000000
     fc4:	7465476b 	strbtvc	r4, [r5], #-1899	; 0xfffff895
     fc8:	6c707041 	ldclvs	0, cr7, [r0], #-260	; 0xfffffefc
     fcc:	74616369 	strbtvc	r6, [r1], #-873	; 0xfffffc97
     fd0:	546e6f69 	strbtpl	r6, [lr], #-3945	; 0xfffff097
     fd4:	546b7361 	strbtpl	r7, [fp], #-865	; 0xfffffc9f
     fd8:	78006761 	stmdavc	r0, {r0, r5, r6, r8, r9, sl, sp, lr}
     fdc:	6b736154 	blvs	1cd9534 <mailbuffer+0x1cc2474>
     fe0:	69615773 	stmdbvs	r1!, {r0, r1, r4, r5, r6, r8, r9, sl, ip, lr}^
     fe4:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
     fe8:	6d726554 	cfldr64vs	mvdx6, [r2, #-336]!	; 0xfffffeb0
     fec:	74616e69 	strbtvc	r6, [r1], #-3689	; 0xfffff197
     ff0:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     ff4:	73694d78 	cmnvc	r9, #120, 26	; 0x1e00
     ff8:	59646573 	stmdbpl	r4!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
     ffc:	646c6569 	strbtvs	r6, [ip], #-1385	; 0xfffffa97
    1000:	61547600 	cmpvs	r4, r0, lsl #12
    1004:	75536b73 	ldrbvc	r6, [r3, #-2931]	; 0xfffff48d
    1008:	6e657073 	mcrvs	0, 3, r7, cr5, cr3, {3}
    100c:	6c6c4164 	stfvse	f4, [ip], #-400	; 0xfffffe70
    1010:	61547800 	cmpvs	r4, r0, lsl #16
    1014:	61486b73 	hvcvs	34483	; 0x86b3
    1018:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
    101c:	6b737400 	blvs	1cde024 <mailbuffer+0x1cc6f64>
    1020:	00424354 	subeq	r4, r2, r4, asr r3
    1024:	69547870 	ldmdbvs	r4, {r4, r5, r6, fp, ip, sp, lr}^
    1028:	54736b63 	ldrbtpl	r6, [r3], #-2915	; 0xfffff49d
    102c:	6961576f 	stmdbvs	r1!, {r0, r1, r2, r3, r5, r6, r8, r9, sl, ip, lr}^
    1030:	78750074 	ldmdavc	r5!, {r2, r4, r5, r6}^
    1034:	6b736154 	blvs	1cd958c <mailbuffer+0x1cc24cc>
    1038:	6c654473 	cfstrdvs	mvd4, [r5], #-460	; 0xfffffe34
    103c:	64657465 	strbtvs	r7, [r5], #-1125	; 0xfffffb9b
    1040:	69547800 	ldmdbvs	r4, {fp, ip, sp, lr}^
    1044:	6f436b63 	svcvs	0x00436b63
    1048:	00746e75 	rsbseq	r6, r4, r5, ror lr
    104c:	764f7870 			; <UNDEFINED> instruction: 0x764f7870
    1050:	6c667265 	sfmvs	f7, 2, [r6], #-404	; 0xfffffe6c
    1054:	6544776f 	strbvs	r7, [r4, #-1903]	; 0xfffff891
    1058:	6579616c 	ldrbvs	r6, [r9, #-364]!	; 0xfffffe94
    105c:	73615464 	cmnvc	r1, #100, 8	; 0x64000000
    1060:	73694c6b 	cmnvc	r9, #27392	; 0x6b00
    1064:	54760074 	ldrbtpl	r0, [r6], #-116	; 0xffffff8c
    1068:	506b7361 	rsbpl	r7, fp, r1, ror #6
    106c:	6563616c 	strbvs	r6, [r3, #-364]!	; 0xfffffe94
    1070:	76456e4f 	strbvc	r6, [r5], -pc, asr #28
    1074:	4c746e65 	ldclmi	14, cr6, [r4], #-404	; 0xfffffe6c
    1078:	00747369 	rsbseq	r7, r4, r9, ror #6
    107c:	73615476 	cmnvc	r1, #1979711488	; 0x76000000
    1080:	6c65446b 	cfstrdvs	mvd4, [r5], #-428	; 0xfffffe54
    1084:	70007961 	andvc	r7, r0, r1, ror #18
    1088:	73615478 	cmnvc	r1, #120, 8	; 0x78000000
    108c:	5478006b 	ldrbtpl	r0, [r8], #-107	; 0xffffff95
    1090:	526b7361 	rsbpl	r7, fp, #-2080374783	; 0x84000001
    1094:	766f6d65 	strbtvc	r6, [pc], -r5, ror #26
    1098:	6f724665 	svcvs	0x00724665
    109c:	6576456d 	ldrbvs	r4, [r6, #-1389]!	; 0xfffffa93
    10a0:	694c746e 	stmdbvs	ip, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
    10a4:	78007473 	stmdavc	r0, {r0, r1, r4, r5, r6, sl, ip, sp, lr}
    10a8:	756f6853 	strbvc	r6, [pc, #-2131]!	; 85d <_start-0x77a3>
    10ac:	6544646c 	strbvs	r6, [r4, #-1132]	; 0xfffffb94
    10b0:	0079616c 	rsbseq	r6, r9, ip, ror #2
    10b4:	49767270 	ldmdbmi	r6!, {r4, r5, r6, r9, ip, sp, lr}^
    10b8:	54656c64 	strbtpl	r6, [r5], #-3172	; 0xfffff39c
    10bc:	006b7361 	rsbeq	r7, fp, r1, ror #6
    10c0:	41546470 	cmpmi	r4, r0, ror r4
    10c4:	485f4b53 	ldmdami	pc, {r0, r1, r4, r6, r8, r9, fp, lr}^	; <UNPREDICTABLE>
    10c8:	5f4b4f4f 	svcpl	0x004b4f4f
    10cc:	45444f43 	strbmi	r4, [r4, #-3907]	; 0xfffff0bd
    10d0:	694c7800 	stmdbvs	ip, {fp, ip, sp, lr}^
    10d4:	73497473 	movtvc	r7, #38003	; 0x9473
    10d8:	74706d45 	ldrbtvc	r6, [r0], #-3397	; 0xfffff2bb
    10dc:	78700079 	ldmdavc	r0!, {r0, r3, r4, r5, r6}^
    10e0:	6b6f6f48 	blvs	1bdce08 <mailbuffer+0x1bc5d48>
    10e4:	636e7546 	cmnvs	lr, #293601280	; 0x11800000
    10e8:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    10ec:	4e787000 	cdpmi	0, 7, cr7, cr8, cr0, {0}
    10f0:	43547765 	cmpmi	r4, #26476544	; 0x1940000
    10f4:	78700042 	ldmdavc	r0!, {r1, r6}^
    10f8:	6b736154 	blvs	1cd9650 <mailbuffer+0x1cc2590>
    10fc:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
    1100:	61547800 	cmpvs	r4, r0, lsl #16
    1104:	65476b73 	strbvs	r6, [r7, #-2931]	; 0xfffff48d
    1108:	63695474 	cmnvs	r9, #116, 8	; 0x74000000
    110c:	756f436b 	strbvc	r4, [pc, #-875]!	; da9 <_start-0x7257>
    1110:	7800746e 	stmdavc	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    1114:	7478654e 	ldrbtvc	r6, [r8], #-1358	; 0xfffffab2
    1118:	6b736154 	blvs	1cd9670 <mailbuffer+0x1cc25b0>
    111c:	6c626e55 	stclvs	14, cr6, [r2], #-340	; 0xfffffeac
    1120:	546b636f 	strbtpl	r6, [fp], #-879	; 0xfffffc91
    1124:	00656d69 	rsbeq	r6, r5, r9, ror #26
    1128:	74537375 	ldrbvc	r7, [r3], #-885	; 0xfffffc8b
    112c:	446b6361 	strbtmi	r6, [fp], #-865	; 0xfffffc9f
    1130:	68747065 	ldmdavs	r4!, {r0, r2, r5, r6, ip, sp, lr}^
    1134:	69547800 	ldmdbvs	r4, {fp, ip, sp, lr}^
    1138:	00736b63 	rsbseq	r6, r3, r3, ror #22
    113c:	654e7875 	strbvs	r7, [lr, #-2165]	; 0xfffff78b
    1140:	69725077 	ldmdbvs	r2!, {r0, r1, r2, r4, r5, r6, ip, lr}^
    1144:	7469726f 	strbtvc	r7, [r9], #-623	; 0xfffffd91
    1148:	63700079 	cmnvs	r0, #121	; 0x79
    114c:	656d614e 	strbvs	r6, [sp, #-334]!	; 0xfffffeb2
    1150:	54787000 	ldrbtpl	r7, [r8], #-0
    1154:	4f656d69 	svcmi	0x00656d69
    1158:	75007475 	strvc	r7, [r0, #-1141]	; 0xfffffb8b
    115c:	73615478 	cmnvc	r1, #120, 8	; 0x78000000
    1160:	6d754e6b 	ldclvs	14, cr4, [r5, #-428]!	; 0xfffffe54
    1164:	00726562 	rsbseq	r6, r2, r2, ror #10
    1168:	73615476 	cmnvc	r1, #1979711488	; 0x76000000
    116c:	6972506b 	ldmdbvs	r2!, {r0, r1, r3, r5, r6, ip, lr}^
    1170:	7469726f 	strbtvc	r7, [r9], #-623	; 0xfffffd91
    1174:	74655379 	strbtvc	r5, [r5], #-889	; 0xfffffc87
    1178:	654d7800 	strbvs	r7, [sp, #-2048]	; 0xfffff800
    117c:	79726f6d 	ldmdbvc	r2!, {r0, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    1180:	69676552 	stmdbvs	r7!, {r1, r4, r6, r8, sl, sp, lr}^
    1184:	76006e6f 	strvc	r6, [r0], -pc, ror #28
    1188:	6b736154 	blvs	1cd96e0 <mailbuffer+0x1cc2620>
    118c:	72636e49 	rsbvc	r6, r3, #1168	; 0x490
    1190:	6e656d65 	cdpvs	13, 6, cr6, cr5, cr5, {3}
    1194:	63695474 	cmnvs	r9, #116, 8	; 0x74000000
    1198:	7270006b 	rsbsvc	r0, r0, #107	; 0x6b
    119c:	696e4976 	stmdbvs	lr!, {r1, r2, r4, r5, r6, r8, fp, lr}^
    11a0:	6c616974 			; <UNDEFINED> instruction: 0x6c616974
    11a4:	54657369 	strbtpl	r7, [r5], #-873	; 0xfffffc97
    11a8:	61564243 	cmpvs	r6, r3, asr #4
    11ac:	62616972 	rsbvs	r6, r1, #1867776	; 0x1c8000
    11b0:	0073656c 	rsbseq	r6, r3, ip, ror #10
    11b4:	4d454d78 	stclmi	13, cr4, [r5, #-480]	; 0xfffffe20
    11b8:	5f59524f 	svcpl	0x0059524f
    11bc:	49474552 	stmdbmi	r7, {r1, r4, r6, r8, sl, lr}^
    11c0:	76004e4f 	strvc	r4, [r0], -pc, asr #28
    11c4:	6b736154 	blvs	1cd971c <mailbuffer+0x1cc265c>
    11c8:	656c6544 	strbvs	r6, [ip, #-1348]!	; 0xfffffabc
    11cc:	78006574 	stmdavc	r0, {r2, r4, r5, r6, r8, sl, sp, lr}
    11d0:	6b736154 	blvs	1cd9728 <mailbuffer+0x1cc2668>
    11d4:	6c6c6143 	stfvse	f6, [ip], #-268	; 0xfffffef4
    11d8:	6c707041 	ldclvs	0, cr7, [r0], #-260	; 0xfffffefc
    11dc:	74616369 	strbtvc	r6, [r1], #-873	; 0xfffffc97
    11e0:	546e6f69 	strbtpl	r6, [lr], #-3945	; 0xfffff097
    11e4:	486b7361 	stmdami	fp!, {r0, r5, r6, r8, r9, ip, sp, lr}^
    11e8:	006b6f6f 	rsbeq	r6, fp, pc, ror #30
    11ec:	73615478 	cmnvc	r1, #120, 8	; 0x78000000
    11f0:	6e65476b 	cdpvs	7, 6, cr4, cr5, cr11, {3}
    11f4:	63697265 	cmnvs	r9, #1342177286	; 0x50000006
    11f8:	61657243 	cmnvs	r5, r3, asr #4
    11fc:	76006574 			; <UNDEFINED> instruction: 0x76006574
    1200:	6b736154 	blvs	1cd9758 <mailbuffer+0x1cc2698>
    1204:	74697753 	strbtvc	r7, [r9], #-1875	; 0xfffff8ad
    1208:	6f436863 	svcvs	0x00436863
    120c:	7865746e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
    1210:	4e780074 	mrcmi	0, 3, r0, cr8, cr4, {3}
    1214:	664f6d75 			; <UNDEFINED> instruction: 0x664f6d75
    1218:	7265764f 	rsbvc	r7, r5, #82837504	; 0x4f00000
    121c:	776f6c66 	strbvc	r6, [pc, -r6, ror #24]!
    1220:	78700073 	ldmdavc	r0!, {r0, r1, r4, r5, r6}^
    1224:	6b736154 	blvs	1cd977c <mailbuffer+0x1cc26bc>
    1228:	00676154 	rsbeq	r6, r7, r4, asr r1
    122c:	74537870 	ldrbvc	r7, [r3], #-2160	; 0xfffff790
    1230:	006b6361 	rsbeq	r6, fp, r1, ror #6
    1234:	73615478 	cmnvc	r1, #120, 8	; 0x78000000
    1238:	7365526b 	cmnvc	r5, #-1342177274	; 0xb0000006
    123c:	41656d75 	smcmi	22229	; 0x56d5
    1240:	70006c6c 	andvc	r6, r0, ip, ror #24
    1244:	6c654478 	cfstrdvs	mvd4, [r5], #-480	; 0xfffffe20
    1248:	64657961 	strbtvs	r7, [r5], #-2401	; 0xfffff69f
    124c:	6b736154 	blvs	1cd97a4 <mailbuffer+0x1cc26e4>
    1250:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0xfffff6b4
    1254:	54787500 	ldrbtpl	r7, [r8], #-1280	; 0xfffffb00
    1258:	7355706f 	cmpvc	r5, #111	; 0x6f
    125c:	72506465 	subsvc	r6, r0, #1694498816	; 0x65000000
    1260:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    1264:	78007974 	stmdavc	r0, {r2, r4, r5, r6, r8, fp, ip, sp, lr}
    1268:	6b736154 	blvs	1cd97c0 <mailbuffer+0x1cc2700>
    126c:	63656843 	cmnvs	r5, #4390912	; 0x430000
    1270:	726f466b 	rsbvc	r4, pc, #112197632	; 0x6b00000
    1274:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
    1278:	0074754f 	rsbseq	r7, r4, pc, asr #10
    127c:	61547870 	cmpvs	r4, r0, ror r8
    1280:	6f546b73 	svcvs	0x00546b73
    1284:	70737553 	rsbsvc	r7, r3, r3, asr r5
    1288:	00646e65 	rsbeq	r6, r4, r5, ror #28
    128c:	72507870 	subsvc	r7, r0, #112, 16	; 0x700000
    1290:	6f697665 	svcvs	0x00697665
    1294:	61577375 	cmpvs	r7, r5, ror r3
    1298:	6954656b 	ldmdbvs	r4, {r0, r1, r3, r5, r6, r8, sl, sp, lr}^
    129c:	7000656d 	andvc	r6, r0, sp, ror #10
    12a0:	73615478 	cmnvc	r1, #120, 8	; 0x78000000
    12a4:	446f546b 	strbtmi	r5, [pc], #-1131	; 12ac <_start-0x6d54>
    12a8:	74656c65 	strbtvc	r6, [r5], #-3173	; 0xfffff39b
    12ac:	6c750065 	ldclvs	0, cr0, [r5], #-404	; 0xfffffe6c
    12b0:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
    12b4:	6e496874 	mcrvs	8, 2, r6, cr9, cr4, {3}
    12b8:	65747942 	ldrbvs	r7, [r4, #-2370]!	; 0xfffff6be
    12bc:	54780073 	ldrbtpl	r0, [r8], #-115	; 0xffffff8d
    12c0:	526b7361 	rsbpl	r7, fp, #-2080374783	; 0x84000001
    12c4:	6d757365 	ldclvs	3, cr7, [r5, #-404]!	; 0xfffffe6c
    12c8:	6f724665 	svcvs	0x00724665
    12cc:	5253496d 	subspl	r4, r3, #1785856	; 0x1b4000
    12d0:	61547600 	cmpvs	r4, r0, lsl #12
    12d4:	694d6b73 	stmdbvs	sp, {r0, r1, r4, r5, r6, r8, r9, fp, sp, lr}^
    12d8:	64657373 	strbtvs	r7, [r5], #-883	; 0xfffffc8d
    12dc:	6c656959 			; <UNDEFINED> instruction: 0x6c656959
    12e0:	75700064 	ldrbvc	r0, [r0, #-100]!	; 0xffffff9c
    12e4:	61745378 	cmnvs	r4, r8, ror r3
    12e8:	75426b63 	strbvc	r6, [r2, #-2915]	; 0xfffff49d
    12ec:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
    12f0:	61547600 	cmpvs	r4, r0, lsl #12
    12f4:	74536b73 	ldrbvc	r6, [r3], #-2931	; 0xfffff48d
    12f8:	53747261 	cmnpl	r4, #268435462	; 0x10000006
    12fc:	64656863 	strbtvs	r6, [r5], #-2147	; 0xfffff79d
    1300:	72656c75 	rsbvc	r6, r5, #29952	; 0x7500
    1304:	76727000 	ldrbtvc	r7, [r2], -r0
    1308:	63656843 	cmnvs	r5, #4390912	; 0x430000
    130c:	7361546b 	cmnvc	r1, #1795162112	; 0x6b000000
    1310:	6157736b 	cmpvs	r7, fp, ror #6
    1314:	6e697469 	cdpvs	4, 6, cr7, cr9, cr9, {3}
    1318:	72655467 	rsbvc	r5, r5, #1728053248	; 0x67000000
    131c:	616e696d 	cmnvs	lr, sp, ror #18
    1320:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    1324:	42767000 	rsbsmi	r7, r6, #0
    1328:	41657361 	cmnmi	r5, r1, ror #6
    132c:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0xfffffb9c
    1330:	76007373 			; <UNDEFINED> instruction: 0x76007373
    1334:	6b736154 	blvs	1cd988c <mailbuffer+0x1cc27cc>
    1338:	616c6544 	cmnvs	ip, r4, asr #10
    133c:	746e5579 	strbtvc	r5, [lr], #-1401	; 0xfffffa87
    1340:	70006c69 	andvc	r6, r0, r9, ror #24
    1344:	65447672 	strbvs	r7, [r4, #-1650]	; 0xfffff98e
    1348:	6574656c 	ldrbvs	r6, [r4, #-1388]!	; 0xfffffa94
    134c:	00424354 	subeq	r4, r2, r4, asr r3
    1350:	73615476 	cmnvc	r1, #1979711488	; 0x76000000
    1354:	7375536b 	cmnvc	r5, #-1409286143	; 0xac000001
    1358:	646e6570 	strbtvs	r6, [lr], #-1392	; 0xfffffa90
    135c:	6c417800 	mcrrvs	8, 0, r7, r1, cr0
    1360:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
    1364:	65695979 	strbvs	r5, [r9, #-2425]!	; 0xfffff687
    1368:	6465646c 	strbtvs	r6, [r5], #-1132	; 0xfffffb94
    136c:	50767000 	rsbspl	r7, r6, r0
    1370:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	; 0xfffffe7c
    1374:	72657465 	rsbvc	r7, r5, #1694498816	; 0x65000000
    1378:	65527800 	ldrbvs	r7, [r2, #-2048]	; 0xfffff800
    137c:	6e6f6967 	vnmulvs.f16	s13, s30, s15	; <UNPREDICTABLE>
    1380:	72700073 	rsbsvc	r0, r0, #115	; 0x73
    1384:	64644176 	strbtvs	r4, [r4], #-374	; 0xfffffe8a
    1388:	72727543 	rsbsvc	r7, r2, #281018368	; 0x10c00000
    138c:	54746e65 	ldrbtpl	r6, [r4], #-3685	; 0xfffff19b
    1390:	546b7361 	strbtpl	r7, [fp], #-865	; 0xfffffc9f
    1394:	6c65446f 	cfstrdvs	mvd4, [r5], #-444	; 0xfffffe44
    1398:	64657961 	strbtvs	r7, [r5], #-2401	; 0xfffff69f
    139c:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0xfffff6b4
    13a0:	43787500 	cmnmi	r8, #0, 10
    13a4:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0xfffffd8b
    13a8:	754e746e 	strbvc	r7, [lr, #-1134]	; 0xfffffb92
    13ac:	7265626d 	rsbvc	r6, r5, #-805306362	; 0xd0000006
    13b0:	6154664f 	cmpvs	r4, pc, asr #12
    13b4:	00736b73 	rsbseq	r6, r3, r3, ror fp
    13b8:	6d695478 	cfstrdvs	mvd5, [r9, #-480]!	; 0xfffffe20
    13bc:	636e4965 	cmnvs	lr, #1654784	; 0x194000
    13c0:	656d6572 	strbvs	r6, [sp, #-1394]!	; 0xfffffa8e
    13c4:	7000746e 	andvc	r7, r0, lr, ror #8
    13c8:	42435478 	submi	r5, r3, #120, 8	; 0x78000000
    13cc:	61547600 	cmpvs	r4, r0, lsl #12
    13d0:	65526b73 	ldrbvs	r6, [r2, #-2931]	; 0xfffff48d
    13d4:	656d7573 	strbvs	r7, [sp, #-1395]!	; 0xfffffa8d
    13d8:	43787000 	cmnmi	r8, #0
    13dc:	74616572 	strbtvc	r6, [r1], #-1394	; 0xfffffa8e
    13e0:	61546465 	cmpvs	r4, r5, ror #8
    13e4:	50006b73 	andpl	r6, r0, r3, ror fp
    13e8:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    13ec:	0031676e 	eorseq	r6, r1, lr, ror #14
    13f0:	646e6550 	strbtvs	r6, [lr], #-1360	; 0xfffffab0
    13f4:	32676e69 	rsbcc	r6, r7, #1680	; 0x690
    13f8:	73694400 	cmnvc	r9, #0, 8
    13fc:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    1400:	69736142 	ldmdbvs	r3!, {r1, r6, r8, sp, lr}^
    1404:	43420063 	movtmi	r0, #8291	; 0x2063
    1408:	3338324d 	teqcc	r8, #-805306364	; 0xd0000004
    140c:	4e495f35 	mcrmi	15, 2, r5, cr9, cr5, {1}
    1410:	525f4354 	subspl	r4, pc, #84, 6	; 0x50000001
    1414:	00534745 	subseq	r4, r3, r5, asr #14
    1418:	43514946 	cmpmi	r1, #1146880	; 0x118000
    141c:	006c7274 	rsbeq	r7, ip, r4, ror r2
    1420:	52717269 	rsbspl	r7, r1, #-1879048186	; 0x90000006
    1424:	73696765 	cmnvc	r9, #26476544	; 0x1940000
    1428:	00726574 	rsbseq	r6, r2, r4, ror r5
    142c:	42717269 	rsbsmi	r7, r1, #-1879048186	; 0x90000006
    1430:	6b636f6c 	blvs	18dd1e8 <mailbuffer+0x18c6128>
    1434:	4d6c7500 	cfstr64mi	mvdx7, [ip, #-0]
    1438:	656b7361 	strbvs	r7, [fp, #-865]!	; 0xfffffc9f
    143c:	61745364 	cmnvs	r4, r4, ror #6
    1440:	00737574 	rsbseq	r7, r3, r4, ror r5
    1444:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
    1448:	0064656c 	rsbeq	r6, r4, ip, ror #10
    144c:	646e6570 	strbtvs	r6, [lr], #-1392	; 0xfffffa90
    1450:	00676e69 	rsbeq	r6, r7, r9, ror #28
    1454:	646e6168 	strbtvs	r6, [lr], #-360	; 0xfffffe98
    1458:	6152656c 	cmpvs	r2, ip, ror #10
    145c:	0065676e 	rsbeq	r6, r5, lr, ror #14
    1460:	55717269 	ldrbpl	r7, [r1, #-617]!	; 0xfffffd97
    1464:	6f6c626e 	svcvs	0x006c626e
    1468:	6d006b63 	vstrvs	d6, [r0, #-396]	; 0xfffffe74
    146c:	006b7361 	rsbeq	r7, fp, r1, ror #6
    1470:	42515249 	subsmi	r5, r1, #-1879048188	; 0x90000004
    1474:	63697361 	cmnvs	r9, #-2080374783	; 0x84000001
    1478:	6e667000 	cdpvs	0, 6, cr7, cr6, cr0, {0}
    147c:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
    1480:	0072656c 	rsbseq	r6, r2, ip, ror #10
    1484:	44717269 	ldrbtmi	r7, [r1], #-617	; 0xfffffd97
    1488:	62617369 	rsbvs	r7, r1, #-1543503871	; 0xa4000001
    148c:	6900656c 	stmdbvs	r0, {r2, r3, r5, r6, r8, sl, sp, lr}
    1490:	61487172 	hvcvs	34578	; 0x8712
    1494:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
    1498:	6e450072 	mcrvs	0, 2, r0, cr5, cr2, {3}
    149c:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    14a0:	69440032 	stmdbvs	r4, {r1, r4, r5}^
    14a4:	6c626173 	stfvse	f6, [r2], #-460	; 0xfffffe34
    14a8:	44003165 	strmi	r3, [r0], #-357	; 0xfffffe9b
    14ac:	62617369 	rsbvs	r7, r1, #-1543503871	; 0xa4000001
    14b0:	0032656c 	eorseq	r6, r2, ip, ror #10
    14b4:	65565f67 	ldrbvs	r5, [r6, #-3943]	; 0xfffff099
    14b8:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
    14bc:	6c626154 	stfvse	f6, [r2], #-336	; 0xfffffeb0
    14c0:	72690065 	rsbvc	r0, r9, #101	; 0x65
    14c4:	616e4571 	smcvs	58449	; 0xe451
    14c8:	00656c62 	rsbeq	r6, r5, r2, ror #24
    14cc:	495f4e46 	ldmdbmi	pc, {r1, r2, r6, r9, sl, fp, lr}^	; <UNPREDICTABLE>
    14d0:	5245544e 	subpl	r5, r5, #1308622848	; 0x4e000000
    14d4:	54505552 	ldrbpl	r5, [r0], #-1362	; 0xfffffaae
    14d8:	4e41485f 	mcrmi	8, 2, r4, cr1, cr15, {2}
    14dc:	52454c44 	subpl	r4, r5, #68, 24	; 0x4400
    14e0:	544e4900 	strbpl	r4, [lr], #-2304	; 0xfffff700
    14e4:	55525245 	ldrbpl	r5, [r2, #-581]	; 0xfffffdbb
    14e8:	565f5450 			; <UNDEFINED> instruction: 0x565f5450
    14ec:	4f544345 	svcmi	0x00544345
    14f0:	682f0052 	stmdavs	pc!, {r1, r4, r6}	; <UNPREDICTABLE>
    14f4:	2f656d6f 	svccs	0x00656d6f
    14f8:	78656c61 	stmdavc	r5!, {r0, r5, r6, sl, fp, sp, lr}^
    14fc:	2f69702f 	svccs	0x0069702f
    1500:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    1504:	534f5452 	movtpl	r5, #62546	; 0xf452
    1508:	6d65442f 	cfstrdvs	mvd4, [r5, #-188]!	; 0xffffff44
    150c:	72442f6f 	subvc	r2, r4, #444	; 0x1bc
    1510:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    1514:	72692f73 	rsbvc	r2, r9, #460	; 0x1cc
    1518:	00632e71 	rsbeq	r2, r3, r1, ror lr
    151c:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
    1520:	6142656c 	cmpvs	r2, ip, ror #10
    1524:	00636973 	rsbeq	r6, r3, r3, ror r9
    1528:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
    152c:	0031656c 	eorseq	r6, r1, ip, ror #10
    1530:	45544544 	ldrbmi	r4, [r4, #-1348]	; 0xfffffabc
    1534:	525f5443 	subspl	r5, pc, #1124073472	; 0x43000000
    1538:	4e495349 	cdpmi	3, 4, cr5, cr9, cr9, {2}
    153c:	61750047 	cmnvs	r5, r7, asr #32
    1540:	695f7472 	ldmdbvs	pc, {r1, r4, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
    1544:	0074696e 	rsbseq	r6, r4, lr, ror #18
    1548:	46415047 	strbmi	r5, [r1], -r7, asr #32
    154c:	52004e45 	andpl	r4, r0, #1104	; 0x450
    1550:	72657365 	rsbvc	r7, r5, #-1811939327	; 0x94000001
    1554:	5f646576 	svcpl	0x00646576
    1558:	50470034 	subpl	r0, r7, r4, lsr r0
    155c:	00445550 	subeq	r5, r4, r0, asr r5
    1560:	53465047 	movtpl	r5, #24647	; 0x6047
    1564:	44004c45 	strmi	r4, [r0], #-3141	; 0xfffff3bb
    1568:	62617369 	rsbvs	r7, r1, #-1543503871	; 0xa4000001
    156c:	7047656c 	subvc	r6, r7, ip, ror #10
    1570:	65446f69 	strbvs	r6, [r4, #-3945]	; 0xfffff097
    1574:	74636574 	strbtvc	r6, [r3], #-1396	; 0xfffffa8c
    1578:	696d6d00 	stmdbvs	sp!, {r8, sl, fp, sp, lr}^
    157c:	65725f6f 	ldrbvs	r5, [r2, #-3951]!	; 0xfffff091
    1580:	47006461 	strmi	r6, [r0, -r1, ror #8]
    1584:	5f4f4950 	svcpl	0x004f4950
    1588:	00524944 	subseq	r4, r2, r4, asr #18
    158c:	69755f5f 	ldmdbvs	r5!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
    1590:	3233746e 	eorscc	r7, r3, #1845493760	; 0x6e000000
    1594:	4700745f 	smlsdmi	r0, pc, r4, r7	; <UNPREDICTABLE>
    1598:	524c4350 	subpl	r4, ip, #80, 6	; 0x40000001
    159c:	6f682f00 	svcvs	0x00682f00
    15a0:	612f656d 			; <UNDEFINED> instruction: 0x612f656d
    15a4:	2f78656c 	svccs	0x0078656c
    15a8:	612f6970 			; <UNDEFINED> instruction: 0x612f6970
    15ac:	522d6d72 	eorpl	r6, sp, #7296	; 0x1c80
    15b0:	2f534f54 	svccs	0x00534f54
    15b4:	6f6d6544 	svcvs	0x006d6544
    15b8:	6972442f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, lr}^
    15bc:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
    15c0:	6970672f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r8, r9, sl, sp, lr}^
    15c4:	00632e6f 	rsbeq	r2, r3, pc, ror #28
    15c8:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
    15cc:	006d754e 	rsbeq	r7, sp, lr, asr #10
    15d0:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    15d4:	64657672 	strbtvs	r7, [r5], #-1650	; 0xfffff98e
    15d8:	5200315f 	andpl	r3, r0, #-1073741801	; 0xc0000017
    15dc:	72657365 	rsbvc	r7, r5, #-1811939327	; 0x94000001
    15e0:	5f646576 	svcpl	0x00646576
    15e4:	65520033 	ldrbvs	r0, [r2, #-51]	; 0xffffffcd
    15e8:	76726573 			; <UNDEFINED> instruction: 0x76726573
    15ec:	355f6465 	ldrbcc	r6, [pc, #-1125]	; 118f <_start-0x6e71>
    15f0:	73655200 	cmnvc	r5, #0, 4
    15f4:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0xfffffd9b
    15f8:	00365f64 	eorseq	r5, r6, r4, ror #30
    15fc:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    1600:	64657672 	strbtvs	r7, [r5], #-1650	; 0xfffff98e
    1604:	5200375f 	andpl	r3, r0, #24903680	; 0x17c0000
    1608:	72657365 	rsbvc	r7, r5, #-1811939327	; 0x94000001
    160c:	5f646576 	svcpl	0x00646576
    1610:	65520038 	ldrbvs	r0, [r2, #-56]	; 0xffffffc8
    1614:	76726573 			; <UNDEFINED> instruction: 0x76726573
    1618:	395f6465 	ldmdbcc	pc, {r0, r2, r5, r6, sl, sp, lr}^	; <UNPREDICTABLE>
    161c:	73655200 	cmnvc	r5, #0, 4
    1620:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0xfffffd9b
    1624:	00415f64 	subeq	r5, r1, r4, ror #30
    1628:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    162c:	64657672 	strbtvs	r7, [r5], #-1650	; 0xfffff98e
    1630:	4400425f 	strmi	r4, [r0], #-607	; 0xfffffda1
    1634:	43455445 	movtmi	r5, #21573	; 0x5445
    1638:	49525f54 	ldmdbmi	r2, {r2, r4, r6, r8, r9, sl, fp, ip, lr}^
    163c:	474e4953 	smlsldmi	r4, lr, r3, r9
    1640:	5953415f 	ldmdbpl	r3, {r0, r1, r2, r3, r4, r6, r8, lr}^
    1644:	5300434e 	movwpl	r4, #846	; 0x34e
    1648:	70477465 	subvc	r7, r7, r5, ror #8
    164c:	75466f69 	strbvc	r6, [r6, #-3945]	; 0xfffff097
    1650:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
    1654:	47006e6f 	strmi	r6, [r0, -pc, ror #28]
    1658:	54455350 	strbpl	r5, [r5], #-848	; 0xfffffcb0
    165c:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
    1660:	006d754e 	rsbeq	r7, sp, lr, asr #10
    1664:	6d657469 	cfstrdvs	mvd7, [r5, #-420]!	; 0xfffffe5c
    1668:	54454400 	strbpl	r4, [r5], #-1024	; 0xfffffc00
    166c:	5f544345 	svcpl	0x00544345
    1670:	00574f4c 	subseq	r4, r7, ip, asr #30
    1674:	45465047 	strbmi	r5, [r6, #-71]	; 0xffffffb9
    1678:	6970004e 	ldmdbvs	r0!, {r1, r2, r3, r6}^
    167c:	6c61566e 	stclvs	6, cr5, [r1], #-440	; 0xfffffe48
    1680:	48504700 	ldmdami	r0, {r8, r9, sl, lr}^
    1684:	44004e45 	strmi	r4, [r0], #-3653	; 0xfffff1bb
    1688:	43455445 	movtmi	r5, #21573	; 0x5445
    168c:	41465f54 	cmpmi	r6, r4, asr pc
    1690:	4e494c4c 	cdpmi	12, 4, cr4, cr9, cr12, {2}
    1694:	65530047 	ldrbvs	r0, [r3, #-71]	; 0xffffffb9
    1698:	69704774 	ldmdbvs	r0!, {r2, r4, r5, r6, r8, r9, sl, lr}^
    169c:	7269446f 	rsbvc	r4, r9, #1862270976	; 0x6f000000
    16a0:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    16a4:	47006e6f 	strmi	r6, [r0, -pc, ror #28]
    16a8:	5f4f4950 	svcpl	0x004f4950
    16ac:	52004e49 	andpl	r4, r0, #1168	; 0x490
    16b0:	47646165 	strbmi	r6, [r4, -r5, ror #2]!
    16b4:	006f6970 	rsbeq	r6, pc, r0, ror r9	; <UNPREDICTABLE>
    16b8:	61656c43 	cmnvs	r5, r3, asr #24
    16bc:	69704772 	ldmdbvs	r0!, {r1, r4, r5, r6, r8, r9, sl, lr}^
    16c0:	746e496f 	strbtvc	r4, [lr], #-2415	; 0xfffff691
    16c4:	75727265 	ldrbvc	r7, [r2, #-613]!	; 0xfffffd9b
    16c8:	64007470 	strvs	r7, [r0], #-1136	; 0xfffffb90
    16cc:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
    16d0:	73655200 	cmnvc	r5, #0, 4
    16d4:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0xfffffd9b
    16d8:	00325f64 	eorseq	r5, r2, r4, ror #30
    16dc:	74726175 	ldrbtvc	r6, [r2], #-373	; 0xfffffe8b
    16e0:	7475705f 	ldrbtvc	r7, [r5], #-95	; 0xffffffa1
    16e4:	50470063 	subpl	r0, r7, r3, rrx
    16e8:	004e454c 	subeq	r4, lr, ip, asr #10
    16ec:	45544544 	ldrbmi	r4, [r4, #-1348]	; 0xfffffabc
    16f0:	545f5443 	ldrbpl	r5, [pc], #-1091	; 16f8 <_start-0x6908>
    16f4:	00455059 	subeq	r5, r5, r9, asr r0
    16f8:	454c5047 	strbmi	r5, [ip, #-71]	; 0xffffffb9
    16fc:	45440056 	strbmi	r0, [r4, #-86]	; 0xffffffaa
    1700:	54434554 	strbpl	r4, [r3], #-1364	; 0xfffffaac
    1704:	4c41465f 	mcrrmi	6, 5, r4, r1, cr15
    1708:	474e494c 	strbmi	r4, [lr, -ip, asr #18]
    170c:	5953415f 	ldmdbpl	r3, {r0, r1, r2, r3, r4, r6, r8, lr}^
    1710:	4400434e 	strmi	r4, [r0], #-846	; 0xfffffcb2
    1714:	43455445 	movtmi	r5, #21573	; 0x5445
    1718:	49485f54 	stmdbmi	r8, {r2, r4, r6, r8, r9, sl, fp, ip, lr}^
    171c:	5f004847 	svcpl	0x00004847
    1720:	746e695f 	strbtvc	r6, [lr], #-2399	; 0xfffff6a1
    1724:	745f3233 	ldrbvc	r3, [pc], #-563	; 172c <_start-0x68d4>
    1728:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    172c:	554f5f4f 	strbpl	r5, [pc, #-3919]	; 7e5 <_start-0x781b>
    1730:	6e450054 	mcrvs	0, 2, r0, cr5, cr4, {2}
    1734:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    1738:	6f697047 	svcvs	0x00697047
    173c:	65746544 	ldrbvs	r6, [r4, #-1348]!	; 0xfffffabc
    1740:	47007463 	strmi	r7, [r0, -r3, ror #8]
    1744:	4e455250 	mcrmi	2, 2, r5, cr5, cr0, {2}
    1748:	45504700 	ldrbmi	r4, [r0, #-1792]	; 0xfffff900
    174c:	53005344 	movwpl	r5, #836	; 0x344
    1750:	70477465 	subvc	r7, r7, r5, ror #8
    1754:	47006f69 	strmi	r6, [r0, -r9, ror #30]
    1758:	45524150 	ldrbmi	r4, [r2, #-336]	; 0xfffffeb0
    175c:	6d6d004e 	stclvs	0, cr0, [sp, #-312]!	; 0xfffffec8
    1760:	775f6f69 	ldrbvc	r6, [pc, -r9, ror #30]
    1764:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
    1768:	54454400 	strbpl	r4, [r5], #-1024	; 0xfffffc00
    176c:	5f544345 	svcpl	0x00544345
    1770:	454e4f4e 	strbmi	r4, [lr, #-3918]	; 0xfffff0b2
    1774:	50504700 	subspl	r4, r0, r0, lsl #14
    1778:	4c434455 	cfstrdmi	mvd4, [r3], {85}	; 0x55
    177c:	4342004b 	movtmi	r0, #8267	; 0x204b
    1780:	3338324d 	teqcc	r8, #-805306364	; 0xd0000004
    1784:	50475f35 	subpl	r5, r7, r5, lsr pc
    1788:	525f4f49 	subspl	r4, pc, #292	; 0x124
    178c:	00534745 	subseq	r4, r3, r5, asr #14
    1790:	6c69616d 	stfvse	f6, [r9], #-436	; 0xfffffe4c
    1794:	57786f62 	ldrbpl	r6, [r8, -r2, ror #30]!
    1798:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
    179c:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
    17a0:	786f626c 	stmdavc	pc!, {r2, r3, r5, r6, r9, sp, lr}^	; <UNPREDICTABLE>
    17a4:	74616400 	strbtvc	r6, [r1], #-1024	; 0xfffffc00
    17a8:	64615f61 	strbtvs	r5, [r1], #-3937	; 0xfffff09f
    17ac:	63007264 	movwvs	r7, #612	; 0x264
    17b0:	6e6e6168 	powvsez	f6, f6, #0.0
    17b4:	6d006c65 	stcvs	12, cr6, [r0, #-404]	; 0xfffffe6c
    17b8:	626c6961 	rsbvs	r6, ip, #1589248	; 0x184000
    17bc:	6552786f 	ldrbvs	r7, [r2, #-2159]	; 0xfffff791
    17c0:	2f006461 	svccs	0x00006461
    17c4:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    17c8:	656c612f 	strbvs	r6, [ip, #-303]!	; 0xfffffed1
    17cc:	69702f78 	ldmdbvs	r0!, {r3, r4, r5, r6, r8, r9, sl, fp, sp}^
    17d0:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    17d4:	4f54522d 	svcmi	0x0054522d
    17d8:	65442f53 	strbvs	r2, [r4, #-3923]	; 0xfffff0ad
    17dc:	442f6f6d 	strtmi	r6, [pc], #-3949	; 17e4 <_start-0x681c>
    17e0:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    17e4:	6d2f7372 	stcvs	3, cr7, [pc, #-456]!	; 1624 <_start-0x69dc>
    17e8:	626c6961 	rsbvs	r6, ip, #1589248	; 0x184000
    17ec:	632e786f 			; <UNDEFINED> instruction: 0x632e786f
    17f0:	73656d00 	cmnvc	r5, #0, 26
    17f4:	65676173 	strbvs	r6, [r7, #-371]!	; 0xfffffe8d
    17f8:	6c6f6300 	stclvs	3, cr6, [pc], #-0	; 1800 <_start-0x6800>
    17fc:	0072756f 	rsbseq	r7, r2, pc, ror #10
    1800:	6c69616d 	stfvse	f6, [r9], #-436	; 0xfffffe4c
    1804:	66667562 	strbtvs	r7, [r6], -r2, ror #10
    1808:	66007265 	strvs	r7, [r0], -r5, ror #4
    180c:	656d6172 	strbvs	r6, [sp, #-370]!	; 0xfffffe8e
    1810:	66667562 	strbtvs	r7, [r6], -r2, ror #10
    1814:	70007265 	andvc	r7, r0, r5, ror #4
    1818:	746e6972 	strbtvc	r6, [lr], #-2418	; 0xfffff68e
    181c:	00786548 	rsbseq	r6, r8, r8, asr #10
    1820:	45524353 	ldrbmi	r4, [r2, #-851]	; 0xfffffcad
    1824:	485f4e45 	ldmdami	pc, {r0, r2, r6, r9, sl, fp, lr}^	; <UNPREDICTABLE>
    1828:	48474945 	stmdami	r7, {r0, r2, r6, r8, fp, lr}^
    182c:	5f730054 	svcpl	0x00730054
    1830:	72655762 	rsbvc	r5, r5, #25690112	; 0x1880000
    1834:	616e4565 	cmnvs	lr, r5, ror #10
    1838:	64656c62 	strbtvs	r6, [r5], #-3170	; 0xfffff39e
    183c:	616f6c00 	cmnvs	pc, r0, lsl #24
    1840:	00646564 	rsbeq	r6, r4, r4, ror #10
    1844:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
    1848:	6d617453 	cfstrdvs	mvd7, [r1, #-332]!	; 0xfffffeb4
    184c:	72640070 	rsbvc	r0, r4, #112	; 0x70
    1850:	74537761 	ldrbvc	r7, [r3], #-1889	; 0xfffff89f
    1854:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
    1858:	736f7000 	cmnvc	pc, #0
    185c:	6f697469 	svcvs	0x00697469
    1860:	00785f6e 	rsbseq	r5, r8, lr, ror #30
    1864:	69736f70 	ldmdbvs	r3!, {r4, r5, r6, r8, r9, sl, fp, sp, lr}^
    1868:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    186c:	6800795f 	stmdavs	r0, {r0, r1, r2, r3, r4, r6, r8, fp, ip, sp, lr}
    1870:	00697865 	rsbeq	r7, r9, r5, ror #16
    1874:	746e6f66 	strbtvc	r6, [lr], #-3942	; 0xfffff09a
    1878:	61726400 	cmnvs	r2, r0, lsl #8
    187c:	61684377 	smcvs	33847	; 0x8437
    1880:	74730072 	ldrbtvc	r0, [r3], #-114	; 0xffffff8e
    1884:	6400706f 	strvs	r7, [r0], #-111	; 0xffffff91
    1888:	52776172 	rsbspl	r6, r7, #-2147483620	; 0x8000001c
    188c:	00746365 	rsbseq	r6, r4, r5, ror #6
    1890:	616c466e 	cmnvs	ip, lr, ror #12
    1894:	53007367 	movwpl	r7, #871	; 0x367
    1898:	45455243 	strbmi	r5, [r5, #-579]	; 0xfffffdbd
    189c:	49575f4e 	ldmdbmi	r7, {r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    18a0:	00485444 	subeq	r5, r8, r4, asr #8
    18a4:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
    18a8:	65786950 	ldrbvs	r6, [r8, #-2384]!	; 0xfffff6b0
    18ac:	7270006c 	rsbsvc	r0, r0, #108	; 0x6c
    18b0:	6c746e69 	ldclvs	14, cr6, [r4], #-420	; 0xfffffe5c
    18b4:	6976006e 	ldmdbvs	r6!, {r1, r2, r3, r5, r6}^
    18b8:	746f6564 	strbtvc	r6, [pc], #-1380	; 18c0 <_start-0x6740>
    18bc:	00747365 	rsbseq	r7, r4, r5, ror #6
    18c0:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
    18c4:	2f004246 	svccs	0x00004246
    18c8:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    18cc:	656c612f 	strbvs	r6, [ip, #-303]!	; 0xfffffed1
    18d0:	69702f78 	ldmdbvs	r0!, {r3, r4, r5, r6, r8, r9, sl, fp, sp}^
    18d4:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    18d8:	4f54522d 	svcmi	0x0054522d
    18dc:	65442f53 	strbvs	r2, [r4, #-3923]	; 0xfffff0ad
    18e0:	442f6f6d 	strtmi	r6, [pc], #-3949	; 18e8 <_start-0x6718>
    18e4:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    18e8:	762f7372 			; <UNDEFINED> instruction: 0x762f7372
    18ec:	6f656469 	svcvs	0x00656469
    18f0:	6500632e 	strvs	r6, [r0, #-814]	; 0xfffffcd2
    18f4:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
    18f8:	676f6c65 	strbvs	r6, [pc, -r5, ror #24]!
    18fc:	676e6967 	strbvs	r6, [lr, -r7, ror #18]!
    1900:	72747300 	rsbsvc	r7, r4, #0, 6
    1904:	7970636e 	ldmdbvc	r0!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
    1908:	6d656d00 	stclvs	13, cr6, [r5, #-0]
    190c:	65766f6d 	ldrbvs	r6, [r6, #-3949]!	; 0xfffff093
    1910:	6d656d00 	stclvs	13, cr6, [r5, #-0]
    1914:	32797063 	rsbscc	r7, r9, #99	; 0x63
    1918:	6f682f00 	svcvs	0x00682f00
    191c:	612f656d 			; <UNDEFINED> instruction: 0x612f656d
    1920:	2f78656c 	svccs	0x0078656c
    1924:	612f6970 			; <UNDEFINED> instruction: 0x612f6970
    1928:	522d6d72 	eorpl	r6, sp, #7296	; 0x1c80
    192c:	2f534f54 	svccs	0x00534f54
    1930:	6f6d6544 	svcvs	0x006d6544
    1934:	6972442f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, lr}^
    1938:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
    193c:	6d656d2f 	stclvs	13, cr6, [r5, #-188]!	; 0xffffff44
    1940:	7300632e 	movwvc	r6, #814	; 0x32e
    1944:	656c7274 	strbvs	r7, [ip, #-628]!	; 0xfffffd8c
    1948:	7473006e 	ldrbtvc	r0, [r3], #-110	; 0xffffff92
    194c:	79706372 	ldmdbvc	r0!, {r1, r4, r5, r6, r8, r9, sp, lr}^
    1950:	73656400 	cmnvc	r5, #0, 8
    1954:	656d0074 	strbvs	r0, [sp, #-116]!	; 0xffffff8c
    1958:	706d636d 	rsbvc	r6, sp, sp, ror #6
    195c:	6d656d00 	stclvs	13, cr6, [r5, #-0]
    1960:	00746573 	rsbseq	r6, r4, r3, ror r5
    1964:	72507870 	subsvc	r7, r0, #112, 16	; 0x700000
    1968:	6f697665 	svcvs	0x00697665
    196c:	6c427375 	mcrrvs	3, 7, r7, r2, cr5
    1970:	006b636f 	rsbeq	r6, fp, pc, ror #6
    1974:	746f5478 	strbtvc	r5, [pc], #-1144	; 197c <_start-0x6684>
    1978:	65486c61 	strbvs	r6, [r8, #-3169]	; 0xfffff39f
    197c:	69537061 	ldmdbvs	r3, {r0, r5, r6, ip, sp, lr}^
    1980:	7000657a 	andvc	r6, r0, sl, ror r5
    1984:	6e694c78 	mcrvs	12, 3, r4, cr9, cr8, {3}
    1988:	4278006b 	rsbsmi	r0, r8, #107	; 0x6b
    198c:	6b636f6c 	blvs	18dd744 <mailbuffer+0x18c6684>
    1990:	657a6953 	ldrbvs	r6, [sl, #-2387]!	; 0xfffff6ad
    1994:	4e787000 	cdpmi	0, 7, cr7, cr8, cr0, {0}
    1998:	46747865 	ldrbtmi	r7, [r4], -r5, ror #16
    199c:	42656572 	rsbmi	r6, r5, #478150656	; 0x1c800000
    19a0:	6b636f6c 	blvs	18dd758 <mailbuffer+0x18c6698>
    19a4:	42787000 	rsbsmi	r7, r8, #0
    19a8:	6b636f6c 	blvs	18dd760 <mailbuffer+0x18c66a0>
    19ac:	54527800 	ldrbpl	r7, [r2], #-2048	; 0xfffff800
    19b0:	485f534f 	ldmdami	pc, {r0, r1, r2, r3, r6, r8, r9, ip, lr}^	; <UNPREDICTABLE>
    19b4:	00504145 	subseq	r4, r0, r5, asr #2
    19b8:	61745378 	cmnvs	r4, r8, ror r3
    19bc:	68007472 	stmdavs	r0, {r1, r4, r5, r6, sl, ip, sp, lr}
    19c0:	53706165 	cmnpl	r0, #1073741849	; 0x40000019
    19c4:	43555254 	cmpmi	r5, #84, 4	; 0x40000005
    19c8:	49535f54 	ldmdbmi	r3, {r2, r4, r6, r8, r9, sl, fp, ip, lr}^
    19cc:	7000455a 	andvc	r4, r0, sl, asr r5
    19d0:	726f5076 	rsbvc	r5, pc, #118	; 0x76
    19d4:	6c614d74 	stclvs	13, cr4, [r1], #-464	; 0xfffffe30
    19d8:	00636f6c 	rsbeq	r6, r3, ip, ror #30
    19dc:	48767270 	ldmdami	r6!, {r4, r5, r6, r9, ip, sp, lr}^
    19e0:	49706165 	ldmdbmi	r0!, {r0, r2, r5, r6, r8, sp, lr}^
    19e4:	0074696e 	rsbseq	r6, r4, lr, ror #18
    19e8:	6e615778 	mcrvs	7, 3, r5, cr1, cr8, {3}
    19ec:	53646574 	cmnpl	r4, #116, 10	; 0x1d000000
    19f0:	00657a69 	rsbeq	r7, r5, r9, ror #20
    19f4:	6d754464 	cfldrdvs	mvd4, [r5, #-400]!	; 0xfffffe70
    19f8:	7000796d 	andvc	r7, r0, sp, ror #18
    19fc:	65486375 	strbvs	r6, [r8, #-885]	; 0xfffffc8b
    1a00:	6e457061 	cdpvs	0, 4, cr7, cr5, cr1, {3}
    1a04:	46780064 	ldrbtmi	r0, [r8], -r4, rrx
    1a08:	42656572 	rsbmi	r6, r5, #478150656	; 0x1c800000
    1a0c:	73657479 	cmnvc	r5, #2030043136	; 0x79000000
    1a10:	616d6552 	cmnvs	sp, r2, asr r5
    1a14:	6e696e69 	cdpvs	14, 6, cr6, cr9, cr9, {3}
    1a18:	63750067 	cmnvs	r5, #103	; 0x67
    1a1c:	70616548 	rsbvc	r6, r1, r8, asr #10
    1a20:	6f682f00 	svcvs	0x00682f00
    1a24:	612f656d 			; <UNDEFINED> instruction: 0x612f656d
    1a28:	2f78656c 	svccs	0x0078656c
    1a2c:	612f6970 			; <UNDEFINED> instruction: 0x612f6970
    1a30:	522d6d72 	eorpl	r6, sp, #7296	; 0x1c80
    1a34:	2f534f54 	svccs	0x00534f54
    1a38:	6572462f 	ldrbvs	r4, [r2, #-1583]!	; 0xfffff9d1
    1a3c:	4f545265 	svcmi	0x00545265
    1a40:	6f532f53 	svcvs	0x00532f53
    1a44:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
    1a48:	726f702f 	rsbvc	r7, pc, #47	; 0x2f
    1a4c:	6c626174 	stfvse	f6, [r2], #-464	; 0xfffffe30
    1a50:	654d2f65 	strbvs	r2, [sp, #-3941]	; 0xfffff09b
    1a54:	6e614d6d 	cdpvs	13, 6, cr4, cr1, cr13, {3}
    1a58:	65682f67 	strbvs	r2, [r8, #-3943]!	; 0xfffff099
    1a5c:	345f7061 	ldrbcc	r7, [pc], #-97	; 1a64 <_start-0x659c>
    1a60:	7000632e 	andvc	r6, r0, lr, lsr #6
    1a64:	72694678 	rsbvc	r4, r9, #120, 12	; 0x7800000
    1a68:	72467473 	subvc	r7, r6, #1929379840	; 0x73000000
    1a6c:	6c426565 	cfstr64vs	mvdx6, [r2], {101}	; 0x65
    1a70:	006b636f 	rsbeq	r6, fp, pc, ror #6
    1a74:	654e7870 	strbvs	r7, [lr, #-2160]	; 0xfffff790
    1a78:	6f6c4277 	svcvs	0x006c4277
    1a7c:	694c6b63 	stmdbvs	ip, {r0, r1, r5, r6, r8, r9, fp, sp, lr}^
    1a80:	70006b6e 	andvc	r6, r0, lr, ror #22
    1a84:	74655276 	strbtvc	r5, [r5], #-630	; 0xfffffd8a
    1a88:	006e7275 	rsbeq	r7, lr, r5, ror r2
    1a8c:	4c425f41 	mcrrmi	15, 4, r5, r2, cr1
    1a90:	5f4b434f 	svcpl	0x004b434f
    1a94:	4b4e494c 	blmi	1393fcc <mailbuffer+0x137cf0c>
    1a98:	6f507800 	svcvs	0x00507800
    1a9c:	65477472 	strbvs	r7, [r7, #-1138]	; 0xfffffb8e
    1aa0:	65724674 	ldrbvs	r4, [r2, #-1652]!	; 0xfffff98c
    1aa4:	61654865 	cmnvs	r5, r5, ror #16
    1aa8:	7a695370 	bvc	1a56870 <mailbuffer+0x1a3f7b0>
    1aac:	72700065 	rsbsvc	r0, r0, #101	; 0x65
    1ab0:	736e4976 	cmnvc	lr, #1933312	; 0x1d8000
    1ab4:	42747265 	rsbsmi	r7, r4, #1342177286	; 0x50000006
    1ab8:	6b636f6c 	blvs	18dd870 <mailbuffer+0x18c67b0>
    1abc:	6f746e49 	svcvs	0x00746e49
    1ac0:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
    1ac4:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0xfffff6b4
    1ac8:	6f507600 	svcvs	0x00507600
    1acc:	6e497472 	mcrvs	4, 2, r7, cr9, cr2, {3}
    1ad0:	61697469 	cmnvs	r9, r9, ror #8
    1ad4:	6573696c 	ldrbvs	r6, [r3, #-2412]!	; 0xfffff694
    1ad8:	636f6c42 	cmnvs	pc, #16896	; 0x4200
    1adc:	7600736b 	strvc	r7, [r0], -fp, ror #6
    1ae0:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xfffff0b0
    1ae4:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
    1ae8:	6c6c6100 	stfvse	f6, [ip], #-0
    1aec:	7461636f 	strbtvc	r6, [r1], #-879	; 0xfffffc91
    1af0:	78006465 	stmdavc	r0, {r0, r2, r5, r6, sl, sp, lr}
    1af4:	636f6c42 	cmnvs	pc, #16896	; 0x4200
    1af8:	6e694c6b 	cdpvs	12, 6, cr4, cr9, cr11, {3}
    1afc:	7870006b 	ldmdavc	r0!, {r0, r1, r3, r5, r6}^
    1b00:	00646e45 	rsbeq	r6, r4, r5, asr #28
    1b04:	6c427870 	mcrrvs	8, 7, r7, r2, cr0
    1b08:	546b636f 	strbtpl	r6, [fp], #-879	; 0xfffffc91
    1b0c:	736e496f 	cmnvc	lr, #1818624	; 0x1bc000
    1b10:	00747265 	rsbseq	r7, r4, r5, ror #4
    1b14:	61654878 	smcvs	21640	; 0x5488
    1b18:	656b0070 	strbvs	r0, [fp, #-112]!	; 0xffffff90
    1b1c:	65725079 	ldrbvs	r5, [r2, #-121]!	; 0xffffff87
    1b20:	64657373 	strbtvs	r7, [r5], #-883	; 0xfffffc8d
    1b24:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
    1b28:	0072656c 	rsbseq	r6, r2, ip, ror #10
    1b2c:	6b736174 	blvs	1cda104 <mailbuffer+0x1cc3044>
    1b30:	61740031 	cmnvs	r4, r1, lsr r0
    1b34:	00326b73 	eorseq	r6, r2, r3, ror fp
    1b38:	6b736174 	blvs	1cda110 <mailbuffer+0x1cc3050>
    1b3c:	53700033 	cmnpl	r0, #51	; 0x33
    1b40:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
    1b44:	682f0067 	stmdavs	pc!, {r0, r1, r2, r5, r6}	; <UNPREDICTABLE>
    1b48:	2f656d6f 	svccs	0x00656d6f
    1b4c:	78656c61 	stmdavc	r5!, {r0, r5, r6, sl, fp, sp, lr}^
    1b50:	2f69702f 	svccs	0x0069702f
    1b54:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    1b58:	534f5452 	movtpl	r5, #62546	; 0xf452
    1b5c:	6d65442f 	cfstrdvs	mvd4, [r5, #-188]!	; 0xffffff44
    1b60:	616d2f6f 	cmnvs	sp, pc, ror #30
    1b64:	632e6e69 			; <UNDEFINED> instruction: 0x632e6e69
    1b68:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
    1b6c:	7273006e 	rsbsvc	r0, r3, #110	; 0x6e
    1b70:	2e003063 	cdpcs	0, 0, cr3, cr0, cr3, {3}
    1b74:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    1b78:	2f2e2e2f 	svccs	0x002e2e2f
    1b7c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    1b80:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    1b84:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    1b88:	2f62696c 	svccs	0x0062696c
    1b8c:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    1b90:	63616d2f 	cmnvs	r1, #3008	; 0xbc0
    1b94:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
    1b98:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    1b9c:	6d656d2f 	stclvs	13, cr6, [r5, #-188]!	; 0xffffff44
    1ba0:	2d797063 	ldclcs	0, cr7, [r9, #-396]!	; 0xfffffe74
    1ba4:	62757473 	rsbsvs	r7, r5, #1929379840	; 0x73000000
    1ba8:	6400632e 	strvs	r6, [r0], #-814	; 0xfffffcd2
    1bac:	00307473 	eorseq	r7, r0, r3, ror r4
    1bb0:	67696c61 	strbvs	r6, [r9, -r1, ror #24]!
    1bb4:	5f64656e 	svcpl	0x0064656e
    1bb8:	00747364 	rsbseq	r7, r4, r4, ror #6
    1bbc:	67696c61 	strbvs	r6, [r9, -r1, ror #24]!
    1bc0:	5f64656e 	svcpl	0x0064656e
    1bc4:	00637273 	rsbeq	r7, r3, r3, ror r2
    1bc8:	636d656d 	cmnvs	sp, #457179136	; 0x1b400000
    1bcc:	6c007970 			; <UNDEFINED> instruction: 0x6c007970
    1bd0:	00306e65 	eorseq	r6, r0, r5, ror #28
    1bd4:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    1bd8:	6e2f646c 	cdpvs	4, 2, cr6, cr15, cr12, {3}
    1bdc:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    1be0:	67382d62 	ldrvs	r2, [r8, -r2, ror #26]!
    1be4:	52596c4a 	subspl	r6, r9, #18944	; 0x4a00
    1be8:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    1bec:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    1bf0:	2e342e32 	mrccs	14, 1, r2, cr4, cr2, {1}
    1bf4:	30322e30 	eorscc	r2, r2, r0, lsr lr
    1bf8:	35303631 	ldrcc	r3, [r0, #-1585]!	; 0xfffff9cf
    1bfc:	622f3732 	eorvs	r3, pc, #13107200	; 0xc80000
    1c00:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
    1c04:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    1c08:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    1c0c:	61652d65 	cmnvs	r5, r5, ror #26
    1c10:	6e2f6962 	vnmulvs.f16	s12, s30, s5	; <UNPREDICTABLE>
    1c14:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    1c18:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    1c1c:	6d2f6362 	stcvs	3, cr6, [pc, #-392]!	; 1a9c <_start-0x6564>
    1c20:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    1c24:	612f656e 			; <UNDEFINED> instruction: 0x612f656e
    1c28:	47006d72 	smlsdxmi	r0, r2, sp, r6
    1c2c:	4320554e 			; <UNDEFINED> instruction: 0x4320554e
    1c30:	35203131 	strcc	r3, [r0, #-305]!	; 0xfffffecf
    1c34:	312e342e 			; <UNDEFINED> instruction: 0x312e342e
    1c38:	31303220 	teqcc	r0, r0, lsr #4
    1c3c:	31393036 	teqcc	r9, r6, lsr r0
    1c40:	672d2039 			; <UNDEFINED> instruction: 0x672d2039
    1c44:	324f2d20 	subcc	r2, pc, #32, 26	; 0x800
    1c48:	6e662d20 	cdpvs	13, 6, cr2, cr6, cr0, {1}
    1c4c:	75622d6f 	strbvc	r2, [r2, #-3439]!	; 0xfffff291
    1c50:	69746c69 	ldmdbvs	r4!, {r0, r3, r5, r6, sl, fp, sp, lr}^
    1c54:	Address 0x0000000000001c54 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <mailbuffer+0x10b9c64>
   4:	35312820 	ldrcc	r2, [r1, #-2080]!	; 0xfffff7e0
   8:	332e363a 			; <UNDEFINED> instruction: 0x332e363a
   c:	732b312e 			; <UNDEFINED> instruction: 0x732b312e
  10:	35326e76 	ldrcc	r6, [r2, #-3702]!	; 0xfffff18a
  14:	39333033 	ldmdbcc	r3!, {r0, r1, r4, r5, ip, sp}
  18:	7562312d 	strbvc	r3, [r2, #-301]!	; 0xfffffed3
  1c:	31646c69 	cmncc	r4, r9, ror #24
  20:	2e362029 	cdpcs	0, 3, cr2, cr6, cr9, {1}
  24:	20312e33 	eorscs	r2, r1, r3, lsr lr
  28:	37313032 			; <UNDEFINED> instruction: 0x37313032
  2c:	30323630 	eorscc	r3, r2, r0, lsr r6
  30:	43434700 	movtmi	r4, #14080	; 0x3700
  34:	3128203a 			; <UNDEFINED> instruction: 0x3128203a
  38:	2e353a35 			; <UNDEFINED> instruction: 0x2e353a35
  3c:	2b312e34 	blcs	c4b914 <mailbuffer+0xc34854>
  40:	326e7673 	rsbcc	r7, lr, #120586240	; 0x7300000
  44:	35313134 	ldrcc	r3, [r1, #-308]!	; 0xfffffecc
  48:	29312d35 	ldmdbcs	r1!, {r0, r2, r4, r5, r8, sl, fp, sp}
  4c:	342e3520 	strtcc	r3, [lr], #-1312	; 0xfffffae0
  50:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  54:	30363130 	eorscc	r3, r6, r0, lsr r1
  58:	00393139 	eorseq	r3, r9, r9, lsr r1

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	005a3605 	subseq	r3, sl, r5, lsl #12
  14:	01080706 	tsteq	r8, r6, lsl #14
  18:	04120109 	ldreq	r0, [r2], #-265	; 0xfffffef7
  1c:	01150114 	tsteq	r5, r4, lsl r1
  20:	01180317 	tsteq	r8, r7, lsl r3
  24:	061e011a 			; <UNDEFINED> instruction: 0x061e011a
  28:	01440122 	cmpeq	r4, r2, lsr #2

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
       0:	0000000c 	andeq	r0, r0, ip
       4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
       8:	7c020001 	stcvc	0, cr0, [r2], {1}
       c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
      10:	0000001c 	andeq	r0, r0, ip, lsl r0
      14:	00000000 	andeq	r0, r0, r0
      18:	00010000 	andeq	r0, r1, r0
      1c:	00000240 	andeq	r0, r0, r0, asr #4
      20:	8b040e42 	blhi	103930 <mailbuffer+0xec870>
      24:	0b0d4201 	bleq	350830 <mailbuffer+0x339770>
      28:	0d0dfe02 	stceq	14, cr15, [sp, #-8]
      2c:	000ecb42 	andeq	ip, lr, r2, asr #22
      30:	00000018 	andeq	r0, r0, r8, lsl r0
      34:	00000000 	andeq	r0, r0, r0
      38:	00010240 	andeq	r0, r1, r0, asr #4
      3c:	0000001c 	andeq	r0, r0, ip, lsl r0
      40:	8b080e42 	blhi	203950 <mailbuffer+0x1ec890>
      44:	42018e02 	andmi	r8, r1, #2, 28
      48:	00040b0c 	andeq	r0, r4, ip, lsl #22
      4c:	0000001c 	andeq	r0, r0, ip, lsl r0
      50:	00000000 	andeq	r0, r0, r0
      54:	0001025c 	andeq	r0, r1, ip, asr r2
      58:	00000018 	andeq	r0, r0, r8, lsl r0
      5c:	8b040e42 	blhi	10396c <mailbuffer+0xec8ac>
      60:	0b0d4201 	bleq	35086c <mailbuffer+0x3397ac>
      64:	420d0d44 	andmi	r0, sp, #68, 26	; 0x1100
      68:	00000ecb 	andeq	r0, r0, fp, asr #29
      6c:	0000001c 	andeq	r0, r0, ip, lsl r0
      70:	00000000 	andeq	r0, r0, r0
      74:	00010274 	andeq	r0, r1, r4, ror r2
      78:	00000038 	andeq	r0, r0, r8, lsr r0
      7c:	8b080e42 	blhi	20398c <mailbuffer+0x1ec8cc>
      80:	42018e02 	andmi	r8, r1, #2, 28
      84:	54040b0c 	strpl	r0, [r4], #-2828	; 0xfffff4f4
      88:	00080d0c 	andeq	r0, r8, ip, lsl #26
      8c:	0000001c 	andeq	r0, r0, ip, lsl r0
      90:	00000000 	andeq	r0, r0, r0
      94:	000102ac 	andeq	r0, r1, ip, lsr #5
      98:	00000098 	muleq	r0, r8, r0
      9c:	8b080e42 	blhi	2039ac <mailbuffer+0x1ec8ec>
      a0:	42018e02 	andmi	r8, r1, #2, 28
      a4:	7e040b0c 	vmlavc.f64	d0, d4, d12
      a8:	00080d0c 	andeq	r0, r8, ip, lsl #26
      ac:	0000000c 	andeq	r0, r0, ip
      b0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
      b4:	7c020001 	stcvc	0, cr0, [r2], {1}
      b8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
      bc:	0000001c 	andeq	r0, r0, ip, lsl r0
      c0:	000000ac 	andeq	r0, r0, ip, lsr #1
      c4:	00010344 	andeq	r0, r1, r4, asr #6
      c8:	00000098 	muleq	r0, r8, r0
      cc:	8b040e42 	blhi	1039dc <mailbuffer+0xec91c>
      d0:	0b0d4201 	bleq	3508dc <mailbuffer+0x33981c>
      d4:	420d0d7e 	andmi	r0, sp, #8064	; 0x1f80
      d8:	00000ecb 	andeq	r0, r0, fp, asr #29
      dc:	0000000c 	andeq	r0, r0, ip
      e0:	000000ac 	andeq	r0, r0, ip, lsr #1
      e4:	000103dc 	ldrdeq	r0, [r1], -ip
      e8:	000000b4 	strheq	r0, [r0], -r4
      ec:	0000000c 	andeq	r0, r0, ip
      f0:	000000ac 	andeq	r0, r0, ip, lsr #1
      f4:	00010490 	muleq	r1, r0, r4
      f8:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
      fc:	0000001c 	andeq	r0, r0, ip, lsl r0
     100:	000000ac 	andeq	r0, r0, ip, lsr #1
     104:	00010540 	andeq	r0, r1, r0, asr #10
     108:	00000044 	andeq	r0, r0, r4, asr #32
     10c:	8b040e42 	blhi	103a1c <mailbuffer+0xec95c>
     110:	0b0d4201 	bleq	35091c <mailbuffer+0x33985c>
     114:	420d0d58 	andmi	r0, sp, #88, 26	; 0x1600
     118:	00000ecb 	andeq	r0, r0, fp, asr #29
     11c:	0000001c 	andeq	r0, r0, ip, lsl r0
     120:	000000ac 	andeq	r0, r0, ip, lsr #1
     124:	00010584 	andeq	r0, r1, r4, lsl #11
     128:	00000064 	andeq	r0, r0, r4, rrx
     12c:	8b040e42 	blhi	103a3c <mailbuffer+0xec97c>
     130:	0b0d4201 	bleq	35093c <mailbuffer+0x33987c>
     134:	420d0d68 	andmi	r0, sp, #104, 26	; 0x1a00
     138:	00000ecb 	andeq	r0, r0, fp, asr #29
     13c:	0000000c 	andeq	r0, r0, ip
     140:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     144:	7c020001 	stcvc	0, cr0, [r2], {1}
     148:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     14c:	0000001c 	andeq	r0, r0, ip, lsl r0
     150:	0000013c 	andeq	r0, r0, ip, lsr r1
     154:	000105f0 	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
     158:	00000168 	andeq	r0, r0, r8, ror #2
     15c:	8b080e42 	blhi	203a6c <mailbuffer+0x1ec9ac>
     160:	42018e02 	andmi	r8, r1, #2, 28
     164:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     168:	080d0ca8 	stmdaeq	sp, {r3, r5, r7, sl, fp}
     16c:	0000001c 	andeq	r0, r0, ip, lsl r0
     170:	0000013c 	andeq	r0, r0, ip, lsr r1
     174:	00010758 	andeq	r0, r1, r8, asr r7
     178:	000000e4 	andeq	r0, r0, r4, ror #1
     17c:	8b080e42 	blhi	203a8c <mailbuffer+0x1ec9cc>
     180:	42018e02 	andmi	r8, r1, #2, 28
     184:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     188:	080d0c64 	stmdaeq	sp, {r2, r5, r6, sl, fp}
     18c:	0000001c 	andeq	r0, r0, ip, lsl r0
     190:	0000013c 	andeq	r0, r0, ip, lsr r1
     194:	0001083c 	andeq	r0, r1, ip, lsr r8
     198:	000000ec 	andeq	r0, r0, ip, ror #1
     19c:	8b080e42 	blhi	203aac <mailbuffer+0x1ec9ec>
     1a0:	42018e02 	andmi	r8, r1, #2, 28
     1a4:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     1a8:	080d0c6a 	stmdaeq	sp, {r1, r3, r5, r6, sl, fp}
     1ac:	0000001c 	andeq	r0, r0, ip, lsl r0
     1b0:	0000013c 	andeq	r0, r0, ip, lsr r1
     1b4:	00010928 	andeq	r0, r1, r8, lsr #18
     1b8:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     1bc:	8b080e42 	blhi	203acc <mailbuffer+0x1eca0c>
     1c0:	42018e02 	andmi	r8, r1, #2, 28
     1c4:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     1c8:	080d0cd4 	stmdaeq	sp, {r2, r4, r6, r7, sl, fp}
     1cc:	0000001c 	andeq	r0, r0, ip, lsl r0
     1d0:	0000013c 	andeq	r0, r0, ip, lsr r1
     1d4:	00010af8 	strdeq	r0, [r1], -r8
     1d8:	00000128 	andeq	r0, r0, r8, lsr #2
     1dc:	8b080e42 	blhi	203aec <mailbuffer+0x1eca2c>
     1e0:	42018e02 	andmi	r8, r1, #2, 28
     1e4:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     1e8:	080d0c88 	stmdaeq	sp, {r3, r7, sl, fp}
     1ec:	0000001c 	andeq	r0, r0, ip, lsl r0
     1f0:	0000013c 	andeq	r0, r0, ip, lsr r1
     1f4:	00010c20 	andeq	r0, r1, r0, lsr #24
     1f8:	000000a8 	andeq	r0, r0, r8, lsr #1
     1fc:	8b080e42 	blhi	203b0c <mailbuffer+0x1eca4c>
     200:	42018e02 	andmi	r8, r1, #2, 28
     204:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     208:	080d0c42 	stmdaeq	sp, {r1, r6, sl, fp}
     20c:	0000001c 	andeq	r0, r0, ip, lsl r0
     210:	0000013c 	andeq	r0, r0, ip, lsr r1
     214:	00010cc8 	andeq	r0, r1, r8, asr #25
     218:	0000008c 	andeq	r0, r0, ip, lsl #1
     21c:	8b080e42 	blhi	203b2c <mailbuffer+0x1eca6c>
     220:	42018e02 	andmi	r8, r1, #2, 28
     224:	7c040b0c 			; <UNDEFINED> instruction: 0x7c040b0c
     228:	00080d0c 	andeq	r0, r8, ip, lsl #26
     22c:	0000000c 	andeq	r0, r0, ip
     230:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     234:	7c020001 	stcvc	0, cr0, [r2], {1}
     238:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     23c:	0000001c 	andeq	r0, r0, ip, lsl r0
     240:	0000022c 	andeq	r0, r0, ip, lsr #4
     244:	00010d54 	andeq	r0, r1, r4, asr sp
     248:	00000068 	andeq	r0, r0, r8, rrx
     24c:	8b040e42 	blhi	103b5c <mailbuffer+0xeca9c>
     250:	0b0d4201 	bleq	350a5c <mailbuffer+0x33999c>
     254:	420d0d6c 	andmi	r0, sp, #108, 26	; 0x1b00
     258:	00000ecb 	andeq	r0, r0, fp, asr #29
     25c:	0000001c 	andeq	r0, r0, ip, lsl r0
     260:	0000022c 	andeq	r0, r0, ip, lsr #4
     264:	00010dbc 			; <UNDEFINED> instruction: 0x00010dbc
     268:	0000002c 	andeq	r0, r0, ip, lsr #32
     26c:	8b040e42 	blhi	103b7c <mailbuffer+0xecabc>
     270:	0b0d4201 	bleq	350a7c <mailbuffer+0x3399bc>
     274:	420d0d4e 	andmi	r0, sp, #4992	; 0x1380
     278:	00000ecb 	andeq	r0, r0, fp, asr #29
     27c:	0000001c 	andeq	r0, r0, ip, lsl r0
     280:	0000022c 	andeq	r0, r0, ip, lsr #4
     284:	00010de8 	andeq	r0, r1, r8, ror #27
     288:	00000098 	muleq	r0, r8, r0
     28c:	8b040e42 	blhi	103b9c <mailbuffer+0xecadc>
     290:	0b0d4201 	bleq	350a9c <mailbuffer+0x3399dc>
     294:	0d0d4402 	cfstrseq	mvf4, [sp, #-8]
     298:	000ecb42 	andeq	ip, lr, r2, asr #22
     29c:	0000001c 	andeq	r0, r0, ip, lsl r0
     2a0:	0000022c 	andeq	r0, r0, ip, lsr #4
     2a4:	00010e80 	andeq	r0, r1, r0, lsl #29
     2a8:	000000d8 	ldrdeq	r0, [r0], -r8
     2ac:	8b040e42 	blhi	103bbc <mailbuffer+0xecafc>
     2b0:	0b0d4201 	bleq	350abc <mailbuffer+0x3399fc>
     2b4:	0d0d6402 	cfstrseq	mvf6, [sp, #-8]
     2b8:	000ecb42 	andeq	ip, lr, r2, asr #22
     2bc:	0000001c 	andeq	r0, r0, ip, lsl r0
     2c0:	0000022c 	andeq	r0, r0, ip, lsr #4
     2c4:	00010f58 	andeq	r0, r1, r8, asr pc
     2c8:	00000098 	muleq	r0, r8, r0
     2cc:	8b040e42 	blhi	103bdc <mailbuffer+0xecb1c>
     2d0:	0b0d4201 	bleq	350adc <mailbuffer+0x339a1c>
     2d4:	0d0d4402 	cfstrseq	mvf4, [sp, #-8]
     2d8:	000ecb42 	andeq	ip, lr, r2, asr #22
     2dc:	0000000c 	andeq	r0, r0, ip
     2e0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     2e4:	7c020001 	stcvc	0, cr0, [r2], {1}
     2e8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     2ec:	0000001c 	andeq	r0, r0, ip, lsl r0
     2f0:	000002dc 	ldrdeq	r0, [r0], -ip
     2f4:	00010ff0 	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
     2f8:	00000114 	andeq	r0, r0, r4, lsl r1
     2fc:	8b080e42 	blhi	203c0c <mailbuffer+0x1ecb4c>
     300:	42018e02 	andmi	r8, r1, #2, 28
     304:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     308:	080d0c84 	stmdaeq	sp, {r2, r7, sl, fp}
     30c:	0000001c 	andeq	r0, r0, ip, lsl r0
     310:	000002dc 	ldrdeq	r0, [r0], -ip
     314:	00011104 	andeq	r1, r1, r4, lsl #2
     318:	000000c8 	andeq	r0, r0, r8, asr #1
     31c:	8b080e42 	blhi	203c2c <mailbuffer+0x1ecb6c>
     320:	42018e02 	andmi	r8, r1, #2, 28
     324:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     328:	080d0c5e 	stmdaeq	sp, {r1, r2, r3, r4, r6, sl, fp}
     32c:	0000001c 	andeq	r0, r0, ip, lsl r0
     330:	000002dc 	ldrdeq	r0, [r0], -ip
     334:	000111cc 	andeq	r1, r1, ip, asr #3
     338:	000001a4 	andeq	r0, r0, r4, lsr #3
     33c:	8b080e42 	blhi	203c4c <mailbuffer+0x1ecb8c>
     340:	42018e02 	andmi	r8, r1, #2, 28
     344:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     348:	080d0ccc 	stmdaeq	sp, {r2, r3, r6, r7, sl, fp}
     34c:	0000001c 	andeq	r0, r0, ip, lsl r0
     350:	000002dc 	ldrdeq	r0, [r0], -ip
     354:	00011370 	andeq	r1, r1, r0, ror r3
     358:	000000dc 	ldrdeq	r0, [r0], -ip
     35c:	8b080e42 	blhi	203c6c <mailbuffer+0x1ecbac>
     360:	42018e02 	andmi	r8, r1, #2, 28
     364:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     368:	080d0c68 	stmdaeq	sp, {r3, r5, r6, sl, fp}
     36c:	0000001c 	andeq	r0, r0, ip, lsl r0
     370:	000002dc 	ldrdeq	r0, [r0], -ip
     374:	0001144c 	andeq	r1, r1, ip, asr #8
     378:	00000204 	andeq	r0, r0, r4, lsl #4
     37c:	8b080e42 	blhi	203c8c <mailbuffer+0x1ecbcc>
     380:	42018e02 	andmi	r8, r1, #2, 28
     384:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     388:	080d0cfc 	stmdaeq	sp, {r2, r3, r4, r5, r6, r7, sl, fp}
     38c:	0000001c 	andeq	r0, r0, ip, lsl r0
     390:	000002dc 	ldrdeq	r0, [r0], -ip
     394:	00011650 	andeq	r1, r1, r0, asr r6
     398:	000000e0 	andeq	r0, r0, r0, ror #1
     39c:	8b080e42 	blhi	203cac <mailbuffer+0x1ecbec>
     3a0:	42018e02 	andmi	r8, r1, #2, 28
     3a4:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     3a8:	080d0c6a 	stmdaeq	sp, {r1, r3, r5, r6, sl, fp}
     3ac:	0000001c 	andeq	r0, r0, ip, lsl r0
     3b0:	000002dc 	ldrdeq	r0, [r0], -ip
     3b4:	00011730 	andeq	r1, r1, r0, lsr r7
     3b8:	00000034 	andeq	r0, r0, r4, lsr r0
     3bc:	8b080e42 	blhi	203ccc <mailbuffer+0x1ecc0c>
     3c0:	42018e02 	andmi	r8, r1, #2, 28
     3c4:	54040b0c 	strpl	r0, [r4], #-2828	; 0xfffff4f4
     3c8:	00080d0c 	andeq	r0, r8, ip, lsl #26
     3cc:	0000001c 	andeq	r0, r0, ip, lsl r0
     3d0:	000002dc 	ldrdeq	r0, [r0], -ip
     3d4:	00011764 	andeq	r1, r1, r4, ror #14
     3d8:	00000030 	andeq	r0, r0, r0, lsr r0
     3dc:	8b040e42 	blhi	103cec <mailbuffer+0xecc2c>
     3e0:	0b0d4201 	bleq	350bec <mailbuffer+0x339b2c>
     3e4:	420d0d50 	andmi	r0, sp, #80, 26	; 0x1400
     3e8:	00000ecb 	andeq	r0, r0, fp, asr #29
     3ec:	0000001c 	andeq	r0, r0, ip, lsl r0
     3f0:	000002dc 	ldrdeq	r0, [r0], -ip
     3f4:	00011794 	muleq	r1, r4, r7
     3f8:	00000034 	andeq	r0, r0, r4, lsr r0
     3fc:	8b080e42 	blhi	203d0c <mailbuffer+0x1ecc4c>
     400:	42018e02 	andmi	r8, r1, #2, 28
     404:	54040b0c 	strpl	r0, [r4], #-2828	; 0xfffff4f4
     408:	00080d0c 	andeq	r0, r8, ip, lsl #26
     40c:	0000001c 	andeq	r0, r0, ip, lsl r0
     410:	000002dc 	ldrdeq	r0, [r0], -ip
     414:	000117c8 	andeq	r1, r1, r8, asr #15
     418:	0000012c 	andeq	r0, r0, ip, lsr #2
     41c:	8b080e42 	blhi	203d2c <mailbuffer+0x1ecc6c>
     420:	42018e02 	andmi	r8, r1, #2, 28
     424:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     428:	080d0c90 	stmdaeq	sp, {r4, r7, sl, fp}
     42c:	0000001c 	andeq	r0, r0, ip, lsl r0
     430:	000002dc 	ldrdeq	r0, [r0], -ip
     434:	000118f4 	strdeq	r1, [r1], -r4
     438:	00000090 	muleq	r0, r0, r0
     43c:	8b080e42 	blhi	203d4c <mailbuffer+0x1ecc8c>
     440:	42018e02 	andmi	r8, r1, #2, 28
     444:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     448:	080d0c42 	stmdaeq	sp, {r1, r6, sl, fp}
     44c:	0000001c 	andeq	r0, r0, ip, lsl r0
     450:	000002dc 	ldrdeq	r0, [r0], -ip
     454:	00011984 	andeq	r1, r1, r4, lsl #19
     458:	00000104 	andeq	r0, r0, r4, lsl #2
     45c:	8b080e42 	blhi	203d6c <mailbuffer+0x1eccac>
     460:	42018e02 	andmi	r8, r1, #2, 28
     464:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     468:	080d0c7c 	stmdaeq	sp, {r2, r3, r4, r5, r6, sl, fp}
     46c:	0000001c 	andeq	r0, r0, ip, lsl r0
     470:	000002dc 	ldrdeq	r0, [r0], -ip
     474:	00011a88 	andeq	r1, r1, r8, lsl #21
     478:	00000044 	andeq	r0, r0, r4, asr #32
     47c:	8b080e42 	blhi	203d8c <mailbuffer+0x1ecccc>
     480:	42018e02 	andmi	r8, r1, #2, 28
     484:	5c040b0c 			; <UNDEFINED> instruction: 0x5c040b0c
     488:	00080d0c 	andeq	r0, r8, ip, lsl #26
     48c:	0000001c 	andeq	r0, r0, ip, lsl r0
     490:	000002dc 	ldrdeq	r0, [r0], -ip
     494:	00011acc 	andeq	r1, r1, ip, asr #21
     498:	00000040 	andeq	r0, r0, r0, asr #32
     49c:	8b040e42 	blhi	103dac <mailbuffer+0xeccec>
     4a0:	0b0d4201 	bleq	350cac <mailbuffer+0x339bec>
     4a4:	420d0d58 	andmi	r0, sp, #88, 26	; 0x1600
     4a8:	00000ecb 	andeq	r0, r0, fp, asr #29
     4ac:	0000001c 	andeq	r0, r0, ip, lsl r0
     4b0:	000002dc 	ldrdeq	r0, [r0], -ip
     4b4:	00011b0c 	andeq	r1, r1, ip, lsl #22
     4b8:	0000004c 	andeq	r0, r0, ip, asr #32
     4bc:	8b080e42 	blhi	203dcc <mailbuffer+0x1ecd0c>
     4c0:	42018e02 	andmi	r8, r1, #2, 28
     4c4:	60040b0c 	andvs	r0, r4, ip, lsl #22
     4c8:	00080d0c 	andeq	r0, r8, ip, lsl #26
     4cc:	0000001c 	andeq	r0, r0, ip, lsl r0
     4d0:	000002dc 	ldrdeq	r0, [r0], -ip
     4d4:	00011b58 	andeq	r1, r1, r8, asr fp
     4d8:	00000048 	andeq	r0, r0, r8, asr #32
     4dc:	8b040e42 	blhi	103dec <mailbuffer+0xecd2c>
     4e0:	0b0d4201 	bleq	350cec <mailbuffer+0x339c2c>
     4e4:	420d0d5c 	andmi	r0, sp, #92, 26	; 0x1700
     4e8:	00000ecb 	andeq	r0, r0, fp, asr #29
     4ec:	0000000c 	andeq	r0, r0, ip
     4f0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     4f4:	7c020001 	stcvc	0, cr0, [r2], {1}
     4f8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     4fc:	00000020 	andeq	r0, r0, r0, lsr #32
     500:	000004ec 	andeq	r0, r0, ip, ror #9
     504:	00011ba0 	andeq	r1, r1, r0, lsr #23
     508:	00000248 	andeq	r0, r0, r8, asr #4
     50c:	8b080e42 	blhi	203e1c <mailbuffer+0x1ecd5c>
     510:	42018e02 	andmi	r8, r1, #2, 28
     514:	03040b0c 	movweq	r0, #19212	; 0x4b0c
     518:	0d0c0110 	stfeqs	f0, [ip, #-64]	; 0xffffffc0
     51c:	00000008 	andeq	r0, r0, r8
     520:	0000001c 	andeq	r0, r0, ip, lsl r0
     524:	000004ec 	andeq	r0, r0, ip, ror #9
     528:	00011de8 	andeq	r1, r1, r8, ror #27
     52c:	00000100 	andeq	r0, r0, r0, lsl #2
     530:	8b080e42 	blhi	203e40 <mailbuffer+0x1ecd80>
     534:	42018e02 	andmi	r8, r1, #2, 28
     538:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     53c:	080d0c70 	stmdaeq	sp, {r4, r5, r6, sl, fp}
     540:	0000001c 	andeq	r0, r0, ip, lsl r0
     544:	000004ec 	andeq	r0, r0, ip, ror #9
     548:	00011ee8 	andeq	r1, r1, r8, ror #29
     54c:	00000110 	andeq	r0, r0, r0, lsl r1
     550:	8b080e42 	blhi	203e60 <mailbuffer+0x1ecda0>
     554:	42018e02 	andmi	r8, r1, #2, 28
     558:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     55c:	080d0c7e 	stmdaeq	sp, {r1, r2, r3, r4, r5, r6, sl, fp}
     560:	0000001c 	andeq	r0, r0, ip, lsl r0
     564:	000004ec 	andeq	r0, r0, ip, ror #9
     568:	00011ff8 	strdeq	r1, [r1], -r8
     56c:	00000084 	andeq	r0, r0, r4, lsl #1
     570:	8b080e42 	blhi	203e80 <mailbuffer+0x1ecdc0>
     574:	42018e02 	andmi	r8, r1, #2, 28
     578:	78040b0c 	stmdavc	r4, {r2, r3, r8, r9, fp}
     57c:	00080d0c 	andeq	r0, r8, ip, lsl #26
     580:	0000001c 	andeq	r0, r0, ip, lsl r0
     584:	000004ec 	andeq	r0, r0, ip, ror #9
     588:	0001207c 	andeq	r2, r1, ip, ror r0
     58c:	00000058 	andeq	r0, r0, r8, asr r0
     590:	8b080e42 	blhi	203ea0 <mailbuffer+0x1ecde0>
     594:	42018e02 	andmi	r8, r1, #2, 28
     598:	64040b0c 	strvs	r0, [r4], #-2828	; 0xfffff4f4
     59c:	00080d0c 	andeq	r0, r8, ip, lsl #26
     5a0:	0000001c 	andeq	r0, r0, ip, lsl r0
     5a4:	000004ec 	andeq	r0, r0, ip, ror #9
     5a8:	000120d4 	ldrdeq	r2, [r1], -r4
     5ac:	000001a8 	andeq	r0, r0, r8, lsr #3
     5b0:	8b080e42 	blhi	203ec0 <mailbuffer+0x1ece00>
     5b4:	42018e02 	andmi	r8, r1, #2, 28
     5b8:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     5bc:	080d0cc8 	stmdaeq	sp, {r3, r6, r7, sl, fp}
     5c0:	0000001c 	andeq	r0, r0, ip, lsl r0
     5c4:	000004ec 	andeq	r0, r0, ip, ror #9
     5c8:	0001227c 	andeq	r2, r1, ip, ror r2
     5cc:	00000104 	andeq	r0, r0, r4, lsl #2
     5d0:	8b080e42 	blhi	203ee0 <mailbuffer+0x1ece20>
     5d4:	42018e02 	andmi	r8, r1, #2, 28
     5d8:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     5dc:	080d0c74 	stmdaeq	sp, {r2, r4, r5, r6, sl, fp}
     5e0:	0000001c 	andeq	r0, r0, ip, lsl r0
     5e4:	000004ec 	andeq	r0, r0, ip, ror #9
     5e8:	00012380 	andeq	r2, r1, r0, lsl #7
     5ec:	0000007c 	andeq	r0, r0, ip, ror r0
     5f0:	8b040e42 	blhi	103f00 <mailbuffer+0xece40>
     5f4:	0b0d4201 	bleq	350e00 <mailbuffer+0x339d40>
     5f8:	420d0d72 	andmi	r0, sp, #7296	; 0x1c80
     5fc:	00000ecb 	andeq	r0, r0, fp, asr #29
     600:	0000001c 	andeq	r0, r0, ip, lsl r0
     604:	000004ec 	andeq	r0, r0, ip, ror #9
     608:	000123fc 	strdeq	r2, [r1], -ip
     60c:	000000f8 	strdeq	r0, [r0], -r8
     610:	8b080e42 	blhi	203f20 <mailbuffer+0x1ece60>
     614:	42018e02 	andmi	r8, r1, #2, 28
     618:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     61c:	080d0c70 	stmdaeq	sp, {r4, r5, r6, sl, fp}
     620:	0000001c 	andeq	r0, r0, ip, lsl r0
     624:	000004ec 	andeq	r0, r0, ip, ror #9
     628:	000124f4 	strdeq	r2, [r1], -r4
     62c:	0000011c 	andeq	r0, r0, ip, lsl r1
     630:	8b080e42 	blhi	203f40 <mailbuffer+0x1ece80>
     634:	42018e02 	andmi	r8, r1, #2, 28
     638:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     63c:	080d0c7e 	stmdaeq	sp, {r1, r2, r3, r4, r5, r6, sl, fp}
     640:	0000001c 	andeq	r0, r0, ip, lsl r0
     644:	000004ec 	andeq	r0, r0, ip, ror #9
     648:	00012610 	andeq	r2, r1, r0, lsl r6
     64c:	0000009c 	muleq	r0, ip, r0
     650:	8b080e42 	blhi	203f60 <mailbuffer+0x1ecea0>
     654:	42018e02 	andmi	r8, r1, #2, 28
     658:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     65c:	080d0c40 	stmdaeq	sp, {r6, sl, fp}
     660:	00000018 	andeq	r0, r0, r8, lsl r0
     664:	000004ec 	andeq	r0, r0, ip, ror #9
     668:	000126ac 	andeq	r2, r1, ip, lsr #13
     66c:	00000038 	andeq	r0, r0, r8, lsr r0
     670:	8b080e42 	blhi	203f80 <mailbuffer+0x1ecec0>
     674:	42018e02 	andmi	r8, r1, #2, 28
     678:	00040b0c 	andeq	r0, r4, ip, lsl #22
     67c:	0000001c 	andeq	r0, r0, ip, lsl r0
     680:	000004ec 	andeq	r0, r0, ip, ror #9
     684:	000126e4 	andeq	r2, r1, r4, ror #13
     688:	00000030 	andeq	r0, r0, r0, lsr r0
     68c:	8b040e42 	blhi	103f9c <mailbuffer+0xecedc>
     690:	0b0d4201 	bleq	350e9c <mailbuffer+0x339ddc>
     694:	420d0d4e 	andmi	r0, sp, #4992	; 0x1380
     698:	00000ecb 	andeq	r0, r0, fp, asr #29
     69c:	00000020 	andeq	r0, r0, r0, lsr #32
     6a0:	000004ec 	andeq	r0, r0, ip, ror #9
     6a4:	00012714 	andeq	r2, r1, r4, lsl r7
     6a8:	000001a4 	andeq	r0, r0, r4, lsr #3
     6ac:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
     6b0:	8e028b03 	vmlahi.f64	d8, d2, d3
     6b4:	0b0c4201 	bleq	310ec0 <mailbuffer+0x2f9e00>
     6b8:	0cbc0204 	lfmeq	f0, 4, [ip], #16
     6bc:	00000c0d 	andeq	r0, r0, sp, lsl #24
     6c0:	0000001c 	andeq	r0, r0, ip, lsl r0
     6c4:	000004ec 	andeq	r0, r0, ip, ror #9
     6c8:	000128b8 			; <UNDEFINED> instruction: 0x000128b8
     6cc:	00000034 	andeq	r0, r0, r4, lsr r0
     6d0:	8b080e42 	blhi	203fe0 <mailbuffer+0x1ecf20>
     6d4:	42018e02 	andmi	r8, r1, #2, 28
     6d8:	52040b0c 	andpl	r0, r4, #12, 22	; 0x3000
     6dc:	00080d0c 	andeq	r0, r8, ip, lsl #26
     6e0:	0000001c 	andeq	r0, r0, ip, lsl r0
     6e4:	000004ec 	andeq	r0, r0, ip, ror #9
     6e8:	000128ec 	andeq	r2, r1, ip, ror #17
     6ec:	00000038 	andeq	r0, r0, r8, lsr r0
     6f0:	8b040e42 	blhi	104000 <mailbuffer+0xecf40>
     6f4:	0b0d4201 	bleq	350f00 <mailbuffer+0x339e40>
     6f8:	420d0d52 	andmi	r0, sp, #5248	; 0x1480
     6fc:	00000ecb 	andeq	r0, r0, fp, asr #29
     700:	0000001c 	andeq	r0, r0, ip, lsl r0
     704:	000004ec 	andeq	r0, r0, ip, ror #9
     708:	00012924 	andeq	r2, r1, r4, lsr #18
     70c:	00000024 	andeq	r0, r0, r4, lsr #32
     710:	8b040e42 	blhi	104020 <mailbuffer+0xecf60>
     714:	0b0d4201 	bleq	350f20 <mailbuffer+0x339e60>
     718:	420d0d48 	andmi	r0, sp, #72, 26	; 0x1200
     71c:	00000ecb 	andeq	r0, r0, fp, asr #29
     720:	0000001c 	andeq	r0, r0, ip, lsl r0
     724:	000004ec 	andeq	r0, r0, ip, ror #9
     728:	00012948 	andeq	r2, r1, r8, asr #18
     72c:	0000021c 	andeq	r0, r0, ip, lsl r2
     730:	8b080e42 	blhi	204040 <mailbuffer+0x1ecf80>
     734:	42018e02 	andmi	r8, r1, #2, 28
     738:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     73c:	080d0cf6 	stmdaeq	sp, {r1, r2, r4, r5, r6, r7, sl, fp}
     740:	0000001c 	andeq	r0, r0, ip, lsl r0
     744:	000004ec 	andeq	r0, r0, ip, ror #9
     748:	00012b64 	andeq	r2, r1, r4, ror #22
     74c:	0000005c 	andeq	r0, r0, ip, asr r0
     750:	8b080e42 	blhi	204060 <mailbuffer+0x1ecfa0>
     754:	42018e02 	andmi	r8, r1, #2, 28
     758:	66040b0c 	strvs	r0, [r4], -ip, lsl #22
     75c:	00080d0c 	andeq	r0, r8, ip, lsl #26
     760:	0000001c 	andeq	r0, r0, ip, lsl r0
     764:	000004ec 	andeq	r0, r0, ip, ror #9
     768:	00012bc0 	andeq	r2, r1, r0, asr #23
     76c:	0000005c 	andeq	r0, r0, ip, asr r0
     770:	8b080e42 	blhi	204080 <mailbuffer+0x1ecfc0>
     774:	42018e02 	andmi	r8, r1, #2, 28
     778:	66040b0c 	strvs	r0, [r4], -ip, lsl #22
     77c:	00080d0c 	andeq	r0, r8, ip, lsl #26
     780:	0000001c 	andeq	r0, r0, ip, lsl r0
     784:	000004ec 	andeq	r0, r0, ip, ror #9
     788:	00012c1c 	andeq	r2, r1, ip, lsl ip
     78c:	0000007c 	andeq	r0, r0, ip, ror r0
     790:	8b080e42 	blhi	2040a0 <mailbuffer+0x1ecfe0>
     794:	42018e02 	andmi	r8, r1, #2, 28
     798:	76040b0c 	strvc	r0, [r4], -ip, lsl #22
     79c:	00080d0c 	andeq	r0, r8, ip, lsl #26
     7a0:	0000001c 	andeq	r0, r0, ip, lsl r0
     7a4:	000004ec 	andeq	r0, r0, ip, ror #9
     7a8:	00012c98 	muleq	r1, r8, ip
     7ac:	00000108 	andeq	r0, r0, r8, lsl #2
     7b0:	8b040e42 	blhi	1040c0 <mailbuffer+0xed000>
     7b4:	0b0d4201 	bleq	350fc0 <mailbuffer+0x339f00>
     7b8:	0d0d7202 	sfmeq	f7, 4, [sp, #-8]
     7bc:	000ecb42 	andeq	ip, lr, r2, asr #22
     7c0:	0000001c 	andeq	r0, r0, ip, lsl r0
     7c4:	000004ec 	andeq	r0, r0, ip, ror #9
     7c8:	00012da0 	andeq	r2, r1, r0, lsr #27
     7cc:	0000009c 	muleq	r0, ip, r0
     7d0:	8b080e42 	blhi	2040e0 <mailbuffer+0x1ed020>
     7d4:	42018e02 	andmi	r8, r1, #2, 28
     7d8:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     7dc:	080d0c42 	stmdaeq	sp, {r1, r6, sl, fp}
     7e0:	0000001c 	andeq	r0, r0, ip, lsl r0
     7e4:	000004ec 	andeq	r0, r0, ip, ror #9
     7e8:	00012e3c 	andeq	r2, r1, ip, lsr lr
     7ec:	00000118 	andeq	r0, r0, r8, lsl r1
     7f0:	8b080e42 	blhi	204100 <mailbuffer+0x1ed040>
     7f4:	42018e02 	andmi	r8, r1, #2, 28
     7f8:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     7fc:	080d0c7c 	stmdaeq	sp, {r2, r3, r4, r5, r6, sl, fp}
     800:	0000001c 	andeq	r0, r0, ip, lsl r0
     804:	000004ec 	andeq	r0, r0, ip, ror #9
     808:	00012f54 	andeq	r2, r1, r4, asr pc
     80c:	00000048 	andeq	r0, r0, r8, asr #32
     810:	8b040e42 	blhi	104120 <mailbuffer+0xed060>
     814:	0b0d4201 	bleq	351020 <mailbuffer+0x339f60>
     818:	420d0d58 	andmi	r0, sp, #88, 26	; 0x1600
     81c:	00000ecb 	andeq	r0, r0, fp, asr #29
     820:	0000001c 	andeq	r0, r0, ip, lsl r0
     824:	000004ec 	andeq	r0, r0, ip, ror #9
     828:	00012f9c 	muleq	r1, ip, pc	; <UNPREDICTABLE>
     82c:	000000f4 	strdeq	r0, [r0], -r4
     830:	8b080e42 	blhi	204140 <mailbuffer+0x1ed080>
     834:	42018e02 	andmi	r8, r1, #2, 28
     838:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     83c:	080d0c70 	stmdaeq	sp, {r4, r5, r6, sl, fp}
     840:	0000001c 	andeq	r0, r0, ip, lsl r0
     844:	000004ec 	andeq	r0, r0, ip, ror #9
     848:	00013090 	muleq	r1, r0, r0
     84c:	00000028 	andeq	r0, r0, r8, lsr #32
     850:	8b040e42 	blhi	104160 <mailbuffer+0xed0a0>
     854:	0b0d4201 	bleq	351060 <mailbuffer+0x339fa0>
     858:	420d0d4a 	andmi	r0, sp, #4736	; 0x1280
     85c:	00000ecb 	andeq	r0, r0, fp, asr #29
     860:	00000018 	andeq	r0, r0, r8, lsl r0
     864:	000004ec 	andeq	r0, r0, ip, ror #9
     868:	000130b8 	strheq	r3, [r1], -r8
     86c:	00000030 	andeq	r0, r0, r0, lsr r0
     870:	8b080e42 	blhi	204180 <mailbuffer+0x1ed0c0>
     874:	42018e02 	andmi	r8, r1, #2, 28
     878:	00040b0c 	andeq	r0, r4, ip, lsl #22
     87c:	0000001c 	andeq	r0, r0, ip, lsl r0
     880:	000004ec 	andeq	r0, r0, ip, ror #9
     884:	000130e8 	andeq	r3, r1, r8, ror #1
     888:	000000c0 	andeq	r0, r0, r0, asr #1
     88c:	8b080e42 	blhi	20419c <mailbuffer+0x1ed0dc>
     890:	42018e02 	andmi	r8, r1, #2, 28
     894:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     898:	080d0c5a 	stmdaeq	sp, {r1, r3, r4, r6, sl, fp}
     89c:	0000001c 	andeq	r0, r0, ip, lsl r0
     8a0:	000004ec 	andeq	r0, r0, ip, ror #9
     8a4:	000131a8 	andeq	r3, r1, r8, lsr #3
     8a8:	000000c0 	andeq	r0, r0, r0, asr #1
     8ac:	8b080e42 	blhi	2041bc <mailbuffer+0x1ed0fc>
     8b0:	42018e02 	andmi	r8, r1, #2, 28
     8b4:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     8b8:	080d0c4a 	stmdaeq	sp, {r1, r3, r6, sl, fp}
     8bc:	0000001c 	andeq	r0, r0, ip, lsl r0
     8c0:	000004ec 	andeq	r0, r0, ip, ror #9
     8c4:	00013268 	andeq	r3, r1, r8, ror #4
     8c8:	000000bc 	strheq	r0, [r0], -ip
     8cc:	8b080e42 	blhi	2041dc <mailbuffer+0x1ed11c>
     8d0:	42018e02 	andmi	r8, r1, #2, 28
     8d4:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     8d8:	080d0c52 	stmdaeq	sp, {r1, r4, r6, sl, fp}
     8dc:	0000001c 	andeq	r0, r0, ip, lsl r0
     8e0:	000004ec 	andeq	r0, r0, ip, ror #9
     8e4:	00013324 	andeq	r3, r1, r4, lsr #6
     8e8:	000000b8 	strheq	r0, [r0], -r8
     8ec:	8b080e42 	blhi	2041fc <mailbuffer+0x1ed13c>
     8f0:	42018e02 	andmi	r8, r1, #2, 28
     8f4:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     8f8:	080d0c4c 	stmdaeq	sp, {r2, r3, r6, sl, fp}
     8fc:	0000001c 	andeq	r0, r0, ip, lsl r0
     900:	000004ec 	andeq	r0, r0, ip, ror #9
     904:	000133dc 	ldrdeq	r3, [r1], -ip
     908:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
     90c:	8b080e42 	blhi	20421c <mailbuffer+0x1ed15c>
     910:	42018e02 	andmi	r8, r1, #2, 28
     914:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     918:	080d0c52 	stmdaeq	sp, {r1, r4, r6, sl, fp}
     91c:	0000001c 	andeq	r0, r0, ip, lsl r0
     920:	000004ec 	andeq	r0, r0, ip, ror #9
     924:	0001348c 	andeq	r3, r1, ip, lsl #9
     928:	00000034 	andeq	r0, r0, r4, lsr r0
     92c:	8b080e42 	blhi	20423c <mailbuffer+0x1ed17c>
     930:	42018e02 	andmi	r8, r1, #2, 28
     934:	54040b0c 	strpl	r0, [r4], #-2828	; 0xfffff4f4
     938:	00080d0c 	andeq	r0, r8, ip, lsl #26
     93c:	0000000c 	andeq	r0, r0, ip
     940:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     944:	7c020001 	stcvc	0, cr0, [r2], {1}
     948:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     94c:	0000001c 	andeq	r0, r0, ip, lsl r0
     950:	0000093c 	andeq	r0, r0, ip, lsr r9
     954:	000134c0 	andeq	r3, r1, r0, asr #9
     958:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
     95c:	8b080e42 	blhi	20426c <mailbuffer+0x1ed1ac>
     960:	42018e02 	andmi	r8, r1, #2, 28
     964:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     968:	080d0c50 	stmdaeq	sp, {r4, r6, sl, fp}
     96c:	0000001c 	andeq	r0, r0, ip, lsl r0
     970:	0000093c 	andeq	r0, r0, ip, lsr r9
     974:	00013570 	andeq	r3, r1, r0, ror r5
     978:	000000a0 	andeq	r0, r0, r0, lsr #1
     97c:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
     980:	8b038504 	blhi	e1d98 <mailbuffer+0xcacd8>
     984:	42018e02 	andmi	r8, r1, #2, 28
     988:	00040b0c 	andeq	r0, r4, ip, lsl #22
     98c:	0000001c 	andeq	r0, r0, ip, lsl r0
     990:	0000093c 	andeq	r0, r0, ip, lsr r9
     994:	00013610 	andeq	r3, r1, r0, lsl r6
     998:	0000001c 	andeq	r0, r0, ip, lsl r0
     99c:	8b040e42 	blhi	1042ac <mailbuffer+0xed1ec>
     9a0:	0b0d4201 	bleq	3511ac <mailbuffer+0x33a0ec>
     9a4:	420d0d46 	andmi	r0, sp, #4480	; 0x1180
     9a8:	00000ecb 	andeq	r0, r0, fp, asr #29
     9ac:	0000001c 	andeq	r0, r0, ip, lsl r0
     9b0:	0000093c 	andeq	r0, r0, ip, lsr r9
     9b4:	0001362c 	andeq	r3, r1, ip, lsr #12
     9b8:	0000001c 	andeq	r0, r0, ip, lsl r0
     9bc:	8b040e42 	blhi	1042cc <mailbuffer+0xed20c>
     9c0:	0b0d4201 	bleq	3511cc <mailbuffer+0x33a10c>
     9c4:	420d0d46 	andmi	r0, sp, #4480	; 0x1180
     9c8:	00000ecb 	andeq	r0, r0, fp, asr #29
     9cc:	0000001c 	andeq	r0, r0, ip, lsl r0
     9d0:	0000093c 	andeq	r0, r0, ip, lsr r9
     9d4:	00013648 	andeq	r3, r1, r8, asr #12
     9d8:	00000064 	andeq	r0, r0, r4, rrx
     9dc:	8b080e42 	blhi	2042ec <mailbuffer+0x1ed22c>
     9e0:	42018e02 	andmi	r8, r1, #2, 28
     9e4:	6a040b0c 	bvs	10361c <mailbuffer+0xec55c>
     9e8:	00080d0c 	andeq	r0, r8, ip, lsl #26
     9ec:	0000001c 	andeq	r0, r0, ip, lsl r0
     9f0:	0000093c 	andeq	r0, r0, ip, lsr r9
     9f4:	000136ac 	andeq	r3, r1, ip, lsr #13
     9f8:	000000d4 	ldrdeq	r0, [r0], -r4
     9fc:	8b040e42 	blhi	10430c <mailbuffer+0xed24c>
     a00:	0b0d4201 	bleq	35120c <mailbuffer+0x33a14c>
     a04:	0d0d5e02 	stceq	14, cr5, [sp, #-8]
     a08:	000ecb42 	andeq	ip, lr, r2, asr #22
     a0c:	0000001c 	andeq	r0, r0, ip, lsl r0
     a10:	0000093c 	andeq	r0, r0, ip, lsr r9
     a14:	00013780 	andeq	r3, r1, r0, lsl #15
     a18:	000000e0 	andeq	r0, r0, r0, ror #1
     a1c:	8b040e42 	blhi	10432c <mailbuffer+0xed26c>
     a20:	0b0d4201 	bleq	35122c <mailbuffer+0x33a16c>
     a24:	0d0d6402 	cfstrseq	mvf6, [sp, #-8]
     a28:	000ecb42 	andeq	ip, lr, r2, asr #22
     a2c:	0000000c 	andeq	r0, r0, ip
     a30:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     a34:	7c020001 	stcvc	0, cr0, [r2], {1}
     a38:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     a3c:	0000001c 	andeq	r0, r0, ip, lsl r0
     a40:	00000a2c 	andeq	r0, r0, ip, lsr #20
     a44:	00013860 	andeq	r3, r1, r0, ror #16
     a48:	000000dc 	ldrdeq	r0, [r0], -ip
     a4c:	8b040e42 	blhi	10435c <mailbuffer+0xed29c>
     a50:	0b0d4201 	bleq	35125c <mailbuffer+0x33a19c>
     a54:	0d0d6202 	sfmeq	f6, 4, [sp, #-8]
     a58:	000ecb42 	andeq	ip, lr, r2, asr #22
     a5c:	0000001c 	andeq	r0, r0, ip, lsl r0
     a60:	00000a2c 	andeq	r0, r0, ip, lsr #20
     a64:	0001393c 	andeq	r3, r1, ip, lsr r9
     a68:	00000034 	andeq	r0, r0, r4, lsr r0
     a6c:	8b080e42 	blhi	20437c <mailbuffer+0x1ed2bc>
     a70:	42018e02 	andmi	r8, r1, #2, 28
     a74:	54040b0c 	strpl	r0, [r4], #-2828	; 0xfffff4f4
     a78:	00080d0c 	andeq	r0, r8, ip, lsl #26
     a7c:	0000001c 	andeq	r0, r0, ip, lsl r0
     a80:	00000a2c 	andeq	r0, r0, ip, lsr #20
     a84:	00013970 	andeq	r3, r1, r0, ror r9
     a88:	000000b8 	strheq	r0, [r0], -r8
     a8c:	8b040e42 	blhi	10439c <mailbuffer+0xed2dc>
     a90:	0b0d4201 	bleq	35129c <mailbuffer+0x33a1dc>
     a94:	0d0d5202 	sfmeq	f5, 4, [sp, #-8]
     a98:	000ecb42 	andeq	ip, lr, r2, asr #22
     a9c:	0000001c 	andeq	r0, r0, ip, lsl r0
     aa0:	00000a2c 	andeq	r0, r0, ip, lsr #20
     aa4:	00013a28 	andeq	r3, r1, r8, lsr #20
     aa8:	00000050 	andeq	r0, r0, r0, asr r0
     aac:	8b040e42 	blhi	1043bc <mailbuffer+0xed2fc>
     ab0:	0b0d4201 	bleq	3512bc <mailbuffer+0x33a1fc>
     ab4:	420d0d5e 	andmi	r0, sp, #6016	; 0x1780
     ab8:	00000ecb 	andeq	r0, r0, fp, asr #29
     abc:	0000001c 	andeq	r0, r0, ip, lsl r0
     ac0:	00000a2c 	andeq	r0, r0, ip, lsr #20
     ac4:	00013a78 	andeq	r3, r1, r8, ror sl
     ac8:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
     acc:	8b040e42 	blhi	1043dc <mailbuffer+0xed31c>
     ad0:	0b0d4201 	bleq	3512dc <mailbuffer+0x33a21c>
     ad4:	0d0dce02 	stceq	14, cr12, [sp, #-8]
     ad8:	000ecb42 	andeq	ip, lr, r2, asr #22
     adc:	0000001c 	andeq	r0, r0, ip, lsl r0
     ae0:	00000a2c 	andeq	r0, r0, ip, lsr #20
     ae4:	00013c28 	andeq	r3, r1, r8, lsr #24
     ae8:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
     aec:	8b040e42 	blhi	1043fc <mailbuffer+0xed33c>
     af0:	0b0d4201 	bleq	3512fc <mailbuffer+0x33a23c>
     af4:	0d0dd202 	sfmeq	f5, 1, [sp, #-8]
     af8:	000ecb42 	andeq	ip, lr, r2, asr #22
     afc:	0000001c 	andeq	r0, r0, ip, lsl r0
     b00:	00000a2c 	andeq	r0, r0, ip, lsr #20
     b04:	00013de0 	andeq	r3, r1, r0, ror #27
     b08:	00000030 	andeq	r0, r0, r0, lsr r0
     b0c:	8b040e42 	blhi	10441c <mailbuffer+0xed35c>
     b10:	0b0d4201 	bleq	35131c <mailbuffer+0x33a25c>
     b14:	420d0d50 	andmi	r0, sp, #80, 26	; 0x1400
     b18:	00000ecb 	andeq	r0, r0, fp, asr #29
     b1c:	00000018 	andeq	r0, r0, r8, lsl r0
     b20:	00000a2c 	andeq	r0, r0, ip, lsr #20
     b24:	00013e10 	andeq	r3, r1, r0, lsl lr
     b28:	000000c4 	andeq	r0, r0, r4, asr #1
     b2c:	8b080e42 	blhi	20443c <mailbuffer+0x1ed37c>
     b30:	42018e02 	andmi	r8, r1, #2, 28
     b34:	00040b0c 	andeq	r0, r4, ip, lsl #22
     b38:	0000001c 	andeq	r0, r0, ip, lsl r0
     b3c:	00000a2c 	andeq	r0, r0, ip, lsr #20
     b40:	00013ed4 	ldrdeq	r3, [r1], -r4
     b44:	00000058 	andeq	r0, r0, r8, asr r0
     b48:	8b040e42 	blhi	104458 <mailbuffer+0xed398>
     b4c:	0b0d4201 	bleq	351358 <mailbuffer+0x33a298>
     b50:	420d0d62 	andmi	r0, sp, #6272	; 0x1880
     b54:	00000ecb 	andeq	r0, r0, fp, asr #29
     b58:	0000001c 	andeq	r0, r0, ip, lsl r0
     b5c:	00000a2c 	andeq	r0, r0, ip, lsr #20
     b60:	00013f2c 	andeq	r3, r1, ip, lsr #30
     b64:	00000030 	andeq	r0, r0, r0, lsr r0
     b68:	8b040e42 	blhi	104478 <mailbuffer+0xed3b8>
     b6c:	0b0d4201 	bleq	351378 <mailbuffer+0x33a2b8>
     b70:	420d0d50 	andmi	r0, sp, #80, 26	; 0x1400
     b74:	00000ecb 	andeq	r0, r0, fp, asr #29
     b78:	0000001c 	andeq	r0, r0, ip, lsl r0
     b7c:	00000a2c 	andeq	r0, r0, ip, lsr #20
     b80:	00013f5c 	andeq	r3, r1, ip, asr pc
     b84:	00000028 	andeq	r0, r0, r8, lsr #32
     b88:	8b040e42 	blhi	104498 <mailbuffer+0xed3d8>
     b8c:	0b0d4201 	bleq	351398 <mailbuffer+0x33a2d8>
     b90:	420d0d4c 	andmi	r0, sp, #76, 26	; 0x1300
     b94:	00000ecb 	andeq	r0, r0, fp, asr #29
     b98:	0000001c 	andeq	r0, r0, ip, lsl r0
     b9c:	00000a2c 	andeq	r0, r0, ip, lsr #20
     ba0:	00013f84 	andeq	r3, r1, r4, lsl #31
     ba4:	00000054 	andeq	r0, r0, r4, asr r0
     ba8:	8b080e42 	blhi	2044b8 <mailbuffer+0x1ed3f8>
     bac:	42018e02 	andmi	r8, r1, #2, 28
     bb0:	60040b0c 	andvs	r0, r4, ip, lsl #22
     bb4:	00080d0c 	andeq	r0, r8, ip, lsl #26
     bb8:	0000000c 	andeq	r0, r0, ip
     bbc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     bc0:	7c020001 	stcvc	0, cr0, [r2], {1}
     bc4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     bc8:	0000001c 	andeq	r0, r0, ip, lsl r0
     bcc:	00000bb8 			; <UNDEFINED> instruction: 0x00000bb8
     bd0:	00013fd8 	ldrdeq	r3, [r1], -r8
     bd4:	0000006c 	andeq	r0, r0, ip, rrx
     bd8:	8b080e42 	blhi	2044e8 <mailbuffer+0x1ed428>
     bdc:	42018e02 	andmi	r8, r1, #2, 28
     be0:	6e040b0c 	vmlavs.f64	d0, d4, d12
     be4:	00080d0c 	andeq	r0, r8, ip, lsl #26
     be8:	0000001c 	andeq	r0, r0, ip, lsl r0
     bec:	00000bb8 			; <UNDEFINED> instruction: 0x00000bb8
     bf0:	00014044 	andeq	r4, r1, r4, asr #32
     bf4:	00000080 	andeq	r0, r0, r0, lsl #1
     bf8:	8b080e42 	blhi	204508 <mailbuffer+0x1ed448>
     bfc:	42018e02 	andmi	r8, r1, #2, 28
     c00:	78040b0c 	stmdavc	r4, {r2, r3, r8, r9, fp}
     c04:	00080d0c 	andeq	r0, r8, ip, lsl #26
     c08:	0000000c 	andeq	r0, r0, ip
     c0c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     c10:	7c020001 	stcvc	0, cr0, [r2], {1}
     c14:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     c18:	0000001c 	andeq	r0, r0, ip, lsl r0
     c1c:	00000c08 	andeq	r0, r0, r8, lsl #24
     c20:	000140c4 	andeq	r4, r1, r4, asr #1
     c24:	00000028 	andeq	r0, r0, r8, lsr #32
     c28:	8b040e42 	blhi	104538 <mailbuffer+0xed478>
     c2c:	0b0d4201 	bleq	351438 <mailbuffer+0x33a378>
     c30:	420d0d4a 	andmi	r0, sp, #4736	; 0x1280
     c34:	00000ecb 	andeq	r0, r0, fp, asr #29
     c38:	00000018 	andeq	r0, r0, r8, lsl r0
     c3c:	00000c08 	andeq	r0, r0, r8, lsl #24
     c40:	000140ec 	andeq	r4, r1, ip, ror #1
     c44:	000001c8 	andeq	r0, r0, r8, asr #3
     c48:	8b080e42 	blhi	204558 <mailbuffer+0x1ed498>
     c4c:	42018e02 	andmi	r8, r1, #2, 28
     c50:	00040b0c 	andeq	r0, r4, ip, lsl #22
     c54:	0000001c 	andeq	r0, r0, ip, lsl r0
     c58:	00000c08 	andeq	r0, r0, r8, lsl #24
     c5c:	000142b4 			; <UNDEFINED> instruction: 0x000142b4
     c60:	00000064 	andeq	r0, r0, r4, rrx
     c64:	8b040e42 	blhi	104574 <mailbuffer+0xed4b4>
     c68:	0b0d4201 	bleq	351474 <mailbuffer+0x33a3b4>
     c6c:	420d0d66 	andmi	r0, sp, #6528	; 0x1980
     c70:	00000ecb 	andeq	r0, r0, fp, asr #29
     c74:	0000001c 	andeq	r0, r0, ip, lsl r0
     c78:	00000c08 	andeq	r0, r0, r8, lsl #24
     c7c:	00014318 	andeq	r4, r1, r8, lsl r3
     c80:	00000090 	muleq	r0, r0, r0
     c84:	8b080e42 	blhi	204594 <mailbuffer+0x1ed4d4>
     c88:	42018e02 	andmi	r8, r1, #2, 28
     c8c:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     c90:	080d0c42 	stmdaeq	sp, {r1, r6, sl, fp}
     c94:	0000001c 	andeq	r0, r0, ip, lsl r0
     c98:	00000c08 	andeq	r0, r0, r8, lsl #24
     c9c:	000143a8 	andeq	r4, r1, r8, lsr #7
     ca0:	00000134 	andeq	r0, r0, r4, lsr r1
     ca4:	8b040e42 	blhi	1045b4 <mailbuffer+0xed4f4>
     ca8:	0b0d4201 	bleq	3514b4 <mailbuffer+0x33a3f4>
     cac:	0d0d8c02 	stceq	12, cr8, [sp, #-8]
     cb0:	000ecb42 	andeq	ip, lr, r2, asr #22
     cb4:	0000001c 	andeq	r0, r0, ip, lsl r0
     cb8:	00000c08 	andeq	r0, r0, r8, lsl #24
     cbc:	000144dc 	ldrdeq	r4, [r1], -ip
     cc0:	00000068 	andeq	r0, r0, r8, rrx
     cc4:	8b080e42 	blhi	2045d4 <mailbuffer+0x1ed514>
     cc8:	42018e02 	andmi	r8, r1, #2, 28
     ccc:	6e040b0c 	vmlavs.f64	d0, d4, d12
     cd0:	00080d0c 	andeq	r0, r8, ip, lsl #26
     cd4:	0000001c 	andeq	r0, r0, ip, lsl r0
     cd8:	00000c08 	andeq	r0, r0, r8, lsl #24
     cdc:	00014544 	andeq	r4, r1, r4, asr #10
     ce0:	00000204 	andeq	r0, r0, r4, lsl #4
     ce4:	8b080e42 	blhi	2045f4 <mailbuffer+0x1ed534>
     ce8:	42018e02 	andmi	r8, r1, #2, 28
     cec:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     cf0:	080d0cec 	stmdaeq	sp, {r2, r3, r5, r6, r7, sl, fp}
     cf4:	00000020 	andeq	r0, r0, r0, lsr #32
     cf8:	00000c08 	andeq	r0, r0, r8, lsl #24
     cfc:	00014748 	andeq	r4, r1, r8, asr #14
     d00:	0000021c 	andeq	r0, r0, ip, lsl r2
     d04:	8b080e42 	blhi	204614 <mailbuffer+0x1ed554>
     d08:	42018e02 	andmi	r8, r1, #2, 28
     d0c:	03040b0c 	movweq	r0, #19212	; 0x4b0c
     d10:	0d0c0104 	stfeqs	f0, [ip, #-16]
     d14:	00000008 	andeq	r0, r0, r8
     d18:	0000001c 	andeq	r0, r0, ip, lsl r0
     d1c:	00000c08 	andeq	r0, r0, r8, lsl #24
     d20:	00014964 	andeq	r4, r1, r4, ror #18
     d24:	000000ec 	andeq	r0, r0, ip, ror #1
     d28:	8b080e42 	blhi	204638 <mailbuffer+0x1ed578>
     d2c:	42018e02 	andmi	r8, r1, #2, 28
     d30:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     d34:	080d0c62 	stmdaeq	sp, {r1, r5, r6, sl, fp}
     d38:	0000000c 	andeq	r0, r0, ip
     d3c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     d40:	7c020001 	stcvc	0, cr0, [r2], {1}
     d44:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     d48:	0000001c 	andeq	r0, r0, ip, lsl r0
     d4c:	00000d38 	andeq	r0, r0, r8, lsr sp
     d50:	00014a50 	andeq	r4, r1, r0, asr sl
     d54:	00000064 	andeq	r0, r0, r4, rrx
     d58:	8b040e42 	blhi	104668 <mailbuffer+0xed5a8>
     d5c:	0b0d4201 	bleq	351568 <mailbuffer+0x33a4a8>
     d60:	420d0d6a 	andmi	r0, sp, #6784	; 0x1a80
     d64:	00000ecb 	andeq	r0, r0, fp, asr #29
     d68:	00000028 	andeq	r0, r0, r8, lsr #32
     d6c:	00000d38 	andeq	r0, r0, r8, lsr sp
     d70:	00014ab4 			; <UNDEFINED> instruction: 0x00014ab4
     d74:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
     d78:	841c0e42 	ldrhi	r0, [ip], #-3650	; 0xfffff1be
     d7c:	86068507 	strhi	r8, [r6], -r7, lsl #10
     d80:	88048705 	stmdahi	r4, {r0, r2, r8, r9, sl, pc}
     d84:	8e028b03 	vmlahi.f64	d8, d2, d3
     d88:	0b0c4201 	bleq	311594 <mailbuffer+0x2fa4d4>
     d8c:	0c520204 	lfmeq	f0, 2, [r2], {4}
     d90:	00001c0d 	andeq	r1, r0, sp, lsl #24
     d94:	0000001c 	andeq	r0, r0, ip, lsl r0
     d98:	00000d38 	andeq	r0, r0, r8, lsr sp
     d9c:	00014b64 	andeq	r4, r1, r4, ror #22
     da0:	00000074 	andeq	r0, r0, r4, ror r0
     da4:	8b040e42 	blhi	1046b4 <mailbuffer+0xed5f4>
     da8:	0b0d4201 	bleq	3515b4 <mailbuffer+0x33a4f4>
     dac:	420d0d72 	andmi	r0, sp, #7296	; 0x1c80
     db0:	00000ecb 	andeq	r0, r0, fp, asr #29
     db4:	0000001c 	andeq	r0, r0, ip, lsl r0
     db8:	00000d38 	andeq	r0, r0, r8, lsr sp
     dbc:	00014bd8 	ldrdeq	r4, [r1], -r8
     dc0:	000000a0 	andeq	r0, r0, r0, lsr #1
     dc4:	8b040e42 	blhi	1046d4 <mailbuffer+0xed614>
     dc8:	0b0d4201 	bleq	3515d4 <mailbuffer+0x33a514>
     dcc:	0d0d4802 	stceq	8, cr4, [sp, #-8]
     dd0:	000ecb42 	andeq	ip, lr, r2, asr #22
     dd4:	0000001c 	andeq	r0, r0, ip, lsl r0
     dd8:	00000d38 	andeq	r0, r0, r8, lsr sp
     ddc:	00014c78 	andeq	r4, r1, r8, ror ip
     de0:	00000060 	andeq	r0, r0, r0, rrx
     de4:	8b040e42 	blhi	1046f4 <mailbuffer+0xed634>
     de8:	0b0d4201 	bleq	3515f4 <mailbuffer+0x33a534>
     dec:	420d0d68 	andmi	r0, sp, #104, 26	; 0x1a00
     df0:	00000ecb 	andeq	r0, r0, fp, asr #29
     df4:	0000001c 	andeq	r0, r0, ip, lsl r0
     df8:	00000d38 	andeq	r0, r0, r8, lsr sp
     dfc:	00014cd8 	ldrdeq	r4, [r1], -r8
     e00:	000000a8 	andeq	r0, r0, r8, lsr #1
     e04:	8b040e42 	blhi	104714 <mailbuffer+0xed654>
     e08:	0b0d4201 	bleq	351614 <mailbuffer+0x33a554>
     e0c:	0d0d4c02 	stceq	12, cr4, [sp, #-8]
     e10:	000ecb42 	andeq	ip, lr, r2, asr #22
     e14:	0000001c 	andeq	r0, r0, ip, lsl r0
     e18:	00000d38 	andeq	r0, r0, r8, lsr sp
     e1c:	00014d80 	andeq	r4, r1, r0, lsl #27
     e20:	00000054 	andeq	r0, r0, r4, asr r0
     e24:	8b040e42 	blhi	104734 <mailbuffer+0xed674>
     e28:	0b0d4201 	bleq	351634 <mailbuffer+0x33a574>
     e2c:	420d0d62 	andmi	r0, sp, #6272	; 0x1880
     e30:	00000ecb 	andeq	r0, r0, fp, asr #29
     e34:	0000001c 	andeq	r0, r0, ip, lsl r0
     e38:	00000d38 	andeq	r0, r0, r8, lsr sp
     e3c:	00014dd4 	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
     e40:	00000050 	andeq	r0, r0, r0, asr r0
     e44:	8b040e42 	blhi	104754 <mailbuffer+0xed694>
     e48:	0b0d4201 	bleq	351654 <mailbuffer+0x33a594>
     e4c:	420d0d5c 	andmi	r0, sp, #92, 26	; 0x1700
     e50:	00000ecb 	andeq	r0, r0, fp, asr #29
     e54:	0000000c 	andeq	r0, r0, ip
     e58:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     e5c:	7c020001 	stcvc	0, cr0, [r2], {1}
     e60:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     e64:	0000001c 	andeq	r0, r0, ip, lsl r0
     e68:	00000e54 	andeq	r0, r0, r4, asr lr
     e6c:	00014e24 	andeq	r4, r1, r4, lsr #28
     e70:	000001c8 	andeq	r0, r0, r8, asr #3
     e74:	8b080e42 	blhi	204784 <mailbuffer+0x1ed6c4>
     e78:	42018e02 	andmi	r8, r1, #2, 28
     e7c:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     e80:	080d0cd6 	stmdaeq	sp, {r1, r2, r4, r6, r7, sl, fp}
     e84:	0000001c 	andeq	r0, r0, ip, lsl r0
     e88:	00000e54 	andeq	r0, r0, r4, asr lr
     e8c:	00014fec 	andeq	r4, r1, ip, ror #31
     e90:	0000007c 	andeq	r0, r0, ip, ror r0
     e94:	8b080e42 	blhi	2047a4 <mailbuffer+0x1ed6e4>
     e98:	42018e02 	andmi	r8, r1, #2, 28
     e9c:	76040b0c 	strvc	r0, [r4], -ip, lsl #22
     ea0:	00080d0c 	andeq	r0, r8, ip, lsl #26
     ea4:	0000001c 	andeq	r0, r0, ip, lsl r0
     ea8:	00000e54 	andeq	r0, r0, r4, asr lr
     eac:	00015068 	andeq	r5, r1, r8, rrx
     eb0:	00000024 	andeq	r0, r0, r4, lsr #32
     eb4:	8b040e42 	blhi	1047c4 <mailbuffer+0xed704>
     eb8:	0b0d4201 	bleq	3516c4 <mailbuffer+0x33a604>
     ebc:	420d0d48 	andmi	r0, sp, #72, 26	; 0x1200
     ec0:	00000ecb 	andeq	r0, r0, fp, asr #29
     ec4:	0000001c 	andeq	r0, r0, ip, lsl r0
     ec8:	00000e54 	andeq	r0, r0, r4, asr lr
     ecc:	0001508c 	andeq	r5, r1, ip, lsl #1
     ed0:	00000018 	andeq	r0, r0, r8, lsl r0
     ed4:	8b040e42 	blhi	1047e4 <mailbuffer+0xed724>
     ed8:	0b0d4201 	bleq	3516e4 <mailbuffer+0x33a624>
     edc:	420d0d44 	andmi	r0, sp, #68, 26	; 0x1100
     ee0:	00000ecb 	andeq	r0, r0, fp, asr #29
     ee4:	0000001c 	andeq	r0, r0, ip, lsl r0
     ee8:	00000e54 	andeq	r0, r0, r4, asr lr
     eec:	000150a4 	andeq	r5, r1, r4, lsr #1
     ef0:	000000d8 	ldrdeq	r0, [r0], -r8
     ef4:	8b040e42 	blhi	104804 <mailbuffer+0xed744>
     ef8:	0b0d4201 	bleq	351704 <mailbuffer+0x33a644>
     efc:	0d0d5c02 	stceq	12, cr5, [sp, #-8]
     f00:	000ecb42 	andeq	ip, lr, r2, asr #22
     f04:	0000001c 	andeq	r0, r0, ip, lsl r0
     f08:	00000e54 	andeq	r0, r0, r4, asr lr
     f0c:	0001517c 	andeq	r5, r1, ip, ror r1
     f10:	00000154 	andeq	r0, r0, r4, asr r1
     f14:	8b040e42 	blhi	104824 <mailbuffer+0xed764>
     f18:	0b0d4201 	bleq	351724 <mailbuffer+0x33a664>
     f1c:	0d0d9e02 	stceq	14, cr9, [sp, #-8]
     f20:	000ecb42 	andeq	ip, lr, r2, asr #22
     f24:	0000000c 	andeq	r0, r0, ip
     f28:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     f2c:	7c020001 	stcvc	0, cr0, [r2], {1}
     f30:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     f34:	00000018 	andeq	r0, r0, r8, lsl r0
     f38:	00000f24 	andeq	r0, r0, r4, lsr #30
     f3c:	000152f8 	strdeq	r5, [r1], -r8
     f40:	0000003c 	andeq	r0, r0, ip, lsr r0
     f44:	8b080e42 	blhi	204854 <mailbuffer+0x1ed794>
     f48:	42018e02 	andmi	r8, r1, #2, 28
     f4c:	00040b0c 	andeq	r0, r4, ip, lsl #22
     f50:	00000018 	andeq	r0, r0, r8, lsl r0
     f54:	00000f24 	andeq	r0, r0, r4, lsr #30
     f58:	00015334 	andeq	r5, r1, r4, lsr r3
     f5c:	00000044 	andeq	r0, r0, r4, asr #32
     f60:	8b080e42 	blhi	204870 <mailbuffer+0x1ed7b0>
     f64:	42018e02 	andmi	r8, r1, #2, 28
     f68:	00040b0c 	andeq	r0, r4, ip, lsl #22
     f6c:	00000018 	andeq	r0, r0, r8, lsl r0
     f70:	00000f24 	andeq	r0, r0, r4, lsr #30
     f74:	00015378 	andeq	r5, r1, r8, ror r3
     f78:	00000028 	andeq	r0, r0, r8, lsr #32
     f7c:	8b080e42 	blhi	20488c <mailbuffer+0x1ed7cc>
     f80:	42018e02 	andmi	r8, r1, #2, 28
     f84:	00040b0c 	andeq	r0, r4, ip, lsl #22
     f88:	00000018 	andeq	r0, r0, r8, lsl r0
     f8c:	00000f24 	andeq	r0, r0, r4, lsr #30
     f90:	000153a0 	andeq	r5, r1, r0, lsr #7
     f94:	00000034 	andeq	r0, r0, r4, lsr r0
     f98:	8b080e42 	blhi	2048a8 <mailbuffer+0x1ed7e8>
     f9c:	42018e02 	andmi	r8, r1, #2, 28
     fa0:	00040b0c 	andeq	r0, r4, ip, lsl #22
     fa4:	00000018 	andeq	r0, r0, r8, lsl r0
     fa8:	00000f24 	andeq	r0, r0, r4, lsr #30
     fac:	000153d4 	ldrdeq	r5, [r1], -r4
     fb0:	000000d8 	ldrdeq	r0, [r0], -r8
     fb4:	8b080e42 	blhi	2048c4 <mailbuffer+0x1ed804>
     fb8:	42018e02 	andmi	r8, r1, #2, 28
     fbc:	00040b0c 	andeq	r0, r4, ip, lsl #22
     fc0:	0000000c 	andeq	r0, r0, ip
     fc4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     fc8:	7c020001 	stcvc	0, cr0, [r2], {1}
     fcc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     fd0:	0000001c 	andeq	r0, r0, ip, lsl r0
     fd4:	00000fc0 	andeq	r0, r0, r0, asr #31
     fd8:	000154ac 	andeq	r5, r1, ip, lsr #9
     fdc:	0000031c 	andeq	r0, r0, ip, lsl r3
     fe0:	0c0e480a 	stceq	8, cr4, [lr], {10}
     fe4:	02850384 	addeq	r0, r5, #132, 6	; 0x10000002
     fe8:	8603018e 	strhi	r0, [r3], -lr, lsl #3
     fec:	00000b01 	andeq	r0, r0, r1, lsl #22
     ff0:	00000018 	andeq	r0, r0, r8, lsl r0
     ff4:	00000fc0 	andeq	r0, r0, r0, asr #31
     ff8:	000157c8 	andeq	r5, r1, r8, asr #15
     ffc:	00000024 	andeq	r0, r0, r4, lsr #32
    1000:	0c0e480a 	stceq	8, cr4, [lr], {10}
    1004:	02850384 	addeq	r0, r5, #132, 6	; 0x10000002
    1008:	0b4a018e 	bleq	1281648 <mailbuffer+0x126a588>
    100c:	00000018 	andeq	r0, r0, r8, lsl r0
    1010:	00000fc0 	andeq	r0, r0, r0, asr #31
    1014:	000157ec 	andeq	r5, r1, ip, ror #15
    1018:	00000028 	andeq	r0, r0, r8, lsr #32
    101c:	0c0e480a 	stceq	8, cr4, [lr], {10}
    1020:	02850384 	addeq	r0, r5, #132, 6	; 0x10000002
    1024:	0b4c018e 	bleq	1301664 <mailbuffer+0x12ea5a4>
    1028:	00000018 	andeq	r0, r0, r8, lsl r0
    102c:	00000fc0 	andeq	r0, r0, r0, asr #31
    1030:	00015814 	andeq	r5, r1, r4, lsl r8
    1034:	00000040 	andeq	r0, r0, r0, asr #32
    1038:	0c0e580a 	stceq	8, cr5, [lr], {10}
    103c:	02850384 	addeq	r0, r5, #132, 6	; 0x10000002
    1040:	0b48018e 	bleq	1201680 <mailbuffer+0x11ea5c0>
    1044:	00000024 	andeq	r0, r0, r4, lsr #32
    1048:	00000fc0 	andeq	r0, r0, r0, asr #31
    104c:	00015854 	andeq	r5, r1, r4, asr r8
    1050:	00000074 	andeq	r0, r0, r4, ror r0
    1054:	0e460a0a 	vmlaeq.f32	s1, s12, s20
    1058:	8503840c 	strhi	r8, [r3, #-1036]	; 0xfffffbf4
    105c:	44018e02 	strmi	r8, [r1], #-3586	; 0xfffff1fe
    1060:	0c0e460b 	stceq	6, cr4, [lr], {11}
    1064:	02850384 	addeq	r0, r5, #132, 6	; 0x10000002
    1068:	0b6a018e 	bleq	1a816a8 <mailbuffer+0x1a6a5e8>
    106c:	0000000c 	andeq	r0, r0, ip
    1070:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1074:	7c020001 	stcvc	0, cr0, [r2], {1}
    1078:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    107c:	00000010 	andeq	r0, r0, r0, lsl r0
    1080:	0000106c 	andeq	r1, r0, ip, rrx
    1084:	000158c8 	andeq	r5, r1, r8, asr #17
    1088:	0000005c 	andeq	r0, r0, ip, asr r0
    108c:	000b6e0a 	andeq	r6, fp, sl, lsl #28
    1090:	0000000c 	andeq	r0, r0, ip
    1094:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1098:	7c020001 	stcvc	0, cr0, [r2], {1}
    109c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    10a0:	00000028 	andeq	r0, r0, r8, lsr #32
    10a4:	00001090 	muleq	r0, r0, r0
    10a8:	00015924 	andeq	r5, r1, r4, lsr #18
    10ac:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    10b0:	84140e44 	ldrhi	r0, [r4], #-3652	; 0xfffff1bc
    10b4:	86048505 	strhi	r8, [r4], -r5, lsl #10
    10b8:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
    10bc:	0a6a0201 	beq	1a818c8 <mailbuffer+0x1a6a808>
    10c0:	c5c6c7ce 	strbgt	ip, [r6, #1998]	; 0x7ce
    10c4:	42000ec4 	andmi	r0, r0, #196, 28	; 0xc40
    10c8:	0000000b 	andeq	r0, r0, fp

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
   0:	00000000 	andeq	r0, r0, r0
   4:	00000070 	andeq	r0, r0, r0, ror r0
   8:	70510001 	subsvc	r0, r1, r1
   c:	b4000000 	strlt	r0, [r0], #-0
  10:	04000000 	streq	r0, [r0], #-0
  14:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
  18:	0000b49f 	muleq	r0, pc, r4	; <UNPREDICTABLE>
  1c:	0000b800 	andeq	fp, r0, r0, lsl #16
  20:	51000100 	mrspl	r0, (UNDEF: 16)
  24:	000000b8 	strheq	r0, [r0], -r8
  28:	000000e0 	andeq	r0, r0, r0, ror #1
  2c:	01f30004 	mvnseq	r0, r4
  30:	00e09f51 	rsceq	r9, r0, r1, asr pc
  34:	00e80000 	rsceq	r0, r8, r0
  38:	00010000 	andeq	r0, r1, r0
  3c:	0000e851 	andeq	lr, r0, r1, asr r8
  40:	0000f000 	andeq	pc, r0, r0
  44:	f3000400 	vshl.u8	d0, d0, d0
  48:	009f5101 	addseq	r5, pc, r1, lsl #2
	...
  54:	24000000 	strcs	r0, [r0], #-0
  58:	01000000 	mrseq	r0, (UNDEF: 0)
  5c:	00245200 	eoreq	r5, r4, r0, lsl #4
  60:	00380000 	eorseq	r0, r8, r0
  64:	00010000 	andeq	r0, r1, r0
  68:	0000385e 	andeq	r3, r0, lr, asr r8
  6c:	00004800 	andeq	r4, r0, r0, lsl #16
  70:	7e000300 	cdpvc	3, 0, cr0, cr0, cr0, {0}
  74:	00489f10 	subeq	r9, r8, r0, lsl pc
  78:	00700000 	rsbseq	r0, r0, r0
  7c:	00010000 	andeq	r0, r1, r0
  80:	0000705e 	andeq	r7, r0, lr, asr r0
  84:	00008400 	andeq	r8, r0, r0, lsl #8
  88:	56000100 	strpl	r0, [r0], -r0, lsl #2
  8c:	00000084 	andeq	r0, r0, r4, lsl #1
  90:	00000088 	andeq	r0, r0, r8, lsl #1
  94:	885c0001 	ldmdahi	ip, {r0}^
  98:	8c000000 	stchi	0, cr0, [r0], {-0}
  9c:	03000000 	movweq	r0, #0
  a0:	9f047c00 	svcls	0x00047c00
  a4:	0000008c 	andeq	r0, r0, ip, lsl #1
  a8:	0000009c 	muleq	r0, ip, r0
  ac:	b45c0001 	ldrblt	r0, [ip], #-1
  b0:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
  b4:	01000000 	mrseq	r0, (UNDEF: 0)
  b8:	00e05200 	rsceq	r5, r0, r0, lsl #4
  bc:	00e80000 	rsceq	r0, r8, r0
  c0:	00010000 	andeq	r0, r1, r0
  c4:	0000e852 	andeq	lr, r0, r2, asr r8
  c8:	0000f000 	andeq	pc, r0, r0
  cc:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
  d8:	00000004 	andeq	r0, r0, r4
  dc:	000000b8 	strheq	r0, [r0], -r8
  e0:	b8500001 	ldmdalt	r0, {r0}^
  e4:	c4000000 	strgt	r0, [r0], #-0
  e8:	01000000 	mrseq	r0, (UNDEF: 0)
  ec:	00c45300 	sbceq	r5, r4, r0, lsl #6
  f0:	00c80000 	sbceq	r0, r8, r0
  f4:	00030000 	andeq	r0, r3, r0
  f8:	e09f0173 	adds	r0, pc, r3, ror r1	; <UNPREDICTABLE>
  fc:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
 100:	01000000 	mrseq	r0, (UNDEF: 0)
 104:	00005000 	andeq	r5, r0, r0
 108:	00000000 	andeq	r0, r0, r0
 10c:	00040000 	andeq	r0, r4, r0
 110:	00700000 	rsbseq	r0, r0, r0
 114:	00010000 	andeq	r0, r1, r0
 118:	00007051 	andeq	r7, r0, r1, asr r0
 11c:	0000b400 	andeq	fp, r0, r0, lsl #8
 120:	f3000400 	vshl.u8	d0, d0, d0
 124:	b49f5101 	ldrlt	r5, [pc], #257	; 12c <_start-0x7ed4>
 128:	cc000000 	stcgt	0, cr0, [r0], {-0}
 12c:	01000000 	mrseq	r0, (UNDEF: 0)
 130:	00cc5100 	sbceq	r5, ip, r0, lsl #2
 134:	00d40000 	sbcseq	r0, r4, r0
 138:	00030000 	andeq	r0, r3, r0
 13c:	d49f7f71 	ldrle	r7, [pc], #3953	; 144 <_start-0x7ebc>
 140:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
 144:	01000000 	mrseq	r0, (UNDEF: 0)
 148:	00e85100 	rsceq	r5, r8, r0, lsl #2
 14c:	00f00000 	rscseq	r0, r0, r0
 150:	00040000 	andeq	r0, r4, r0
 154:	9f5101f3 	svcls	0x005101f3
	...
 160:	00000070 	andeq	r0, r0, r0, ror r0
 164:	00000074 	andeq	r0, r0, r4, ror r0
 168:	00700006 	rsbseq	r0, r0, r6
 16c:	9f220073 	svcls	0x00220073
 170:	00000074 	andeq	r0, r0, r4, ror r0
 174:	00000084 	andeq	r0, r0, r4, lsl #1
 178:	e8530001 	ldmda	r3, {r0}^
 17c:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
 180:	01000000 	mrseq	r0, (UNDEF: 0)
 184:	00005300 	andeq	r5, r0, r0, lsl #6
 188:	00000000 	andeq	r0, r0, r0
 18c:	00240000 	eoreq	r0, r4, r0
 190:	00400000 	subeq	r0, r0, r0
 194:	00030000 	andeq	r0, r3, r0
 198:	409f7473 	addsmi	r7, pc, r3, ror r4	; <UNPREDICTABLE>
 19c:	44000000 	strmi	r0, [r0], #-0
 1a0:	03000000 	movweq	r0, #0
 1a4:	9f787300 	svcls	0x00787300
 1a8:	00000044 	andeq	r0, r0, r4, asr #32
 1ac:	00000048 	andeq	r0, r0, r8, asr #32
 1b0:	7c730003 	ldclvc	0, cr0, [r3], #-12
 1b4:	0000489f 	muleq	r0, pc, r8	; <UNPREDICTABLE>
 1b8:	00005000 	andeq	r5, r0, r0
 1bc:	53000100 	movwpl	r0, #256	; 0x100
 1c0:	00000050 	andeq	r0, r0, r0, asr r0
 1c4:	0000005c 	andeq	r0, r0, ip, asr r0
 1c8:	70730003 	rsbsvc	r0, r3, r3
 1cc:	0000709f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
 1d0:	00008400 	andeq	r8, r0, r0, lsl #8
 1d4:	51000100 	mrspl	r0, (UNDEF: 16)
 1d8:	00000084 	andeq	r0, r0, r4, lsl #1
 1dc:	000000b4 	strheq	r0, [r0], -r4
 1e0:	e8540001 	ldmda	r4, {r0}^
 1e4:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
 1e8:	01000000 	mrseq	r0, (UNDEF: 0)
 1ec:	00005100 	andeq	r5, r0, r0, lsl #2
 1f0:	00000000 	andeq	r0, r0, r0
	...
